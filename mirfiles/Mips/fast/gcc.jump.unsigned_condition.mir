--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/gcc.jump.unsigned_condition.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @.str = external hidden unnamed_addr constant [7 x i8], align 1
  @__FUNCTION__.unsigned_condition = external hidden unnamed_addr constant [19 x i8], align 1
  @switch.table.4 = external hidden unnamed_addr constant [10 x i32]
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #0
  
  ; Function Attrs: nounwind
  define i32 @unsigned_condition(i32 signext %code) #1 {
    %switch.tableidx = add i32 %code, -102
    %1 = icmp ult i32 %switch.tableidx, 10
    br i1 %1, label %switch.lookup, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 signext 951, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.unsigned_condition, i32 0, i32 0)) #2
    unreachable
  
  switch.lookup:                                    ; preds = %0
    %switch.gep = getelementptr inbounds [10 x i32], [10 x i32]* @switch.table.4, i32 0, i32 %switch.tableidx
    %switch.load = load i32, i32* %switch.gep, align 4
    ret i32 %switch.load
  }
  
  attributes #0 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            unsigned_condition
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8388608):
    successors: %bb.2.switch.lookup(99), %bb.1(0)
    liveins: %a0, %t9, %v0
  
    %3 = ADDu %v0, %t9
    %1 = COPY %a0
    %0 = ADDiu %1, -102
    %2 = SLTiu %0, 10
    BNE killed %2, %zero, %bb.2.switch.lookup, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.2, freq 8):
    exit
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %4 = LW %3, target-flags(<unknown>) @.str, <0x3d66650> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %5 = LW %3, target-flags(<unknown>) @__FUNCTION__.unsigned_condition, <0x3d66720> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %6 = LW %3, target-flags(<unknown>) @fancy_abort, <0x3d667f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @fancy_abort)
    %7 = ADDiu %zero, 951
    %a0 = COPY %4
    %a1 = COPY %7
    %a2 = COPY %5
    %gp = COPY %3
    %t9 = COPY %6
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.2.switch.lookup (freq 8388600):
    liveouts: %v0
  
    %8 = SLL %0, 2
    %9 = LW %3, target-flags(<unknown>) @switch.table.4, <0x3d66650> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %10 = ADDu killed %9, killed %8
    %11 = LW killed %10, 0, <0x3d66720> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.switch.gep)
    %v0 = COPY %11
    RetRA implicit %v0

...
--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/gcc.jump.unsigned_condition.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @.str = external hidden unnamed_addr constant [7 x i8], align 1
  @__FUNCTION__.unsigned_condition = external hidden unnamed_addr constant [19 x i8], align 1
  @switch.table.4 = external hidden unnamed_addr constant [10 x i32]
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #0
  
  ; Function Attrs: nounwind
  define i32 @unsigned_condition(i32 signext %code) #1 {
    %switch.tableidx = add i32 %code, -102
    %1 = icmp ult i32 %switch.tableidx, 10
    br i1 %1, label %switch.lookup, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 signext 951, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.unsigned_condition, i32 0, i32 0)) #2
    unreachable
  
  switch.lookup:                                    ; preds = %0
    %switch.gep = getelementptr inbounds [10 x i32], [10 x i32]* @switch.table.4, i32 0, i32 %switch.tableidx
    %switch.load = load i32, i32* %switch.gep, align 4
    ret i32 %switch.load
  }
  
  attributes #0 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            unsigned_condition
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8388608):
    successors: %bb.2.switch.lookup(99), %bb.1(0)
    liveins: %a0, %t9, %v0
  
    %3 = ADDu %v0, %t9
    %1 = COPY %a0
    %0 = ADDiu %1, -102
    %2 = SLTiu %0, 10
    BNE killed %2, %zero, %bb.2.switch.lookup, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.2, freq 8):
    exit
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %4 = LW %3, target-flags(<unknown>) @.str, <0x3d66650> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %5 = LW %3, target-flags(<unknown>) @__FUNCTION__.unsigned_condition, <0x3d66720> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %6 = LW %3, target-flags(<unknown>) @fancy_abort, <0x3d667f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @fancy_abort)
    %7 = ADDiu %zero, 951
    %a0 = COPY %4
    %a1 = COPY %7
    %a2 = COPY %5
    %gp = COPY %3
    %t9 = COPY %6
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.2.switch.lookup (freq 8388600):
    liveouts: %v0
  
    %8 = SLL %0, 2
    %9 = LW %3, target-flags(<unknown>) @switch.table.4, <0x3d66650> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %10 = ADDu killed %9, killed %8
    %11 = LW killed %10, 0, <0x3d66720> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.switch.gep)
    %v0 = COPY %11
    RetRA implicit %v0

...
