--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/gobmk.owl_defendpat.autohelperowl_defendpat421.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @transformation = external global [1369 x [8 x i32]], align 4
  
  ; Function Attrs: nounwind
  define hidden i32 @autohelperowl_defendpat421(i32 signext %trans, i32 signext %move, i32 signext %color, i32 signext %action) #0 {
    %1 = getelementptr inbounds [1369 x [8 x i32]], [1369 x [8 x i32]]* @transformation, i32 0, i32 573, i32 %trans
    %2 = load i32, i32* %1, align 4
    %3 = add nsw i32 %2, %move
    %4 = sub nsw i32 3, %color
    %5 = tail call i32 @safe_move(i32 signext %3, i32 signext %4) #2
    %6 = icmp eq i32 %5, 0
    %7 = zext i1 %6 to i32
    ret i32 %7
  }
  
  declare i32 @safe_move(i32 signext, i32 signext) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            autohelperowl_defendpat421
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%a2', virtual-reg: '%2' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %a2, %t9, %v0
    liveouts: %v0
  
    %4 = ADDu %v0, %t9
    %2 = COPY %a2
    %1 = COPY %a1
    %0 = COPY %a0
    %5 = SLL %0, 2
    %6 = LW %4, target-flags(<unknown>) @transformation, <0x4a83120> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %7 = ADDu killed %6, killed %5
    %8 = LW killed %7, 18336, <0x4a8cf20> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.1)
    %9 = ADDiu %zero, 3
    %10 = SUBu killed %9, %2
    %11 = ADDu killed %8, %1
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %12 = LW %4, target-flags(<unknown>) @safe_move, <0x4a8cff0> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @safe_move)
    %a0 = COPY %11
    %a1 = COPY %10
    %gp = COPY %4
    %t9 = COPY %12
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %13 = COPY %v0
    %14 = SLTiu %13, 1
    %v0 = COPY %14
    RetRA implicit %v0

...
--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/gobmk.owl_defendpat.autohelperowl_defendpat421.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @transformation = external global [1369 x [8 x i32]], align 4
  
  ; Function Attrs: nounwind
  define hidden i32 @autohelperowl_defendpat421(i32 signext %trans, i32 signext %move, i32 signext %color, i32 signext %action) #0 {
    %1 = getelementptr inbounds [1369 x [8 x i32]], [1369 x [8 x i32]]* @transformation, i32 0, i32 573, i32 %trans
    %2 = load i32, i32* %1, align 4
    %3 = add nsw i32 %2, %move
    %4 = sub nsw i32 3, %color
    %5 = tail call i32 @safe_move(i32 signext %3, i32 signext %4) #2
    %6 = icmp eq i32 %5, 0
    %7 = zext i1 %6 to i32
    ret i32 %7
  }
  
  declare i32 @safe_move(i32 signext, i32 signext) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            autohelperowl_defendpat421
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%a2', virtual-reg: '%2' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %a2, %t9, %v0
    liveouts: %v0
  
    %4 = ADDu %v0, %t9
    %2 = COPY %a2
    %1 = COPY %a1
    %0 = COPY %a0
    %5 = SLL %0, 2
    %6 = LW %4, target-flags(<unknown>) @transformation, <0x4a83120> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %7 = ADDu killed %6, killed %5
    %8 = LW killed %7, 18336, <0x4a8cf20> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.1)
    %9 = ADDiu %zero, 3
    %10 = SUBu killed %9, %2
    %11 = ADDu killed %8, %1
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %12 = LW %4, target-flags(<unknown>) @safe_move, <0x4a8cff0> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @safe_move)
    %a0 = COPY %11
    %a1 = COPY %10
    %gp = COPY %4
    %t9 = COPY %12
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %13 = COPY %v0
    %14 = SLTiu %13, 1
    %v0 = COPY %14
    RetRA implicit %v0

...
