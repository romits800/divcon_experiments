--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/h264ref.vlc.symbol2uvlc.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.syntaxelement.214 = type { i32, i32, i32, i32, i32, i32, i32, i32, void (i32, i32, i32*, i32*)*, void (%struct.syntaxelement.214*, %struct.EncodingEnvironment.221*)* }
  %struct.EncodingEnvironment.221 = type { i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i32 }
  
  ; Function Attrs: norecurse nounwind
  define i32 @symbol2uvlc(%struct.syntaxelement.214* nocapture %sym) #0 {
    %1 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 3
    %2 = load i32, i32* %1, align 4
    %3 = sdiv i32 %2, 2
    %4 = shl i32 1, %3
    %5 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 4
    %6 = load i32, i32* %5, align 4
    %7 = add nsw i32 %4, -1
    %8 = and i32 %7, %6
    %9 = or i32 %8, %4
    %10 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 5
    store i32 %9, i32* %10, align 4
    ret i32 0
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            symbol2uvlc
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0
    liveouts: %v0
  
    %0 = COPY %a0
    %1 = LW %0, 12, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %2 = SRL %1, 31
    %3 = ADDu %1, killed %2
    %4 = SRA killed %3, 1
    %5 = ADDiu %zero, 1
    %6 = SLLV killed %5, killed %4
    %7 = LW %0, 16, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    %8 = ADDiu %zero, 0
    %9 = ADDiu %6, -1
    %10 = AND killed %9, killed %7
    %11 = OR killed %10, %6
    SW killed %11, %0, 20, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.10)
    %v0 = COPY %8
    RetRA implicit %v0

...
--- |
  ; ModuleID = '../unison/src/unison/test/fast/Mips/speed/h264ref.vlc.symbol2uvlc.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.syntaxelement.214 = type { i32, i32, i32, i32, i32, i32, i32, i32, void (i32, i32, i32*, i32*)*, void (%struct.syntaxelement.214*, %struct.EncodingEnvironment.221*)* }
  %struct.EncodingEnvironment.221 = type { i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i32 }
  
  ; Function Attrs: norecurse nounwind
  define i32 @symbol2uvlc(%struct.syntaxelement.214* nocapture %sym) #0 {
    %1 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 3
    %2 = load i32, i32* %1, align 4
    %3 = sdiv i32 %2, 2
    %4 = shl i32 1, %3
    %5 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 4
    %6 = load i32, i32* %5, align 4
    %7 = add nsw i32 %4, -1
    %8 = and i32 %7, %6
    %9 = or i32 %8, %4
    %10 = getelementptr inbounds %struct.syntaxelement.214, %struct.syntaxelement.214* %sym, i32 0, i32 5
    store i32 %9, i32* %10, align 4
    ret i32 0
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            symbol2uvlc
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0
    liveouts: %v0
  
    %0 = COPY %a0
    %1 = LW %0, 12, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %2 = SRL %1, 31
    %3 = ADDu %1, killed %2
    %4 = SRA killed %3, 1
    %5 = ADDiu %zero, 1
    %6 = SLLV killed %5, killed %4
    %7 = LW %0, 16, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    %8 = ADDiu %zero, 0
    %9 = ADDiu %6, -1
    %10 = AND killed %9, killed %7
    %11 = OR killed %10, %6
    SW killed %11, %0, 20, <0x4ca0150> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.10)
    %v0 = COPY %8
    RetRA implicit %v0

...
