--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/g721/g721.g721.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.g72x_state = type { i32, i16, i16, i16, i16, [2 x i16], [6 x i16], [2 x i16], [6 x i16], [2 x i16], i8 }
  
  @qtab_721 = internal global [7 x i16] [i16 -124, i16 80, i16 178, i16 246, i16 300, i16 349, i16 400], align 2
  @_dqlntab = internal unnamed_addr constant [16 x i16] [i16 -2048, i16 4, i16 135, i16 213, i16 273, i16 323, i16 373, i16 425, i16 425, i16 373, i16 323, i16 273, i16 213, i16 135, i16 4, i16 -2048], align 2
  @_witab = internal unnamed_addr constant [16 x i16] [i16 -12, i16 18, i16 41, i16 64, i16 112, i16 198, i16 355, i16 1122, i16 1122, i16 355, i16 198, i16 112, i16 64, i16 41, i16 18, i16 -12], align 2
  @_fitab = internal unnamed_addr constant [16 x i16] [i16 0, i16 0, i16 0, i16 512, i16 512, i16 512, i16 1536, i16 3584, i16 3584, i16 1536, i16 512, i16 512, i16 512, i16 0, i16 0, i16 0], align 2
  
  ; Function Attrs: nounwind
  define i32 @g721_encoder(i32 signext %sl, i32 signext %in_coding, %struct.g72x_state* %state_ptr) #0 {
    switch i32 %in_coding, label %41 [
      i32 2, label %1
      i32 1, label %3
      i32 3, label %5
    ]
  
  ; <label>:1                                       ; preds = %0
    %2 = tail call i32 bitcast (i32 (...)* @alaw2linear to i32 (i32)*)(i32 signext %sl) #2
    br label %5
  
  ; <label>:3                                       ; preds = %0
    %4 = tail call i32 bitcast (i32 (...)* @ulaw2linear to i32 (i32)*)(i32 signext %sl) #2
    br label %5
  
  ; <label>:5                                       ; preds = %3, %1, %0
    %.01.in = phi i32 [ %4, %3 ], [ %2, %1 ], [ %sl, %0 ]
    %.013 = lshr i32 %.01.in, 2
    %6 = tail call i32 bitcast (i32 (...)* @predictor_zero to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %sext = shl i32 %6, 16
    %7 = ashr exact i32 %sext, 16
    %8 = ashr i32 %sext, 17
    %9 = tail call i32 bitcast (i32 (...)* @predictor_pole to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %10 = add nsw i32 %7, %9
    %11 = shl i32 %10, 15
    %12 = ashr i32 %11, 16
    %13 = sub nsw i32 %.013, %12
    %14 = tail call i32 bitcast (i32 (...)* @step_size to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %sext4 = shl i32 %13, 16
    %15 = ashr exact i32 %sext4, 16
    %sext5 = shl i32 %14, 16
    %16 = ashr exact i32 %sext5, 16
    %17 = tail call i32 bitcast (i32 (...)* @quantize to i32 (i32, i32, i16*, i32)*)(i32 signext %15, i32 signext %16, i16* nonnull getelementptr inbounds ([7 x i16], [7 x i16]* @qtab_721, i32 0, i32 0), i32 signext 7) #2
    %sext6 = shl i32 %17, 16
    %18 = ashr exact i32 %sext6, 16
    %19 = and i32 %18, 8
    %20 = getelementptr inbounds [16 x i16], [16 x i16]* @_dqlntab, i32 0, i32 %18
    %21 = load i16, i16* %20, align 2, !tbaa !1
    %22 = sext i16 %21 to i32
    %23 = tail call i32 bitcast (i32 (...)* @reconstruct to i32 (i32, i32, i32)*)(i32 signext %19, i32 signext %22, i32 signext %16) #2
    %sext7 = shl i32 %23, 16
    %24 = ashr exact i32 %sext7, 16
    %25 = icmp slt i32 %sext7, 0
    %26 = and i32 %24, 16383
    %27 = sub nsw i32 0, %26
    %.p = select i1 %25, i32 %27, i32 %24
    %28 = add nsw i32 %.p, %12
    %sext8 = shl i32 %28, 16
    %29 = ashr exact i32 %sext8, 16
    %30 = sub nsw i32 %8, %12
    %31 = add nsw i32 %30, %29
    %32 = getelementptr inbounds [16 x i16], [16 x i16]* @_witab, i32 0, i32 %18
    %33 = load i16, i16* %32, align 2, !tbaa !1
    %34 = sext i16 %33 to i32
    %35 = shl nsw i32 %34, 5
    %36 = getelementptr inbounds [16 x i16], [16 x i16]* @_fitab, i32 0, i32 %18
    %37 = load i16, i16* %36, align 2, !tbaa !1
    %38 = sext i16 %37 to i32
    %sext9 = shl i32 %31, 16
    %39 = ashr exact i32 %sext9, 16
    %40 = tail call i32 bitcast (i32 (...)* @update to i32 (i32, i32, i32, i32, i32, i32, i32, %struct.g72x_state*)*)(i32 signext 4, i32 signext %16, i32 signext %35, i32 signext %38, i32 signext %24, i32 signext %29, i32 signext %39, %struct.g72x_state* %state_ptr) #2
    br label %41
  
  ; <label>:41                                      ; preds = %5, %0
    %.0 = phi i32 [ %18, %5 ], [ -1, %0 ]
    ret i32 %.0
  }
  
  declare i32 @alaw2linear(...) #1
  
  declare i32 @ulaw2linear(...) #1
  
  declare i32 @predictor_zero(...) #1
  
  declare i32 @predictor_pole(...) #1
  
  declare i32 @step_size(...) #1
  
  declare i32 @quantize(...) #1
  
  declare i32 @reconstruct(...) #1
  
  declare i32 @update(...) #1
  
  ; Function Attrs: nounwind
  define i32 @g721_decoder(i32 signext %i, i32 signext %out_coding, %struct.g72x_state* %state_ptr) #0 {
    %1 = and i32 %i, 15
    %2 = tail call i32 bitcast (i32 (...)* @predictor_zero to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %sext = shl i32 %2, 16
    %3 = ashr i32 %sext, 17
    %4 = tail call i32 bitcast (i32 (...)* @predictor_pole to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %5 = add i32 %4, %2
    %sext1 = shl i32 %5, 16
    %6 = ashr i32 %sext1, 17
    %7 = tail call i32 bitcast (i32 (...)* @step_size to i32 (%struct.g72x_state*)*)(%struct.g72x_state* %state_ptr) #2
    %8 = and i32 %i, 8
    %9 = getelementptr inbounds [16 x i16], [16 x i16]* @_dqlntab, i32 0, i32 %1
    %10 = load i16, i16* %9, align 2, !tbaa !1
    %11 = sext i16 %10 to i32
    %sext2 = shl i32 %7, 16
    %12 = ashr exact i32 %sext2, 16
    %13 = tail call i32 bitcast (i32 (...)* @reconstruct to i32 (i32, i32, i32)*)(i32 signext %8, i32 signext %11, i32 signext %12) #2
    %sext3 = shl i32 %13, 16
    %14 = ashr exact i32 %sext3, 16
    %15 = icmp slt i32 %sext3, 0
    %16 = and i32 %14, 16383
    %17 = sub nsw i32 0, %16
    %.p = select i1 %15, i32 %17, i32 %14
    %18 = add nsw i32 %.p, %6
    %sext4 = shl i32 %18, 16
    %19 = ashr exact i32 %sext4, 16
    %20 = sub nsw i32 %3, %6
    %21 = add nsw i32 %20, %19
    %22 = getelementptr inbounds [16 x i16], [16 x i16]* @_witab, i32 0, i32 %1
    %23 = load i16, i16* %22, align 2, !tbaa !1
    %24 = sext i16 %23 to i32
    %25 = shl nsw i32 %24, 5
    %26 = getelementptr inbounds [16 x i16], [16 x i16]* @_fitab, i32 0, i32 %1
    %27 = load i16, i16* %26, align 2, !tbaa !1
    %28 = sext i16 %27 to i32
    %sext5 = shl i32 %21, 16
    %29 = ashr exact i32 %sext5, 16
    %30 = tail call i32 bitcast (i32 (...)* @update to i32 (i32, i32, i32, i32, i32, i32, i32, %struct.g72x_state*)*)(i32 signext 4, i32 signext %12, i32 signext %25, i32 signext %28, i32 signext %14, i32 signext %19, i32 signext %29, %struct.g72x_state* %state_ptr) #2
    switch i32 %out_coding, label %37 [
      i32 2, label %31
      i32 1, label %33
      i32 3, label %35
    ]
  
  ; <label>:31                                      ; preds = %0
    %32 = tail call i32 bitcast (i32 (...)* @tandem_adjust_alaw to i32 (i32, i32, i32, i32, i32, i16*)*)(i32 signext %19, i32 signext %6, i32 signext %12, i32 signext %1, i32 signext 8, i16* nonnull getelementptr inbounds ([7 x i16], [7 x i16]* @qtab_721, i32 0, i32 0)) #2
    br label %37
  
  ; <label>:33                                      ; preds = %0
    %34 = tail call i32 bitcast (i32 (...)* @tandem_adjust_ulaw to i32 (i32, i32, i32, i32, i32, i16*)*)(i32 signext %19, i32 signext %6, i32 signext %12, i32 signext %1, i32 signext 8, i16* nonnull getelementptr inbounds ([7 x i16], [7 x i16]* @qtab_721, i32 0, i32 0)) #2
    br label %37
  
  ; <label>:35                                      ; preds = %0
    %36 = ashr exact i32 %sext4, 14
    br label %37
  
  ; <label>:37                                      ; preds = %35, %33, %31, %0
    %.0 = phi i32 [ %36, %35 ], [ %34, %33 ], [ %32, %31 ], [ -1, %0 ]
    ret i32 %.0
  }
  
  declare i32 @tandem_adjust_alaw(...) #1
  
  declare i32 @tandem_adjust_ulaw(...) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"short", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            g721_decoder
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       72
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 32
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 1, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s7' }
  - { id: 2, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s6' }
  - { id: 3, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s5' }
  - { id: 4, type: spill-slot, offset: -20, size: 4, alignment: 4, callee-saved-register: '%s4' }
  - { id: 5, type: spill-slot, offset: -24, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 6, type: spill-slot, offset: -28, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 7, type: spill-slot, offset: -32, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 8, type: spill-slot, offset: -36, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 32):
    successors: %bb.4(25), %bb.1(75)
    liveins: %a0, %a1, %a2, %t9, %ra, %s7, %s6, %s5, %s4, %s3, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -72
    CFI_INSTRUCTION .cfi_def_cfa_offset 72
    SW killed %ra, %sp, 68 :: (store 4 into stack)
    SW killed %s7, %sp, 64 :: (store 4 into stack)
    SW killed %s6, %sp, 60 :: (store 4 into stack)
    SW killed %s5, %sp, 56 :: (store 4 into stack)
    SW killed %s4, %sp, 52 :: (store 4 into stack)
    SW killed %s3, %sp, 48 :: (store 4 into stack)
    SW killed %s2, %sp, 44 :: (store 4 into stack)
    SW killed %s1, %sp, 40 :: (store 4 into stack)
    SW killed %s0, %sp, 36 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s7_64, -8
    CFI_INSTRUCTION .cfi_offset %s6_64, -12
    CFI_INSTRUCTION .cfi_offset %s5_64, -16
    CFI_INSTRUCTION .cfi_offset %s4_64, -20
    CFI_INSTRUCTION .cfi_offset %s3_64, -24
    CFI_INSTRUCTION .cfi_offset %s2_64, -28
    CFI_INSTRUCTION .cfi_offset %s1_64, -32
    CFI_INSTRUCTION .cfi_offset %s0_64, -36
    %s0 = ADDu %v0, %t9
    %s4 = OR %a2, %zero
    %s2 = OR %a1, %zero
    %s3 = OR %a0, %zero
    %t9 = LW %s0, target-flags(<unknown>) @predictor_zero :: (load 4 from call-entry @predictor_zero)
    %a0 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %s5 = OR %v0, %zero
    %t9 = LW %s0, target-flags(<unknown>) @predictor_pole :: (load 4 from call-entry @predictor_pole)
    %a0 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %s6 = OR %v0, %zero
    %t9 = LW %s0, target-flags(<unknown>) @step_size :: (load 4 from call-entry @step_size)
    %a0 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %s1 = ANDi %s3, 15
    %s7 = SLL %s1, 1
    %at = LW %s0, target-flags(<unknown>) @_dqlntab :: (load 4 from got)
    %at = ADDiu killed %at, target-flags(<unknown>) @_dqlntab
    %at = ADDu killed %at, %s7
    %a1 = LH killed %at, 0 :: (load 2 from %ir.9, !tbaa !1)
    %a0 = ANDi killed %s3, 8
    %s3 = SEH killed %v0
    %t9 = LW %s0, target-flags(<unknown>) @reconstruct :: (load 4 from call-entry @reconstruct)
    %a2 = OR %s3, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %at = LW %s0, target-flags(<unknown>) @_witab :: (load 4 from got)
    %v1 = SLL %s5, 16
    %at = ADDiu killed %at, target-flags(<unknown>) @_witab
    %at = ADDu killed %at, %s7
    %a0 = LW %s0, target-flags(<unknown>) @_fitab :: (load 4 from got)
    %at = LH killed %at, 0 :: (load 2 from %ir.22, !tbaa !1)
    %a0 = ADDiu killed %a0, target-flags(<unknown>) @_fitab
    %v1 = SRA killed %v1, 17
    %a0 = ADDu killed %a0, killed %s7
    %a3 = LH killed %a0, 0 :: (load 2 from %ir.26, !tbaa !1)
    %a0 = ADDu killed %s6, killed %s5
    %a0 = SLL killed %a0, 16
    %s5 = SRA killed %a0, 17
    %v1 = SUBu killed %v1, %s5
    %a2 = SLL killed %at, 5
    %at = SEH %v0
    %a0 = ANDi %at, 16383
    %a0 = SUBu %zero, killed %a0
    %v0 = SLL killed %v0, 16
    SW killed %s4, %sp, 28 :: (store 4 into unknown)
    SW %at, %sp, 16 :: (store 4 into unknown)
    %v0 = SLTi killed %v0, 0
    %at = MOVN_I_I killed %a0, killed %v0, killed %at
    %s6 = ADDu killed %at, %s5
    %s4 = SEH %s6
    SW %s4, %sp, 20 :: (store 4 into unknown)
    %at = ADDu killed %v1, %s4
    %at = SEH killed %at
    SW killed %at, %sp, 24 :: (store 4 into unknown)
    %t9 = LW %s0, target-flags(<unknown>) @update :: (load 4 from call-entry @update)
    %a0 = ADDiu %zero, 4
    %a1 = OR %s3, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit killed %gp, implicit-def %sp, implicit-def dead %v0 {
      %gp = OR %s0, %zero
    }
    %at = ADDiu %zero, 1
    BEQ %s2, %at, %bb.4, implicit-def %at {
      NOP
    }
  
  bb.1 (%ir-block.0, freq 24):
    successors: %bb.5(33), %bb.2(66)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = ADDiu %zero, 3
    BEQ %s2, %at, %bb.5, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.0, freq 16):
    successors: %bb.3(50), %bb.6(50)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5
  
    %at = ADDiu %zero, 2
    BNE %s2, %at, %bb.6, implicit-def %at {
      %v0 = ADDiu %zero, -1
    }
  
  bb.3 (%ir-block.31, freq 8):
    successors: %bb.6(100)
    liveins: %s0, %s1, %s3, %s4, %s5
  
    %at = ADDiu %zero, 8
    SW killed %at, %sp, 16 :: (store 4 into unknown)
    %at = LW %s0, target-flags(<unknown>) @qtab_721 :: (load 4 from got)
    %at = ADDiu killed %at, target-flags(<unknown>) @qtab_721
    SW killed %at, %sp, 20 :: (store 4 into unknown)
    %t9 = LW %s0, target-flags(<unknown>) @tandem_adjust_alaw :: (load 4 from call-entry @tandem_adjust_alaw)
    %a0 = OR killed %s4, %zero
    %a1 = OR killed %s5, %zero
    %a2 = OR killed %s3, %zero
    %a3 = OR killed %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR killed %s0, %zero
    }
    B %bb.6, implicit-def dead %at {
      NOP
    }
  
  bb.4 (%ir-block.33, freq 8):
    successors: %bb.6(100)
    liveins: %s0, %s1, %s3, %s4, %s5
  
    %at = ADDiu %zero, 8
    SW killed %at, %sp, 16 :: (store 4 into unknown)
    %at = LW %s0, target-flags(<unknown>) @qtab_721 :: (load 4 from got)
    %at = ADDiu killed %at, target-flags(<unknown>) @qtab_721
    SW killed %at, %sp, 20 :: (store 4 into unknown)
    %t9 = LW %s0, target-flags(<unknown>) @tandem_adjust_ulaw :: (load 4 from call-entry @tandem_adjust_ulaw)
    %a0 = OR killed %s4, %zero
    %a1 = OR killed %s5, %zero
    %a2 = OR killed %s3, %zero
    %a3 = OR killed %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR killed %s0, %zero
    }
    B %bb.6, implicit-def dead %at {
      NOP
    }
  
  bb.5 (%ir-block.35, freq 8):
    successors: %bb.6(100)
    liveins: %s6
  
    %at = SLL killed %s6, 16
    %v0 = SRA killed %at, 14
  
  bb.6 (%ir-block.37, freq 32):
    liveins: %v0
    liveouts:
  
    %s0 = LW %sp, 36 :: (load 4 from stack)
    %s1 = LW %sp, 40 :: (load 4 from stack)
    %s2 = LW %sp, 44 :: (load 4 from stack)
    %s3 = LW %sp, 48 :: (load 4 from stack)
    %s4 = LW %sp, 52 :: (load 4 from stack)
    %s5 = LW %sp, 56 :: (load 4 from stack)
    %s6 = LW %sp, 60 :: (load 4 from stack)
    %s7 = LW %sp, 64 :: (load 4 from stack)
    %ra = LW %sp, 68 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 72
    }

...
