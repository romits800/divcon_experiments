--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/ghostscript/ghostscript.gscoord.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gs_state_s = type { %struct.gs_memory_s*, %struct.gx_line_params_s, %struct.gs_matrix_fixed_s, i32, i16, i32, float, %struct.gs_fixed_point_s, i32, i32, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gx_ht_cache_s*, %struct.gs_cie_render_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %union.gx_transfer_s, %union.gx_transfer_s, %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gx_pattern_cache_s*, %struct.gs_state_s*, %struct.gs_state_contents_s*, %struct.gs_matrix_s, i32, %struct.gs_matrix_s, i32, %struct.gx_path_s*, %struct.gx_clip_path_s*, i32, i32, %struct.gs_color_space_s*, %struct.gs_client_color_s*, %struct.gx_device_color_s*, %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_matrix_fixed_s, i32, i8, i32, %struct.gs_state_s*, i32, %struct.gx_device_s*, i8*, %struct.gs_state_client_procs_s }
  %struct.gs_memory_s = type { %struct.gs_memory_procs_s }
  %struct.gs_memory_procs_s = type { i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i32, %struct.gs_memory_struct_type_s*, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i8*)*, i32 (%struct.gs_memory_s*, i8*)*, %struct.gs_memory_struct_type_s* (%struct.gs_memory_s*, i8*)*, void (%struct.gs_memory_s*, i8*, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i32, i8*)*, i8* (%struct.gs_memory_s*, i8*, i32, i32, i8*)*, void (%struct.gs_memory_s*, i8*, i32, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8**, i8*)*, void (%struct.gs_memory_s*, %struct.gs_gc_root_s*, i8*)*, void (%struct.gs_memory_s*, %struct.gs_memory_status_s*)*, void (%struct.gs_memory_s*, i32)* }
  %struct.gs_memory_struct_type_s = type { i32, i8*, %struct.struct_shared_procs_s*, void (i8*, i32)*, %struct.gs_ptr_procs_s* (i8*, i32, i32, i8**)*, void (i8*, i32, %struct.gc_state_s*)*, void (i8*)* }
  %struct.struct_shared_procs_s = type opaque
  %struct.gs_ptr_procs_s = type { void (i8*, %struct.gc_state_s*)*, i32 (i8*, %struct.gc_state_s*)*, i8* (i8*, %struct.gc_state_s*)* }
  %struct.gc_state_s = type opaque
  %struct.gs_gc_root_s = type { %struct.gs_gc_root_s*, %struct.gs_ptr_procs_s*, i8** }
  %struct.gs_memory_status_s = type { i32, i32 }
  %struct.gx_line_params_s = type { float, i32, i32, float, float, float, float, %struct.gx_dash_params_s }
  %struct.gx_dash_params_s = type { float*, i32, float, i32, float, i32, i32, float }
  %struct.gs_fixed_point_s = type { i32, i32 }
  %struct.gs_halftone_s = type opaque
  %struct.gs_int_point_s = type { i32, i32 }
  %struct.gx_device_halftone_s = type opaque
  %struct.gx_ht_cache_s = type opaque
  %struct.gs_cie_render_s = type opaque
  %struct.gx_transfer_map_s = type opaque
  %union.gx_transfer_s = type { [4 x %struct.gx_transfer_map_s*] }
  %struct.gx_cie_joint_caches_s = type opaque
  %struct.gx_color_map_procs_s = type opaque
  %struct.gx_pattern_cache_s = type opaque
  %struct.gs_state_contents_s = type opaque
  %struct.gs_matrix_s = type { float, float, float, float, float, float }
  %struct.gx_path_s = type opaque
  %struct.gx_clip_path_s = type opaque
  %struct.gs_color_space_s = type opaque
  %struct.gs_client_color_s = type { %struct.gs_paint_color_s, %struct.gs_pattern_instance_s* }
  %struct.gs_paint_color_s = type { [4 x float] }
  %struct.gs_pattern_instance_s = type opaque
  %struct.gx_device_color_s = type { %struct.gx_device_color_procs_s*, %union._c, %struct.gs_int_point_s, %struct._mask }
  %struct.gx_device_color_procs_s = type { i32 (%struct.gx_device_color_s*, %struct.gs_imager_state_s*, %struct.gx_device_s*, i32)*, i32 (%struct.gx_device_color_s*, i32, i32, i32, i32, %struct.gx_device_s*, i32, %struct.gx_rop_source_s*)*, i32 (%struct.gx_device_color_s*, i8*, i32, i32, i32, i32, i32, i32, i32, %struct.gx_device_s*, i32, i32)*, %struct.gs_ptr_procs_s* (i8*, i32, i32, i8**)*, void (i8*, i32, %struct.gc_state_s*)* }
  %struct.gs_imager_state_s = type { %struct.gs_memory_s*, %struct.gx_line_params_s, %struct.gs_matrix_fixed_s, i32, i16, i32, float, %struct.gs_fixed_point_s, i32, i32, %struct.gs_halftone_s*, [2 x %struct.gs_int_point_s], %struct.gx_device_halftone_s*, %struct.gx_ht_cache_s*, %struct.gs_cie_render_s*, %struct.gx_transfer_map_s*, %struct.gx_transfer_map_s*, %union.gx_transfer_s, %union.gx_transfer_s, %struct.gx_cie_joint_caches_s*, %struct.gx_color_map_procs_s*, %struct.gx_pattern_cache_s* }
  %struct.gx_rop_source_s = type { i8*, i32, i32, i32, [2 x i32], i32 }
  %union._c = type { %struct._col }
  %struct._col = type { %struct.gx_device_halftone_s*, [4 x i8], [4 x i32], i16 }
  %struct._mask = type { %struct.gs_client_color_s, i32, %struct.gx_color_tile_s* }
  %struct.gx_color_tile_s = type opaque
  %struct.gs_font_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_memory_s*, %struct.gs_font_dir_s*, %struct.gs_font_s*, i8*, %struct.gs_matrix_s, i32, i32, i32, i32, i32, i32, i32, float, %struct.gs_font_procs_s, %struct.gs_font_name_s, %struct.gs_font_name_s }
  %struct.gs_font_dir_s = type opaque
  %struct.gs_font_procs_s = type { i32 (%struct.gs_show_enum_s*, %struct.gs_font_s*)*, i32 (%struct.gs_show_enum_s*, i32*)*, i32 (%struct.gs_show_enum_s*, %struct.gs_font_s*, i32*)*, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i32)*, %struct.gx_xfont_callbacks_s, i32 (%struct.gs_font_dir_s*, %struct.gs_font_s*)*, i32 (%struct.gs_font_dir_s*, %struct.gs_font_s*, %struct.gs_matrix_s*, %struct.gs_font_s**)*, i32 (%struct.gs_show_enum_s*, i32*, i32*)* }
  %struct.gs_show_enum_s = type opaque
  %struct.gx_xfont_callbacks_s = type { i8* (i32, i32*)*, i32 (i32, i32)* }
  %struct.gs_font_name_s = type { [48 x i8], i32 }
  %struct.gs_matrix_fixed_s = type { float, float, float, float, float, float, i32, i32, i32 }
  %struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, %struct.gs_memory_s*, %struct.gs_memory_struct_type_s*, i32, i32, %struct.gx_device_color_info_s, i32, i32, [2 x float], [4 x float], i32, [2 x float], [2 x float], [2 x float], [4 x float], i32, i32, i32, %struct.gx_page_device_procs_s, %struct.gx_device_procs_s }
  %struct.gx_device_color_info_s = type { i32, i32, i16, i16, i16, i16 }
  %struct.gx_page_device_procs_s = type { i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, %struct.gs_state_s*)*, i32 (%struct.gx_device_s*, i32, %struct.gs_state_s*)* }
  %struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32, i32)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i16, i16, i16)*, i32 (%struct.gx_device_s*, i32, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gx_tile_bitmap_s*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i8*, i8**)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, %struct.gs_param_list_s*)*, i32 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_xfont_procs_s* (%struct.gx_device_s*)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i16, i16, i16, i16)*, %struct.gx_device_s* (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32*, %struct.gx_tile_bitmap_s*, i32*, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_fill_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gx_path_s*, %struct.gx_stroke_params_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32, i32, %struct.gx_clip_path_s*)*, i32 (%struct.gx_device_s*, %struct.gs_fixed_edge_s*, %struct.gs_fixed_edge_s*, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, %struct.gx_device_color_s*, i32)*, i32 (%struct.gx_device_s*, %struct.gs_imager_state_s*, %struct.gs_image_s*, i32, %struct.gs_int_rect_s*, %struct.gx_device_color_s*, %struct.gx_clip_path_s*, %struct.gs_memory_s*, i8**)*, i32 (%struct.gx_device_s*, i8*, i8**, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32)*, i32 (%struct.gx_device_s*, %struct.gx_strip_bitmap_s*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32*, %struct.gx_strip_bitmap_s*, i32*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gx_device_s*, %struct.gs_fixed_rect_s*)* }
  %struct.gx_tile_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i32, i16, i16 }
  %struct.gs_param_list_s = type opaque
  %struct.gx_xfont_procs_s = type opaque
  %struct.gx_fill_params_s = type opaque
  %struct.gx_stroke_params_s = type opaque
  %struct.gs_fixed_edge_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
  %struct.gs_image_s = type { i32, i32, %struct.gs_matrix_s, i32, %struct.gs_color_space_s*, [8 x float], i32, i32, i32, i32 }
  %struct.gs_int_rect_s = type { %struct.gs_int_point_s, %struct.gs_int_point_s }
  %struct.gx_strip_bitmap_s = type { i8*, i32, %struct.gs_int_point_s, i32, i16, i16, i16, i16 }
  %struct.gs_fixed_rect_s = type { %struct.gs_fixed_point_s, %struct.gs_fixed_point_s }
  %struct.gs_state_client_procs_s = type { i8* (%struct.gs_memory_s*)*, i32 (i8*, i8*)*, void (i8*, %struct.gs_memory_s*)*, i32 (i8*, i8*, i32)* }
  %struct.gs_point_s = type { double, double }
  %struct.fixed_coeff = type { %struct.coeff1, %struct.coeff1, %struct.coeff1, %struct.coeff1, i32, i32, i32, i32 }
  %struct.coeff1 = type { i32, i32 }
  
  ; Function Attrs: nounwind
  define i32 @gs_initmatrix(%struct.gs_state_s* nocapture %pgs) #0 {
    %imat = alloca %struct.gs_matrix_s, align 4
    %1 = bitcast %struct.gs_matrix_s* %imat to i8*
    call void @llvm.lifetime.start(i64 24, i8* %1) #4
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 27
    %3 = load i32, i32* %2, align 4, !tbaa !1
    %4 = icmp eq i32 %3, 0
    br i1 %4, label %9, label %5
  
  ; <label>:5                                       ; preds = %0
    %6 = bitcast %struct.gs_matrix_s* %imat to i8*
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 26
    %8 = bitcast %struct.gs_matrix_s* %7 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %6, i8* %8, i32 24, i32 4, i1 false) #4, !tbaa.struct !16
    %.phi.trans.insert = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
    %.pre = load float, float* %.phi.trans.insert, align 4, !tbaa !18
    br label %gs_defaultmatrix.exit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 43
    %11 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 4, !tbaa !19
    call void @gs_deviceinitialmatrix(%struct.gx_device_s* %11, %struct.gs_matrix_s* nonnull %imat) #4
    %12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 15, i32 0
    %13 = load float, float* %12, align 4, !tbaa !17
    %14 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 13, i32 0
    %15 = load float, float* %14, align 4, !tbaa !17
    %16 = fmul float %13, %15
    %17 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 14, i32 0
    %18 = load float, float* %17, align 4, !tbaa !17
    %19 = fdiv float %16, %18
    %20 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 4
    %21 = load float, float* %20, align 4, !tbaa !18
    %22 = fadd float %21, %19
    store float %22, float* %20, align 4, !tbaa !18
    %23 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 15, i32 1
    %24 = load float, float* %23, align 4, !tbaa !17
    %25 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 13, i32 1
    %26 = load float, float* %25, align 4, !tbaa !17
    %27 = fmul float %24, %26
    %28 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 14, i32 1
    %29 = load float, float* %28, align 4, !tbaa !17
    %30 = fdiv float %27, %29
    %31 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %imat, i32 0, i32 5
    %32 = load float, float* %31, align 4, !tbaa !20
    %33 = fadd float %32, %30
    store float %33, float* %31, align 4, !tbaa !20
    br label %gs_defaultmatrix.exit
  
  gs_defaultmatrix.exit:                            ; preds = %9, %5
    %.in = phi float [ %.pre, %5 ], [ %22, %9 ]
    %34 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %34, align 4, !tbaa !21
    %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %35, align 4, !tbaa !22
    %36 = fcmp oge float %.in, -5.242880e+05
    %37 = fcmp olt float %.in, 5.242880e+05
    %or.cond = and i1 %36, %37
    br i1 %or.cond, label %38, label %gs_defaultmatrix.exit._crit_edge
  
  gs_defaultmatrix.exit._crit_edge:                 ; preds = %gs_defaultmatrix.exit
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %imat to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre5 = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %55
  
  ; <label>:38                                      ; preds = %gs_defaultmatrix.exit
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %imat to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %39 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %40 = fcmp oge float %39, -5.242880e+05
    %41 = fcmp olt float %39, 5.242880e+05
    %or.cond1 = and i1 %40, %41
    br i1 %or.cond1, label %43, label %._crit_edge10
  
  ._crit_edge10:                                    ; preds = %38
    %42 = bitcast float %39 to i32
    br label %55
  
  ; <label>:43                                      ; preds = %38
    %44 = fmul float %.in, 4.096000e+03
    %45 = fptosi float %44 to i32
    %46 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 6
    store i32 %45, i32* %46, align 4, !tbaa !23
    %47 = sitofp i32 %45 to double
    %48 = fmul double %47, 0x3F30000000000000
    %49 = fptrunc double %48 to float
    %50 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %49, float* %50, align 4, !tbaa !24
    %51 = fmul float %39, 4.096000e+03
    %52 = fptosi float %51 to i32
    %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 7
    store i32 %52, i32* %53, align 4, !tbaa !25
    %phitmp = sitofp i32 %52 to double
    %phitmp13 = fmul double %phitmp, 0x3F30000000000000
    %phitmp14 = fptrunc double %phitmp13 to float
    %54 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    store float %phitmp14, float* %54, align 4, !tbaa !26
    br label %60
  
  ; <label>:55                                      ; preds = %._crit_edge10, %gs_defaultmatrix.exit._crit_edge
    %56 = phi i32 [ %.pre5, %gs_defaultmatrix.exit._crit_edge ], [ %42, %._crit_edge10 ]
    %57 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %.in, float* %57, align 4, !tbaa !24
    %58 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    %59 = bitcast float* %58 to i32*
    store i32 %56, i32* %59, align 4, !tbaa !26
    br label %60
  
  ; <label>:60                                      ; preds = %55, %43
    %61 = phi i32 [ 1, %43 ], [ 0, %55 ]
    %62 = bitcast %struct.gs_matrix_s* %imat to i8*
    %63 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %64 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 8
    store i32 %61, i32* %64, align 4, !tbaa !27
    %65 = bitcast %struct.gs_matrix_fixed_s* %63 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %65, i8* nonnull %62, i32 24, i32 4, i1 false), !tbaa.struct !16
    call void @llvm.lifetime.end(i64 24, i8* nonnull %62) #4
    ret i32 0
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #1
  
  ; Function Attrs: nounwind
  define i32 @gs_defaultmatrix(%struct.gs_state_s* nocapture readonly %pgs, %struct.gs_matrix_s* %pmat) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 27
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 0
    br i1 %3, label %8, label %4
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 26
    %6 = bitcast %struct.gs_matrix_s* %pmat to i8*
    %7 = bitcast %struct.gs_matrix_s* %5 to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %6, i8* %7, i32 24, i32 4, i1 false), !tbaa.struct !16
    br label %33
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 43
    %10 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 4, !tbaa !19
    tail call void @gs_deviceinitialmatrix(%struct.gx_device_s* %10, %struct.gs_matrix_s* %pmat) #4
    %11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 15, i32 0
    %12 = load float, float* %11, align 4, !tbaa !17
    %13 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 13, i32 0
    %14 = load float, float* %13, align 4, !tbaa !17
    %15 = fmul float %12, %14
    %16 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 14, i32 0
    %17 = load float, float* %16, align 4, !tbaa !17
    %18 = fdiv float %15, %17
    %19 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 4
    %20 = load float, float* %19, align 4, !tbaa !18
    %21 = fadd float %20, %18
    store float %21, float* %19, align 4, !tbaa !18
    %22 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 15, i32 1
    %23 = load float, float* %22, align 4, !tbaa !17
    %24 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 13, i32 1
    %25 = load float, float* %24, align 4, !tbaa !17
    %26 = fmul float %23, %25
    %27 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 14, i32 1
    %28 = load float, float* %27, align 4, !tbaa !17
    %29 = fdiv float %26, %28
    %30 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 5
    %31 = load float, float* %30, align 4, !tbaa !20
    %32 = fadd float %31, %29
    store float %32, float* %30, align 4, !tbaa !20
    br label %33
  
  ; <label>:33                                      ; preds = %8, %4
    %.0 = phi i32 [ 1, %4 ], [ 0, %8 ]
    ret i32 %.0
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #1
  
  declare void @gs_deviceinitialmatrix(%struct.gx_device_s*, %struct.gs_matrix_s*) #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_setdefaultmatrix(%struct.gs_state_s* nocapture %pgs, %struct.gs_matrix_s* readonly %pmat) #3 {
    %1 = icmp eq %struct.gs_matrix_s* %pmat, null
    br i1 %1, label %6, label %2
  
  ; <label>:2                                       ; preds = %0
    %3 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 26
    %4 = bitcast %struct.gs_matrix_s* %3 to i8*
    %5 = bitcast %struct.gs_matrix_s* %pmat to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %4, i8* %5, i32 24, i32 4, i1 false), !tbaa.struct !16
    br label %6
  
  ; <label>:6                                       ; preds = %2, %0
    %.sink = phi i32 [ 1, %2 ], [ 0, %0 ]
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 27
    store i32 %.sink, i32* %7, align 4
    ret i32 0
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_currentmatrix(%struct.gs_state_s* nocapture readonly %pgs, %struct.gs_matrix_s* nocapture %pmat) #3 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = bitcast %struct.gs_matrix_s* %pmat to i8*
    %3 = bitcast %struct.gs_matrix_fixed_s* %1 to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %2, i8* %3, i32 24, i32 4, i1 false), !tbaa.struct !16
    ret i32 0
  }
  
  ; Function Attrs: nounwind
  define i32 @gs_setcharmatrix(%struct.gs_state_s* %pgs, %struct.gs_matrix_s* %pmat) #0 {
    %cmat = alloca %struct.gs_matrix_s, align 4
    %1 = bitcast %struct.gs_matrix_s* %cmat to i8*
    call void @llvm.lifetime.start(i64 24, i8* %1) #4
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %3 = bitcast %struct.gs_matrix_fixed_s* %2 to %struct.gs_matrix_s*
    %4 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %pmat, %struct.gs_matrix_s* %3, %struct.gs_matrix_s* nonnull %cmat) #4
    %5 = icmp slt i32 %4, 0
    br i1 %5, label %40, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %cmat, i32 0, i32 4
    %8 = load float, float* %7, align 4, !tbaa !18
    %9 = fcmp oge float %8, -5.242880e+05
    %10 = fcmp olt float %8, 5.242880e+05
    %or.cond = and i1 %9, %10
    br i1 %or.cond, label %11, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %6
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %cmat to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %28
  
  ; <label>:11                                      ; preds = %6
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %cmat to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %12 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %13 = fcmp oge float %12, -5.242880e+05
    %14 = fcmp olt float %12, 5.242880e+05
    %or.cond1 = and i1 %13, %14
    br i1 %or.cond1, label %16, label %._crit_edge8
  
  ._crit_edge8:                                     ; preds = %11
    %15 = bitcast float %12 to i32
    br label %28
  
  ; <label>:16                                      ; preds = %11
    %17 = fmul float %8, 4.096000e+03
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 6
    store i32 %18, i32* %19, align 4, !tbaa !28
    %20 = sitofp i32 %18 to double
    %21 = fmul double %20, 0x3F30000000000000
    %22 = fptrunc double %21 to float
    %23 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 4
    store float %22, float* %23, align 4, !tbaa !29
    %24 = fmul float %12, 4.096000e+03
    %25 = fptosi float %24 to i32
    %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 7
    store i32 %25, i32* %26, align 4, !tbaa !30
    %phitmp = sitofp i32 %25 to double
    %phitmp11 = fmul double %phitmp, 0x3F30000000000000
    %phitmp12 = fptrunc double %phitmp11 to float
    %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 5
    store float %phitmp12, float* %27, align 4, !tbaa !31
    br label %33
  
  ; <label>:28                                      ; preds = %._crit_edge8, %._crit_edge
    %29 = phi i32 [ %.pre, %._crit_edge ], [ %15, %._crit_edge8 ]
    %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 4
    store float %8, float* %30, align 4, !tbaa !29
    %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 5
    %32 = bitcast float* %31 to i32*
    store i32 %29, i32* %32, align 4, !tbaa !31
    br label %33
  
  ; <label>:33                                      ; preds = %28, %16
    %34 = phi i32 [ 1, %16 ], [ 0, %28 ]
    %35 = bitcast %struct.gs_matrix_s* %cmat to i8*
    %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37
    %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 8
    store i32 %34, i32* %37, align 4, !tbaa !32
    %38 = bitcast %struct.gs_matrix_fixed_s* %36 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %38, i8* nonnull %35, i32 24, i32 4, i1 false), !tbaa.struct !16
    %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 1, i32* %39, align 4, !tbaa !22
    br label %40
  
  ; <label>:40                                      ; preds = %33, %0
    %.0 = phi i32 [ 0, %33 ], [ %4, %0 ]
    %41 = bitcast %struct.gs_matrix_s* %cmat to i8*
    call void @llvm.lifetime.end(i64 24, i8* %41) #4
    ret i32 %.0
  }
  
  declare i32 @gs_matrix_multiply(%struct.gs_matrix_s*, %struct.gs_matrix_s*, %struct.gs_matrix_s*) #2
  
  ; Function Attrs: nounwind
  define i32 @gs_currentcharmatrix(%struct.gs_state_s* %pgs, %struct.gs_matrix_s* %ptm, i32 signext %force) #0 {
    %cmat.i = alloca %struct.gs_matrix_s, align 4
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %2 = load i32, i32* %1, align 4, !tbaa !22
    %3 = icmp eq i32 %2, 0
    br i1 %3, label %4, label %48
  
  ; <label>:4                                       ; preds = %0
    %5 = icmp eq i32 %force, 0
    br i1 %5, label %.thread, label %6
  
  ; <label>:6                                       ; preds = %4
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 35
    %8 = load %struct.gs_font_s*, %struct.gs_font_s** %7, align 4, !tbaa !33
    %9 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %8, i32 0, i32 6
    %10 = bitcast %struct.gs_matrix_s* %cmat.i to i8*
    call void @llvm.lifetime.start(i64 24, i8* %10) #4
    %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %12 = bitcast %struct.gs_matrix_fixed_s* %11 to %struct.gs_matrix_s*
    %13 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %9, %struct.gs_matrix_s* %12, %struct.gs_matrix_s* nonnull %cmat.i) #4
    %14 = icmp slt i32 %13, 0
    br i1 %14, label %.thread5, label %16
  
  .thread5:                                         ; preds = %6
    %15 = bitcast %struct.gs_matrix_s* %cmat.i to i8*
    call void @llvm.lifetime.end(i64 24, i8* %15) #4
    br label %.thread
  
  ; <label>:16                                      ; preds = %6
    %17 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %cmat.i, i32 0, i32 4
    %18 = load float, float* %17, align 4, !tbaa !18
    %19 = fcmp oge float %18, -5.242880e+05
    %20 = fcmp olt float %18, 5.242880e+05
    %or.cond.i = and i1 %19, %20
    br i1 %or.cond.i, label %21, label %._crit_edge.i
  
  ._crit_edge.i:                                    ; preds = %16
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %cmat.i to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre.i = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %38
  
  ; <label>:21                                      ; preds = %16
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %cmat.i to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %22 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %23 = fcmp oge float %22, -5.242880e+05
    %24 = fcmp olt float %22, 5.242880e+05
    %or.cond1.i = and i1 %23, %24
    br i1 %or.cond1.i, label %26, label %._crit_edge8.i
  
  ._crit_edge8.i:                                   ; preds = %21
    %25 = bitcast float %22 to i32
    br label %38
  
  ; <label>:26                                      ; preds = %21
    %27 = fmul float %18, 4.096000e+03
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 6
    store i32 %28, i32* %29, align 4, !tbaa !28
    %30 = sitofp i32 %28 to double
    %31 = fmul double %30, 0x3F30000000000000
    %32 = fptrunc double %31 to float
    %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 4
    store float %32, float* %33, align 4, !tbaa !29
    %34 = fmul float %22, 4.096000e+03
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 7
    store i32 %35, i32* %36, align 4, !tbaa !30
    %phitmp.i = sitofp i32 %35 to double
    %phitmp11.i = fmul double %phitmp.i, 0x3F30000000000000
    %phitmp12.i = fptrunc double %phitmp11.i to float
    %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 5
    store float %phitmp12.i, float* %37, align 4, !tbaa !31
    br label %.thread3
  
  ; <label>:38                                      ; preds = %._crit_edge8.i, %._crit_edge.i
    %39 = phi i32 [ %.pre.i, %._crit_edge.i ], [ %25, %._crit_edge8.i ]
    %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 4
    store float %18, float* %40, align 4, !tbaa !29
    %41 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 5
    %42 = bitcast float* %41 to i32*
    store i32 %39, i32* %42, align 4, !tbaa !31
    br label %.thread3
  
  .thread3:                                         ; preds = %38, %26
    %43 = phi i32 [ 1, %26 ], [ 0, %38 ]
    %44 = bitcast %struct.gs_matrix_s* %cmat.i to i8*
    %45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37
    %46 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 8
    store i32 %43, i32* %46, align 4, !tbaa !32
    %47 = bitcast %struct.gs_matrix_fixed_s* %45 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %47, i8* nonnull %44, i32 24, i32 4, i1 false) #4, !tbaa.struct !16
    %sunkaddr6 = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr7 = add i32 %sunkaddr6, 352
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32*
    store i32 1, i32* %sunkaddr8, align 4, !tbaa !22
    call void @llvm.lifetime.end(i64 24, i8* nonnull %44) #4
    br label %48
  
  ; <label>:48                                      ; preds = %.thread3, %0
    %49 = icmp eq %struct.gs_matrix_s* %ptm, null
    br i1 %49, label %.thread, label %50
  
  ; <label>:50                                      ; preds = %48
    %51 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37
    %52 = bitcast %struct.gs_matrix_s* %ptm to i8*
    %53 = bitcast %struct.gs_matrix_fixed_s* %51 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %52, i8* %53, i32 24, i32 4, i1 false), !tbaa.struct !16
    br label %.thread
  
  .thread:                                          ; preds = %50, %48, %.thread5, %4
    %.1 = phi i32 [ 0, %48 ], [ 0, %50 ], [ %13, %.thread5 ], [ -23, %4 ]
    ret i32 %.1
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_setmatrix(%struct.gs_state_s* nocapture %pgs, %struct.gs_matrix_s* nocapture readonly %pmat) #3 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %1, align 4, !tbaa !21
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %2, align 4, !tbaa !22
    %3 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 4
    %4 = load float, float* %3, align 4, !tbaa !18
    %5 = fcmp oge float %4, -5.242880e+05
    %6 = fcmp olt float %4, 5.242880e+05
    %or.cond = and i1 %5, %6
    br i1 %or.cond, label %7, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %0
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %pmat to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %24
  
  ; <label>:7                                       ; preds = %0
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %pmat to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %8 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %9 = fcmp oge float %8, -5.242880e+05
    %10 = fcmp olt float %8, 5.242880e+05
    %or.cond1 = and i1 %9, %10
    br i1 %or.cond1, label %12, label %._crit_edge8
  
  ._crit_edge8:                                     ; preds = %7
    %11 = bitcast float %8 to i32
    br label %24
  
  ; <label>:12                                      ; preds = %7
    %13 = fmul float %4, 4.096000e+03
    %14 = fptosi float %13 to i32
    %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 6
    store i32 %14, i32* %15, align 4, !tbaa !23
    %16 = sitofp i32 %14 to double
    %17 = fmul double %16, 0x3F30000000000000
    %18 = fptrunc double %17 to float
    %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %18, float* %19, align 4, !tbaa !24
    %20 = fmul float %8, 4.096000e+03
    %21 = fptosi float %20 to i32
    %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 7
    store i32 %21, i32* %22, align 4, !tbaa !25
    %phitmp = sitofp i32 %21 to double
    %phitmp11 = fmul double %phitmp, 0x3F30000000000000
    %phitmp12 = fptrunc double %phitmp11 to float
    %23 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    store float %phitmp12, float* %23, align 4, !tbaa !26
    br label %29
  
  ; <label>:24                                      ; preds = %._crit_edge8, %._crit_edge
    %25 = phi i32 [ %.pre, %._crit_edge ], [ %11, %._crit_edge8 ]
    %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %4, float* %26, align 4, !tbaa !24
    %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    %28 = bitcast float* %27 to i32*
    store i32 %25, i32* %28, align 4, !tbaa !26
    br label %29
  
  ; <label>:29                                      ; preds = %24, %12
    %30 = phi i32 [ 1, %12 ], [ 0, %24 ]
    %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %32 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 8
    store i32 %30, i32* %32, align 4, !tbaa !27
    %33 = bitcast %struct.gs_matrix_fixed_s* %31 to i8*
    %34 = bitcast %struct.gs_matrix_s* %pmat to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %33, i8* %34, i32 24, i32 4, i1 false), !tbaa.struct !16
    ret i32 0
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_imager_setmatrix(%struct.gs_imager_state_s* nocapture %pis, %struct.gs_matrix_s* nocapture readonly %pmat) #3 {
    %1 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 4
    %2 = load float, float* %1, align 4, !tbaa !18
    %3 = fcmp oge float %2, -5.242880e+05
    %4 = fcmp olt float %2, 5.242880e+05
    %or.cond = and i1 %3, %4
    br i1 %or.cond, label %5, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %0
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %pmat to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %22
  
  ; <label>:5                                       ; preds = %0
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %pmat to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %6 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %7 = fcmp oge float %6, -5.242880e+05
    %8 = fcmp olt float %6, 5.242880e+05
    %or.cond1 = and i1 %7, %8
    br i1 %or.cond1, label %10, label %._crit_edge8
  
  ._crit_edge8:                                     ; preds = %5
    %9 = bitcast float %6 to i32
    br label %22
  
  ; <label>:10                                      ; preds = %5
    %11 = fmul float %2, 4.096000e+03
    %12 = fptosi float %11 to i32
    %13 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 6
    store i32 %12, i32* %13, align 4, !tbaa !34
    %14 = sitofp i32 %12 to double
    %15 = fmul double %14, 0x3F30000000000000
    %16 = fptrunc double %15 to float
    %17 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 4
    store float %16, float* %17, align 4, !tbaa !36
    %18 = fmul float %6, 4.096000e+03
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 7
    store i32 %19, i32* %20, align 4, !tbaa !37
    %phitmp = sitofp i32 %19 to double
    %phitmp11 = fmul double %phitmp, 0x3F30000000000000
    %phitmp12 = fptrunc double %phitmp11 to float
    %21 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 5
    store float %phitmp12, float* %21, align 4, !tbaa !38
    br label %27
  
  ; <label>:22                                      ; preds = %._crit_edge8, %._crit_edge
    %23 = phi i32 [ %.pre, %._crit_edge ], [ %9, %._crit_edge8 ]
    %24 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 4
    store float %2, float* %24, align 4, !tbaa !36
    %25 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 5
    %26 = bitcast float* %25 to i32*
    store i32 %23, i32* %26, align 4, !tbaa !38
    br label %27
  
  ; <label>:27                                      ; preds = %22, %10
    %28 = phi i32 [ 1, %10 ], [ 0, %22 ]
    %29 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2
    %30 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2, i32 8
    store i32 %28, i32* %30, align 4, !tbaa !39
    %31 = bitcast %struct.gs_matrix_fixed_s* %29 to i8*
    %32 = bitcast %struct.gs_matrix_s* %pmat to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %31, i8* %32, i32 24, i32 4, i1 false), !tbaa.struct !16
    ret i32 0
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_settocharmatrix(%struct.gs_state_s* nocapture %pgs) #3 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %2 = load i32, i32* %1, align 4, !tbaa !22
    %3 = icmp eq i32 %2, 0
    br i1 %3, label %10, label %4
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37
    %7 = bitcast %struct.gs_matrix_fixed_s* %5 to i8*
    %8 = bitcast %struct.gs_matrix_fixed_s* %6 to i8*
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %7, i8* %8, i32 36, i32 4, i1 false), !tbaa.struct !40
    %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %9, align 4, !tbaa !21
    br label %10
  
  ; <label>:10                                      ; preds = %4, %0
    %.0 = phi i32 [ 0, %4 ], [ -23, %0 ]
    ret i32 %.0
  }
  
  ; Function Attrs: nounwind
  define i32 @gs_translate(%struct.gs_state_s* %pgs, double %dx, double %dy) #0 {
    %pt = alloca %struct.gs_point_s, align 8
    %1 = bitcast %struct.gs_point_s* %pt to i8*
    call void @llvm.lifetime.start(i64 16, i8* %1) #4
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %3 = bitcast %struct.gs_matrix_fixed_s* %2 to %struct.gs_matrix_s*
    %4 = call i32 @gs_distance_transform(double %dx, double %dy, %struct.gs_matrix_s* %3, %struct.gs_point_s* nonnull %pt) #4
    %5 = icmp slt i32 %4, 0
    br i1 %5, label %41, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    %8 = load float, float* %7, align 4, !tbaa !24
    %9 = fpext float %8 to double
    %10 = bitcast %struct.gs_point_s* %pt to double*
    %11 = load double, double* %10, align 8, !tbaa !43
    %12 = fadd double %11, %9
    store double %12, double* %10, align 8, !tbaa !43
    %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    %14 = load float, float* %13, align 4, !tbaa !26
    %15 = fpext float %14 to double
    %16 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %pt, i32 0, i32 1
    %17 = load double, double* %16, align 8, !tbaa !46
    %18 = fadd double %17, %15
    store double %18, double* %16, align 8, !tbaa !46
    %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %19, align 4, !tbaa !21
    %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %20, align 4, !tbaa !22
    %21 = fcmp oge double %12, -5.242880e+05
    %22 = fcmp olt double %12, 5.242880e+05
    %or.cond = and i1 %21, %22
    br i1 %or.cond, label %23, label %36
  
  ; <label>:23                                      ; preds = %6
    %24 = fcmp oge double %18, -5.242880e+05
    %25 = fcmp olt double %18, 5.242880e+05
    %or.cond1 = and i1 %24, %25
    br i1 %or.cond1, label %26, label %36
  
  ; <label>:26                                      ; preds = %23
    %27 = fmul double %12, 4.096000e+03
    %28 = fptosi double %27 to i32
    %29 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 6
    store i32 %28, i32* %29, align 4, !tbaa !23
    %30 = sitofp i32 %28 to double
    %31 = fmul double %30, 0x3F30000000000000
    %32 = fptrunc double %31 to float
    %sunkaddr = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr1 = add i32 %sunkaddr, 80
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    store float %32, float* %sunkaddr2, align 4, !tbaa !24
    %33 = fmul double %18, 4.096000e+03
    %34 = fptosi double %33 to i32
    %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 7
    store i32 %34, i32* %35, align 4, !tbaa !25
    %phitmp = sitofp i32 %34 to double
    %phitmp3 = fmul double %phitmp, 0x3F30000000000000
    br label %38
  
  ; <label>:36                                      ; preds = %23, %6
    %37 = fptrunc double %12 to float
    %sunkaddr3 = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr4 = add i32 %sunkaddr3, 80
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    store float %37, float* %sunkaddr5, align 4, !tbaa !24
    br label %38
  
  ; <label>:38                                      ; preds = %36, %26
    %storemerge.in = phi double [ %18, %36 ], [ %phitmp3, %26 ]
    %39 = phi i32 [ 0, %36 ], [ 1, %26 ]
    %storemerge = fptrunc double %storemerge.in to float
    %sunkaddr6 = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr7 = add i32 %sunkaddr6, 84
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to float*
    store float %storemerge, float* %sunkaddr8, align 4, !tbaa !26
    %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 8
    store i32 %39, i32* %40, align 4, !tbaa !27
    br label %41
  
  ; <label>:41                                      ; preds = %38, %0
    %.0 = phi i32 [ 0, %38 ], [ %4, %0 ]
    %42 = bitcast %struct.gs_point_s* %pt to i8*
    call void @llvm.lifetime.end(i64 16, i8* %42) #4
    ret i32 %.0
  }
  
  declare i32 @gs_distance_transform(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gs_scale(%struct.gs_state_s* nocapture %pgs, double %sx, double %sy) #3 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 0
    %2 = load float, float* %1, align 4, !tbaa !47
    %3 = fpext float %2 to double
    %4 = fmul double %3, %sx
    %5 = fptrunc double %4 to float
    store float %5, float* %1, align 4, !tbaa !47
    %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 1
    %7 = load float, float* %6, align 4, !tbaa !48
    %8 = fpext float %7 to double
    %9 = fmul double %8, %sx
    %10 = fptrunc double %9 to float
    store float %10, float* %6, align 4, !tbaa !48
    %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 2
    %12 = load float, float* %11, align 4, !tbaa !49
    %13 = fpext float %12 to double
    %14 = fmul double %13, %sy
    %15 = fptrunc double %14 to float
    store float %15, float* %11, align 4, !tbaa !49
    %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 3
    %17 = load float, float* %16, align 4, !tbaa !50
    %18 = fpext float %17 to double
    %19 = fmul double %18, %sy
    %20 = fptrunc double %19 to float
    store float %20, float* %16, align 4, !tbaa !50
    %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %21, align 4, !tbaa !21
    %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %22, align 4, !tbaa !22
    ret i32 0
  }
  
  ; Function Attrs: nounwind
  define i32 @gs_rotate(%struct.gs_state_s* %pgs, double %ang) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %3 = tail call i32 @gs_matrix_rotate(%struct.gs_matrix_s* %2, double %ang, %struct.gs_matrix_s* %2) #4
    %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %4, align 4, !tbaa !21
    %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %5, align 4, !tbaa !22
    ret i32 %3
  }
  
  declare i32 @gs_matrix_rotate(%struct.gs_matrix_s*, double, %struct.gs_matrix_s*) #2
  
  ; Function Attrs: nounwind
  define i32 @gs_concat(%struct.gs_state_s* %pgs, %struct.gs_matrix_s* %pmat) #0 {
    %cmat = alloca %struct.gs_matrix_s, align 4
    %1 = bitcast %struct.gs_matrix_s* %cmat to i8*
    call void @llvm.lifetime.start(i64 24, i8* %1) #4
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %3 = bitcast %struct.gs_matrix_fixed_s* %2 to %struct.gs_matrix_s*
    %4 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %pmat, %struct.gs_matrix_s* %3, %struct.gs_matrix_s* nonnull %cmat) #4
    %5 = icmp slt i32 %4, 0
    br i1 %5, label %40, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %7, align 4, !tbaa !21
    %8 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    store i32 0, i32* %8, align 4, !tbaa !22
    %9 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %cmat, i32 0, i32 4
    %10 = load float, float* %9, align 4, !tbaa !18
    %11 = fcmp oge float %10, -5.242880e+05
    %12 = fcmp olt float %10, 5.242880e+05
    %or.cond = and i1 %11, %12
    br i1 %or.cond, label %13, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %6
    %sunkaddr = ptrtoint %struct.gs_matrix_s* %cmat to i32
    %sunkaddr1 = add i32 %sunkaddr, 20
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    %.pre = load i32, i32* %sunkaddr2, align 4, !tbaa !20
    br label %30
  
  ; <label>:13                                      ; preds = %6
    %sunkaddr3 = ptrtoint %struct.gs_matrix_s* %cmat to i32
    %sunkaddr4 = add i32 %sunkaddr3, 20
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %14 = load float, float* %sunkaddr5, align 4, !tbaa !20
    %15 = fcmp oge float %14, -5.242880e+05
    %16 = fcmp olt float %14, 5.242880e+05
    %or.cond1 = and i1 %15, %16
    br i1 %or.cond1, label %18, label %._crit_edge8
  
  ._crit_edge8:                                     ; preds = %13
    %17 = bitcast float %14 to i32
    br label %30
  
  ; <label>:18                                      ; preds = %13
    %19 = fmul float %10, 4.096000e+03
    %20 = fptosi float %19 to i32
    %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 6
    store i32 %20, i32* %21, align 4, !tbaa !23
    %22 = sitofp i32 %20 to double
    %23 = fmul double %22, 0x3F30000000000000
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %24, float* %25, align 4, !tbaa !24
    %26 = fmul float %14, 4.096000e+03
    %27 = fptosi float %26 to i32
    %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 7
    store i32 %27, i32* %28, align 4, !tbaa !25
    %phitmp = sitofp i32 %27 to double
    %phitmp11 = fmul double %phitmp, 0x3F30000000000000
    %phitmp12 = fptrunc double %phitmp11 to float
    %29 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    store float %phitmp12, float* %29, align 4, !tbaa !26
    br label %35
  
  ; <label>:30                                      ; preds = %._crit_edge8, %._crit_edge
    %31 = phi i32 [ %.pre, %._crit_edge ], [ %17, %._crit_edge8 ]
    %32 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    store float %10, float* %32, align 4, !tbaa !24
    %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    %34 = bitcast float* %33 to i32*
    store i32 %31, i32* %34, align 4, !tbaa !26
    br label %35
  
  ; <label>:35                                      ; preds = %30, %18
    %36 = phi i32 [ 1, %18 ], [ 0, %30 ]
    %37 = bitcast %struct.gs_matrix_s* %cmat to i8*
    %38 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 8
    store i32 %36, i32* %38, align 4, !tbaa !27
    %39 = bitcast %struct.gs_matrix_fixed_s* %2 to i8*
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %39, i8* nonnull %37, i32 24, i32 4, i1 false), !tbaa.struct !16
    br label %40
  
  ; <label>:40                                      ; preds = %35, %0
    %41 = bitcast %struct.gs_matrix_s* %cmat to i8*
    call void @llvm.lifetime.end(i64 24, i8* %41) #4
    ret i32 %4
  }
  
  ; Function Attrs: nounwind
  define i32 @gs_transform(%struct.gs_state_s* %pgs, double %x, double %y, %struct.gs_point_s* %pt) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %3 = tail call i32 @gs_point_transform(double %x, double %y, %struct.gs_matrix_s* %2, %struct.gs_point_s* %pt) #4
    ret i32 %3
  }
  
  declare i32 @gs_point_transform(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2
  
  ; Function Attrs: nounwind
  define i32 @gs_dtransform(%struct.gs_state_s* %pgs, double %dx, double %dy, %struct.gs_point_s* %pt) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %3 = tail call i32 @gs_distance_transform(double %dx, double %dy, %struct.gs_matrix_s* %2, %struct.gs_point_s* %pt) #4
    ret i32 %3
  }
  
  ; Function Attrs: nounwind
  define i32 @gs_itransform(%struct.gs_state_s* %pgs, double %x, double %y, %struct.gs_point_s* %pt) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 1
    %3 = load float, float* %2, align 4, !tbaa !51
    %4 = fcmp oeq float %3, 0.000000e+00
    br i1 %4, label %5, label %9
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 2
    %7 = load float, float* %6, align 4, !tbaa !52
    %8 = fcmp oeq float %7, 0.000000e+00
    br i1 %8, label %17, label %9
  
  ; <label>:9                                       ; preds = %5, %0
    %10 = bitcast %struct.gs_matrix_fixed_s* %1 to float*
    %11 = load float, float* %10, align 4, !tbaa !53
    %12 = fcmp oeq float %11, 0.000000e+00
    br i1 %12, label %13, label %20
  
  ; <label>:13                                      ; preds = %9
    %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 3
    %15 = load float, float* %14, align 4, !tbaa !54
    %16 = fcmp oeq float %15, 0.000000e+00
    br i1 %16, label %17, label %20
  
  ; <label>:17                                      ; preds = %13, %5
    %18 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %19 = tail call i32 @gs_point_transform_inverse(double %x, double %y, %struct.gs_matrix_s* %18, %struct.gs_point_s* %pt) #4
    br label %ctm_set_inverse.exit.thread3
  
  ; <label>:20                                      ; preds = %13, %9
    %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    %22 = load i32, i32* %21, align 4, !tbaa !21
    %23 = icmp eq i32 %22, 0
    br i1 %23, label %24, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %20
    %.pre = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 24
    br label %29
  
  ; <label>:24                                      ; preds = %20
    %25 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 24
    %27 = tail call i32 @gs_matrix_invert(%struct.gs_matrix_s* %25, %struct.gs_matrix_s* %26) #4
    %28 = icmp slt i32 %27, 0
    br i1 %28, label %ctm_set_inverse.exit.thread3, label %ctm_set_inverse.exit.thread
  
  ctm_set_inverse.exit.thread:                      ; preds = %24
    %sunkaddr = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr1 = add i32 %sunkaddr, 248
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 1, i32* %sunkaddr2, align 4, !tbaa !21
    br label %29
  
  ; <label>:29                                      ; preds = %ctm_set_inverse.exit.thread, %._crit_edge
    %.pre-phi = phi %struct.gs_matrix_s* [ %.pre, %._crit_edge ], [ %26, %ctm_set_inverse.exit.thread ]
    %30 = tail call i32 @gs_point_transform(double %x, double %y, %struct.gs_matrix_s* %.pre-phi, %struct.gs_point_s* %pt) #4
    br label %ctm_set_inverse.exit.thread3
  
  ctm_set_inverse.exit.thread3:                     ; preds = %29, %24, %17
    %.1 = phi i32 [ %19, %17 ], [ %30, %29 ], [ %27, %24 ]
    ret i32 %.1
  }
  
  declare i32 @gs_point_transform_inverse(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2
  
  ; Function Attrs: nounwind
  define i32 @gs_idtransform(%struct.gs_state_s* %pgs, double %dx, double %dy, %struct.gs_point_s* %pt) #0 {
    %1 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2
    %2 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 1
    %3 = load float, float* %2, align 4, !tbaa !51
    %4 = fcmp oeq float %3, 0.000000e+00
    br i1 %4, label %5, label %9
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 2
    %7 = load float, float* %6, align 4, !tbaa !52
    %8 = fcmp oeq float %7, 0.000000e+00
    br i1 %8, label %17, label %9
  
  ; <label>:9                                       ; preds = %5, %0
    %10 = bitcast %struct.gs_matrix_fixed_s* %1 to float*
    %11 = load float, float* %10, align 4, !tbaa !53
    %12 = fcmp oeq float %11, 0.000000e+00
    br i1 %12, label %13, label %20
  
  ; <label>:13                                      ; preds = %9
    %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 3
    %15 = load float, float* %14, align 4, !tbaa !54
    %16 = fcmp oeq float %15, 0.000000e+00
    br i1 %16, label %17, label %20
  
  ; <label>:17                                      ; preds = %13, %5
    %18 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %19 = tail call i32 @gs_distance_transform_inverse(double %dx, double %dy, %struct.gs_matrix_s* %18, %struct.gs_point_s* %pt) #4
    br label %ctm_set_inverse.exit.thread3
  
  ; <label>:20                                      ; preds = %13, %9
    %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    %22 = load i32, i32* %21, align 4, !tbaa !21
    %23 = icmp eq i32 %22, 0
    br i1 %23, label %24, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %20
    %.pre = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 24
    br label %29
  
  ; <label>:24                                      ; preds = %20
    %25 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 24
    %27 = tail call i32 @gs_matrix_invert(%struct.gs_matrix_s* %25, %struct.gs_matrix_s* %26) #4
    %28 = icmp slt i32 %27, 0
    br i1 %28, label %ctm_set_inverse.exit.thread3, label %ctm_set_inverse.exit.thread
  
  ctm_set_inverse.exit.thread:                      ; preds = %24
    %sunkaddr = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr1 = add i32 %sunkaddr, 248
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 1, i32* %sunkaddr2, align 4, !tbaa !21
    br label %29
  
  ; <label>:29                                      ; preds = %ctm_set_inverse.exit.thread, %._crit_edge
    %.pre-phi = phi %struct.gs_matrix_s* [ %.pre, %._crit_edge ], [ %26, %ctm_set_inverse.exit.thread ]
    %30 = tail call i32 @gs_distance_transform(double %dx, double %dy, %struct.gs_matrix_s* %.pre-phi, %struct.gs_point_s* %pt) #4
    br label %ctm_set_inverse.exit.thread3
  
  ctm_set_inverse.exit.thread3:                     ; preds = %29, %24, %17
    %.1 = phi i32 [ %19, %17 ], [ %30, %29 ], [ %27, %24 ]
    ret i32 %.1
  }
  
  declare i32 @gs_distance_transform_inverse(double, double, %struct.gs_matrix_s*, %struct.gs_point_s*) #2
  
  ; Function Attrs: nounwind
  define i32 @gs_imager_idtransform(%struct.gs_imager_state_s* %pis, double %dx, double %dy, %struct.gs_point_s* %pt) #0 {
    %1 = getelementptr inbounds %struct.gs_imager_state_s, %struct.gs_imager_state_s* %pis, i32 0, i32 2
    %2 = bitcast %struct.gs_matrix_fixed_s* %1 to %struct.gs_matrix_s*
    %3 = tail call i32 @gs_distance_transform_inverse(double %dx, double %dy, %struct.gs_matrix_s* %2, %struct.gs_point_s* %pt) #4
    ret i32 %3
  }
  
  ; Function Attrs: nounwind
  define i32 @gx_translate_to_fixed(%struct.gs_state_s* nocapture %pgs, i32 signext %px, i32 signext %py) #0 {
    %1 = sitofp i32 %px to double
    %2 = fmul double %1, 0x3F30000000000000
    %3 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 4
    %4 = load float, float* %3, align 4, !tbaa !24
    %5 = fpext float %4 to double
    %6 = fsub double %2, %5
    %7 = sitofp i32 %py to double
    %8 = fmul double %7, 0x3F30000000000000
    %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 5
    %10 = load float, float* %9, align 4, !tbaa !26
    %11 = fpext float %10 to double
    %12 = fsub double %8, %11
    %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 8
    %14 = load i32, i32* %13, align 4, !tbaa !27
    %15 = icmp eq i32 %14, 0
    br i1 %15, label %40, label %16
  
  ; <label>:16                                      ; preds = %0
    %17 = fmul double %6, 4.096000e+03
    %18 = fptosi double %17 to i32
    %19 = fmul double %12, 4.096000e+03
    %20 = fptosi double %19 to i32
    %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 28
    %22 = load %struct.gx_path_s*, %struct.gx_path_s** %21, align 4, !tbaa !55
    %23 = tail call i32 @gx_path_translate(%struct.gx_path_s* %22, i32 signext %18, i32 signext %20) #4
    %24 = icmp slt i32 %23, 0
    br i1 %24, label %64, label %25
  
  ; <label>:25                                      ; preds = %16
    %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %27 = load i32, i32* %26, align 4, !tbaa !22
    %28 = icmp eq i32 %27, 0
    br i1 %28, label %45, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 8
    %31 = load i32, i32* %30, align 4, !tbaa !32
    %32 = icmp eq i32 %31, 0
    br i1 %32, label %45, label %33
  
  ; <label>:33                                      ; preds = %29
    %34 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 6
    %35 = load i32, i32* %34, align 4, !tbaa !28
    %36 = add nsw i32 %35, %18
    store i32 %36, i32* %34, align 4, !tbaa !28
    %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 7
    %38 = load i32, i32* %37, align 4, !tbaa !30
    %39 = add nsw i32 %38, %20
    store i32 %39, i32* %37, align 4, !tbaa !30
    br label %45
  
  ; <label>:40                                      ; preds = %0
    %41 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 28
    %42 = load %struct.gx_path_s*, %struct.gx_path_s** %41, align 4, !tbaa !55
    %43 = tail call i32 @gx_path_is_null(%struct.gx_path_s* %42) #4
    %44 = icmp eq i32 %43, 0
    br i1 %44, label %64, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %40
    %.phi.trans.insert = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !22
    br label %45
  
  ; <label>:45                                      ; preds = %._crit_edge, %33, %29, %25
    %46 = phi i32 [ %.pre, %._crit_edge ], [ %27, %29 ], [ 0, %25 ], [ %27, %33 ]
    %47 = fptrunc double %2 to float
    %sunkaddr = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr1 = add i32 %sunkaddr, 80
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    store float %47, float* %sunkaddr2, align 4, !tbaa !24
    %48 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 6
    store i32 %px, i32* %48, align 4, !tbaa !23
    %49 = fptrunc double %8 to float
    %sunkaddr3 = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr4 = add i32 %sunkaddr3, 84
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    store float %49, float* %sunkaddr5, align 4, !tbaa !26
    %50 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 7
    store i32 %py, i32* %50, align 4, !tbaa !25
    %sunkaddr6 = ptrtoint %struct.gs_state_s* %pgs to i32
    %sunkaddr7 = add i32 %sunkaddr6, 96
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32*
    store i32 1, i32* %sunkaddr8, align 4, !tbaa !27
    %51 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %51, align 4, !tbaa !21
    %52 = icmp eq i32 %46, 0
    br i1 %52, label %64, label %53
  
  ; <label>:53                                      ; preds = %45
    %54 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 4
    %55 = load float, float* %54, align 4, !tbaa !29
    %56 = fpext float %55 to double
    %57 = fadd double %6, %56
    %58 = fptrunc double %57 to float
    store float %58, float* %54, align 4, !tbaa !29
    %59 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 5
    %60 = load float, float* %59, align 4, !tbaa !31
    %61 = fpext float %60 to double
    %62 = fadd double %12, %61
    %63 = fptrunc double %62 to float
    store float %63, float* %59, align 4, !tbaa !31
    br label %64
  
  ; <label>:64                                      ; preds = %53, %45, %40, %16
    %.0 = phi i32 [ %23, %16 ], [ -13, %40 ], [ 0, %45 ], [ 0, %53 ]
    ret i32 %.0
  }
  
  declare i32 @gx_path_translate(%struct.gx_path_s*, i32 signext, i32 signext) #2
  
  declare i32 @gx_path_is_null(%struct.gx_path_s*) #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gx_scale_char_matrix(%struct.gs_state_s* nocapture %pgs, i32 signext %sx, i32 signext %sy) #3 {
    %1 = icmp eq i32 %sx, 1
    br i1 %1, label %21, label %2
  
  ; <label>:2                                       ; preds = %0
    %3 = sitofp i32 %sx to float
    %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 0
    %5 = load float, float* %4, align 4, !tbaa !47
    %6 = fmul float %3, %5
    store float %6, float* %4, align 4, !tbaa !47
    %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 2
    %8 = load float, float* %7, align 4, !tbaa !49
    %9 = fmul float %3, %8
    store float %9, float* %7, align 4, !tbaa !49
    %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %10, align 4, !tbaa !21
    %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %12 = load i32, i32* %11, align 4, !tbaa !22
    %13 = icmp eq i32 %12, 0
    br i1 %13, label %21, label %14
  
  ; <label>:14                                      ; preds = %2
    %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 0
    %16 = load float, float* %15, align 4, !tbaa !56
    %17 = fmul float %3, %16
    store float %17, float* %15, align 4, !tbaa !56
    %18 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 2
    %19 = load float, float* %18, align 4, !tbaa !57
    %20 = fmul float %3, %19
    store float %20, float* %18, align 4, !tbaa !57
    br label %21
  
  ; <label>:21                                      ; preds = %14, %2, %0
    %22 = icmp eq i32 %sy, 1
    br i1 %22, label %42, label %23
  
  ; <label>:23                                      ; preds = %21
    %24 = sitofp i32 %sy to float
    %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 1
    %26 = load float, float* %25, align 4, !tbaa !48
    %27 = fmul float %24, %26
    store float %27, float* %25, align 4, !tbaa !48
    %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 2, i32 3
    %29 = load float, float* %28, align 4, !tbaa !50
    %30 = fmul float %24, %29
    store float %30, float* %28, align 4, !tbaa !50
    %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 25
    store i32 0, i32* %31, align 4, !tbaa !21
    %32 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 38
    %33 = load i32, i32* %32, align 4, !tbaa !22
    %34 = icmp eq i32 %33, 0
    br i1 %34, label %42, label %35
  
  ; <label>:35                                      ; preds = %23
    %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 1
    %37 = load float, float* %36, align 4, !tbaa !58
    %38 = fmul float %24, %37
    store float %38, float* %36, align 4, !tbaa !58
    %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %pgs, i32 0, i32 37, i32 3
    %40 = load float, float* %39, align 4, !tbaa !59
    %41 = fmul float %24, %40
    store float %41, float* %39, align 4, !tbaa !59
    br label %42
  
  ; <label>:42                                      ; preds = %35, %23, %21
    ret i32 0
  }
  
  ; Function Attrs: nounwind
  define i32 @gx_matrix_to_fixed_coeff(%struct.gs_matrix_s* nocapture readonly %pmat, %struct.fixed_coeff* %pfc, i32 signext %max_bits) #0 {
    %scale = alloca i32, align 4
    %expt = alloca i32, align 4
    %1 = bitcast i32* %scale to i8*
    call void @llvm.lifetime.start(i64 4, i8* %1) #4
    store i32 -10000, i32* %scale, align 4, !tbaa !42
    %2 = bitcast i32* %expt to i8*
    call void @llvm.lifetime.start(i64 4, i8* %2) #4
    %3 = bitcast %struct.gs_matrix_s* %pmat to float*
    %4 = load float, float* %3, align 4
    %5 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 1
    %6 = load float, float* %5, align 4
    %7 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 2
    %8 = load float, float* %7, align 4
    %9 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %pmat, i32 0, i32 3
    %10 = load float, float* %9, align 4
    %11 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 4
    store i32 0, i32* %11, align 4, !tbaa !60
    %12 = fpext float %4 to double
    %13 = fcmp oeq float %4, 0.000000e+00
    br i1 %13, label %16, label %14
  
  ; <label>:14                                      ; preds = %0
    %15 = call double @frexp(double %12, i32* nonnull %scale) #4
    br label %16
  
  ; <label>:16                                      ; preds = %14, %0
    %17 = fpext float %6 to double
    %18 = fcmp oeq float %6, 0.000000e+00
    br i1 %18, label %26, label %19
  
  ; <label>:19                                      ; preds = %16
    %20 = call double @frexp(double %17, i32* nonnull %expt) #4
    %21 = load i32, i32* %expt, align 4, !tbaa !42
    %22 = load i32, i32* %scale, align 4, !tbaa !42
    %23 = icmp sgt i32 %21, %22
    br i1 %23, label %24, label %25
  
  ; <label>:24                                      ; preds = %19
    store i32 %21, i32* %scale, align 4, !tbaa !42
    br label %25
  
  ; <label>:25                                      ; preds = %24, %19
    %sunkaddr = ptrtoint %struct.fixed_coeff* %pfc to i32
    %sunkaddr1 = add i32 %sunkaddr, 32
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 1, i32* %sunkaddr2, align 4, !tbaa !60
    br label %26
  
  ; <label>:26                                      ; preds = %25, %16
    %27 = fpext float %8 to double
    %28 = fcmp oeq float %8, 0.000000e+00
    br i1 %28, label %36, label %29
  
  ; <label>:29                                      ; preds = %26
    %30 = call double @frexp(double %27, i32* nonnull %expt) #4
    %31 = load i32, i32* %expt, align 4, !tbaa !42
    %32 = load i32, i32* %scale, align 4, !tbaa !42
    %33 = icmp sgt i32 %31, %32
    br i1 %33, label %34, label %35
  
  ; <label>:34                                      ; preds = %29
    store i32 %31, i32* %scale, align 4, !tbaa !42
    br label %35
  
  ; <label>:35                                      ; preds = %34, %29
    %sunkaddr3 = ptrtoint %struct.fixed_coeff* %pfc to i32
    %sunkaddr4 = add i32 %sunkaddr3, 32
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    store i32 1, i32* %sunkaddr5, align 4, !tbaa !60
    br label %36
  
  ; <label>:36                                      ; preds = %35, %26
    %37 = fpext float %10 to double
    %38 = fcmp oeq float %10, 0.000000e+00
    br i1 %38, label %._crit_edge, label %39
  
  ._crit_edge:                                      ; preds = %36
    %.pre = load i32, i32* %scale, align 4, !tbaa !42
    br label %45
  
  ; <label>:39                                      ; preds = %36
    %40 = call double @frexp(double %37, i32* nonnull %expt) #4
    %41 = load i32, i32* %expt, align 4, !tbaa !42
    %42 = load i32, i32* %scale, align 4, !tbaa !42
    %43 = icmp sgt i32 %41, %42
    br i1 %43, label %44, label %45
  
  ; <label>:44                                      ; preds = %39
    store i32 %41, i32* %scale, align 4, !tbaa !42
    br label %45
  
  ; <label>:45                                      ; preds = %44, %39, %._crit_edge
    %46 = phi i32 [ %.pre, %._crit_edge ], [ %42, %39 ], [ %41, %44 ]
    %47 = sub i32 31, %max_bits
    %48 = sub i32 %47, %46
    store i32 %48, i32* %scale, align 4, !tbaa !42
    %49 = icmp sgt i32 %48, 12
    br i1 %49, label %50, label %54
  
  ; <label>:50                                      ; preds = %45
    %51 = add nsw i32 %48, -12
    %sunkaddr6 = ptrtoint %struct.fixed_coeff* %pfc to i32
    %sunkaddr7 = add i32 %sunkaddr6, 36
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32*
    store i32 %51, i32* %sunkaddr8, align 4, !tbaa !63
    %52 = add nsw i32 %48, -13
    %53 = shl i32 1, %52
    br label %55
  
  ; <label>:54                                      ; preds = %45
    %sunkaddr9 = ptrtoint %struct.fixed_coeff* %pfc to i32
    %sunkaddr10 = add i32 %sunkaddr9, 36
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    store i32 0, i32* %sunkaddr11, align 4, !tbaa !63
    store i32 12, i32* %scale, align 4, !tbaa !42
    br label %55
  
  ; <label>:55                                      ; preds = %54, %50
    %56 = phi i32 [ 12, %54 ], [ %48, %50 ]
    %.sink = phi i32 [ 0, %54 ], [ %53, %50 ]
    %57 = fcmp oeq float %4, 0.000000e+00
    %58 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 7
    store i32 %.sink, i32* %58, align 4
    br i1 %57, label %59, label %61
  
  ; <label>:59                                      ; preds = %55
    %60 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 0, i32 1
    store i32 0, i32* %60, align 4, !tbaa !64
    br label %67
  
  ; <label>:61                                      ; preds = %55
    %62 = tail call double @ldexp(double %12, i32 signext 12) #4
    %63 = fptosi double %62 to i32
    %64 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 0, i32 1
    store i32 %63, i32* %64, align 4, !tbaa !64
    %65 = tail call double @ldexp(double %12, i32 signext %56) #4
    %66 = fptosi double %65 to i32
    br label %67
  
  ; <label>:67                                      ; preds = %61, %59
    %.sink1 = phi i32 [ %66, %61 ], [ 0, %59 ]
    %68 = fcmp oeq float %6, 0.000000e+00
    %69 = bitcast %struct.fixed_coeff* %pfc to i32*
    store i32 %.sink1, i32* %69, align 4
    br i1 %68, label %70, label %72
  
  ; <label>:70                                      ; preds = %67
    %71 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 1, i32 1
    store i32 0, i32* %71, align 4, !tbaa !65
    br label %78
  
  ; <label>:72                                      ; preds = %67
    %73 = tail call double @ldexp(double %17, i32 signext 12) #4
    %74 = fptosi double %73 to i32
    %75 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 1, i32 1
    store i32 %74, i32* %75, align 4, !tbaa !65
    %76 = tail call double @ldexp(double %17, i32 signext %56) #4
    %77 = fptosi double %76 to i32
    br label %78
  
  ; <label>:78                                      ; preds = %72, %70
    %.sink2 = phi i32 [ %77, %72 ], [ 0, %70 ]
    %79 = fcmp oeq float %8, 0.000000e+00
    %80 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 1, i32 0
    store i32 %.sink2, i32* %80, align 4
    br i1 %79, label %81, label %83
  
  ; <label>:81                                      ; preds = %78
    %82 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 2, i32 1
    store i32 0, i32* %82, align 4, !tbaa !66
    br label %89
  
  ; <label>:83                                      ; preds = %78
    %84 = tail call double @ldexp(double %27, i32 signext 12) #4
    %85 = fptosi double %84 to i32
    %86 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 2, i32 1
    store i32 %85, i32* %86, align 4, !tbaa !66
    %87 = tail call double @ldexp(double %27, i32 signext %56) #4
    %88 = fptosi double %87 to i32
    br label %89
  
  ; <label>:89                                      ; preds = %83, %81
    %.sink3 = phi i32 [ %88, %83 ], [ 0, %81 ]
    %90 = fcmp oeq float %10, 0.000000e+00
    %91 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 2, i32 0
    store i32 %.sink3, i32* %91, align 4
    br i1 %90, label %92, label %94
  
  ; <label>:92                                      ; preds = %89
    %93 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 3, i32 1
    store i32 0, i32* %93, align 4, !tbaa !67
    br label %100
  
  ; <label>:94                                      ; preds = %89
    %95 = tail call double @ldexp(double %37, i32 signext 12) #4
    %96 = fptosi double %95 to i32
    %97 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 3, i32 1
    store i32 %96, i32* %97, align 4, !tbaa !67
    %98 = tail call double @ldexp(double %37, i32 signext %56) #4
    %99 = fptosi double %98 to i32
    br label %100
  
  ; <label>:100                                     ; preds = %94, %92
    %.sink4 = phi i32 [ %99, %94 ], [ 0, %92 ]
    %101 = bitcast i32* %expt to i8*
    %102 = bitcast i32* %scale to i8*
    %103 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 3, i32 0
    store i32 %.sink4, i32* %103, align 4
    %104 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %pfc, i32 0, i32 6
    store i32 %max_bits, i32* %104, align 4, !tbaa !68
    call void @llvm.lifetime.end(i64 4, i8* %101) #4
    call void @llvm.lifetime.end(i64 4, i8* nonnull %102) #4
    ret i32 0
  }
  
  ; Function Attrs: nounwind
  declare double @frexp(double, i32* nocapture) #0
  
  ; Function Attrs: nounwind
  declare double @ldexp(double, i32 signext) #0
  
  declare i32 @gs_matrix_invert(%struct.gs_matrix_s*, %struct.gs_matrix_s*) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !9, i64 276}
  !2 = !{!"gs_state_s", !3, i64 0, !6, i64 4, !10, i64 64, !9, i64 100, !12, i64 104, !9, i64 108, !7, i64 112, !13, i64 116, !9, i64 124, !9, i64 128, !3, i64 132, !4, i64 136, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !4, i64 172, !4, i64 188, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !14, i64 224, !9, i64 248, !14, i64 252, !9, i64 276, !3, i64 280, !3, i64 284, !9, i64 288, !9, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !10, i64 316, !9, i64 352, !4, i64 356, !4, i64 360, !3, i64 364, !9, i64 368, !3, i64 372, !3, i64 376, !15, i64 380}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"gx_line_params_s", !7, i64 0, !4, i64 4, !4, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !7, i64 24, !8, i64 28}
  !7 = !{!"float", !4, i64 0}
  !8 = !{!"gx_dash_params_s", !3, i64 0, !9, i64 4, !7, i64 8, !9, i64 12, !7, i64 16, !9, i64 20, !9, i64 24, !7, i64 28}
  !9 = !{!"int", !4, i64 0}
  !10 = !{!"gs_matrix_fixed_s", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !11, i64 24, !11, i64 28, !9, i64 32}
  !11 = !{!"long", !4, i64 0}
  !12 = !{!"short", !4, i64 0}
  !13 = !{!"gs_fixed_point_s", !11, i64 0, !11, i64 4}
  !14 = !{!"gs_matrix_s", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20}
  !15 = !{!"gs_state_client_procs_s", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12}
  !16 = !{i64 0, i64 4, !17, i64 4, i64 4, !17, i64 8, i64 4, !17, i64 12, i64 4, !17, i64 16, i64 4, !17, i64 20, i64 4, !17}
  !17 = !{!7, !7, i64 0}
  !18 = !{!14, !7, i64 16}
  !19 = !{!2, !3, i64 372}
  !20 = !{!14, !7, i64 20}
  !21 = !{!2, !9, i64 248}
  !22 = !{!2, !9, i64 352}
  !23 = !{!2, !11, i64 88}
  !24 = !{!2, !7, i64 80}
  !25 = !{!2, !11, i64 92}
  !26 = !{!2, !7, i64 84}
  !27 = !{!2, !9, i64 96}
  !28 = !{!2, !11, i64 340}
  !29 = !{!2, !7, i64 332}
  !30 = !{!2, !11, i64 344}
  !31 = !{!2, !7, i64 336}
  !32 = !{!2, !9, i64 348}
  !33 = !{!2, !3, i64 308}
  !34 = !{!35, !11, i64 88}
  !35 = !{!"gs_imager_state_s", !3, i64 0, !6, i64 4, !10, i64 64, !9, i64 100, !12, i64 104, !9, i64 108, !7, i64 112, !13, i64 116, !9, i64 124, !9, i64 128, !3, i64 132, !4, i64 136, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !4, i64 172, !4, i64 188, !3, i64 204, !3, i64 208, !3, i64 212}
  !36 = !{!35, !7, i64 80}
  !37 = !{!35, !11, i64 92}
  !38 = !{!35, !7, i64 84}
  !39 = !{!35, !9, i64 96}
  !40 = !{i64 0, i64 4, !17, i64 4, i64 4, !17, i64 8, i64 4, !17, i64 12, i64 4, !17, i64 16, i64 4, !17, i64 20, i64 4, !17, i64 24, i64 4, !41, i64 28, i64 4, !41, i64 32, i64 4, !42}
  !41 = !{!11, !11, i64 0}
  !42 = !{!9, !9, i64 0}
  !43 = !{!44, !45, i64 0}
  !44 = !{!"gs_point_s", !45, i64 0, !45, i64 8}
  !45 = !{!"double", !4, i64 0}
  !46 = !{!44, !45, i64 8}
  !47 = !{!2, !7, i64 64}
  !48 = !{!2, !7, i64 68}
  !49 = !{!2, !7, i64 72}
  !50 = !{!2, !7, i64 76}
  !51 = !{!10, !7, i64 4}
  !52 = !{!10, !7, i64 8}
  !53 = !{!10, !7, i64 0}
  !54 = !{!10, !7, i64 12}
  !55 = !{!2, !3, i64 280}
  !56 = !{!2, !7, i64 316}
  !57 = !{!2, !7, i64 324}
  !58 = !{!2, !7, i64 320}
  !59 = !{!2, !7, i64 328}
  !60 = !{!61, !9, i64 32}
  !61 = !{!"", !62, i64 0, !62, i64 8, !62, i64 16, !62, i64 24, !9, i64 32, !9, i64 36, !9, i64 40, !11, i64 44}
  !62 = !{!"", !11, i64 0, !11, i64 4}
  !63 = !{!61, !9, i64 36}
  !64 = !{!61, !11, i64 4}
  !65 = !{!61, !11, i64 12}
  !66 = !{!61, !11, i64 20}
  !67 = !{!61, !11, i64 28}
  !68 = !{!61, !9, i64 40}

...
---
name:            gs_currentcharmatrix
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       56
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: cmat.i, offset: -40, size: 24, alignment: 8 }
  - { id: 1, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 2, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 3, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 4, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s0' }
constants:       
  - id:              0
    value:           'float -5.242880e+05'
    alignment:       4
  - id:              1
    value:           'float 5.242880e+05'
    alignment:       4
  - id:              2
    value:           'float 4.096000e+03'
    alignment:       4
  - id:              3
    value:           double 0x3F30000000000000
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 218):
    successors: %bb.1(37), %bb.12(62)
    liveins: %a0, %a1, %a2, %t9, %ra, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -56
    CFI_INSTRUCTION .cfi_def_cfa_offset 56
    SW killed %ra, %sp, 52 :: (store 4 into stack)
    SW killed %s2, %sp, 48 :: (store 4 into stack)
    SW killed %s1, %sp, 44 :: (store 4 into stack)
    SW killed %s0, %sp, 40 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s2_64, -8
    CFI_INSTRUCTION .cfi_offset %s1_64, -12
    CFI_INSTRUCTION .cfi_offset %s0_64, -16
    %s2 = ADDu %v0, %t9
    %s1 = OR %a0, %zero
    %at = LW %s1, 352 :: (load 4 from %ir.1, !tbaa !22)
    BNE %at, %zero, %bb.12, implicit-def %at {
      %s0 = OR %a1, %zero
    }
  
  bb.1 (%ir-block.4, freq 81):
    successors: %bb.14..thread(37), %bb.2(62)
    liveins: %a2, %s0, %s1, %s2
  
    BEQ %a2, %zero, %bb.14..thread, implicit-def %at {
      %v0 = ADDiu %zero, -23
    }
  
  bb.2 (%ir-block.6, freq 51):
    successors: %bb.14..thread(37), %bb.3(62)
    liveins: %s0, %s1, %s2
  
    %at = LW %s1, 308 :: (load 4 from %ir.7, !tbaa !33)
    %a1 = ADDiu %s1, 64
    %a0 = ADDiu killed %at, 24
    %t9 = LW %s2, target-flags(<unknown>) @gs_matrix_multiply :: (load 4 from call-entry @gs_matrix_multiply)
    %a2 = LEA_ADDiu %sp, 16
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s2, %zero
    }
    BLTZ %v0, %bb.14..thread, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.16, freq 32):
    successors: %bb.4(75), %bb.8.._crit_edge.i(25)
    liveins: %s0, %s1, %s2
  
    %at = LW %s2, target-flags(<unknown>) %const.0 :: (load 4 from got)
    %f2 = LWC1 killed %at, target-flags(<unknown>) %const.0 :: (load 4 from constant-pool)
    %f0 = LWC1 %sp, 32 :: (load 4 from %ir.17, align 8, !tbaa !18)
    FCMP_S32 %f0, %f2, 5, implicit-def %fcc0
    BC1T %fcc0, %bb.8.._crit_edge.i, implicit-def %at {
      NOP
    }
  
  bb.4 (%ir-block.16, freq 24):
    successors: %bb.5(66), %bb.8.._crit_edge.i(33)
    liveins: %f0, %f2, %s0, %s1, %s2
  
    %at = LW %s2, target-flags(<unknown>) %const.1 :: (load 4 from got)
    %f3 = LWC1 killed %at, target-flags(<unknown>) %const.1 :: (load 4 from constant-pool)
    FCMP_S32 %f0, %f3, 4, implicit-def %fcc0
    BC1F %fcc0, %bb.8.._crit_edge.i, implicit-def %at {
      NOP
    }
  
  bb.5 (%ir-block.21, freq 16):
    successors: %bb.6(75), %bb.9.._crit_edge8.i(25)
    liveins: %f0, %f2, %f3, %s0, %s1, %s2
  
    %f1 = LWC1 %sp, 36 :: (load 4 from %ir.sunkaddr5, !tbaa !20)
    FCMP_S32 %f1, killed %f2, 5, implicit-def %fcc0
    BC1T %fcc0, %bb.9.._crit_edge8.i, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.21, freq 12):
    successors: %bb.7(66), %bb.9.._crit_edge8.i(33)
    liveins: %f0, %f1, %f3, %s0, %s1, %s2
  
    FCMP_S32 %f1, killed %f3, 4, implicit-def %fcc0
    BC1F %fcc0, %bb.9.._crit_edge8.i, implicit-def %at {
      NOP
    }
  
  bb.7 (%ir-block.26, freq 8):
    successors: %bb.11..thread3(100)
    liveins: %f0, %f1, %s0, %s1, %s2
  
    %at = LW %s2, target-flags(<unknown>) %const.2 :: (load 4 from got)
    %f2 = LWC1 killed %at, target-flags(<unknown>) %const.2 :: (load 4 from constant-pool)
    %f0 = FMUL_S killed %f0, %f2
    %f1 = FMUL_S killed %f1, killed %f2
    %at = LW killed %s2, target-flags(<unknown>) %const.3 :: (load 4 from got)
    %d1 = LDC1 killed %at, target-flags(<unknown>) %const.3 :: (load 8 from constant-pool)
    %v0 = ADDiu %zero, 1
    %f1 = TRUNC_W_S killed %f1
    %at = MFC1 %f1
    %f4 = MTC1 killed %at
    %d2 = CVT_D32_W killed %f4
    %f0 = TRUNC_W_S killed %f0
    SWC1 %f0, %s1, 340 :: (store 4 into %ir.29)
    %d2 = FMUL_D32 killed %d2, %d1
    %at = MFC1 killed %f0
    %f6 = MTC1 killed %at
    %d3 = CVT_D32_W killed %f6
    %d1 = FMUL_D32 killed %d3, killed %d1
    %f0 = CVT_S_D32 killed %d1
    SWC1 killed %f0, %s1, 332 :: (store 4 into %ir.33, !tbaa !29)
    SWC1 killed %f1, %s1, 344 :: (store 4 into %ir.36)
    %f0 = CVT_S_D32 killed %d2
    B %bb.11..thread3, implicit-def dead %at {
      SWC1 killed %f0, %s1, 336 :: (store 4 into %ir.37, !tbaa !31)
    }
  
  bb.8.._crit_edge.i (freq 16):
    successors: %bb.10(100)
    liveins: %f0, %s0, %s1
  
    %v0 = LW %sp, 36 :: (load 4 from %ir.sunkaddr2, !tbaa !20)
    B %bb.10, implicit-def dead %at {
      NOP
    }
  
  bb.9.._crit_edge8.i (freq 8):
    successors: %bb.10(100)
    liveins: %f0, %f1, %s0, %s1
  
    %v0 = MFC1 killed %f1
  
  bb.10 (%ir-block.38, freq 24):
    successors: %bb.11..thread3(100)
    liveins: %f0, %s0, %s1, %v0
  
    SWC1 killed %f0, %s1, 332 :: (store 4 into %ir.40, !tbaa !29)
    SW killed %v0, %s1, 336 :: (store 4 into %ir.42, !tbaa !31)
    %v0 = ADDiu %zero, 0
  
  bb.11..thread3 (freq 32):
    successors: %bb.12(100)
    liveins: %s0, %s1, %v0
  
    SW killed %v0, %s1, 348 :: (store 4 into %ir.46, !tbaa !32)
    %at = LW %sp, 20 :: (load 4 from %ir.44 + 4)
    %v0 = LW %sp, 24 :: (load 4 from %ir.44 + 8, align 8)
    %v1 = LW %sp, 28 :: (load 4 from %ir.44 + 12)
    %a0 = LW %sp, 32 :: (load 4 from %ir.44 + 16, align 8)
    %a1 = LW %sp, 36 :: (load 4 from %ir.44 + 20)
    SW killed %a1, %s1, 336 :: (store 4 into %ir.47 + 20)
    SW killed %a0, %s1, 332 :: (store 4 into %ir.47 + 16)
    SW killed %v1, %s1, 328 :: (store 4 into %ir.47 + 12)
    SW killed %v0, %s1, 324 :: (store 4 into %ir.47 + 8)
    SW killed %at, %s1, 320 :: (store 4 into %ir.47 + 4)
    %at = LW %sp, 16 :: (load 4 from %ir.44, align 8)
    SW killed %at, %s1, 316 :: (store 4 into %ir.47)
    %at = ADDiu %zero, 1
    SW killed %at, %s1, 352 :: (store 4 into %ir.sunkaddr8, !tbaa !22)
  
  bb.12 (%ir-block.48, freq 168):
    successors: %bb.14..thread(37), %bb.13(62)
    liveins: %s0, %s1
  
    BEQ %s0, %zero, %bb.14..thread, implicit-def %at {
      %v0 = ADDiu %zero, 0
    }
  
  bb.13 (%ir-block.50, freq 105):
    successors: %bb.14..thread(100)
    liveins: %s0, %s1, %v0
  
    %at = LW %s1, 320 :: (load 4 from %ir.53 + 4)
    %v1 = LW %s1, 324 :: (load 4 from %ir.53 + 8)
    %a0 = LW %s1, 328 :: (load 4 from %ir.53 + 12)
    %a1 = LW %s1, 332 :: (load 4 from %ir.53 + 16)
    %a2 = LW %s1, 336 :: (load 4 from %ir.53 + 20)
    SW killed %a2, %s0, 20 :: (store 4 into %ir.52 + 20)
    SW killed %a1, %s0, 16 :: (store 4 into %ir.52 + 16)
    SW killed %a0, %s0, 12 :: (store 4 into %ir.52 + 12)
    SW killed %v1, %s0, 8 :: (store 4 into %ir.52 + 8)
    SW killed %at, %s0, 4 :: (store 4 into %ir.52 + 4)
    %at = LW killed %s1, 316 :: (load 4 from %ir.53)
    SW killed %at, killed %s0, 0 :: (store 4 into %ir.52)
  
  bb.14..thread (freq 218):
    liveins: %v0
    liveouts:
  
    %s0 = LW %sp, 40 :: (load 4 from stack)
    %s1 = LW %sp, 44 :: (load 4 from stack)
    %s2 = LW %sp, 48 :: (load 4 from stack)
    %ra = LW %sp, 52 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 56
    }

...
