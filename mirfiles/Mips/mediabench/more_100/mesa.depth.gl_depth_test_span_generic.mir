--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.depth.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type opaque
  
  @.str = private unnamed_addr constant [13 x i8] c"glClearDepth\00", align 1
  @.str.1 = private unnamed_addr constant [12 x i8] c"glDepthFunc\00", align 1
  @.str.2 = private unnamed_addr constant [13 x i8] c"glDepth.Func\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glDepthMask\00", align 1
  @.str.4 = private unnamed_addr constant [13 x i8] c"glDepthRange\00", align 1
  @.str.5 = private unnamed_addr constant [31 x i8] c"Couldn't allocate depth buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearDepth(%struct.gl_context* %ctx, double %depth) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %depth, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %depth, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %depth
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    store float %11, float* %12, align 4, !tbaa !37
    br label %13
  
  ; <label>:13                                      ; preds = %10, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_DepthFunc(%struct.gl_context* %ctx, i32 signext %func) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %12
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %10 = load i32, i32* %9, align 4, !tbaa !39
    %11 = or i32 %10, 2
    store i32 %11, i32* %9, align 4, !tbaa !39
    br label %13
  
  ; <label>:12                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:13                                      ; preds = %12, %7, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthMask(%struct.gl_context* %ctx, i8 zeroext %flag) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %10
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    store i8 %flag, i8* %6, align 1, !tbaa !40
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %8 = load i32, i32* %7, align 4, !tbaa !39
    %9 = or i32 %8, 2
    store i32 %9, i32* %7, align 4, !tbaa !39
    br label %10
  
  ; <label>:10                                      ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthRange(%struct.gl_context* %ctx, double %nearval, double %farval) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %31
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %nearval, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %nearval, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %nearval
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = fcmp olt double %farval, 0.000000e+00
    br i1 %12, label %16, label %13
  
  ; <label>:13                                      ; preds = %10
    %14 = fcmp ogt double %farval, 1.000000e+00
    %15 = select i1 %14, double 1.000000e+00, double %farval
    %phitmp1 = fptrunc double %15 to float
    br label %16
  
  ; <label>:16                                      ; preds = %13, %10
    %17 = phi float [ 0.000000e+00, %10 ], [ %phitmp1, %13 ]
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 4
    store float %11, float* %18, align 4, !tbaa !41
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 5
    store float %17, float* %19, align 4, !tbaa !42
    %20 = fsub float %17, %11
    %21 = fpext float %20 to double
    %22 = fmul double %21, 5.000000e-01
    %23 = fmul double %22, 6.553500e+04
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 8
    store float %24, float* %25, align 4, !tbaa !43
    %26 = fpext float %11 to double
    %27 = fadd double %26, %22
    %28 = fmul double %27, 6.553500e+04
    %29 = fptrunc double %28 to float
    %30 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 11
    store float %29, float* %30, align 4, !tbaa !44
    br label %31
  
  ; <label>:31                                      ; preds = %16, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_depth_test_span_generic(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = mul nsw i32 %6, %y
    %8 = getelementptr inbounds i16, i16* %4, i32 %7
    %9 = getelementptr inbounds i16, i16* %8, i32 %x
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %11 = load i32, i32* %10, align 4, !tbaa !38
    switch i32 %11, label %206 [
      i32 513, label %13
      i32 515, label %43
      i32 518, label %73
      i32 516, label %103
      i32 517, label %133
      i32 514, label %163
      i32 519, label %193
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph104.preheader
  
  .lr.ph104.preheader:                              ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %15 = load i8, i8* %14, align 1, !tbaa !40
    %16 = icmp eq i8 %15, 0
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph35, label %.loopexit
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader1, %28
    %lsr.iv4 = phi i16* [ %scevgep5, %28 ], [ %z, %.preheader1 ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %28 ], [ %n, %.preheader1 ]
    %passed.034 = phi i32 [ %passed.1, %28 ], [ 0, %.preheader1 ]
    %m.032 = phi i8* [ %30, %28 ], [ %mask, %.preheader1 ]
    %zptr.031 = phi i16* [ %29, %28 ], [ %9, %.preheader1 ]
    %19 = load i8, i8* %m.032, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph35
    %22 = load i16, i16* %lsr.iv4, align 2, !tbaa !50
    %23 = load i16, i16* %zptr.031, align 2, !tbaa !50
    %24 = icmp ult i16 %22, %23
    br i1 %24, label %25, label %27
  
  ; <label>:25                                      ; preds = %21
    store i16 %22, i16* %zptr.031, align 2, !tbaa !50
    %26 = add i32 %passed.034, 1
    br label %28
  
  ; <label>:27                                      ; preds = %21
    store i8 0, i8* %m.032, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %27, %25, %.lr.ph35
    %passed.1 = phi i32 [ %26, %25 ], [ %passed.034, %27 ], [ %passed.034, %.lr.ph35 ]
    %29 = getelementptr inbounds i16, i16* %zptr.031, i32 1
    %30 = getelementptr inbounds i8, i8* %m.032, i32 1
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %scevgep5 = getelementptr i16, i16* %lsr.iv4, i32 1
    %exitcond118 = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond118, label %.loopexit, label %.lr.ph35
  
  .lr.ph:                                           ; preds = %.preheader, %40
    %lsr.iv1 = phi i16* [ %scevgep, %40 ], [ %z, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %40 ], [ %n, %.preheader ]
    %passed.230 = phi i32 [ %passed.3, %40 ], [ 0, %.preheader ]
    %m.128 = phi i8* [ %42, %40 ], [ %mask, %.preheader ]
    %zptr.127 = phi i16* [ %41, %40 ], [ %9, %.preheader ]
    %31 = load i8, i8* %m.128, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %40, label %33
  
  ; <label>:33                                      ; preds = %.lr.ph
    %34 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %35 = load i16, i16* %zptr.127, align 2, !tbaa !50
    %36 = icmp ult i16 %34, %35
    br i1 %36, label %37, label %39
  
  ; <label>:37                                      ; preds = %33
    %38 = add i32 %passed.230, 1
    br label %40
  
  ; <label>:39                                      ; preds = %33
    store i8 0, i8* %m.128, align 1, !tbaa !49
    br label %40
  
  ; <label>:40                                      ; preds = %39, %37, %.lr.ph
    %passed.3 = phi i32 [ %38, %37 ], [ %passed.230, %39 ], [ %passed.230, %.lr.ph ]
    %41 = getelementptr inbounds i16, i16* %zptr.127, i32 1
    %42 = getelementptr inbounds i8, i8* %m.128, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:43                                      ; preds = %0
    %44 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %45 = load i8, i8* %44, align 1, !tbaa !40
    %46 = icmp eq i8 %45, 0
    br i1 %46, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %43
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph47, label %.loopexit
  
  .preheader3:                                      ; preds = %43
    %48 = icmp ne i32 %n, 0
    br i1 %48, label %.lr.ph41, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader5, %58
    %lsr.iv12 = phi i16* [ %scevgep13, %58 ], [ %z, %.preheader5 ]
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %58 ], [ %n, %.preheader5 ]
    %passed.446 = phi i32 [ %passed.5, %58 ], [ 0, %.preheader5 ]
    %m.244 = phi i8* [ %60, %58 ], [ %mask, %.preheader5 ]
    %zptr.243 = phi i16* [ %59, %58 ], [ %9, %.preheader5 ]
    %49 = load i8, i8* %m.244, align 1, !tbaa !49
    %50 = icmp eq i8 %49, 0
    br i1 %50, label %58, label %51
  
  ; <label>:51                                      ; preds = %.lr.ph47
    %52 = load i16, i16* %lsr.iv12, align 2, !tbaa !50
    %53 = load i16, i16* %zptr.243, align 2, !tbaa !50
    %54 = icmp ugt i16 %52, %53
    br i1 %54, label %57, label %55
  
  ; <label>:55                                      ; preds = %51
    store i16 %52, i16* %zptr.243, align 2, !tbaa !50
    %56 = add i32 %passed.446, 1
    br label %58
  
  ; <label>:57                                      ; preds = %51
    store i8 0, i8* %m.244, align 1, !tbaa !49
    br label %58
  
  ; <label>:58                                      ; preds = %57, %55, %.lr.ph47
    %passed.5 = phi i32 [ %56, %55 ], [ %passed.446, %57 ], [ %passed.446, %.lr.ph47 ]
    %59 = getelementptr inbounds i16, i16* %zptr.243, i32 1
    %60 = getelementptr inbounds i8, i8* %m.244, i32 1
    %lsr.iv.next11 = add i32 %lsr.iv10, -1
    %scevgep13 = getelementptr i16, i16* %lsr.iv12, i32 1
    %exitcond120 = icmp eq i32 %lsr.iv.next11, 0
    br i1 %exitcond120, label %.loopexit, label %.lr.ph47
  
  .lr.ph41:                                         ; preds = %.preheader3, %70
    %lsr.iv8 = phi i16* [ %scevgep9, %70 ], [ %z, %.preheader3 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %70 ], [ %n, %.preheader3 ]
    %passed.640 = phi i32 [ %passed.7, %70 ], [ 0, %.preheader3 ]
    %m.338 = phi i8* [ %72, %70 ], [ %mask, %.preheader3 ]
    %zptr.337 = phi i16* [ %71, %70 ], [ %9, %.preheader3 ]
    %61 = load i8, i8* %m.338, align 1, !tbaa !49
    %62 = icmp eq i8 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %.lr.ph41
    %64 = load i16, i16* %lsr.iv8, align 2, !tbaa !50
    %65 = load i16, i16* %zptr.337, align 2, !tbaa !50
    %66 = icmp ugt i16 %64, %65
    br i1 %66, label %69, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = add i32 %passed.640, 1
    br label %70
  
  ; <label>:69                                      ; preds = %63
    store i8 0, i8* %m.338, align 1, !tbaa !49
    br label %70
  
  ; <label>:70                                      ; preds = %69, %67, %.lr.ph41
    %passed.7 = phi i32 [ %68, %67 ], [ %passed.640, %69 ], [ %passed.640, %.lr.ph41 ]
    %71 = getelementptr inbounds i16, i16* %zptr.337, i32 1
    %72 = getelementptr inbounds i8, i8* %m.338, i32 1
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i16, i16* %lsr.iv8, i32 1
    %exitcond119 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond119, label %.loopexit, label %.lr.ph41
  
  ; <label>:73                                      ; preds = %0
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %75 = load i8, i8* %74, align 1, !tbaa !40
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %73
    %77 = icmp ne i32 %n, 0
    br i1 %77, label %.lr.ph59, label %.loopexit
  
  .preheader7:                                      ; preds = %73
    %78 = icmp ne i32 %n, 0
    br i1 %78, label %.lr.ph53, label %.loopexit
  
  .lr.ph59:                                         ; preds = %.preheader9, %88
    %lsr.iv20 = phi i16* [ %scevgep21, %88 ], [ %z, %.preheader9 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %88 ], [ %n, %.preheader9 ]
    %passed.858 = phi i32 [ %passed.9, %88 ], [ 0, %.preheader9 ]
    %m.456 = phi i8* [ %90, %88 ], [ %mask, %.preheader9 ]
    %zptr.455 = phi i16* [ %89, %88 ], [ %9, %.preheader9 ]
    %79 = load i8, i8* %m.456, align 1, !tbaa !49
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %88, label %81
  
  ; <label>:81                                      ; preds = %.lr.ph59
    %82 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %83 = load i16, i16* %zptr.455, align 2, !tbaa !50
    %84 = icmp ult i16 %82, %83
    br i1 %84, label %87, label %85
  
  ; <label>:85                                      ; preds = %81
    store i16 %82, i16* %zptr.455, align 2, !tbaa !50
    %86 = add i32 %passed.858, 1
    br label %88
  
  ; <label>:87                                      ; preds = %81
    store i8 0, i8* %m.456, align 1, !tbaa !49
    br label %88
  
  ; <label>:88                                      ; preds = %87, %85, %.lr.ph59
    %passed.9 = phi i32 [ %86, %85 ], [ %passed.858, %87 ], [ %passed.858, %.lr.ph59 ]
    %89 = getelementptr inbounds i16, i16* %zptr.455, i32 1
    %90 = getelementptr inbounds i8, i8* %m.456, i32 1
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %exitcond122 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond122, label %.loopexit, label %.lr.ph59
  
  .lr.ph53:                                         ; preds = %.preheader7, %100
    %lsr.iv16 = phi i16* [ %scevgep17, %100 ], [ %z, %.preheader7 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %100 ], [ %n, %.preheader7 ]
    %passed.1052 = phi i32 [ %passed.11, %100 ], [ 0, %.preheader7 ]
    %m.550 = phi i8* [ %102, %100 ], [ %mask, %.preheader7 ]
    %zptr.549 = phi i16* [ %101, %100 ], [ %9, %.preheader7 ]
    %91 = load i8, i8* %m.550, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %100, label %93
  
  ; <label>:93                                      ; preds = %.lr.ph53
    %94 = load i16, i16* %lsr.iv16, align 2, !tbaa !50
    %95 = load i16, i16* %zptr.549, align 2, !tbaa !50
    %96 = icmp ult i16 %94, %95
    br i1 %96, label %99, label %97
  
  ; <label>:97                                      ; preds = %93
    %98 = add i32 %passed.1052, 1
    br label %100
  
  ; <label>:99                                      ; preds = %93
    store i8 0, i8* %m.550, align 1, !tbaa !49
    br label %100
  
  ; <label>:100                                     ; preds = %99, %97, %.lr.ph53
    %passed.11 = phi i32 [ %98, %97 ], [ %passed.1052, %99 ], [ %passed.1052, %.lr.ph53 ]
    %101 = getelementptr inbounds i16, i16* %zptr.549, i32 1
    %102 = getelementptr inbounds i8, i8* %m.550, i32 1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond121 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond121, label %.loopexit, label %.lr.ph53
  
  ; <label>:103                                     ; preds = %0
    %104 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %105 = load i8, i8* %104, align 1, !tbaa !40
    %106 = icmp eq i8 %105, 0
    br i1 %106, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %103
    %107 = icmp ne i32 %n, 0
    br i1 %107, label %.lr.ph71, label %.loopexit
  
  .preheader11:                                     ; preds = %103
    %108 = icmp ne i32 %n, 0
    br i1 %108, label %.lr.ph65, label %.loopexit
  
  .lr.ph71:                                         ; preds = %.preheader13, %118
    %lsr.iv28 = phi i16* [ %scevgep29, %118 ], [ %z, %.preheader13 ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %118 ], [ %n, %.preheader13 ]
    %passed.1270 = phi i32 [ %passed.13, %118 ], [ 0, %.preheader13 ]
    %m.668 = phi i8* [ %120, %118 ], [ %mask, %.preheader13 ]
    %zptr.667 = phi i16* [ %119, %118 ], [ %9, %.preheader13 ]
    %109 = load i8, i8* %m.668, align 1, !tbaa !49
    %110 = icmp eq i8 %109, 0
    br i1 %110, label %118, label %111
  
  ; <label>:111                                     ; preds = %.lr.ph71
    %112 = load i16, i16* %lsr.iv28, align 2, !tbaa !50
    %113 = load i16, i16* %zptr.667, align 2, !tbaa !50
    %114 = icmp ugt i16 %112, %113
    br i1 %114, label %115, label %117
  
  ; <label>:115                                     ; preds = %111
    store i16 %112, i16* %zptr.667, align 2, !tbaa !50
    %116 = add i32 %passed.1270, 1
    br label %118
  
  ; <label>:117                                     ; preds = %111
    store i8 0, i8* %m.668, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %117, %115, %.lr.ph71
    %passed.13 = phi i32 [ %116, %115 ], [ %passed.1270, %117 ], [ %passed.1270, %.lr.ph71 ]
    %119 = getelementptr inbounds i16, i16* %zptr.667, i32 1
    %120 = getelementptr inbounds i8, i8* %m.668, i32 1
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep29 = getelementptr i16, i16* %lsr.iv28, i32 1
    %exitcond124 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond124, label %.loopexit, label %.lr.ph71
  
  .lr.ph65:                                         ; preds = %.preheader11, %130
    %lsr.iv24 = phi i16* [ %scevgep25, %130 ], [ %z, %.preheader11 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %130 ], [ %n, %.preheader11 ]
    %passed.1464 = phi i32 [ %passed.15, %130 ], [ 0, %.preheader11 ]
    %m.762 = phi i8* [ %132, %130 ], [ %mask, %.preheader11 ]
    %zptr.761 = phi i16* [ %131, %130 ], [ %9, %.preheader11 ]
    %121 = load i8, i8* %m.762, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %130, label %123
  
  ; <label>:123                                     ; preds = %.lr.ph65
    %124 = load i16, i16* %lsr.iv24, align 2, !tbaa !50
    %125 = load i16, i16* %zptr.761, align 2, !tbaa !50
    %126 = icmp ugt i16 %124, %125
    br i1 %126, label %127, label %129
  
  ; <label>:127                                     ; preds = %123
    %128 = add i32 %passed.1464, 1
    br label %130
  
  ; <label>:129                                     ; preds = %123
    store i8 0, i8* %m.762, align 1, !tbaa !49
    br label %130
  
  ; <label>:130                                     ; preds = %129, %127, %.lr.ph65
    %passed.15 = phi i32 [ %128, %127 ], [ %passed.1464, %129 ], [ %passed.1464, %.lr.ph65 ]
    %131 = getelementptr inbounds i16, i16* %zptr.761, i32 1
    %132 = getelementptr inbounds i8, i8* %m.762, i32 1
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i16, i16* %lsr.iv24, i32 1
    %exitcond123 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond123, label %.loopexit, label %.lr.ph65
  
  ; <label>:133                                     ; preds = %0
    %134 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %135 = load i8, i8* %134, align 1, !tbaa !40
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %133
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph83, label %.loopexit
  
  .preheader15:                                     ; preds = %133
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph77, label %.loopexit
  
  .lr.ph83:                                         ; preds = %.preheader17, %148
    %lsr.iv36 = phi i16* [ %scevgep37, %148 ], [ %z, %.preheader17 ]
    %lsr.iv34 = phi i32 [ %lsr.iv.next35, %148 ], [ %n, %.preheader17 ]
    %passed.1682 = phi i32 [ %passed.17, %148 ], [ 0, %.preheader17 ]
    %m.880 = phi i8* [ %150, %148 ], [ %mask, %.preheader17 ]
    %zptr.879 = phi i16* [ %149, %148 ], [ %9, %.preheader17 ]
    %139 = load i8, i8* %m.880, align 1, !tbaa !49
    %140 = icmp eq i8 %139, 0
    br i1 %140, label %148, label %141
  
  ; <label>:141                                     ; preds = %.lr.ph83
    %142 = load i16, i16* %lsr.iv36, align 2, !tbaa !50
    %143 = load i16, i16* %zptr.879, align 2, !tbaa !50
    %144 = icmp eq i16 %142, %143
    br i1 %144, label %147, label %145
  
  ; <label>:145                                     ; preds = %141
    store i16 %142, i16* %zptr.879, align 2, !tbaa !50
    %146 = add i32 %passed.1682, 1
    br label %148
  
  ; <label>:147                                     ; preds = %141
    store i8 0, i8* %m.880, align 1, !tbaa !49
    br label %148
  
  ; <label>:148                                     ; preds = %147, %145, %.lr.ph83
    %passed.17 = phi i32 [ %146, %145 ], [ %passed.1682, %147 ], [ %passed.1682, %.lr.ph83 ]
    %149 = getelementptr inbounds i16, i16* %zptr.879, i32 1
    %150 = getelementptr inbounds i8, i8* %m.880, i32 1
    %lsr.iv.next35 = add i32 %lsr.iv34, -1
    %scevgep37 = getelementptr i16, i16* %lsr.iv36, i32 1
    %exitcond126 = icmp eq i32 %lsr.iv.next35, 0
    br i1 %exitcond126, label %.loopexit, label %.lr.ph83
  
  .lr.ph77:                                         ; preds = %.preheader15, %160
    %lsr.iv32 = phi i16* [ %scevgep33, %160 ], [ %z, %.preheader15 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %160 ], [ %n, %.preheader15 ]
    %passed.1876 = phi i32 [ %passed.19, %160 ], [ 0, %.preheader15 ]
    %m.974 = phi i8* [ %162, %160 ], [ %mask, %.preheader15 ]
    %zptr.973 = phi i16* [ %161, %160 ], [ %9, %.preheader15 ]
    %151 = load i8, i8* %m.974, align 1, !tbaa !49
    %152 = icmp eq i8 %151, 0
    br i1 %152, label %160, label %153
  
  ; <label>:153                                     ; preds = %.lr.ph77
    %154 = load i16, i16* %lsr.iv32, align 2, !tbaa !50
    %155 = load i16, i16* %zptr.973, align 2, !tbaa !50
    %156 = icmp eq i16 %154, %155
    br i1 %156, label %159, label %157
  
  ; <label>:157                                     ; preds = %153
    %158 = add i32 %passed.1876, 1
    br label %160
  
  ; <label>:159                                     ; preds = %153
    store i8 0, i8* %m.974, align 1, !tbaa !49
    br label %160
  
  ; <label>:160                                     ; preds = %159, %157, %.lr.ph77
    %passed.19 = phi i32 [ %158, %157 ], [ %passed.1876, %159 ], [ %passed.1876, %.lr.ph77 ]
    %161 = getelementptr inbounds i16, i16* %zptr.973, i32 1
    %162 = getelementptr inbounds i8, i8* %m.974, i32 1
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i16, i16* %lsr.iv32, i32 1
    %exitcond125 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond125, label %.loopexit, label %.lr.ph77
  
  ; <label>:163                                     ; preds = %0
    %164 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %165 = load i8, i8* %164, align 1, !tbaa !40
    %166 = icmp eq i8 %165, 0
    br i1 %166, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %163
    %167 = icmp ne i32 %n, 0
    br i1 %167, label %.lr.ph95, label %.loopexit
  
  .preheader19:                                     ; preds = %163
    %168 = icmp ne i32 %n, 0
    br i1 %168, label %.lr.ph89, label %.loopexit
  
  .lr.ph95:                                         ; preds = %.preheader21, %178
    %lsr.iv44 = phi i16* [ %scevgep45, %178 ], [ %z, %.preheader21 ]
    %lsr.iv42 = phi i32 [ %lsr.iv.next43, %178 ], [ %n, %.preheader21 ]
    %passed.2094 = phi i32 [ %passed.21, %178 ], [ 0, %.preheader21 ]
    %m.1092 = phi i8* [ %180, %178 ], [ %mask, %.preheader21 ]
    %zptr.1091 = phi i16* [ %179, %178 ], [ %9, %.preheader21 ]
    %169 = load i8, i8* %m.1092, align 1, !tbaa !49
    %170 = icmp eq i8 %169, 0
    br i1 %170, label %178, label %171
  
  ; <label>:171                                     ; preds = %.lr.ph95
    %172 = load i16, i16* %lsr.iv44, align 2, !tbaa !50
    %173 = load i16, i16* %zptr.1091, align 2, !tbaa !50
    %174 = icmp eq i16 %172, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %171
    store i16 %172, i16* %zptr.1091, align 2, !tbaa !50
    %176 = add i32 %passed.2094, 1
    br label %178
  
  ; <label>:177                                     ; preds = %171
    store i8 0, i8* %m.1092, align 1, !tbaa !49
    br label %178
  
  ; <label>:178                                     ; preds = %177, %175, %.lr.ph95
    %passed.21 = phi i32 [ %176, %175 ], [ %passed.2094, %177 ], [ %passed.2094, %.lr.ph95 ]
    %179 = getelementptr inbounds i16, i16* %zptr.1091, i32 1
    %180 = getelementptr inbounds i8, i8* %m.1092, i32 1
    %lsr.iv.next43 = add i32 %lsr.iv42, -1
    %scevgep45 = getelementptr i16, i16* %lsr.iv44, i32 1
    %exitcond128 = icmp eq i32 %lsr.iv.next43, 0
    br i1 %exitcond128, label %.loopexit, label %.lr.ph95
  
  .lr.ph89:                                         ; preds = %.preheader19, %190
    %lsr.iv40 = phi i16* [ %scevgep41, %190 ], [ %z, %.preheader19 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %190 ], [ %n, %.preheader19 ]
    %passed.2288 = phi i32 [ %passed.23, %190 ], [ 0, %.preheader19 ]
    %m.1186 = phi i8* [ %192, %190 ], [ %mask, %.preheader19 ]
    %zptr.1185 = phi i16* [ %191, %190 ], [ %9, %.preheader19 ]
    %181 = load i8, i8* %m.1186, align 1, !tbaa !49
    %182 = icmp eq i8 %181, 0
    br i1 %182, label %190, label %183
  
  ; <label>:183                                     ; preds = %.lr.ph89
    %184 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %185 = load i16, i16* %zptr.1185, align 2, !tbaa !50
    %186 = icmp eq i16 %184, %185
    br i1 %186, label %187, label %189
  
  ; <label>:187                                     ; preds = %183
    %188 = add i32 %passed.2288, 1
    br label %190
  
  ; <label>:189                                     ; preds = %183
    store i8 0, i8* %m.1186, align 1, !tbaa !49
    br label %190
  
  ; <label>:190                                     ; preds = %189, %187, %.lr.ph89
    %passed.23 = phi i32 [ %188, %187 ], [ %passed.2288, %189 ], [ %passed.2288, %.lr.ph89 ]
    %191 = getelementptr inbounds i16, i16* %zptr.1185, i32 1
    %192 = getelementptr inbounds i8, i8* %m.1186, i32 1
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %exitcond127 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond127, label %.loopexit, label %.lr.ph89
  
  ; <label>:193                                     ; preds = %0
    %194 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %195 = load i8, i8* %194, align 1, !tbaa !40
    %196 = icmp eq i8 %195, 0
    br i1 %196, label %.loopexit, label %.preheader23
  
  .preheader23:                                     ; preds = %193
    %197 = icmp eq i32 %n, 0
    br i1 %197, label %.loopexit, label %.lr.ph101
  
  .lr.ph101:                                        ; preds = %.preheader23, %203
    %lsr.iv48 = phi i16* [ %scevgep49, %203 ], [ %z, %.preheader23 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %203 ], [ %n, %.preheader23 ]
    %passed.24100 = phi i32 [ %passed.25, %203 ], [ 0, %.preheader23 ]
    %m.1298 = phi i8* [ %205, %203 ], [ %mask, %.preheader23 ]
    %zptr.1297 = phi i16* [ %204, %203 ], [ %9, %.preheader23 ]
    %198 = load i8, i8* %m.1298, align 1, !tbaa !49
    %199 = icmp eq i8 %198, 0
    br i1 %199, label %203, label %200
  
  ; <label>:200                                     ; preds = %.lr.ph101
    %201 = load i16, i16* %lsr.iv48, align 2, !tbaa !50
    store i16 %201, i16* %zptr.1297, align 2, !tbaa !50
    %202 = add i32 %passed.24100, 1
    br label %203
  
  ; <label>:203                                     ; preds = %200, %.lr.ph101
    %passed.25 = phi i32 [ %202, %200 ], [ %passed.24100, %.lr.ph101 ]
    %204 = getelementptr inbounds i16, i16* %zptr.1297, i32 1
    %205 = getelementptr inbounds i8, i8* %m.1298, i32 1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i16, i16* %lsr.iv48, i32 1
    %exitcond129 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond129, label %.loopexit, label %.lr.ph101
  
  ; <label>:206                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %203, %178, %190, %148, %160, %118, %130, %88, %100, %58, %70, %28, %40, %.preheader23, %193, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph104.preheader, %.preheader25
    %passed.26 = phi i32 [ %n, %193 ], [ 0, %.preheader ], [ 0, %.preheader1 ], [ 0, %.preheader3 ], [ 0, %.preheader5 ], [ 0, %.preheader7 ], [ 0, %.preheader9 ], [ 0, %.preheader11 ], [ 0, %.preheader13 ], [ 0, %.preheader15 ], [ 0, %.preheader17 ], [ 0, %.preheader19 ], [ 0, %.preheader21 ], [ 0, %.preheader23 ], [ 0, %.preheader25 ], [ 0, %.lr.ph104.preheader ], [ %passed.3, %40 ], [ %passed.1, %28 ], [ %passed.7, %70 ], [ %passed.5, %58 ], [ %passed.11, %100 ], [ %passed.9, %88 ], [ %passed.15, %130 ], [ %passed.13, %118 ], [ %passed.19, %160 ], [ %passed.17, %148 ], [ %passed.23, %190 ], [ %passed.21, %178 ], [ %passed.25, %203 ]
    ret i32 %passed.26
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ult i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ugt i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_test_pixels_generic(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %2 = load i32, i32* %1, align 4, !tbaa !38
    switch i32 %2, label %295 [
      i32 513, label %4
      i32 515, label %49
      i32 518, label %94
      i32 516, label %139
      i32 517, label %184
      i32 514, label %229
      i32 519, label %274
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %3 = icmp eq i32 %n, 0
    br i1 %3, label %.loopexit, label %.lr.ph53.preheader
  
  .lr.ph53.preheader:                               ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %6 = load i8, i8* %5, align 1, !tbaa !40
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %4
    %8 = icmp ne i32 %n, 0
    br i1 %8, label %.lr.ph29, label %.loopexit
  
  .lr.ph29:                                         ; preds = %.preheader1
    br label %10
  
  .preheader:                                       ; preds = %4
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %30
  
  ; <label>:10                                      ; preds = %29, %.lr.ph29
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %mask, %.lr.ph29 ]
    %lsr.iv14 = phi i32* [ %scevgep15, %29 ], [ %y, %.lr.ph29 ]
    %lsr.iv12 = phi i32* [ %scevgep13, %29 ], [ %x, %.lr.ph29 ]
    %lsr.iv10 = phi i16* [ %scevgep11, %29 ], [ %z, %.lr.ph29 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %29 ], [ %n, %.lr.ph29 ]
    %11 = load i8, i8* %lsr.iv16, align 1, !tbaa !49
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %29, label %13
  
  ; <label>:13                                      ; preds = %10
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr128 = add i32 %sunkaddr, 2024
    %sunkaddr129 = inttoptr i32 %sunkaddr128 to %struct.gl_frame_buffer**
    %14 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr129, align 4, !tbaa !45
    %15 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 3
    %16 = load i16*, i16** %15, align 4, !tbaa !46
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 1
    %18 = load i32, i32* %17, align 4, !tbaa !48
    %19 = load i32, i32* %lsr.iv14, align 4, !tbaa !51
    %20 = mul nsw i32 %19, %18
    %21 = getelementptr inbounds i16, i16* %16, i32 %20
    %22 = load i32, i32* %lsr.iv12, align 4, !tbaa !51
    %23 = getelementptr inbounds i16, i16* %21, i32 %22
    %24 = load i16, i16* %lsr.iv10, align 2, !tbaa !50
    %25 = load i16, i16* %23, align 2, !tbaa !50
    %26 = icmp ult i16 %24, %25
    br i1 %26, label %27, label %28
  
  ; <label>:27                                      ; preds = %13
    store i16 %24, i16* %23, align 2, !tbaa !50
    br label %29
  
  ; <label>:28                                      ; preds = %13
    store i8 0, i8* %lsr.iv16, align 1, !tbaa !49
    br label %29
  
  ; <label>:29                                      ; preds = %28, %27, %10
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i16, i16* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i32, i32* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i32, i32* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %exitcond67 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond67, label %.loopexit, label %10
  
  ; <label>:30                                      ; preds = %48, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %48 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %48 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %48 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %48 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %48 ], [ %n, %.lr.ph ]
    %31 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %48, label %33
  
  ; <label>:33                                      ; preds = %30
    %sunkaddr130 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr131 = add i32 %sunkaddr130, 2024
    %sunkaddr132 = inttoptr i32 %sunkaddr131 to %struct.gl_frame_buffer**
    %34 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr132, align 4, !tbaa !45
    %35 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 3
    %36 = load i16*, i16** %35, align 4, !tbaa !46
    %37 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 1
    %38 = load i32, i32* %37, align 4, !tbaa !48
    %39 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %40 = mul nsw i32 %39, %38
    %41 = getelementptr inbounds i16, i16* %36, i32 %40
    %42 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %43 = getelementptr inbounds i16, i16* %41, i32 %42
    %44 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %45 = load i16, i16* %43, align 2, !tbaa !50
    %46 = icmp ult i16 %44, %45
    br i1 %46, label %48, label %47
  
  ; <label>:47                                      ; preds = %33
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %48
  
  ; <label>:48                                      ; preds = %47, %33, %30
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %30
  
  ; <label>:49                                      ; preds = %0
    %50 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %51 = load i8, i8* %50, align 1, !tbaa !40
    %52 = icmp eq i8 %51, 0
    br i1 %52, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %49
    %53 = icmp ne i32 %n, 0
    br i1 %53, label %.lr.ph33, label %.loopexit
  
  .lr.ph33:                                         ; preds = %.preheader5
    br label %55
  
  .preheader3:                                      ; preds = %49
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph31, label %.loopexit
  
  .lr.ph31:                                         ; preds = %.preheader3
    br label %75
  
  ; <label>:55                                      ; preds = %74, %.lr.ph33
    %lsr.iv36 = phi i8* [ %scevgep37, %74 ], [ %mask, %.lr.ph33 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %74 ], [ %y, %.lr.ph33 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %74 ], [ %x, %.lr.ph33 ]
    %lsr.iv30 = phi i16* [ %scevgep31, %74 ], [ %z, %.lr.ph33 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %74 ], [ %n, %.lr.ph33 ]
    %56 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %57 = icmp eq i8 %56, 0
    br i1 %57, label %74, label %58
  
  ; <label>:58                                      ; preds = %55
    %sunkaddr133 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr134 = add i32 %sunkaddr133, 2024
    %sunkaddr135 = inttoptr i32 %sunkaddr134 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr135, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 3
    %61 = load i16*, i16** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv34, align 4, !tbaa !51
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i16, i16* %61, i32 %65
    %67 = load i32, i32* %lsr.iv32, align 4, !tbaa !51
    %68 = getelementptr inbounds i16, i16* %66, i32 %67
    %69 = load i16, i16* %lsr.iv30, align 2, !tbaa !50
    %70 = load i16, i16* %68, align 2, !tbaa !50
    %71 = icmp ugt i16 %69, %70
    br i1 %71, label %73, label %72
  
  ; <label>:72                                      ; preds = %58
    store i16 %69, i16* %68, align 2, !tbaa !50
    br label %74
  
  ; <label>:73                                      ; preds = %58
    store i8 0, i8* %lsr.iv36, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %73, %72, %55
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr i16, i16* %lsr.iv30, i32 1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond69 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond69, label %.loopexit, label %55
  
  ; <label>:75                                      ; preds = %93, %.lr.ph31
    %lsr.iv26 = phi i8* [ %scevgep27, %93 ], [ %mask, %.lr.ph31 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %93 ], [ %y, %.lr.ph31 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %93 ], [ %x, %.lr.ph31 ]
    %lsr.iv20 = phi i16* [ %scevgep21, %93 ], [ %z, %.lr.ph31 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %93 ], [ %n, %.lr.ph31 ]
    %76 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %77 = icmp eq i8 %76, 0
    br i1 %77, label %93, label %78
  
  ; <label>:78                                      ; preds = %75
    %sunkaddr136 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr137 = add i32 %sunkaddr136, 2024
    %sunkaddr138 = inttoptr i32 %sunkaddr137 to %struct.gl_frame_buffer**
    %79 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr138, align 4, !tbaa !45
    %80 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 3
    %81 = load i16*, i16** %80, align 4, !tbaa !46
    %82 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 1
    %83 = load i32, i32* %82, align 4, !tbaa !48
    %84 = load i32, i32* %lsr.iv24, align 4, !tbaa !51
    %85 = mul nsw i32 %84, %83
    %86 = getelementptr inbounds i16, i16* %81, i32 %85
    %87 = load i32, i32* %lsr.iv22, align 4, !tbaa !51
    %88 = getelementptr inbounds i16, i16* %86, i32 %87
    %89 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %90 = load i16, i16* %88, align 2, !tbaa !50
    %91 = icmp ugt i16 %89, %90
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %78
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %93
  
  ; <label>:93                                      ; preds = %92, %78, %75
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond68 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond68, label %.loopexit, label %75
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %96 = load i8, i8* %95, align 1, !tbaa !40
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %94
    %98 = icmp ne i32 %n, 0
    br i1 %98, label %.lr.ph37, label %.loopexit
  
  .lr.ph37:                                         ; preds = %.preheader9
    br label %100
  
  .preheader7:                                      ; preds = %94
    %99 = icmp ne i32 %n, 0
    br i1 %99, label %.lr.ph35, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader7
    br label %120
  
  ; <label>:100                                     ; preds = %119, %.lr.ph37
    %lsr.iv56 = phi i8* [ %scevgep57, %119 ], [ %mask, %.lr.ph37 ]
    %lsr.iv54 = phi i32* [ %scevgep55, %119 ], [ %y, %.lr.ph37 ]
    %lsr.iv52 = phi i32* [ %scevgep53, %119 ], [ %x, %.lr.ph37 ]
    %lsr.iv50 = phi i16* [ %scevgep51, %119 ], [ %z, %.lr.ph37 ]
    %lsr.iv48 = phi i32 [ %lsr.iv.next49, %119 ], [ %n, %.lr.ph37 ]
    %101 = load i8, i8* %lsr.iv56, align 1, !tbaa !49
    %102 = icmp eq i8 %101, 0
    br i1 %102, label %119, label %103
  
  ; <label>:103                                     ; preds = %100
    %sunkaddr139 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr140 = add i32 %sunkaddr139, 2024
    %sunkaddr141 = inttoptr i32 %sunkaddr140 to %struct.gl_frame_buffer**
    %104 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr141, align 4, !tbaa !45
    %105 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 3
    %106 = load i16*, i16** %105, align 4, !tbaa !46
    %107 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 1
    %108 = load i32, i32* %107, align 4, !tbaa !48
    %109 = load i32, i32* %lsr.iv54, align 4, !tbaa !51
    %110 = mul nsw i32 %109, %108
    %111 = getelementptr inbounds i16, i16* %106, i32 %110
    %112 = load i32, i32* %lsr.iv52, align 4, !tbaa !51
    %113 = getelementptr inbounds i16, i16* %111, i32 %112
    %114 = load i16, i16* %lsr.iv50, align 2, !tbaa !50
    %115 = load i16, i16* %113, align 2, !tbaa !50
    %116 = icmp ult i16 %114, %115
    br i1 %116, label %118, label %117
  
  ; <label>:117                                     ; preds = %103
    store i16 %114, i16* %113, align 2, !tbaa !50
    br label %119
  
  ; <label>:118                                     ; preds = %103
    store i8 0, i8* %lsr.iv56, align 1, !tbaa !49
    br label %119
  
  ; <label>:119                                     ; preds = %118, %117, %100
    %lsr.iv.next49 = add i32 %lsr.iv48, -1
    %scevgep51 = getelementptr i16, i16* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i32, i32* %lsr.iv52, i32 1
    %scevgep55 = getelementptr i32, i32* %lsr.iv54, i32 1
    %scevgep57 = getelementptr i8, i8* %lsr.iv56, i32 1
    %exitcond71 = icmp eq i32 %lsr.iv.next49, 0
    br i1 %exitcond71, label %.loopexit, label %100
  
  ; <label>:120                                     ; preds = %138, %.lr.ph35
    %lsr.iv46 = phi i8* [ %scevgep47, %138 ], [ %mask, %.lr.ph35 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %138 ], [ %y, %.lr.ph35 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %138 ], [ %x, %.lr.ph35 ]
    %lsr.iv40 = phi i16* [ %scevgep41, %138 ], [ %z, %.lr.ph35 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %138 ], [ %n, %.lr.ph35 ]
    %121 = load i8, i8* %lsr.iv46, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %138, label %123
  
  ; <label>:123                                     ; preds = %120
    %sunkaddr142 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr143 = add i32 %sunkaddr142, 2024
    %sunkaddr144 = inttoptr i32 %sunkaddr143 to %struct.gl_frame_buffer**
    %124 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr144, align 4, !tbaa !45
    %125 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 3
    %126 = load i16*, i16** %125, align 4, !tbaa !46
    %127 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 1
    %128 = load i32, i32* %127, align 4, !tbaa !48
    %129 = load i32, i32* %lsr.iv44, align 4, !tbaa !51
    %130 = mul nsw i32 %129, %128
    %131 = getelementptr inbounds i16, i16* %126, i32 %130
    %132 = load i32, i32* %lsr.iv42, align 4, !tbaa !51
    %133 = getelementptr inbounds i16, i16* %131, i32 %132
    %134 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %135 = load i16, i16* %133, align 2, !tbaa !50
    %136 = icmp ult i16 %134, %135
    br i1 %136, label %137, label %138
  
  ; <label>:137                                     ; preds = %123
    store i8 0, i8* %lsr.iv46, align 1, !tbaa !49
    br label %138
  
  ; <label>:138                                     ; preds = %137, %123, %120
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i8, i8* %lsr.iv46, i32 1
    %exitcond70 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond70, label %.loopexit, label %120
  
  ; <label>:139                                     ; preds = %0
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %141 = load i8, i8* %140, align 1, !tbaa !40
    %142 = icmp eq i8 %141, 0
    br i1 %142, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %139
    %143 = icmp ne i32 %n, 0
    br i1 %143, label %.lr.ph41, label %.loopexit
  
  .lr.ph41:                                         ; preds = %.preheader13
    br label %145
  
  .preheader11:                                     ; preds = %139
    %144 = icmp ne i32 %n, 0
    br i1 %144, label %.lr.ph39, label %.loopexit
  
  .lr.ph39:                                         ; preds = %.preheader11
    br label %165
  
  ; <label>:145                                     ; preds = %164, %.lr.ph41
    %lsr.iv76 = phi i8* [ %scevgep77, %164 ], [ %mask, %.lr.ph41 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %164 ], [ %y, %.lr.ph41 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %164 ], [ %x, %.lr.ph41 ]
    %lsr.iv70 = phi i16* [ %scevgep71, %164 ], [ %z, %.lr.ph41 ]
    %lsr.iv68 = phi i32 [ %lsr.iv.next69, %164 ], [ %n, %.lr.ph41 ]
    %146 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %147 = icmp eq i8 %146, 0
    br i1 %147, label %164, label %148
  
  ; <label>:148                                     ; preds = %145
    %sunkaddr145 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr146 = add i32 %sunkaddr145, 2024
    %sunkaddr147 = inttoptr i32 %sunkaddr146 to %struct.gl_frame_buffer**
    %149 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr147, align 4, !tbaa !45
    %150 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 3
    %151 = load i16*, i16** %150, align 4, !tbaa !46
    %152 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 1
    %153 = load i32, i32* %152, align 4, !tbaa !48
    %154 = load i32, i32* %lsr.iv74, align 4, !tbaa !51
    %155 = mul nsw i32 %154, %153
    %156 = getelementptr inbounds i16, i16* %151, i32 %155
    %157 = load i32, i32* %lsr.iv72, align 4, !tbaa !51
    %158 = getelementptr inbounds i16, i16* %156, i32 %157
    %159 = load i16, i16* %lsr.iv70, align 2, !tbaa !50
    %160 = load i16, i16* %158, align 2, !tbaa !50
    %161 = icmp ugt i16 %159, %160
    br i1 %161, label %162, label %163
  
  ; <label>:162                                     ; preds = %148
    store i16 %159, i16* %158, align 2, !tbaa !50
    br label %164
  
  ; <label>:163                                     ; preds = %148
    store i8 0, i8* %lsr.iv76, align 1, !tbaa !49
    br label %164
  
  ; <label>:164                                     ; preds = %163, %162, %145
    %lsr.iv.next69 = add i32 %lsr.iv68, -1
    %scevgep71 = getelementptr i16, i16* %lsr.iv70, i32 1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond73 = icmp eq i32 %lsr.iv.next69, 0
    br i1 %exitcond73, label %.loopexit, label %145
  
  ; <label>:165                                     ; preds = %183, %.lr.ph39
    %lsr.iv66 = phi i8* [ %scevgep67, %183 ], [ %mask, %.lr.ph39 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %183 ], [ %y, %.lr.ph39 ]
    %lsr.iv62 = phi i32* [ %scevgep63, %183 ], [ %x, %.lr.ph39 ]
    %lsr.iv60 = phi i16* [ %scevgep61, %183 ], [ %z, %.lr.ph39 ]
    %lsr.iv58 = phi i32 [ %lsr.iv.next59, %183 ], [ %n, %.lr.ph39 ]
    %166 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %167 = icmp eq i8 %166, 0
    br i1 %167, label %183, label %168
  
  ; <label>:168                                     ; preds = %165
    %sunkaddr148 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr149 = add i32 %sunkaddr148, 2024
    %sunkaddr150 = inttoptr i32 %sunkaddr149 to %struct.gl_frame_buffer**
    %169 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr150, align 4, !tbaa !45
    %170 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 3
    %171 = load i16*, i16** %170, align 4, !tbaa !46
    %172 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 1
    %173 = load i32, i32* %172, align 4, !tbaa !48
    %174 = load i32, i32* %lsr.iv64, align 4, !tbaa !51
    %175 = mul nsw i32 %174, %173
    %176 = getelementptr inbounds i16, i16* %171, i32 %175
    %177 = load i32, i32* %lsr.iv62, align 4, !tbaa !51
    %178 = getelementptr inbounds i16, i16* %176, i32 %177
    %179 = load i16, i16* %lsr.iv60, align 2, !tbaa !50
    %180 = load i16, i16* %178, align 2, !tbaa !50
    %181 = icmp ugt i16 %179, %180
    br i1 %181, label %183, label %182
  
  ; <label>:182                                     ; preds = %168
    store i8 0, i8* %lsr.iv66, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %182, %168, %165
    %lsr.iv.next59 = add i32 %lsr.iv58, -1
    %scevgep61 = getelementptr i16, i16* %lsr.iv60, i32 1
    %scevgep63 = getelementptr i32, i32* %lsr.iv62, i32 1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond72 = icmp eq i32 %lsr.iv.next59, 0
    br i1 %exitcond72, label %.loopexit, label %165
  
  ; <label>:184                                     ; preds = %0
    %185 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %186 = load i8, i8* %185, align 1, !tbaa !40
    %187 = icmp eq i8 %186, 0
    br i1 %187, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %184
    %188 = icmp ne i32 %n, 0
    br i1 %188, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %.preheader17
    br label %190
  
  .preheader15:                                     ; preds = %184
    %189 = icmp ne i32 %n, 0
    br i1 %189, label %.lr.ph43, label %.loopexit
  
  .lr.ph43:                                         ; preds = %.preheader15
    br label %210
  
  ; <label>:190                                     ; preds = %209, %.lr.ph45
    %lsr.iv96 = phi i8* [ %scevgep97, %209 ], [ %mask, %.lr.ph45 ]
    %lsr.iv94 = phi i32* [ %scevgep95, %209 ], [ %y, %.lr.ph45 ]
    %lsr.iv92 = phi i32* [ %scevgep93, %209 ], [ %x, %.lr.ph45 ]
    %lsr.iv90 = phi i16* [ %scevgep91, %209 ], [ %z, %.lr.ph45 ]
    %lsr.iv88 = phi i32 [ %lsr.iv.next89, %209 ], [ %n, %.lr.ph45 ]
    %191 = load i8, i8* %lsr.iv96, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %209, label %193
  
  ; <label>:193                                     ; preds = %190
    %sunkaddr151 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr152 = add i32 %sunkaddr151, 2024
    %sunkaddr153 = inttoptr i32 %sunkaddr152 to %struct.gl_frame_buffer**
    %194 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr153, align 4, !tbaa !45
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 3
    %196 = load i16*, i16** %195, align 4, !tbaa !46
    %197 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !48
    %199 = load i32, i32* %lsr.iv94, align 4, !tbaa !51
    %200 = mul nsw i32 %199, %198
    %201 = getelementptr inbounds i16, i16* %196, i32 %200
    %202 = load i32, i32* %lsr.iv92, align 4, !tbaa !51
    %203 = getelementptr inbounds i16, i16* %201, i32 %202
    %204 = load i16, i16* %lsr.iv90, align 2, !tbaa !50
    %205 = load i16, i16* %203, align 2, !tbaa !50
    %206 = icmp eq i16 %204, %205
    br i1 %206, label %208, label %207
  
  ; <label>:207                                     ; preds = %193
    store i16 %204, i16* %203, align 2, !tbaa !50
    br label %209
  
  ; <label>:208                                     ; preds = %193
    store i8 0, i8* %lsr.iv96, align 1, !tbaa !49
    br label %209
  
  ; <label>:209                                     ; preds = %208, %207, %190
    %lsr.iv.next89 = add i32 %lsr.iv88, -1
    %scevgep91 = getelementptr i16, i16* %lsr.iv90, i32 1
    %scevgep93 = getelementptr i32, i32* %lsr.iv92, i32 1
    %scevgep95 = getelementptr i32, i32* %lsr.iv94, i32 1
    %scevgep97 = getelementptr i8, i8* %lsr.iv96, i32 1
    %exitcond75 = icmp eq i32 %lsr.iv.next89, 0
    br i1 %exitcond75, label %.loopexit, label %190
  
  ; <label>:210                                     ; preds = %228, %.lr.ph43
    %lsr.iv86 = phi i8* [ %scevgep87, %228 ], [ %mask, %.lr.ph43 ]
    %lsr.iv84 = phi i32* [ %scevgep85, %228 ], [ %y, %.lr.ph43 ]
    %lsr.iv82 = phi i32* [ %scevgep83, %228 ], [ %x, %.lr.ph43 ]
    %lsr.iv80 = phi i16* [ %scevgep81, %228 ], [ %z, %.lr.ph43 ]
    %lsr.iv78 = phi i32 [ %lsr.iv.next79, %228 ], [ %n, %.lr.ph43 ]
    %211 = load i8, i8* %lsr.iv86, align 1, !tbaa !49
    %212 = icmp eq i8 %211, 0
    br i1 %212, label %228, label %213
  
  ; <label>:213                                     ; preds = %210
    %sunkaddr154 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr155 = add i32 %sunkaddr154, 2024
    %sunkaddr156 = inttoptr i32 %sunkaddr155 to %struct.gl_frame_buffer**
    %214 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr156, align 4, !tbaa !45
    %215 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 3
    %216 = load i16*, i16** %215, align 4, !tbaa !46
    %217 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 1
    %218 = load i32, i32* %217, align 4, !tbaa !48
    %219 = load i32, i32* %lsr.iv84, align 4, !tbaa !51
    %220 = mul nsw i32 %219, %218
    %221 = getelementptr inbounds i16, i16* %216, i32 %220
    %222 = load i32, i32* %lsr.iv82, align 4, !tbaa !51
    %223 = getelementptr inbounds i16, i16* %221, i32 %222
    %224 = load i16, i16* %lsr.iv80, align 2, !tbaa !50
    %225 = load i16, i16* %223, align 2, !tbaa !50
    %226 = icmp eq i16 %224, %225
    br i1 %226, label %227, label %228
  
  ; <label>:227                                     ; preds = %213
    store i8 0, i8* %lsr.iv86, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %227, %213, %210
    %lsr.iv.next79 = add i32 %lsr.iv78, -1
    %scevgep81 = getelementptr i16, i16* %lsr.iv80, i32 1
    %scevgep83 = getelementptr i32, i32* %lsr.iv82, i32 1
    %scevgep85 = getelementptr i32, i32* %lsr.iv84, i32 1
    %scevgep87 = getelementptr i8, i8* %lsr.iv86, i32 1
    %exitcond74 = icmp eq i32 %lsr.iv.next79, 0
    br i1 %exitcond74, label %.loopexit, label %210
  
  ; <label>:229                                     ; preds = %0
    %230 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %231 = load i8, i8* %230, align 1, !tbaa !40
    %232 = icmp eq i8 %231, 0
    br i1 %232, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %229
    %233 = icmp ne i32 %n, 0
    br i1 %233, label %.lr.ph49, label %.loopexit
  
  .lr.ph49:                                         ; preds = %.preheader21
    br label %235
  
  .preheader19:                                     ; preds = %229
    %234 = icmp ne i32 %n, 0
    br i1 %234, label %.lr.ph47, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader19
    br label %255
  
  ; <label>:235                                     ; preds = %254, %.lr.ph49
    %lsr.iv116 = phi i8* [ %scevgep117, %254 ], [ %mask, %.lr.ph49 ]
    %lsr.iv114 = phi i32* [ %scevgep115, %254 ], [ %y, %.lr.ph49 ]
    %lsr.iv112 = phi i32* [ %scevgep113, %254 ], [ %x, %.lr.ph49 ]
    %lsr.iv110 = phi i16* [ %scevgep111, %254 ], [ %z, %.lr.ph49 ]
    %lsr.iv108 = phi i32 [ %lsr.iv.next109, %254 ], [ %n, %.lr.ph49 ]
    %236 = load i8, i8* %lsr.iv116, align 1, !tbaa !49
    %237 = icmp eq i8 %236, 0
    br i1 %237, label %254, label %238
  
  ; <label>:238                                     ; preds = %235
    %sunkaddr157 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr158 = add i32 %sunkaddr157, 2024
    %sunkaddr159 = inttoptr i32 %sunkaddr158 to %struct.gl_frame_buffer**
    %239 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr159, align 4, !tbaa !45
    %240 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 3
    %241 = load i16*, i16** %240, align 4, !tbaa !46
    %242 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 1
    %243 = load i32, i32* %242, align 4, !tbaa !48
    %244 = load i32, i32* %lsr.iv114, align 4, !tbaa !51
    %245 = mul nsw i32 %244, %243
    %246 = getelementptr inbounds i16, i16* %241, i32 %245
    %247 = load i32, i32* %lsr.iv112, align 4, !tbaa !51
    %248 = getelementptr inbounds i16, i16* %246, i32 %247
    %249 = load i16, i16* %lsr.iv110, align 2, !tbaa !50
    %250 = load i16, i16* %248, align 2, !tbaa !50
    %251 = icmp eq i16 %249, %250
    br i1 %251, label %252, label %253
  
  ; <label>:252                                     ; preds = %238
    store i16 %249, i16* %248, align 2, !tbaa !50
    br label %254
  
  ; <label>:253                                     ; preds = %238
    store i8 0, i8* %lsr.iv116, align 1, !tbaa !49
    br label %254
  
  ; <label>:254                                     ; preds = %253, %252, %235
    %lsr.iv.next109 = add i32 %lsr.iv108, -1
    %scevgep111 = getelementptr i16, i16* %lsr.iv110, i32 1
    %scevgep113 = getelementptr i32, i32* %lsr.iv112, i32 1
    %scevgep115 = getelementptr i32, i32* %lsr.iv114, i32 1
    %scevgep117 = getelementptr i8, i8* %lsr.iv116, i32 1
    %exitcond77 = icmp eq i32 %lsr.iv.next109, 0
    br i1 %exitcond77, label %.loopexit, label %235
  
  ; <label>:255                                     ; preds = %273, %.lr.ph47
    %lsr.iv106 = phi i8* [ %scevgep107, %273 ], [ %mask, %.lr.ph47 ]
    %lsr.iv104 = phi i32* [ %scevgep105, %273 ], [ %y, %.lr.ph47 ]
    %lsr.iv102 = phi i32* [ %scevgep103, %273 ], [ %x, %.lr.ph47 ]
    %lsr.iv100 = phi i16* [ %scevgep101, %273 ], [ %z, %.lr.ph47 ]
    %lsr.iv98 = phi i32 [ %lsr.iv.next99, %273 ], [ %n, %.lr.ph47 ]
    %256 = load i8, i8* %lsr.iv106, align 1, !tbaa !49
    %257 = icmp eq i8 %256, 0
    br i1 %257, label %273, label %258
  
  ; <label>:258                                     ; preds = %255
    %sunkaddr160 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr161 = add i32 %sunkaddr160, 2024
    %sunkaddr162 = inttoptr i32 %sunkaddr161 to %struct.gl_frame_buffer**
    %259 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr162, align 4, !tbaa !45
    %260 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 3
    %261 = load i16*, i16** %260, align 4, !tbaa !46
    %262 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 1
    %263 = load i32, i32* %262, align 4, !tbaa !48
    %264 = load i32, i32* %lsr.iv104, align 4, !tbaa !51
    %265 = mul nsw i32 %264, %263
    %266 = getelementptr inbounds i16, i16* %261, i32 %265
    %267 = load i32, i32* %lsr.iv102, align 4, !tbaa !51
    %268 = getelementptr inbounds i16, i16* %266, i32 %267
    %269 = load i16, i16* %lsr.iv100, align 2, !tbaa !50
    %270 = load i16, i16* %268, align 2, !tbaa !50
    %271 = icmp eq i16 %269, %270
    br i1 %271, label %273, label %272
  
  ; <label>:272                                     ; preds = %258
    store i8 0, i8* %lsr.iv106, align 1, !tbaa !49
    br label %273
  
  ; <label>:273                                     ; preds = %272, %258, %255
    %lsr.iv.next99 = add i32 %lsr.iv98, -1
    %scevgep101 = getelementptr i16, i16* %lsr.iv100, i32 1
    %scevgep103 = getelementptr i32, i32* %lsr.iv102, i32 1
    %scevgep105 = getelementptr i32, i32* %lsr.iv104, i32 1
    %scevgep107 = getelementptr i8, i8* %lsr.iv106, i32 1
    %exitcond76 = icmp eq i32 %lsr.iv.next99, 0
    br i1 %exitcond76, label %.loopexit, label %255
  
  ; <label>:274                                     ; preds = %0
    %275 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %276 = load i8, i8* %275, align 1, !tbaa !40
    %277 = icmp ne i8 %276, 0
    %278 = icmp ne i32 %n, 0
    %or.cond = and i1 %277, %278
    br i1 %or.cond, label %.lr.ph51, label %.loopexit
  
  .lr.ph51:                                         ; preds = %274
    br label %279
  
  ; <label>:279                                     ; preds = %294, %.lr.ph51
    %lsr.iv126 = phi i8* [ %scevgep127, %294 ], [ %mask, %.lr.ph51 ]
    %lsr.iv124 = phi i32* [ %scevgep125, %294 ], [ %y, %.lr.ph51 ]
    %lsr.iv122 = phi i32* [ %scevgep123, %294 ], [ %x, %.lr.ph51 ]
    %lsr.iv120 = phi i16* [ %scevgep121, %294 ], [ %z, %.lr.ph51 ]
    %lsr.iv118 = phi i32 [ %lsr.iv.next119, %294 ], [ %n, %.lr.ph51 ]
    %280 = load i8, i8* %lsr.iv126, align 1, !tbaa !49
    %281 = icmp eq i8 %280, 0
    br i1 %281, label %294, label %282
  
  ; <label>:282                                     ; preds = %279
    %sunkaddr163 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr164 = add i32 %sunkaddr163, 2024
    %sunkaddr165 = inttoptr i32 %sunkaddr164 to %struct.gl_frame_buffer**
    %283 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr165, align 4, !tbaa !45
    %284 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 3
    %285 = load i16*, i16** %284, align 4, !tbaa !46
    %286 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 1
    %287 = load i32, i32* %286, align 4, !tbaa !48
    %288 = load i32, i32* %lsr.iv124, align 4, !tbaa !51
    %289 = mul nsw i32 %288, %287
    %290 = getelementptr inbounds i16, i16* %285, i32 %289
    %291 = load i32, i32* %lsr.iv122, align 4, !tbaa !51
    %292 = getelementptr inbounds i16, i16* %290, i32 %291
    %293 = load i16, i16* %lsr.iv120, align 2, !tbaa !50
    store i16 %293, i16* %292, align 2, !tbaa !50
    br label %294
  
  ; <label>:294                                     ; preds = %282, %279
    %lsr.iv.next119 = add i32 %lsr.iv118, -1
    %scevgep121 = getelementptr i16, i16* %lsr.iv120, i32 1
    %scevgep123 = getelementptr i32, i32* %lsr.iv122, i32 1
    %scevgep125 = getelementptr i32, i32* %lsr.iv124, i32 1
    %scevgep127 = getelementptr i8, i8* %lsr.iv126, i32 1
    %exitcond78 = icmp eq i32 %lsr.iv.next119, 0
    br i1 %exitcond78, label %.loopexit, label %279
  
  ; <label>:295                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %294, %254, %273, %209, %228, %164, %183, %119, %138, %74, %93, %29, %48, %274, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph53.preheader, %.preheader25
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ult i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ugt i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_float(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, float* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast float* %depth to i8*
    %8 = shl i32 %n, 2
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 4, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %11 = load i32, i32* %10, align 4, !tbaa !48
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph4.preheader
  
  .lr.ph4.preheader:                                ; preds = %9
    %13 = mul i32 %11, %y
    %14 = add i32 %x, %13
    %scevgep2 = getelementptr i16, i16* %4, i32 %14
    br label %.lr.ph4
  
  .lr.ph4:                                          ; preds = %.lr.ph4, %.lr.ph4.preheader
    %lsr.iv3 = phi i16* [ %scevgep4, %.lr.ph4 ], [ %scevgep2, %.lr.ph4.preheader ]
    %lsr.iv1 = phi float* [ %scevgep, %.lr.ph4 ], [ %depth, %.lr.ph4.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph4 ], [ %n, %.lr.ph4.preheader ]
    %15 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %16 = uitofp i16 %15 to float
    %17 = fmul float %16, 0x3EF0001000000000
    store float %17, float* %lsr.iv1, align 4, !tbaa !52
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr float, float* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %exitcond6 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond6, label %.loopexit, label %.lr.ph4
  
  .loopexit:                                        ; preds = %.lr.ph4, %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_int(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast i16* %depth to i8*
    %8 = shl i32 %n, 1
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 2, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = bitcast i16* %depth to i8*
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    %13 = mul nsw i32 %12, %y
    %14 = getelementptr inbounds i16, i16* %4, i32 %13
    %15 = getelementptr inbounds i16, i16* %14, i32 %x
    %16 = bitcast i16* %15 to i8*
    %17 = shl i32 %n, 1
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %10, i8* %16, i32 %17, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4
  
  ; Function Attrs: nounwind
  define void @gl_alloc_depth_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %10, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast i16* %4 to i8*
    tail call void @free(i8* %7) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 3
    store i16* null, i16** %9, align 4, !tbaa !46
    br label %10
  
  ; <label>:10                                      ; preds = %6, %0
    %11 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %8, %6 ]
    %12 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 1
    %13 = load i32, i32* %12, align 4, !tbaa !48
    %14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 2
    %15 = load i32, i32* %14, align 4, !tbaa !53
    %16 = shl i32 %13, 1
    %17 = mul i32 %16, %15
    %18 = tail call noalias i8* @malloc(i32 signext %17) #5
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 3
    %20 = bitcast i16** %19 to i8**
    store i8* %18, i8** %20, align 4, !tbaa !46
    %21 = icmp eq i8* %18, null
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %10
    %23 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    store i8 0, i8* %23, align 4, !tbaa !54
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0)) #5
    br label %24
  
  ; <label>:24                                      ; preds = %22, %10
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_depth_buffer(%struct.gl_context* nocapture readonly %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    %2 = load float, float* %1, align 4, !tbaa !37
    %3 = fmul float %2, 6.553500e+04
    %4 = fptoui float %3 to i16
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %6 = load %struct.gl_visual*, %struct.gl_visual** %5, align 4, !tbaa !55
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %6, i32 0, i32 13
    %8 = load i32, i32* %7, align 4, !tbaa !56
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %.loopexit, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %11, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 3
    %14 = load i16*, i16** %13, align 4, !tbaa !46
    %15 = icmp eq i16* %14, null
    br i1 %15, label %.loopexit, label %16
  
  ; <label>:16                                      ; preds = %10
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %18 = load i8, i8* %17, align 4, !tbaa !58
    %19 = icmp eq i8 %18, 0
    br i1 %19, label %38, label %20
  
  ; <label>:20                                      ; preds = %16
    %21 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 11
    %22 = load i32, i32* %21, align 4, !tbaa !59
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 12
    %24 = load i32, i32* %23, align 4, !tbaa !60
    %25 = icmp sgt i32 %22, %24
    br i1 %25, label %.loopexit, label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %20
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !48
    %.phi.trans.insert14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 9
    %.pre15 = load i32, i32* %.phi.trans.insert14, align 4, !tbaa !61
    %.phi.trans.insert16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 10
    %.pre17 = load i32, i32* %.phi.trans.insert16, align 4, !tbaa !62
    %26 = add i32 %.pre15, -1
    %27 = sub i32 %26, %.pre17
    br label %28
  
  ; <label>:28                                      ; preds = %35, %.lr.ph11
    %y.010 = phi i32 [ %22, %.lr.ph11 ], [ %36, %35 ]
    %29 = mul nsw i32 %.pre, %y.010
    %30 = getelementptr inbounds i16, i16* %14, i32 %29
    %31 = getelementptr inbounds i16, i16* %30, i32 %.pre15
    br label %32
  
  ; <label>:32                                      ; preds = %32, %28
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %32 ], [ %27, %28 ]
    %d.0 = phi i16* [ %31, %28 ], [ %33, %32 ]
    %33 = getelementptr inbounds i16, i16* %d.0, i32 1
    store i16 %4, i16* %d.0, align 2, !tbaa !50
    %lsr.iv.next18 = add i32 %lsr.iv17, 1
    %34 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %34, label %35, label %32
  
  ; <label>:35                                      ; preds = %32
    %36 = add nsw i32 %y.010, 1
    %37 = icmp slt i32 %y.010, %24
    br i1 %37, label %28, label %.loopexit
  
  ; <label>:38                                      ; preds = %16
    %39 = zext i16 %4 to i32
    %40 = and i32 %39, 255
    %41 = lshr i32 %39, 8
    %42 = icmp eq i32 %40, %41
    br i1 %42, label %43, label %52
  
  ; <label>:43                                      ; preds = %38
    %44 = bitcast i16* %14 to i8*
    %45 = trunc i16 %4 to i8
    %46 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %47 = load i32, i32* %46, align 4, !tbaa !48
    %48 = shl i32 %47, 1
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %50 = load i32, i32* %49, align 4, !tbaa !53
    %51 = mul nsw i32 %48, %50
    tail call void @llvm.memset.p0i8.i32(i8* %44, i8 %45, i32 %51, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:52                                      ; preds = %38
    %53 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %54 = load i32, i32* %53, align 4, !tbaa !48
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !53
    %57 = mul i32 %56, %54
    %58 = icmp sgt i32 %57, 15
    br i1 %58, label %.lr.ph8.preheader, label %.preheader
  
  .lr.ph8.preheader:                                ; preds = %52
    %59 = add i32 %57, -16
    %60 = and i32 %59, -16
    %61 = add i32 %60, 16
    br label %.lr.ph8
  
  .preheader.loopexit:                              ; preds = %.lr.ph8
    %62 = sub i32 %59, %60
    %scevgep = getelementptr i16, i16* %14, i32 %61
    br label %.preheader
  
  .preheader:                                       ; preds = %.preheader.loopexit, %52
    %n2.0.lcssa = phi i32 [ %57, %52 ], [ %62, %.preheader.loopexit ]
    %d1.0.lcssa = phi i16* [ %14, %52 ], [ %scevgep, %.preheader.loopexit ]
    %63 = icmp sgt i32 %n2.0.lcssa, 0
    br i1 %63, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %64 = add i32 %n2.0.lcssa, 1
    br label %.lr.ph
  
  .lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader
    %n2.07 = phi i32 [ %65, %.lr.ph8 ], [ %57, %.lr.ph8.preheader ]
    %d1.06 = phi i16* [ %scevgep16, %.lr.ph8 ], [ %14, %.lr.ph8.preheader ]
    store i16 %4, i16* %d1.06, align 2, !tbaa !50
    %scevgep1 = getelementptr i16, i16* %d1.06, i32 1
    store i16 %4, i16* %scevgep1, align 2, !tbaa !50
    %scevgep2 = getelementptr i16, i16* %d1.06, i32 2
    store i16 %4, i16* %scevgep2, align 2, !tbaa !50
    %scevgep3 = getelementptr i16, i16* %d1.06, i32 3
    store i16 %4, i16* %scevgep3, align 2, !tbaa !50
    %scevgep4 = getelementptr i16, i16* %d1.06, i32 4
    store i16 %4, i16* %scevgep4, align 2, !tbaa !50
    %scevgep5 = getelementptr i16, i16* %d1.06, i32 5
    store i16 %4, i16* %scevgep5, align 2, !tbaa !50
    %scevgep6 = getelementptr i16, i16* %d1.06, i32 6
    store i16 %4, i16* %scevgep6, align 2, !tbaa !50
    %scevgep7 = getelementptr i16, i16* %d1.06, i32 7
    store i16 %4, i16* %scevgep7, align 2, !tbaa !50
    %scevgep8 = getelementptr i16, i16* %d1.06, i32 8
    store i16 %4, i16* %scevgep8, align 2, !tbaa !50
    %scevgep9 = getelementptr i16, i16* %d1.06, i32 9
    store i16 %4, i16* %scevgep9, align 2, !tbaa !50
    %scevgep10 = getelementptr i16, i16* %d1.06, i32 10
    store i16 %4, i16* %scevgep10, align 2, !tbaa !50
    %scevgep11 = getelementptr i16, i16* %d1.06, i32 11
    store i16 %4, i16* %scevgep11, align 2, !tbaa !50
    %scevgep12 = getelementptr i16, i16* %d1.06, i32 12
    store i16 %4, i16* %scevgep12, align 2, !tbaa !50
    %scevgep13 = getelementptr i16, i16* %d1.06, i32 13
    store i16 %4, i16* %scevgep13, align 2, !tbaa !50
    %scevgep14 = getelementptr i16, i16* %d1.06, i32 14
    store i16 %4, i16* %scevgep14, align 2, !tbaa !50
    %scevgep15 = getelementptr i16, i16* %d1.06, i32 15
    store i16 %4, i16* %scevgep15, align 2, !tbaa !50
    %65 = add nsw i32 %n2.07, -16
    %66 = icmp sgt i32 %65, 15
    %scevgep16 = getelementptr i16, i16* %d1.06, i32 16
    br i1 %66, label %.lr.ph8, label %.preheader.loopexit
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %64, %.lr.ph.preheader ]
    %d1.14 = phi i16* [ %67, %.lr.ph ], [ %d1.0.lcssa, %.lr.ph.preheader ]
    %67 = getelementptr inbounds i16, i16* %d1.14, i32 1
    store i16 %4, i16* %d1.14, align 2, !tbaa !50
    %lsr.iv.next = add i32 %lsr.iv, -1
    %68 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %68, label %.lr.ph, label %.loopexit
  
  .loopexit:                                        ; preds = %35, %.lr.ph, %.preheader, %43, %20, %10, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 7516}
  !38 = !{!2, !4, i64 7512}
  !39 = !{!2, !8, i64 55736}
  !40 = !{!2, !4, i64 7521}
  !41 = !{!2, !11, i64 54672}
  !42 = !{!2, !11, i64 54676}
  !43 = !{!2, !11, i64 54688}
  !44 = !{!2, !11, i64 54700}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 12}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!20, !20, i64 0}
  !51 = !{!8, !8, i64 0}
  !52 = !{!11, !11, i64 0}
  !53 = !{!47, !8, i64 8}
  !54 = !{!2, !4, i64 7520}
  !55 = !{!2, !3, i64 2020}
  !56 = !{!57, !8, i64 48}
  !57 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !58 = !{!2, !4, i64 54308}
  !59 = !{!47, !8, i64 44}
  !60 = !{!47, !8, i64 48}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 40}

...
---
name:            gl_ClearDepth
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: afgr64 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: fgr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: afgr64 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: afgr64 }
  - { id: 20, class: afgr64 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%2' }
  - { reg: '%a2', virtual-reg: '%3' }
  - { reg: '%a3', virtual-reg: '%4' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'double 1.000000e+00'
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 31):
    successors: %bb.2(50), %bb.1(50)
    liveins: %a0, %a2, %a3, %t9, %v0
  
    %10 = ADDu %v0, %t9
    %4 = COPY %a3
    %3 = COPY %a2
    %2 = COPY %a0
    %6 = ORi %zero, 55744
    %7 = ADDu %2, killed %6
    %8 = LW killed %7, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !1)
    %9 = ADDiu %zero, 6656
    BEQ killed %8, killed %9, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.4, freq 15):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %11 = LW %10, target-flags(<unknown>) @.str, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %12 = ADDiu killed %11, target-flags(<unknown>) @.str
    %13 = LW %10, target-flags(<unknown>) @gl_error, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gl_error)
    %14 = ADDiu %zero, 1282
    %a0 = COPY %2
    %a1 = COPY %14
    %a2 = COPY %12
    %gp = COPY %10
    %t9 = COPY %13
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.5, implicit-def dead %at
  
  bb.2 (%ir-block.5, freq 15):
    successors: %bb.6(50), %bb.3(50)
  
    %5 = BuildPairF64 %4, %3
    %16 = COPY %zero
    %17 = BuildPairF64 %16, %16
    FCMP_D32 %5, killed %17, 4, implicit-def %fcc0
    BC1F %fcc0, %bb.3, implicit-def %at
  
  bb.6 (freq 8):
    successors: %bb.4(100)
  
    %15 = MTC1 %zero
    B %bb.4, implicit-def %at
  
  bb.3 (%ir-block.7, freq 8):
    successors: %bb.4(100)
  
    %18 = LW %10, target-flags(<unknown>) %const.0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %19 = LDC1 killed %18, target-flags(<unknown>) %const.0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 8 from constant-pool)
    FCMP_D32 %5, %19, 23, implicit-def %fcc0
    %20 = MOVF_D32 %19, %fcc0, %5
    %0 = CVT_S_D32 killed %20
  
  bb.4 (%ir-block.10, freq 15):
    successors: %bb.5(100)
  
    %1 = PHI %15, %bb.6, %0, %bb.3
    SWC1 %1, %2, 7516, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.12, !tbaa !37)
  
  bb.5 (%ir-block.13, freq 31):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.depth.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type opaque
  
  @.str = private unnamed_addr constant [13 x i8] c"glClearDepth\00", align 1
  @.str.1 = private unnamed_addr constant [12 x i8] c"glDepthFunc\00", align 1
  @.str.2 = private unnamed_addr constant [13 x i8] c"glDepth.Func\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glDepthMask\00", align 1
  @.str.4 = private unnamed_addr constant [13 x i8] c"glDepthRange\00", align 1
  @.str.5 = private unnamed_addr constant [31 x i8] c"Couldn't allocate depth buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearDepth(%struct.gl_context* %ctx, double %depth) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %depth, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %depth, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %depth
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    store float %11, float* %12, align 4, !tbaa !37
    br label %13
  
  ; <label>:13                                      ; preds = %10, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_DepthFunc(%struct.gl_context* %ctx, i32 signext %func) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %12
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %10 = load i32, i32* %9, align 4, !tbaa !39
    %11 = or i32 %10, 2
    store i32 %11, i32* %9, align 4, !tbaa !39
    br label %13
  
  ; <label>:12                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:13                                      ; preds = %12, %7, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthMask(%struct.gl_context* %ctx, i8 zeroext %flag) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %10
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    store i8 %flag, i8* %6, align 1, !tbaa !40
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %8 = load i32, i32* %7, align 4, !tbaa !39
    %9 = or i32 %8, 2
    store i32 %9, i32* %7, align 4, !tbaa !39
    br label %10
  
  ; <label>:10                                      ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthRange(%struct.gl_context* %ctx, double %nearval, double %farval) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %31
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %nearval, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %nearval, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %nearval
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = fcmp olt double %farval, 0.000000e+00
    br i1 %12, label %16, label %13
  
  ; <label>:13                                      ; preds = %10
    %14 = fcmp ogt double %farval, 1.000000e+00
    %15 = select i1 %14, double 1.000000e+00, double %farval
    %phitmp1 = fptrunc double %15 to float
    br label %16
  
  ; <label>:16                                      ; preds = %13, %10
    %17 = phi float [ 0.000000e+00, %10 ], [ %phitmp1, %13 ]
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 4
    store float %11, float* %18, align 4, !tbaa !41
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 5
    store float %17, float* %19, align 4, !tbaa !42
    %20 = fsub float %17, %11
    %21 = fpext float %20 to double
    %22 = fmul double %21, 5.000000e-01
    %23 = fmul double %22, 6.553500e+04
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 8
    store float %24, float* %25, align 4, !tbaa !43
    %26 = fpext float %11 to double
    %27 = fadd double %26, %22
    %28 = fmul double %27, 6.553500e+04
    %29 = fptrunc double %28 to float
    %30 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 11
    store float %29, float* %30, align 4, !tbaa !44
    br label %31
  
  ; <label>:31                                      ; preds = %16, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_depth_test_span_generic(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = mul nsw i32 %6, %y
    %8 = getelementptr inbounds i16, i16* %4, i32 %7
    %9 = getelementptr inbounds i16, i16* %8, i32 %x
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %11 = load i32, i32* %10, align 4, !tbaa !38
    switch i32 %11, label %206 [
      i32 513, label %13
      i32 515, label %43
      i32 518, label %73
      i32 516, label %103
      i32 517, label %133
      i32 514, label %163
      i32 519, label %193
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph104.preheader
  
  .lr.ph104.preheader:                              ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %15 = load i8, i8* %14, align 1, !tbaa !40
    %16 = icmp eq i8 %15, 0
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph35, label %.loopexit
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader1, %28
    %lsr.iv4 = phi i16* [ %scevgep5, %28 ], [ %z, %.preheader1 ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %28 ], [ %n, %.preheader1 ]
    %passed.034 = phi i32 [ %passed.1, %28 ], [ 0, %.preheader1 ]
    %m.032 = phi i8* [ %30, %28 ], [ %mask, %.preheader1 ]
    %zptr.031 = phi i16* [ %29, %28 ], [ %9, %.preheader1 ]
    %19 = load i8, i8* %m.032, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph35
    %22 = load i16, i16* %lsr.iv4, align 2, !tbaa !50
    %23 = load i16, i16* %zptr.031, align 2, !tbaa !50
    %24 = icmp ult i16 %22, %23
    br i1 %24, label %25, label %27
  
  ; <label>:25                                      ; preds = %21
    store i16 %22, i16* %zptr.031, align 2, !tbaa !50
    %26 = add i32 %passed.034, 1
    br label %28
  
  ; <label>:27                                      ; preds = %21
    store i8 0, i8* %m.032, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %27, %25, %.lr.ph35
    %passed.1 = phi i32 [ %26, %25 ], [ %passed.034, %27 ], [ %passed.034, %.lr.ph35 ]
    %29 = getelementptr inbounds i16, i16* %zptr.031, i32 1
    %30 = getelementptr inbounds i8, i8* %m.032, i32 1
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %scevgep5 = getelementptr i16, i16* %lsr.iv4, i32 1
    %exitcond118 = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond118, label %.loopexit, label %.lr.ph35
  
  .lr.ph:                                           ; preds = %.preheader, %40
    %lsr.iv1 = phi i16* [ %scevgep, %40 ], [ %z, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %40 ], [ %n, %.preheader ]
    %passed.230 = phi i32 [ %passed.3, %40 ], [ 0, %.preheader ]
    %m.128 = phi i8* [ %42, %40 ], [ %mask, %.preheader ]
    %zptr.127 = phi i16* [ %41, %40 ], [ %9, %.preheader ]
    %31 = load i8, i8* %m.128, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %40, label %33
  
  ; <label>:33                                      ; preds = %.lr.ph
    %34 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %35 = load i16, i16* %zptr.127, align 2, !tbaa !50
    %36 = icmp ult i16 %34, %35
    br i1 %36, label %37, label %39
  
  ; <label>:37                                      ; preds = %33
    %38 = add i32 %passed.230, 1
    br label %40
  
  ; <label>:39                                      ; preds = %33
    store i8 0, i8* %m.128, align 1, !tbaa !49
    br label %40
  
  ; <label>:40                                      ; preds = %39, %37, %.lr.ph
    %passed.3 = phi i32 [ %38, %37 ], [ %passed.230, %39 ], [ %passed.230, %.lr.ph ]
    %41 = getelementptr inbounds i16, i16* %zptr.127, i32 1
    %42 = getelementptr inbounds i8, i8* %m.128, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:43                                      ; preds = %0
    %44 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %45 = load i8, i8* %44, align 1, !tbaa !40
    %46 = icmp eq i8 %45, 0
    br i1 %46, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %43
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph47, label %.loopexit
  
  .preheader3:                                      ; preds = %43
    %48 = icmp ne i32 %n, 0
    br i1 %48, label %.lr.ph41, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader5, %58
    %lsr.iv12 = phi i16* [ %scevgep13, %58 ], [ %z, %.preheader5 ]
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %58 ], [ %n, %.preheader5 ]
    %passed.446 = phi i32 [ %passed.5, %58 ], [ 0, %.preheader5 ]
    %m.244 = phi i8* [ %60, %58 ], [ %mask, %.preheader5 ]
    %zptr.243 = phi i16* [ %59, %58 ], [ %9, %.preheader5 ]
    %49 = load i8, i8* %m.244, align 1, !tbaa !49
    %50 = icmp eq i8 %49, 0
    br i1 %50, label %58, label %51
  
  ; <label>:51                                      ; preds = %.lr.ph47
    %52 = load i16, i16* %lsr.iv12, align 2, !tbaa !50
    %53 = load i16, i16* %zptr.243, align 2, !tbaa !50
    %54 = icmp ugt i16 %52, %53
    br i1 %54, label %57, label %55
  
  ; <label>:55                                      ; preds = %51
    store i16 %52, i16* %zptr.243, align 2, !tbaa !50
    %56 = add i32 %passed.446, 1
    br label %58
  
  ; <label>:57                                      ; preds = %51
    store i8 0, i8* %m.244, align 1, !tbaa !49
    br label %58
  
  ; <label>:58                                      ; preds = %57, %55, %.lr.ph47
    %passed.5 = phi i32 [ %56, %55 ], [ %passed.446, %57 ], [ %passed.446, %.lr.ph47 ]
    %59 = getelementptr inbounds i16, i16* %zptr.243, i32 1
    %60 = getelementptr inbounds i8, i8* %m.244, i32 1
    %lsr.iv.next11 = add i32 %lsr.iv10, -1
    %scevgep13 = getelementptr i16, i16* %lsr.iv12, i32 1
    %exitcond120 = icmp eq i32 %lsr.iv.next11, 0
    br i1 %exitcond120, label %.loopexit, label %.lr.ph47
  
  .lr.ph41:                                         ; preds = %.preheader3, %70
    %lsr.iv8 = phi i16* [ %scevgep9, %70 ], [ %z, %.preheader3 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %70 ], [ %n, %.preheader3 ]
    %passed.640 = phi i32 [ %passed.7, %70 ], [ 0, %.preheader3 ]
    %m.338 = phi i8* [ %72, %70 ], [ %mask, %.preheader3 ]
    %zptr.337 = phi i16* [ %71, %70 ], [ %9, %.preheader3 ]
    %61 = load i8, i8* %m.338, align 1, !tbaa !49
    %62 = icmp eq i8 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %.lr.ph41
    %64 = load i16, i16* %lsr.iv8, align 2, !tbaa !50
    %65 = load i16, i16* %zptr.337, align 2, !tbaa !50
    %66 = icmp ugt i16 %64, %65
    br i1 %66, label %69, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = add i32 %passed.640, 1
    br label %70
  
  ; <label>:69                                      ; preds = %63
    store i8 0, i8* %m.338, align 1, !tbaa !49
    br label %70
  
  ; <label>:70                                      ; preds = %69, %67, %.lr.ph41
    %passed.7 = phi i32 [ %68, %67 ], [ %passed.640, %69 ], [ %passed.640, %.lr.ph41 ]
    %71 = getelementptr inbounds i16, i16* %zptr.337, i32 1
    %72 = getelementptr inbounds i8, i8* %m.338, i32 1
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i16, i16* %lsr.iv8, i32 1
    %exitcond119 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond119, label %.loopexit, label %.lr.ph41
  
  ; <label>:73                                      ; preds = %0
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %75 = load i8, i8* %74, align 1, !tbaa !40
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %73
    %77 = icmp ne i32 %n, 0
    br i1 %77, label %.lr.ph59, label %.loopexit
  
  .preheader7:                                      ; preds = %73
    %78 = icmp ne i32 %n, 0
    br i1 %78, label %.lr.ph53, label %.loopexit
  
  .lr.ph59:                                         ; preds = %.preheader9, %88
    %lsr.iv20 = phi i16* [ %scevgep21, %88 ], [ %z, %.preheader9 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %88 ], [ %n, %.preheader9 ]
    %passed.858 = phi i32 [ %passed.9, %88 ], [ 0, %.preheader9 ]
    %m.456 = phi i8* [ %90, %88 ], [ %mask, %.preheader9 ]
    %zptr.455 = phi i16* [ %89, %88 ], [ %9, %.preheader9 ]
    %79 = load i8, i8* %m.456, align 1, !tbaa !49
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %88, label %81
  
  ; <label>:81                                      ; preds = %.lr.ph59
    %82 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %83 = load i16, i16* %zptr.455, align 2, !tbaa !50
    %84 = icmp ult i16 %82, %83
    br i1 %84, label %87, label %85
  
  ; <label>:85                                      ; preds = %81
    store i16 %82, i16* %zptr.455, align 2, !tbaa !50
    %86 = add i32 %passed.858, 1
    br label %88
  
  ; <label>:87                                      ; preds = %81
    store i8 0, i8* %m.456, align 1, !tbaa !49
    br label %88
  
  ; <label>:88                                      ; preds = %87, %85, %.lr.ph59
    %passed.9 = phi i32 [ %86, %85 ], [ %passed.858, %87 ], [ %passed.858, %.lr.ph59 ]
    %89 = getelementptr inbounds i16, i16* %zptr.455, i32 1
    %90 = getelementptr inbounds i8, i8* %m.456, i32 1
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %exitcond122 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond122, label %.loopexit, label %.lr.ph59
  
  .lr.ph53:                                         ; preds = %.preheader7, %100
    %lsr.iv16 = phi i16* [ %scevgep17, %100 ], [ %z, %.preheader7 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %100 ], [ %n, %.preheader7 ]
    %passed.1052 = phi i32 [ %passed.11, %100 ], [ 0, %.preheader7 ]
    %m.550 = phi i8* [ %102, %100 ], [ %mask, %.preheader7 ]
    %zptr.549 = phi i16* [ %101, %100 ], [ %9, %.preheader7 ]
    %91 = load i8, i8* %m.550, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %100, label %93
  
  ; <label>:93                                      ; preds = %.lr.ph53
    %94 = load i16, i16* %lsr.iv16, align 2, !tbaa !50
    %95 = load i16, i16* %zptr.549, align 2, !tbaa !50
    %96 = icmp ult i16 %94, %95
    br i1 %96, label %99, label %97
  
  ; <label>:97                                      ; preds = %93
    %98 = add i32 %passed.1052, 1
    br label %100
  
  ; <label>:99                                      ; preds = %93
    store i8 0, i8* %m.550, align 1, !tbaa !49
    br label %100
  
  ; <label>:100                                     ; preds = %99, %97, %.lr.ph53
    %passed.11 = phi i32 [ %98, %97 ], [ %passed.1052, %99 ], [ %passed.1052, %.lr.ph53 ]
    %101 = getelementptr inbounds i16, i16* %zptr.549, i32 1
    %102 = getelementptr inbounds i8, i8* %m.550, i32 1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond121 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond121, label %.loopexit, label %.lr.ph53
  
  ; <label>:103                                     ; preds = %0
    %104 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %105 = load i8, i8* %104, align 1, !tbaa !40
    %106 = icmp eq i8 %105, 0
    br i1 %106, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %103
    %107 = icmp ne i32 %n, 0
    br i1 %107, label %.lr.ph71, label %.loopexit
  
  .preheader11:                                     ; preds = %103
    %108 = icmp ne i32 %n, 0
    br i1 %108, label %.lr.ph65, label %.loopexit
  
  .lr.ph71:                                         ; preds = %.preheader13, %118
    %lsr.iv28 = phi i16* [ %scevgep29, %118 ], [ %z, %.preheader13 ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %118 ], [ %n, %.preheader13 ]
    %passed.1270 = phi i32 [ %passed.13, %118 ], [ 0, %.preheader13 ]
    %m.668 = phi i8* [ %120, %118 ], [ %mask, %.preheader13 ]
    %zptr.667 = phi i16* [ %119, %118 ], [ %9, %.preheader13 ]
    %109 = load i8, i8* %m.668, align 1, !tbaa !49
    %110 = icmp eq i8 %109, 0
    br i1 %110, label %118, label %111
  
  ; <label>:111                                     ; preds = %.lr.ph71
    %112 = load i16, i16* %lsr.iv28, align 2, !tbaa !50
    %113 = load i16, i16* %zptr.667, align 2, !tbaa !50
    %114 = icmp ugt i16 %112, %113
    br i1 %114, label %115, label %117
  
  ; <label>:115                                     ; preds = %111
    store i16 %112, i16* %zptr.667, align 2, !tbaa !50
    %116 = add i32 %passed.1270, 1
    br label %118
  
  ; <label>:117                                     ; preds = %111
    store i8 0, i8* %m.668, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %117, %115, %.lr.ph71
    %passed.13 = phi i32 [ %116, %115 ], [ %passed.1270, %117 ], [ %passed.1270, %.lr.ph71 ]
    %119 = getelementptr inbounds i16, i16* %zptr.667, i32 1
    %120 = getelementptr inbounds i8, i8* %m.668, i32 1
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep29 = getelementptr i16, i16* %lsr.iv28, i32 1
    %exitcond124 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond124, label %.loopexit, label %.lr.ph71
  
  .lr.ph65:                                         ; preds = %.preheader11, %130
    %lsr.iv24 = phi i16* [ %scevgep25, %130 ], [ %z, %.preheader11 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %130 ], [ %n, %.preheader11 ]
    %passed.1464 = phi i32 [ %passed.15, %130 ], [ 0, %.preheader11 ]
    %m.762 = phi i8* [ %132, %130 ], [ %mask, %.preheader11 ]
    %zptr.761 = phi i16* [ %131, %130 ], [ %9, %.preheader11 ]
    %121 = load i8, i8* %m.762, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %130, label %123
  
  ; <label>:123                                     ; preds = %.lr.ph65
    %124 = load i16, i16* %lsr.iv24, align 2, !tbaa !50
    %125 = load i16, i16* %zptr.761, align 2, !tbaa !50
    %126 = icmp ugt i16 %124, %125
    br i1 %126, label %127, label %129
  
  ; <label>:127                                     ; preds = %123
    %128 = add i32 %passed.1464, 1
    br label %130
  
  ; <label>:129                                     ; preds = %123
    store i8 0, i8* %m.762, align 1, !tbaa !49
    br label %130
  
  ; <label>:130                                     ; preds = %129, %127, %.lr.ph65
    %passed.15 = phi i32 [ %128, %127 ], [ %passed.1464, %129 ], [ %passed.1464, %.lr.ph65 ]
    %131 = getelementptr inbounds i16, i16* %zptr.761, i32 1
    %132 = getelementptr inbounds i8, i8* %m.762, i32 1
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i16, i16* %lsr.iv24, i32 1
    %exitcond123 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond123, label %.loopexit, label %.lr.ph65
  
  ; <label>:133                                     ; preds = %0
    %134 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %135 = load i8, i8* %134, align 1, !tbaa !40
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %133
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph83, label %.loopexit
  
  .preheader15:                                     ; preds = %133
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph77, label %.loopexit
  
  .lr.ph83:                                         ; preds = %.preheader17, %148
    %lsr.iv36 = phi i16* [ %scevgep37, %148 ], [ %z, %.preheader17 ]
    %lsr.iv34 = phi i32 [ %lsr.iv.next35, %148 ], [ %n, %.preheader17 ]
    %passed.1682 = phi i32 [ %passed.17, %148 ], [ 0, %.preheader17 ]
    %m.880 = phi i8* [ %150, %148 ], [ %mask, %.preheader17 ]
    %zptr.879 = phi i16* [ %149, %148 ], [ %9, %.preheader17 ]
    %139 = load i8, i8* %m.880, align 1, !tbaa !49
    %140 = icmp eq i8 %139, 0
    br i1 %140, label %148, label %141
  
  ; <label>:141                                     ; preds = %.lr.ph83
    %142 = load i16, i16* %lsr.iv36, align 2, !tbaa !50
    %143 = load i16, i16* %zptr.879, align 2, !tbaa !50
    %144 = icmp eq i16 %142, %143
    br i1 %144, label %147, label %145
  
  ; <label>:145                                     ; preds = %141
    store i16 %142, i16* %zptr.879, align 2, !tbaa !50
    %146 = add i32 %passed.1682, 1
    br label %148
  
  ; <label>:147                                     ; preds = %141
    store i8 0, i8* %m.880, align 1, !tbaa !49
    br label %148
  
  ; <label>:148                                     ; preds = %147, %145, %.lr.ph83
    %passed.17 = phi i32 [ %146, %145 ], [ %passed.1682, %147 ], [ %passed.1682, %.lr.ph83 ]
    %149 = getelementptr inbounds i16, i16* %zptr.879, i32 1
    %150 = getelementptr inbounds i8, i8* %m.880, i32 1
    %lsr.iv.next35 = add i32 %lsr.iv34, -1
    %scevgep37 = getelementptr i16, i16* %lsr.iv36, i32 1
    %exitcond126 = icmp eq i32 %lsr.iv.next35, 0
    br i1 %exitcond126, label %.loopexit, label %.lr.ph83
  
  .lr.ph77:                                         ; preds = %.preheader15, %160
    %lsr.iv32 = phi i16* [ %scevgep33, %160 ], [ %z, %.preheader15 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %160 ], [ %n, %.preheader15 ]
    %passed.1876 = phi i32 [ %passed.19, %160 ], [ 0, %.preheader15 ]
    %m.974 = phi i8* [ %162, %160 ], [ %mask, %.preheader15 ]
    %zptr.973 = phi i16* [ %161, %160 ], [ %9, %.preheader15 ]
    %151 = load i8, i8* %m.974, align 1, !tbaa !49
    %152 = icmp eq i8 %151, 0
    br i1 %152, label %160, label %153
  
  ; <label>:153                                     ; preds = %.lr.ph77
    %154 = load i16, i16* %lsr.iv32, align 2, !tbaa !50
    %155 = load i16, i16* %zptr.973, align 2, !tbaa !50
    %156 = icmp eq i16 %154, %155
    br i1 %156, label %159, label %157
  
  ; <label>:157                                     ; preds = %153
    %158 = add i32 %passed.1876, 1
    br label %160
  
  ; <label>:159                                     ; preds = %153
    store i8 0, i8* %m.974, align 1, !tbaa !49
    br label %160
  
  ; <label>:160                                     ; preds = %159, %157, %.lr.ph77
    %passed.19 = phi i32 [ %158, %157 ], [ %passed.1876, %159 ], [ %passed.1876, %.lr.ph77 ]
    %161 = getelementptr inbounds i16, i16* %zptr.973, i32 1
    %162 = getelementptr inbounds i8, i8* %m.974, i32 1
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i16, i16* %lsr.iv32, i32 1
    %exitcond125 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond125, label %.loopexit, label %.lr.ph77
  
  ; <label>:163                                     ; preds = %0
    %164 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %165 = load i8, i8* %164, align 1, !tbaa !40
    %166 = icmp eq i8 %165, 0
    br i1 %166, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %163
    %167 = icmp ne i32 %n, 0
    br i1 %167, label %.lr.ph95, label %.loopexit
  
  .preheader19:                                     ; preds = %163
    %168 = icmp ne i32 %n, 0
    br i1 %168, label %.lr.ph89, label %.loopexit
  
  .lr.ph95:                                         ; preds = %.preheader21, %178
    %lsr.iv44 = phi i16* [ %scevgep45, %178 ], [ %z, %.preheader21 ]
    %lsr.iv42 = phi i32 [ %lsr.iv.next43, %178 ], [ %n, %.preheader21 ]
    %passed.2094 = phi i32 [ %passed.21, %178 ], [ 0, %.preheader21 ]
    %m.1092 = phi i8* [ %180, %178 ], [ %mask, %.preheader21 ]
    %zptr.1091 = phi i16* [ %179, %178 ], [ %9, %.preheader21 ]
    %169 = load i8, i8* %m.1092, align 1, !tbaa !49
    %170 = icmp eq i8 %169, 0
    br i1 %170, label %178, label %171
  
  ; <label>:171                                     ; preds = %.lr.ph95
    %172 = load i16, i16* %lsr.iv44, align 2, !tbaa !50
    %173 = load i16, i16* %zptr.1091, align 2, !tbaa !50
    %174 = icmp eq i16 %172, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %171
    store i16 %172, i16* %zptr.1091, align 2, !tbaa !50
    %176 = add i32 %passed.2094, 1
    br label %178
  
  ; <label>:177                                     ; preds = %171
    store i8 0, i8* %m.1092, align 1, !tbaa !49
    br label %178
  
  ; <label>:178                                     ; preds = %177, %175, %.lr.ph95
    %passed.21 = phi i32 [ %176, %175 ], [ %passed.2094, %177 ], [ %passed.2094, %.lr.ph95 ]
    %179 = getelementptr inbounds i16, i16* %zptr.1091, i32 1
    %180 = getelementptr inbounds i8, i8* %m.1092, i32 1
    %lsr.iv.next43 = add i32 %lsr.iv42, -1
    %scevgep45 = getelementptr i16, i16* %lsr.iv44, i32 1
    %exitcond128 = icmp eq i32 %lsr.iv.next43, 0
    br i1 %exitcond128, label %.loopexit, label %.lr.ph95
  
  .lr.ph89:                                         ; preds = %.preheader19, %190
    %lsr.iv40 = phi i16* [ %scevgep41, %190 ], [ %z, %.preheader19 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %190 ], [ %n, %.preheader19 ]
    %passed.2288 = phi i32 [ %passed.23, %190 ], [ 0, %.preheader19 ]
    %m.1186 = phi i8* [ %192, %190 ], [ %mask, %.preheader19 ]
    %zptr.1185 = phi i16* [ %191, %190 ], [ %9, %.preheader19 ]
    %181 = load i8, i8* %m.1186, align 1, !tbaa !49
    %182 = icmp eq i8 %181, 0
    br i1 %182, label %190, label %183
  
  ; <label>:183                                     ; preds = %.lr.ph89
    %184 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %185 = load i16, i16* %zptr.1185, align 2, !tbaa !50
    %186 = icmp eq i16 %184, %185
    br i1 %186, label %187, label %189
  
  ; <label>:187                                     ; preds = %183
    %188 = add i32 %passed.2288, 1
    br label %190
  
  ; <label>:189                                     ; preds = %183
    store i8 0, i8* %m.1186, align 1, !tbaa !49
    br label %190
  
  ; <label>:190                                     ; preds = %189, %187, %.lr.ph89
    %passed.23 = phi i32 [ %188, %187 ], [ %passed.2288, %189 ], [ %passed.2288, %.lr.ph89 ]
    %191 = getelementptr inbounds i16, i16* %zptr.1185, i32 1
    %192 = getelementptr inbounds i8, i8* %m.1186, i32 1
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %exitcond127 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond127, label %.loopexit, label %.lr.ph89
  
  ; <label>:193                                     ; preds = %0
    %194 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %195 = load i8, i8* %194, align 1, !tbaa !40
    %196 = icmp eq i8 %195, 0
    br i1 %196, label %.loopexit, label %.preheader23
  
  .preheader23:                                     ; preds = %193
    %197 = icmp eq i32 %n, 0
    br i1 %197, label %.loopexit, label %.lr.ph101
  
  .lr.ph101:                                        ; preds = %.preheader23, %203
    %lsr.iv48 = phi i16* [ %scevgep49, %203 ], [ %z, %.preheader23 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %203 ], [ %n, %.preheader23 ]
    %passed.24100 = phi i32 [ %passed.25, %203 ], [ 0, %.preheader23 ]
    %m.1298 = phi i8* [ %205, %203 ], [ %mask, %.preheader23 ]
    %zptr.1297 = phi i16* [ %204, %203 ], [ %9, %.preheader23 ]
    %198 = load i8, i8* %m.1298, align 1, !tbaa !49
    %199 = icmp eq i8 %198, 0
    br i1 %199, label %203, label %200
  
  ; <label>:200                                     ; preds = %.lr.ph101
    %201 = load i16, i16* %lsr.iv48, align 2, !tbaa !50
    store i16 %201, i16* %zptr.1297, align 2, !tbaa !50
    %202 = add i32 %passed.24100, 1
    br label %203
  
  ; <label>:203                                     ; preds = %200, %.lr.ph101
    %passed.25 = phi i32 [ %202, %200 ], [ %passed.24100, %.lr.ph101 ]
    %204 = getelementptr inbounds i16, i16* %zptr.1297, i32 1
    %205 = getelementptr inbounds i8, i8* %m.1298, i32 1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i16, i16* %lsr.iv48, i32 1
    %exitcond129 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond129, label %.loopexit, label %.lr.ph101
  
  ; <label>:206                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %203, %178, %190, %148, %160, %118, %130, %88, %100, %58, %70, %28, %40, %.preheader23, %193, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph104.preheader, %.preheader25
    %passed.26 = phi i32 [ %n, %193 ], [ 0, %.preheader ], [ 0, %.preheader1 ], [ 0, %.preheader3 ], [ 0, %.preheader5 ], [ 0, %.preheader7 ], [ 0, %.preheader9 ], [ 0, %.preheader11 ], [ 0, %.preheader13 ], [ 0, %.preheader15 ], [ 0, %.preheader17 ], [ 0, %.preheader19 ], [ 0, %.preheader21 ], [ 0, %.preheader23 ], [ 0, %.preheader25 ], [ 0, %.lr.ph104.preheader ], [ %passed.3, %40 ], [ %passed.1, %28 ], [ %passed.7, %70 ], [ %passed.5, %58 ], [ %passed.11, %100 ], [ %passed.9, %88 ], [ %passed.15, %130 ], [ %passed.13, %118 ], [ %passed.19, %160 ], [ %passed.17, %148 ], [ %passed.23, %190 ], [ %passed.21, %178 ], [ %passed.25, %203 ]
    ret i32 %passed.26
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ult i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ugt i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_test_pixels_generic(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %2 = load i32, i32* %1, align 4, !tbaa !38
    switch i32 %2, label %295 [
      i32 513, label %4
      i32 515, label %49
      i32 518, label %94
      i32 516, label %139
      i32 517, label %184
      i32 514, label %229
      i32 519, label %274
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %3 = icmp eq i32 %n, 0
    br i1 %3, label %.loopexit, label %.lr.ph53.preheader
  
  .lr.ph53.preheader:                               ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %6 = load i8, i8* %5, align 1, !tbaa !40
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %4
    %8 = icmp ne i32 %n, 0
    br i1 %8, label %.lr.ph29, label %.loopexit
  
  .lr.ph29:                                         ; preds = %.preheader1
    br label %10
  
  .preheader:                                       ; preds = %4
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %30
  
  ; <label>:10                                      ; preds = %29, %.lr.ph29
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %mask, %.lr.ph29 ]
    %lsr.iv14 = phi i32* [ %scevgep15, %29 ], [ %y, %.lr.ph29 ]
    %lsr.iv12 = phi i32* [ %scevgep13, %29 ], [ %x, %.lr.ph29 ]
    %lsr.iv10 = phi i16* [ %scevgep11, %29 ], [ %z, %.lr.ph29 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %29 ], [ %n, %.lr.ph29 ]
    %11 = load i8, i8* %lsr.iv16, align 1, !tbaa !49
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %29, label %13
  
  ; <label>:13                                      ; preds = %10
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr128 = add i32 %sunkaddr, 2024
    %sunkaddr129 = inttoptr i32 %sunkaddr128 to %struct.gl_frame_buffer**
    %14 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr129, align 4, !tbaa !45
    %15 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 3
    %16 = load i16*, i16** %15, align 4, !tbaa !46
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 1
    %18 = load i32, i32* %17, align 4, !tbaa !48
    %19 = load i32, i32* %lsr.iv14, align 4, !tbaa !51
    %20 = mul nsw i32 %19, %18
    %21 = getelementptr inbounds i16, i16* %16, i32 %20
    %22 = load i32, i32* %lsr.iv12, align 4, !tbaa !51
    %23 = getelementptr inbounds i16, i16* %21, i32 %22
    %24 = load i16, i16* %lsr.iv10, align 2, !tbaa !50
    %25 = load i16, i16* %23, align 2, !tbaa !50
    %26 = icmp ult i16 %24, %25
    br i1 %26, label %27, label %28
  
  ; <label>:27                                      ; preds = %13
    store i16 %24, i16* %23, align 2, !tbaa !50
    br label %29
  
  ; <label>:28                                      ; preds = %13
    store i8 0, i8* %lsr.iv16, align 1, !tbaa !49
    br label %29
  
  ; <label>:29                                      ; preds = %28, %27, %10
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i16, i16* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i32, i32* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i32, i32* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %exitcond67 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond67, label %.loopexit, label %10
  
  ; <label>:30                                      ; preds = %48, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %48 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %48 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %48 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %48 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %48 ], [ %n, %.lr.ph ]
    %31 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %48, label %33
  
  ; <label>:33                                      ; preds = %30
    %sunkaddr130 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr131 = add i32 %sunkaddr130, 2024
    %sunkaddr132 = inttoptr i32 %sunkaddr131 to %struct.gl_frame_buffer**
    %34 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr132, align 4, !tbaa !45
    %35 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 3
    %36 = load i16*, i16** %35, align 4, !tbaa !46
    %37 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 1
    %38 = load i32, i32* %37, align 4, !tbaa !48
    %39 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %40 = mul nsw i32 %39, %38
    %41 = getelementptr inbounds i16, i16* %36, i32 %40
    %42 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %43 = getelementptr inbounds i16, i16* %41, i32 %42
    %44 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %45 = load i16, i16* %43, align 2, !tbaa !50
    %46 = icmp ult i16 %44, %45
    br i1 %46, label %48, label %47
  
  ; <label>:47                                      ; preds = %33
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %48
  
  ; <label>:48                                      ; preds = %47, %33, %30
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %30
  
  ; <label>:49                                      ; preds = %0
    %50 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %51 = load i8, i8* %50, align 1, !tbaa !40
    %52 = icmp eq i8 %51, 0
    br i1 %52, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %49
    %53 = icmp ne i32 %n, 0
    br i1 %53, label %.lr.ph33, label %.loopexit
  
  .lr.ph33:                                         ; preds = %.preheader5
    br label %55
  
  .preheader3:                                      ; preds = %49
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph31, label %.loopexit
  
  .lr.ph31:                                         ; preds = %.preheader3
    br label %75
  
  ; <label>:55                                      ; preds = %74, %.lr.ph33
    %lsr.iv36 = phi i8* [ %scevgep37, %74 ], [ %mask, %.lr.ph33 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %74 ], [ %y, %.lr.ph33 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %74 ], [ %x, %.lr.ph33 ]
    %lsr.iv30 = phi i16* [ %scevgep31, %74 ], [ %z, %.lr.ph33 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %74 ], [ %n, %.lr.ph33 ]
    %56 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %57 = icmp eq i8 %56, 0
    br i1 %57, label %74, label %58
  
  ; <label>:58                                      ; preds = %55
    %sunkaddr133 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr134 = add i32 %sunkaddr133, 2024
    %sunkaddr135 = inttoptr i32 %sunkaddr134 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr135, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 3
    %61 = load i16*, i16** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv34, align 4, !tbaa !51
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i16, i16* %61, i32 %65
    %67 = load i32, i32* %lsr.iv32, align 4, !tbaa !51
    %68 = getelementptr inbounds i16, i16* %66, i32 %67
    %69 = load i16, i16* %lsr.iv30, align 2, !tbaa !50
    %70 = load i16, i16* %68, align 2, !tbaa !50
    %71 = icmp ugt i16 %69, %70
    br i1 %71, label %73, label %72
  
  ; <label>:72                                      ; preds = %58
    store i16 %69, i16* %68, align 2, !tbaa !50
    br label %74
  
  ; <label>:73                                      ; preds = %58
    store i8 0, i8* %lsr.iv36, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %73, %72, %55
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr i16, i16* %lsr.iv30, i32 1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond69 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond69, label %.loopexit, label %55
  
  ; <label>:75                                      ; preds = %93, %.lr.ph31
    %lsr.iv26 = phi i8* [ %scevgep27, %93 ], [ %mask, %.lr.ph31 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %93 ], [ %y, %.lr.ph31 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %93 ], [ %x, %.lr.ph31 ]
    %lsr.iv20 = phi i16* [ %scevgep21, %93 ], [ %z, %.lr.ph31 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %93 ], [ %n, %.lr.ph31 ]
    %76 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %77 = icmp eq i8 %76, 0
    br i1 %77, label %93, label %78
  
  ; <label>:78                                      ; preds = %75
    %sunkaddr136 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr137 = add i32 %sunkaddr136, 2024
    %sunkaddr138 = inttoptr i32 %sunkaddr137 to %struct.gl_frame_buffer**
    %79 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr138, align 4, !tbaa !45
    %80 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 3
    %81 = load i16*, i16** %80, align 4, !tbaa !46
    %82 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 1
    %83 = load i32, i32* %82, align 4, !tbaa !48
    %84 = load i32, i32* %lsr.iv24, align 4, !tbaa !51
    %85 = mul nsw i32 %84, %83
    %86 = getelementptr inbounds i16, i16* %81, i32 %85
    %87 = load i32, i32* %lsr.iv22, align 4, !tbaa !51
    %88 = getelementptr inbounds i16, i16* %86, i32 %87
    %89 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %90 = load i16, i16* %88, align 2, !tbaa !50
    %91 = icmp ugt i16 %89, %90
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %78
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %93
  
  ; <label>:93                                      ; preds = %92, %78, %75
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond68 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond68, label %.loopexit, label %75
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %96 = load i8, i8* %95, align 1, !tbaa !40
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %94
    %98 = icmp ne i32 %n, 0
    br i1 %98, label %.lr.ph37, label %.loopexit
  
  .lr.ph37:                                         ; preds = %.preheader9
    br label %100
  
  .preheader7:                                      ; preds = %94
    %99 = icmp ne i32 %n, 0
    br i1 %99, label %.lr.ph35, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader7
    br label %120
  
  ; <label>:100                                     ; preds = %119, %.lr.ph37
    %lsr.iv56 = phi i8* [ %scevgep57, %119 ], [ %mask, %.lr.ph37 ]
    %lsr.iv54 = phi i32* [ %scevgep55, %119 ], [ %y, %.lr.ph37 ]
    %lsr.iv52 = phi i32* [ %scevgep53, %119 ], [ %x, %.lr.ph37 ]
    %lsr.iv50 = phi i16* [ %scevgep51, %119 ], [ %z, %.lr.ph37 ]
    %lsr.iv48 = phi i32 [ %lsr.iv.next49, %119 ], [ %n, %.lr.ph37 ]
    %101 = load i8, i8* %lsr.iv56, align 1, !tbaa !49
    %102 = icmp eq i8 %101, 0
    br i1 %102, label %119, label %103
  
  ; <label>:103                                     ; preds = %100
    %sunkaddr139 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr140 = add i32 %sunkaddr139, 2024
    %sunkaddr141 = inttoptr i32 %sunkaddr140 to %struct.gl_frame_buffer**
    %104 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr141, align 4, !tbaa !45
    %105 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 3
    %106 = load i16*, i16** %105, align 4, !tbaa !46
    %107 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 1
    %108 = load i32, i32* %107, align 4, !tbaa !48
    %109 = load i32, i32* %lsr.iv54, align 4, !tbaa !51
    %110 = mul nsw i32 %109, %108
    %111 = getelementptr inbounds i16, i16* %106, i32 %110
    %112 = load i32, i32* %lsr.iv52, align 4, !tbaa !51
    %113 = getelementptr inbounds i16, i16* %111, i32 %112
    %114 = load i16, i16* %lsr.iv50, align 2, !tbaa !50
    %115 = load i16, i16* %113, align 2, !tbaa !50
    %116 = icmp ult i16 %114, %115
    br i1 %116, label %118, label %117
  
  ; <label>:117                                     ; preds = %103
    store i16 %114, i16* %113, align 2, !tbaa !50
    br label %119
  
  ; <label>:118                                     ; preds = %103
    store i8 0, i8* %lsr.iv56, align 1, !tbaa !49
    br label %119
  
  ; <label>:119                                     ; preds = %118, %117, %100
    %lsr.iv.next49 = add i32 %lsr.iv48, -1
    %scevgep51 = getelementptr i16, i16* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i32, i32* %lsr.iv52, i32 1
    %scevgep55 = getelementptr i32, i32* %lsr.iv54, i32 1
    %scevgep57 = getelementptr i8, i8* %lsr.iv56, i32 1
    %exitcond71 = icmp eq i32 %lsr.iv.next49, 0
    br i1 %exitcond71, label %.loopexit, label %100
  
  ; <label>:120                                     ; preds = %138, %.lr.ph35
    %lsr.iv46 = phi i8* [ %scevgep47, %138 ], [ %mask, %.lr.ph35 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %138 ], [ %y, %.lr.ph35 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %138 ], [ %x, %.lr.ph35 ]
    %lsr.iv40 = phi i16* [ %scevgep41, %138 ], [ %z, %.lr.ph35 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %138 ], [ %n, %.lr.ph35 ]
    %121 = load i8, i8* %lsr.iv46, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %138, label %123
  
  ; <label>:123                                     ; preds = %120
    %sunkaddr142 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr143 = add i32 %sunkaddr142, 2024
    %sunkaddr144 = inttoptr i32 %sunkaddr143 to %struct.gl_frame_buffer**
    %124 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr144, align 4, !tbaa !45
    %125 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 3
    %126 = load i16*, i16** %125, align 4, !tbaa !46
    %127 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 1
    %128 = load i32, i32* %127, align 4, !tbaa !48
    %129 = load i32, i32* %lsr.iv44, align 4, !tbaa !51
    %130 = mul nsw i32 %129, %128
    %131 = getelementptr inbounds i16, i16* %126, i32 %130
    %132 = load i32, i32* %lsr.iv42, align 4, !tbaa !51
    %133 = getelementptr inbounds i16, i16* %131, i32 %132
    %134 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %135 = load i16, i16* %133, align 2, !tbaa !50
    %136 = icmp ult i16 %134, %135
    br i1 %136, label %137, label %138
  
  ; <label>:137                                     ; preds = %123
    store i8 0, i8* %lsr.iv46, align 1, !tbaa !49
    br label %138
  
  ; <label>:138                                     ; preds = %137, %123, %120
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i8, i8* %lsr.iv46, i32 1
    %exitcond70 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond70, label %.loopexit, label %120
  
  ; <label>:139                                     ; preds = %0
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %141 = load i8, i8* %140, align 1, !tbaa !40
    %142 = icmp eq i8 %141, 0
    br i1 %142, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %139
    %143 = icmp ne i32 %n, 0
    br i1 %143, label %.lr.ph41, label %.loopexit
  
  .lr.ph41:                                         ; preds = %.preheader13
    br label %145
  
  .preheader11:                                     ; preds = %139
    %144 = icmp ne i32 %n, 0
    br i1 %144, label %.lr.ph39, label %.loopexit
  
  .lr.ph39:                                         ; preds = %.preheader11
    br label %165
  
  ; <label>:145                                     ; preds = %164, %.lr.ph41
    %lsr.iv76 = phi i8* [ %scevgep77, %164 ], [ %mask, %.lr.ph41 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %164 ], [ %y, %.lr.ph41 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %164 ], [ %x, %.lr.ph41 ]
    %lsr.iv70 = phi i16* [ %scevgep71, %164 ], [ %z, %.lr.ph41 ]
    %lsr.iv68 = phi i32 [ %lsr.iv.next69, %164 ], [ %n, %.lr.ph41 ]
    %146 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %147 = icmp eq i8 %146, 0
    br i1 %147, label %164, label %148
  
  ; <label>:148                                     ; preds = %145
    %sunkaddr145 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr146 = add i32 %sunkaddr145, 2024
    %sunkaddr147 = inttoptr i32 %sunkaddr146 to %struct.gl_frame_buffer**
    %149 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr147, align 4, !tbaa !45
    %150 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 3
    %151 = load i16*, i16** %150, align 4, !tbaa !46
    %152 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 1
    %153 = load i32, i32* %152, align 4, !tbaa !48
    %154 = load i32, i32* %lsr.iv74, align 4, !tbaa !51
    %155 = mul nsw i32 %154, %153
    %156 = getelementptr inbounds i16, i16* %151, i32 %155
    %157 = load i32, i32* %lsr.iv72, align 4, !tbaa !51
    %158 = getelementptr inbounds i16, i16* %156, i32 %157
    %159 = load i16, i16* %lsr.iv70, align 2, !tbaa !50
    %160 = load i16, i16* %158, align 2, !tbaa !50
    %161 = icmp ugt i16 %159, %160
    br i1 %161, label %162, label %163
  
  ; <label>:162                                     ; preds = %148
    store i16 %159, i16* %158, align 2, !tbaa !50
    br label %164
  
  ; <label>:163                                     ; preds = %148
    store i8 0, i8* %lsr.iv76, align 1, !tbaa !49
    br label %164
  
  ; <label>:164                                     ; preds = %163, %162, %145
    %lsr.iv.next69 = add i32 %lsr.iv68, -1
    %scevgep71 = getelementptr i16, i16* %lsr.iv70, i32 1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond73 = icmp eq i32 %lsr.iv.next69, 0
    br i1 %exitcond73, label %.loopexit, label %145
  
  ; <label>:165                                     ; preds = %183, %.lr.ph39
    %lsr.iv66 = phi i8* [ %scevgep67, %183 ], [ %mask, %.lr.ph39 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %183 ], [ %y, %.lr.ph39 ]
    %lsr.iv62 = phi i32* [ %scevgep63, %183 ], [ %x, %.lr.ph39 ]
    %lsr.iv60 = phi i16* [ %scevgep61, %183 ], [ %z, %.lr.ph39 ]
    %lsr.iv58 = phi i32 [ %lsr.iv.next59, %183 ], [ %n, %.lr.ph39 ]
    %166 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %167 = icmp eq i8 %166, 0
    br i1 %167, label %183, label %168
  
  ; <label>:168                                     ; preds = %165
    %sunkaddr148 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr149 = add i32 %sunkaddr148, 2024
    %sunkaddr150 = inttoptr i32 %sunkaddr149 to %struct.gl_frame_buffer**
    %169 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr150, align 4, !tbaa !45
    %170 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 3
    %171 = load i16*, i16** %170, align 4, !tbaa !46
    %172 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 1
    %173 = load i32, i32* %172, align 4, !tbaa !48
    %174 = load i32, i32* %lsr.iv64, align 4, !tbaa !51
    %175 = mul nsw i32 %174, %173
    %176 = getelementptr inbounds i16, i16* %171, i32 %175
    %177 = load i32, i32* %lsr.iv62, align 4, !tbaa !51
    %178 = getelementptr inbounds i16, i16* %176, i32 %177
    %179 = load i16, i16* %lsr.iv60, align 2, !tbaa !50
    %180 = load i16, i16* %178, align 2, !tbaa !50
    %181 = icmp ugt i16 %179, %180
    br i1 %181, label %183, label %182
  
  ; <label>:182                                     ; preds = %168
    store i8 0, i8* %lsr.iv66, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %182, %168, %165
    %lsr.iv.next59 = add i32 %lsr.iv58, -1
    %scevgep61 = getelementptr i16, i16* %lsr.iv60, i32 1
    %scevgep63 = getelementptr i32, i32* %lsr.iv62, i32 1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond72 = icmp eq i32 %lsr.iv.next59, 0
    br i1 %exitcond72, label %.loopexit, label %165
  
  ; <label>:184                                     ; preds = %0
    %185 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %186 = load i8, i8* %185, align 1, !tbaa !40
    %187 = icmp eq i8 %186, 0
    br i1 %187, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %184
    %188 = icmp ne i32 %n, 0
    br i1 %188, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %.preheader17
    br label %190
  
  .preheader15:                                     ; preds = %184
    %189 = icmp ne i32 %n, 0
    br i1 %189, label %.lr.ph43, label %.loopexit
  
  .lr.ph43:                                         ; preds = %.preheader15
    br label %210
  
  ; <label>:190                                     ; preds = %209, %.lr.ph45
    %lsr.iv96 = phi i8* [ %scevgep97, %209 ], [ %mask, %.lr.ph45 ]
    %lsr.iv94 = phi i32* [ %scevgep95, %209 ], [ %y, %.lr.ph45 ]
    %lsr.iv92 = phi i32* [ %scevgep93, %209 ], [ %x, %.lr.ph45 ]
    %lsr.iv90 = phi i16* [ %scevgep91, %209 ], [ %z, %.lr.ph45 ]
    %lsr.iv88 = phi i32 [ %lsr.iv.next89, %209 ], [ %n, %.lr.ph45 ]
    %191 = load i8, i8* %lsr.iv96, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %209, label %193
  
  ; <label>:193                                     ; preds = %190
    %sunkaddr151 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr152 = add i32 %sunkaddr151, 2024
    %sunkaddr153 = inttoptr i32 %sunkaddr152 to %struct.gl_frame_buffer**
    %194 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr153, align 4, !tbaa !45
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 3
    %196 = load i16*, i16** %195, align 4, !tbaa !46
    %197 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !48
    %199 = load i32, i32* %lsr.iv94, align 4, !tbaa !51
    %200 = mul nsw i32 %199, %198
    %201 = getelementptr inbounds i16, i16* %196, i32 %200
    %202 = load i32, i32* %lsr.iv92, align 4, !tbaa !51
    %203 = getelementptr inbounds i16, i16* %201, i32 %202
    %204 = load i16, i16* %lsr.iv90, align 2, !tbaa !50
    %205 = load i16, i16* %203, align 2, !tbaa !50
    %206 = icmp eq i16 %204, %205
    br i1 %206, label %208, label %207
  
  ; <label>:207                                     ; preds = %193
    store i16 %204, i16* %203, align 2, !tbaa !50
    br label %209
  
  ; <label>:208                                     ; preds = %193
    store i8 0, i8* %lsr.iv96, align 1, !tbaa !49
    br label %209
  
  ; <label>:209                                     ; preds = %208, %207, %190
    %lsr.iv.next89 = add i32 %lsr.iv88, -1
    %scevgep91 = getelementptr i16, i16* %lsr.iv90, i32 1
    %scevgep93 = getelementptr i32, i32* %lsr.iv92, i32 1
    %scevgep95 = getelementptr i32, i32* %lsr.iv94, i32 1
    %scevgep97 = getelementptr i8, i8* %lsr.iv96, i32 1
    %exitcond75 = icmp eq i32 %lsr.iv.next89, 0
    br i1 %exitcond75, label %.loopexit, label %190
  
  ; <label>:210                                     ; preds = %228, %.lr.ph43
    %lsr.iv86 = phi i8* [ %scevgep87, %228 ], [ %mask, %.lr.ph43 ]
    %lsr.iv84 = phi i32* [ %scevgep85, %228 ], [ %y, %.lr.ph43 ]
    %lsr.iv82 = phi i32* [ %scevgep83, %228 ], [ %x, %.lr.ph43 ]
    %lsr.iv80 = phi i16* [ %scevgep81, %228 ], [ %z, %.lr.ph43 ]
    %lsr.iv78 = phi i32 [ %lsr.iv.next79, %228 ], [ %n, %.lr.ph43 ]
    %211 = load i8, i8* %lsr.iv86, align 1, !tbaa !49
    %212 = icmp eq i8 %211, 0
    br i1 %212, label %228, label %213
  
  ; <label>:213                                     ; preds = %210
    %sunkaddr154 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr155 = add i32 %sunkaddr154, 2024
    %sunkaddr156 = inttoptr i32 %sunkaddr155 to %struct.gl_frame_buffer**
    %214 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr156, align 4, !tbaa !45
    %215 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 3
    %216 = load i16*, i16** %215, align 4, !tbaa !46
    %217 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 1
    %218 = load i32, i32* %217, align 4, !tbaa !48
    %219 = load i32, i32* %lsr.iv84, align 4, !tbaa !51
    %220 = mul nsw i32 %219, %218
    %221 = getelementptr inbounds i16, i16* %216, i32 %220
    %222 = load i32, i32* %lsr.iv82, align 4, !tbaa !51
    %223 = getelementptr inbounds i16, i16* %221, i32 %222
    %224 = load i16, i16* %lsr.iv80, align 2, !tbaa !50
    %225 = load i16, i16* %223, align 2, !tbaa !50
    %226 = icmp eq i16 %224, %225
    br i1 %226, label %227, label %228
  
  ; <label>:227                                     ; preds = %213
    store i8 0, i8* %lsr.iv86, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %227, %213, %210
    %lsr.iv.next79 = add i32 %lsr.iv78, -1
    %scevgep81 = getelementptr i16, i16* %lsr.iv80, i32 1
    %scevgep83 = getelementptr i32, i32* %lsr.iv82, i32 1
    %scevgep85 = getelementptr i32, i32* %lsr.iv84, i32 1
    %scevgep87 = getelementptr i8, i8* %lsr.iv86, i32 1
    %exitcond74 = icmp eq i32 %lsr.iv.next79, 0
    br i1 %exitcond74, label %.loopexit, label %210
  
  ; <label>:229                                     ; preds = %0
    %230 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %231 = load i8, i8* %230, align 1, !tbaa !40
    %232 = icmp eq i8 %231, 0
    br i1 %232, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %229
    %233 = icmp ne i32 %n, 0
    br i1 %233, label %.lr.ph49, label %.loopexit
  
  .lr.ph49:                                         ; preds = %.preheader21
    br label %235
  
  .preheader19:                                     ; preds = %229
    %234 = icmp ne i32 %n, 0
    br i1 %234, label %.lr.ph47, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader19
    br label %255
  
  ; <label>:235                                     ; preds = %254, %.lr.ph49
    %lsr.iv116 = phi i8* [ %scevgep117, %254 ], [ %mask, %.lr.ph49 ]
    %lsr.iv114 = phi i32* [ %scevgep115, %254 ], [ %y, %.lr.ph49 ]
    %lsr.iv112 = phi i32* [ %scevgep113, %254 ], [ %x, %.lr.ph49 ]
    %lsr.iv110 = phi i16* [ %scevgep111, %254 ], [ %z, %.lr.ph49 ]
    %lsr.iv108 = phi i32 [ %lsr.iv.next109, %254 ], [ %n, %.lr.ph49 ]
    %236 = load i8, i8* %lsr.iv116, align 1, !tbaa !49
    %237 = icmp eq i8 %236, 0
    br i1 %237, label %254, label %238
  
  ; <label>:238                                     ; preds = %235
    %sunkaddr157 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr158 = add i32 %sunkaddr157, 2024
    %sunkaddr159 = inttoptr i32 %sunkaddr158 to %struct.gl_frame_buffer**
    %239 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr159, align 4, !tbaa !45
    %240 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 3
    %241 = load i16*, i16** %240, align 4, !tbaa !46
    %242 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 1
    %243 = load i32, i32* %242, align 4, !tbaa !48
    %244 = load i32, i32* %lsr.iv114, align 4, !tbaa !51
    %245 = mul nsw i32 %244, %243
    %246 = getelementptr inbounds i16, i16* %241, i32 %245
    %247 = load i32, i32* %lsr.iv112, align 4, !tbaa !51
    %248 = getelementptr inbounds i16, i16* %246, i32 %247
    %249 = load i16, i16* %lsr.iv110, align 2, !tbaa !50
    %250 = load i16, i16* %248, align 2, !tbaa !50
    %251 = icmp eq i16 %249, %250
    br i1 %251, label %252, label %253
  
  ; <label>:252                                     ; preds = %238
    store i16 %249, i16* %248, align 2, !tbaa !50
    br label %254
  
  ; <label>:253                                     ; preds = %238
    store i8 0, i8* %lsr.iv116, align 1, !tbaa !49
    br label %254
  
  ; <label>:254                                     ; preds = %253, %252, %235
    %lsr.iv.next109 = add i32 %lsr.iv108, -1
    %scevgep111 = getelementptr i16, i16* %lsr.iv110, i32 1
    %scevgep113 = getelementptr i32, i32* %lsr.iv112, i32 1
    %scevgep115 = getelementptr i32, i32* %lsr.iv114, i32 1
    %scevgep117 = getelementptr i8, i8* %lsr.iv116, i32 1
    %exitcond77 = icmp eq i32 %lsr.iv.next109, 0
    br i1 %exitcond77, label %.loopexit, label %235
  
  ; <label>:255                                     ; preds = %273, %.lr.ph47
    %lsr.iv106 = phi i8* [ %scevgep107, %273 ], [ %mask, %.lr.ph47 ]
    %lsr.iv104 = phi i32* [ %scevgep105, %273 ], [ %y, %.lr.ph47 ]
    %lsr.iv102 = phi i32* [ %scevgep103, %273 ], [ %x, %.lr.ph47 ]
    %lsr.iv100 = phi i16* [ %scevgep101, %273 ], [ %z, %.lr.ph47 ]
    %lsr.iv98 = phi i32 [ %lsr.iv.next99, %273 ], [ %n, %.lr.ph47 ]
    %256 = load i8, i8* %lsr.iv106, align 1, !tbaa !49
    %257 = icmp eq i8 %256, 0
    br i1 %257, label %273, label %258
  
  ; <label>:258                                     ; preds = %255
    %sunkaddr160 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr161 = add i32 %sunkaddr160, 2024
    %sunkaddr162 = inttoptr i32 %sunkaddr161 to %struct.gl_frame_buffer**
    %259 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr162, align 4, !tbaa !45
    %260 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 3
    %261 = load i16*, i16** %260, align 4, !tbaa !46
    %262 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 1
    %263 = load i32, i32* %262, align 4, !tbaa !48
    %264 = load i32, i32* %lsr.iv104, align 4, !tbaa !51
    %265 = mul nsw i32 %264, %263
    %266 = getelementptr inbounds i16, i16* %261, i32 %265
    %267 = load i32, i32* %lsr.iv102, align 4, !tbaa !51
    %268 = getelementptr inbounds i16, i16* %266, i32 %267
    %269 = load i16, i16* %lsr.iv100, align 2, !tbaa !50
    %270 = load i16, i16* %268, align 2, !tbaa !50
    %271 = icmp eq i16 %269, %270
    br i1 %271, label %273, label %272
  
  ; <label>:272                                     ; preds = %258
    store i8 0, i8* %lsr.iv106, align 1, !tbaa !49
    br label %273
  
  ; <label>:273                                     ; preds = %272, %258, %255
    %lsr.iv.next99 = add i32 %lsr.iv98, -1
    %scevgep101 = getelementptr i16, i16* %lsr.iv100, i32 1
    %scevgep103 = getelementptr i32, i32* %lsr.iv102, i32 1
    %scevgep105 = getelementptr i32, i32* %lsr.iv104, i32 1
    %scevgep107 = getelementptr i8, i8* %lsr.iv106, i32 1
    %exitcond76 = icmp eq i32 %lsr.iv.next99, 0
    br i1 %exitcond76, label %.loopexit, label %255
  
  ; <label>:274                                     ; preds = %0
    %275 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %276 = load i8, i8* %275, align 1, !tbaa !40
    %277 = icmp ne i8 %276, 0
    %278 = icmp ne i32 %n, 0
    %or.cond = and i1 %277, %278
    br i1 %or.cond, label %.lr.ph51, label %.loopexit
  
  .lr.ph51:                                         ; preds = %274
    br label %279
  
  ; <label>:279                                     ; preds = %294, %.lr.ph51
    %lsr.iv126 = phi i8* [ %scevgep127, %294 ], [ %mask, %.lr.ph51 ]
    %lsr.iv124 = phi i32* [ %scevgep125, %294 ], [ %y, %.lr.ph51 ]
    %lsr.iv122 = phi i32* [ %scevgep123, %294 ], [ %x, %.lr.ph51 ]
    %lsr.iv120 = phi i16* [ %scevgep121, %294 ], [ %z, %.lr.ph51 ]
    %lsr.iv118 = phi i32 [ %lsr.iv.next119, %294 ], [ %n, %.lr.ph51 ]
    %280 = load i8, i8* %lsr.iv126, align 1, !tbaa !49
    %281 = icmp eq i8 %280, 0
    br i1 %281, label %294, label %282
  
  ; <label>:282                                     ; preds = %279
    %sunkaddr163 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr164 = add i32 %sunkaddr163, 2024
    %sunkaddr165 = inttoptr i32 %sunkaddr164 to %struct.gl_frame_buffer**
    %283 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr165, align 4, !tbaa !45
    %284 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 3
    %285 = load i16*, i16** %284, align 4, !tbaa !46
    %286 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 1
    %287 = load i32, i32* %286, align 4, !tbaa !48
    %288 = load i32, i32* %lsr.iv124, align 4, !tbaa !51
    %289 = mul nsw i32 %288, %287
    %290 = getelementptr inbounds i16, i16* %285, i32 %289
    %291 = load i32, i32* %lsr.iv122, align 4, !tbaa !51
    %292 = getelementptr inbounds i16, i16* %290, i32 %291
    %293 = load i16, i16* %lsr.iv120, align 2, !tbaa !50
    store i16 %293, i16* %292, align 2, !tbaa !50
    br label %294
  
  ; <label>:294                                     ; preds = %282, %279
    %lsr.iv.next119 = add i32 %lsr.iv118, -1
    %scevgep121 = getelementptr i16, i16* %lsr.iv120, i32 1
    %scevgep123 = getelementptr i32, i32* %lsr.iv122, i32 1
    %scevgep125 = getelementptr i32, i32* %lsr.iv124, i32 1
    %scevgep127 = getelementptr i8, i8* %lsr.iv126, i32 1
    %exitcond78 = icmp eq i32 %lsr.iv.next119, 0
    br i1 %exitcond78, label %.loopexit, label %279
  
  ; <label>:295                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %294, %254, %273, %209, %228, %164, %183, %119, %138, %74, %93, %29, %48, %274, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph53.preheader, %.preheader25
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ult i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ugt i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_float(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, float* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast float* %depth to i8*
    %8 = shl i32 %n, 2
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 4, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %11 = load i32, i32* %10, align 4, !tbaa !48
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph4.preheader
  
  .lr.ph4.preheader:                                ; preds = %9
    %13 = mul i32 %11, %y
    %14 = add i32 %x, %13
    %scevgep2 = getelementptr i16, i16* %4, i32 %14
    br label %.lr.ph4
  
  .lr.ph4:                                          ; preds = %.lr.ph4, %.lr.ph4.preheader
    %lsr.iv3 = phi i16* [ %scevgep4, %.lr.ph4 ], [ %scevgep2, %.lr.ph4.preheader ]
    %lsr.iv1 = phi float* [ %scevgep, %.lr.ph4 ], [ %depth, %.lr.ph4.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph4 ], [ %n, %.lr.ph4.preheader ]
    %15 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %16 = uitofp i16 %15 to float
    %17 = fmul float %16, 0x3EF0001000000000
    store float %17, float* %lsr.iv1, align 4, !tbaa !52
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr float, float* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %exitcond6 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond6, label %.loopexit, label %.lr.ph4
  
  .loopexit:                                        ; preds = %.lr.ph4, %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_int(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast i16* %depth to i8*
    %8 = shl i32 %n, 1
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 2, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = bitcast i16* %depth to i8*
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    %13 = mul nsw i32 %12, %y
    %14 = getelementptr inbounds i16, i16* %4, i32 %13
    %15 = getelementptr inbounds i16, i16* %14, i32 %x
    %16 = bitcast i16* %15 to i8*
    %17 = shl i32 %n, 1
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %10, i8* %16, i32 %17, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4
  
  ; Function Attrs: nounwind
  define void @gl_alloc_depth_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %10, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast i16* %4 to i8*
    tail call void @free(i8* %7) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 3
    store i16* null, i16** %9, align 4, !tbaa !46
    br label %10
  
  ; <label>:10                                      ; preds = %6, %0
    %11 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %8, %6 ]
    %12 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 1
    %13 = load i32, i32* %12, align 4, !tbaa !48
    %14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 2
    %15 = load i32, i32* %14, align 4, !tbaa !53
    %16 = shl i32 %13, 1
    %17 = mul i32 %16, %15
    %18 = tail call noalias i8* @malloc(i32 signext %17) #5
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 3
    %20 = bitcast i16** %19 to i8**
    store i8* %18, i8** %20, align 4, !tbaa !46
    %21 = icmp eq i8* %18, null
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %10
    %23 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    store i8 0, i8* %23, align 4, !tbaa !54
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0)) #5
    br label %24
  
  ; <label>:24                                      ; preds = %22, %10
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_depth_buffer(%struct.gl_context* nocapture readonly %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    %2 = load float, float* %1, align 4, !tbaa !37
    %3 = fmul float %2, 6.553500e+04
    %4 = fptoui float %3 to i16
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %6 = load %struct.gl_visual*, %struct.gl_visual** %5, align 4, !tbaa !55
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %6, i32 0, i32 13
    %8 = load i32, i32* %7, align 4, !tbaa !56
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %.loopexit, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %11, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 3
    %14 = load i16*, i16** %13, align 4, !tbaa !46
    %15 = icmp eq i16* %14, null
    br i1 %15, label %.loopexit, label %16
  
  ; <label>:16                                      ; preds = %10
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %18 = load i8, i8* %17, align 4, !tbaa !58
    %19 = icmp eq i8 %18, 0
    br i1 %19, label %38, label %20
  
  ; <label>:20                                      ; preds = %16
    %21 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 11
    %22 = load i32, i32* %21, align 4, !tbaa !59
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 12
    %24 = load i32, i32* %23, align 4, !tbaa !60
    %25 = icmp sgt i32 %22, %24
    br i1 %25, label %.loopexit, label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %20
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !48
    %.phi.trans.insert14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 9
    %.pre15 = load i32, i32* %.phi.trans.insert14, align 4, !tbaa !61
    %.phi.trans.insert16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 10
    %.pre17 = load i32, i32* %.phi.trans.insert16, align 4, !tbaa !62
    %26 = add i32 %.pre15, -1
    %27 = sub i32 %26, %.pre17
    br label %28
  
  ; <label>:28                                      ; preds = %35, %.lr.ph11
    %y.010 = phi i32 [ %22, %.lr.ph11 ], [ %36, %35 ]
    %29 = mul nsw i32 %.pre, %y.010
    %30 = getelementptr inbounds i16, i16* %14, i32 %29
    %31 = getelementptr inbounds i16, i16* %30, i32 %.pre15
    br label %32
  
  ; <label>:32                                      ; preds = %32, %28
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %32 ], [ %27, %28 ]
    %d.0 = phi i16* [ %31, %28 ], [ %33, %32 ]
    %33 = getelementptr inbounds i16, i16* %d.0, i32 1
    store i16 %4, i16* %d.0, align 2, !tbaa !50
    %lsr.iv.next18 = add i32 %lsr.iv17, 1
    %34 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %34, label %35, label %32
  
  ; <label>:35                                      ; preds = %32
    %36 = add nsw i32 %y.010, 1
    %37 = icmp slt i32 %y.010, %24
    br i1 %37, label %28, label %.loopexit
  
  ; <label>:38                                      ; preds = %16
    %39 = zext i16 %4 to i32
    %40 = and i32 %39, 255
    %41 = lshr i32 %39, 8
    %42 = icmp eq i32 %40, %41
    br i1 %42, label %43, label %52
  
  ; <label>:43                                      ; preds = %38
    %44 = bitcast i16* %14 to i8*
    %45 = trunc i16 %4 to i8
    %46 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %47 = load i32, i32* %46, align 4, !tbaa !48
    %48 = shl i32 %47, 1
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %50 = load i32, i32* %49, align 4, !tbaa !53
    %51 = mul nsw i32 %48, %50
    tail call void @llvm.memset.p0i8.i32(i8* %44, i8 %45, i32 %51, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:52                                      ; preds = %38
    %53 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %54 = load i32, i32* %53, align 4, !tbaa !48
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !53
    %57 = mul i32 %56, %54
    %58 = icmp sgt i32 %57, 15
    br i1 %58, label %.lr.ph8.preheader, label %.preheader
  
  .lr.ph8.preheader:                                ; preds = %52
    %59 = add i32 %57, -16
    %60 = and i32 %59, -16
    %61 = add i32 %60, 16
    br label %.lr.ph8
  
  .preheader.loopexit:                              ; preds = %.lr.ph8
    %62 = sub i32 %59, %60
    %scevgep = getelementptr i16, i16* %14, i32 %61
    br label %.preheader
  
  .preheader:                                       ; preds = %.preheader.loopexit, %52
    %n2.0.lcssa = phi i32 [ %57, %52 ], [ %62, %.preheader.loopexit ]
    %d1.0.lcssa = phi i16* [ %14, %52 ], [ %scevgep, %.preheader.loopexit ]
    %63 = icmp sgt i32 %n2.0.lcssa, 0
    br i1 %63, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %64 = add i32 %n2.0.lcssa, 1
    br label %.lr.ph
  
  .lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader
    %n2.07 = phi i32 [ %65, %.lr.ph8 ], [ %57, %.lr.ph8.preheader ]
    %d1.06 = phi i16* [ %scevgep16, %.lr.ph8 ], [ %14, %.lr.ph8.preheader ]
    store i16 %4, i16* %d1.06, align 2, !tbaa !50
    %scevgep1 = getelementptr i16, i16* %d1.06, i32 1
    store i16 %4, i16* %scevgep1, align 2, !tbaa !50
    %scevgep2 = getelementptr i16, i16* %d1.06, i32 2
    store i16 %4, i16* %scevgep2, align 2, !tbaa !50
    %scevgep3 = getelementptr i16, i16* %d1.06, i32 3
    store i16 %4, i16* %scevgep3, align 2, !tbaa !50
    %scevgep4 = getelementptr i16, i16* %d1.06, i32 4
    store i16 %4, i16* %scevgep4, align 2, !tbaa !50
    %scevgep5 = getelementptr i16, i16* %d1.06, i32 5
    store i16 %4, i16* %scevgep5, align 2, !tbaa !50
    %scevgep6 = getelementptr i16, i16* %d1.06, i32 6
    store i16 %4, i16* %scevgep6, align 2, !tbaa !50
    %scevgep7 = getelementptr i16, i16* %d1.06, i32 7
    store i16 %4, i16* %scevgep7, align 2, !tbaa !50
    %scevgep8 = getelementptr i16, i16* %d1.06, i32 8
    store i16 %4, i16* %scevgep8, align 2, !tbaa !50
    %scevgep9 = getelementptr i16, i16* %d1.06, i32 9
    store i16 %4, i16* %scevgep9, align 2, !tbaa !50
    %scevgep10 = getelementptr i16, i16* %d1.06, i32 10
    store i16 %4, i16* %scevgep10, align 2, !tbaa !50
    %scevgep11 = getelementptr i16, i16* %d1.06, i32 11
    store i16 %4, i16* %scevgep11, align 2, !tbaa !50
    %scevgep12 = getelementptr i16, i16* %d1.06, i32 12
    store i16 %4, i16* %scevgep12, align 2, !tbaa !50
    %scevgep13 = getelementptr i16, i16* %d1.06, i32 13
    store i16 %4, i16* %scevgep13, align 2, !tbaa !50
    %scevgep14 = getelementptr i16, i16* %d1.06, i32 14
    store i16 %4, i16* %scevgep14, align 2, !tbaa !50
    %scevgep15 = getelementptr i16, i16* %d1.06, i32 15
    store i16 %4, i16* %scevgep15, align 2, !tbaa !50
    %65 = add nsw i32 %n2.07, -16
    %66 = icmp sgt i32 %65, 15
    %scevgep16 = getelementptr i16, i16* %d1.06, i32 16
    br i1 %66, label %.lr.ph8, label %.preheader.loopexit
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %64, %.lr.ph.preheader ]
    %d1.14 = phi i16* [ %67, %.lr.ph ], [ %d1.0.lcssa, %.lr.ph.preheader ]
    %67 = getelementptr inbounds i16, i16* %d1.14, i32 1
    store i16 %4, i16* %d1.14, align 2, !tbaa !50
    %lsr.iv.next = add i32 %lsr.iv, -1
    %68 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %68, label %.lr.ph, label %.loopexit
  
  .loopexit:                                        ; preds = %35, %.lr.ph, %.preheader, %43, %20, %10, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 7516}
  !38 = !{!2, !4, i64 7512}
  !39 = !{!2, !8, i64 55736}
  !40 = !{!2, !4, i64 7521}
  !41 = !{!2, !11, i64 54672}
  !42 = !{!2, !11, i64 54676}
  !43 = !{!2, !11, i64 54688}
  !44 = !{!2, !11, i64 54700}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 12}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!20, !20, i64 0}
  !51 = !{!8, !8, i64 0}
  !52 = !{!11, !11, i64 0}
  !53 = !{!47, !8, i64 8}
  !54 = !{!2, !4, i64 7520}
  !55 = !{!2, !3, i64 2020}
  !56 = !{!57, !8, i64 48}
  !57 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !58 = !{!2, !4, i64 54308}
  !59 = !{!47, !8, i64 44}
  !60 = !{!47, !8, i64 48}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 40}

...
---
name:            gl_DepthFunc
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 31):
    successors: %bb.2(50), %bb.1(50)
    liveins: %a0, %a1, %t9, %v0
  
    %6 = ADDu %v0, %t9
    %1 = COPY %a1
    %0 = COPY %a0
    %2 = ORi %zero, 55744
    %3 = ADDu %0, killed %2
    %4 = LW killed %3, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !1)
    %5 = ADDiu %zero, 6656
    BEQ killed %4, killed %5, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.4, freq 15):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %7 = LW %6, target-flags(<unknown>) @.str.1, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %8 = ADDiu killed %7, target-flags(<unknown>) @.str.1
    %9 = LW %6, target-flags(<unknown>) @gl_error, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %10 = ADDiu %zero, 1282
    %a0 = COPY %0
    %a1 = COPY %10
    %a2 = COPY %8
    %gp = COPY %6
    %t9 = COPY %9
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.5, implicit-def dead %at
  
  bb.2 (%ir-block.5, freq 15):
    successors: %bb.3(50), %bb.4(50)
  
    %11 = ADDiu %zero, -8
    %12 = AND %1, killed %11
    %13 = ADDiu %zero, 512
    BNE killed %12, killed %13, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.7, freq 8):
    successors: %bb.5(100)
  
    SW %1, %0, 7512, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.8, !tbaa !38)
    %18 = ORi %zero, 55736
    %19 = ADDu %0, killed %18
    %20 = LW %19, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.9, !tbaa !39)
    %21 = ORi killed %20, 2
    SW killed %21, %19, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.9, !tbaa !39)
    B %bb.5, implicit-def dead %at
  
  bb.4 (%ir-block.12, freq 8):
    successors: %bb.5(100)
  
    %14 = LW %6, target-flags(<unknown>) @.str.2, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %15 = ADDiu killed %14, target-flags(<unknown>) @.str.2
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %16 = LW %6, target-flags(<unknown>) @gl_error, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %17 = ADDiu %zero, 1280
    %a0 = COPY %0
    %a1 = COPY %17
    %a2 = COPY %15
    %gp = COPY %6
    %t9 = COPY %16
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.5 (%ir-block.13, freq 31):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.depth.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type opaque
  
  @.str = private unnamed_addr constant [13 x i8] c"glClearDepth\00", align 1
  @.str.1 = private unnamed_addr constant [12 x i8] c"glDepthFunc\00", align 1
  @.str.2 = private unnamed_addr constant [13 x i8] c"glDepth.Func\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glDepthMask\00", align 1
  @.str.4 = private unnamed_addr constant [13 x i8] c"glDepthRange\00", align 1
  @.str.5 = private unnamed_addr constant [31 x i8] c"Couldn't allocate depth buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearDepth(%struct.gl_context* %ctx, double %depth) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %depth, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %depth, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %depth
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    store float %11, float* %12, align 4, !tbaa !37
    br label %13
  
  ; <label>:13                                      ; preds = %10, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_DepthFunc(%struct.gl_context* %ctx, i32 signext %func) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %12
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %10 = load i32, i32* %9, align 4, !tbaa !39
    %11 = or i32 %10, 2
    store i32 %11, i32* %9, align 4, !tbaa !39
    br label %13
  
  ; <label>:12                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:13                                      ; preds = %12, %7, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthMask(%struct.gl_context* %ctx, i8 zeroext %flag) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %10
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    store i8 %flag, i8* %6, align 1, !tbaa !40
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %8 = load i32, i32* %7, align 4, !tbaa !39
    %9 = or i32 %8, 2
    store i32 %9, i32* %7, align 4, !tbaa !39
    br label %10
  
  ; <label>:10                                      ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthRange(%struct.gl_context* %ctx, double %nearval, double %farval) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %31
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %nearval, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %nearval, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %nearval
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = fcmp olt double %farval, 0.000000e+00
    br i1 %12, label %16, label %13
  
  ; <label>:13                                      ; preds = %10
    %14 = fcmp ogt double %farval, 1.000000e+00
    %15 = select i1 %14, double 1.000000e+00, double %farval
    %phitmp1 = fptrunc double %15 to float
    br label %16
  
  ; <label>:16                                      ; preds = %13, %10
    %17 = phi float [ 0.000000e+00, %10 ], [ %phitmp1, %13 ]
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 4
    store float %11, float* %18, align 4, !tbaa !41
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 5
    store float %17, float* %19, align 4, !tbaa !42
    %20 = fsub float %17, %11
    %21 = fpext float %20 to double
    %22 = fmul double %21, 5.000000e-01
    %23 = fmul double %22, 6.553500e+04
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 8
    store float %24, float* %25, align 4, !tbaa !43
    %26 = fpext float %11 to double
    %27 = fadd double %26, %22
    %28 = fmul double %27, 6.553500e+04
    %29 = fptrunc double %28 to float
    %30 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 11
    store float %29, float* %30, align 4, !tbaa !44
    br label %31
  
  ; <label>:31                                      ; preds = %16, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_depth_test_span_generic(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = mul nsw i32 %6, %y
    %8 = getelementptr inbounds i16, i16* %4, i32 %7
    %9 = getelementptr inbounds i16, i16* %8, i32 %x
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %11 = load i32, i32* %10, align 4, !tbaa !38
    switch i32 %11, label %206 [
      i32 513, label %13
      i32 515, label %43
      i32 518, label %73
      i32 516, label %103
      i32 517, label %133
      i32 514, label %163
      i32 519, label %193
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph104.preheader
  
  .lr.ph104.preheader:                              ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %15 = load i8, i8* %14, align 1, !tbaa !40
    %16 = icmp eq i8 %15, 0
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph35, label %.loopexit
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader1, %28
    %lsr.iv4 = phi i16* [ %scevgep5, %28 ], [ %z, %.preheader1 ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %28 ], [ %n, %.preheader1 ]
    %passed.034 = phi i32 [ %passed.1, %28 ], [ 0, %.preheader1 ]
    %m.032 = phi i8* [ %30, %28 ], [ %mask, %.preheader1 ]
    %zptr.031 = phi i16* [ %29, %28 ], [ %9, %.preheader1 ]
    %19 = load i8, i8* %m.032, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph35
    %22 = load i16, i16* %lsr.iv4, align 2, !tbaa !50
    %23 = load i16, i16* %zptr.031, align 2, !tbaa !50
    %24 = icmp ult i16 %22, %23
    br i1 %24, label %25, label %27
  
  ; <label>:25                                      ; preds = %21
    store i16 %22, i16* %zptr.031, align 2, !tbaa !50
    %26 = add i32 %passed.034, 1
    br label %28
  
  ; <label>:27                                      ; preds = %21
    store i8 0, i8* %m.032, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %27, %25, %.lr.ph35
    %passed.1 = phi i32 [ %26, %25 ], [ %passed.034, %27 ], [ %passed.034, %.lr.ph35 ]
    %29 = getelementptr inbounds i16, i16* %zptr.031, i32 1
    %30 = getelementptr inbounds i8, i8* %m.032, i32 1
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %scevgep5 = getelementptr i16, i16* %lsr.iv4, i32 1
    %exitcond118 = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond118, label %.loopexit, label %.lr.ph35
  
  .lr.ph:                                           ; preds = %.preheader, %40
    %lsr.iv1 = phi i16* [ %scevgep, %40 ], [ %z, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %40 ], [ %n, %.preheader ]
    %passed.230 = phi i32 [ %passed.3, %40 ], [ 0, %.preheader ]
    %m.128 = phi i8* [ %42, %40 ], [ %mask, %.preheader ]
    %zptr.127 = phi i16* [ %41, %40 ], [ %9, %.preheader ]
    %31 = load i8, i8* %m.128, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %40, label %33
  
  ; <label>:33                                      ; preds = %.lr.ph
    %34 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %35 = load i16, i16* %zptr.127, align 2, !tbaa !50
    %36 = icmp ult i16 %34, %35
    br i1 %36, label %37, label %39
  
  ; <label>:37                                      ; preds = %33
    %38 = add i32 %passed.230, 1
    br label %40
  
  ; <label>:39                                      ; preds = %33
    store i8 0, i8* %m.128, align 1, !tbaa !49
    br label %40
  
  ; <label>:40                                      ; preds = %39, %37, %.lr.ph
    %passed.3 = phi i32 [ %38, %37 ], [ %passed.230, %39 ], [ %passed.230, %.lr.ph ]
    %41 = getelementptr inbounds i16, i16* %zptr.127, i32 1
    %42 = getelementptr inbounds i8, i8* %m.128, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:43                                      ; preds = %0
    %44 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %45 = load i8, i8* %44, align 1, !tbaa !40
    %46 = icmp eq i8 %45, 0
    br i1 %46, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %43
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph47, label %.loopexit
  
  .preheader3:                                      ; preds = %43
    %48 = icmp ne i32 %n, 0
    br i1 %48, label %.lr.ph41, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader5, %58
    %lsr.iv12 = phi i16* [ %scevgep13, %58 ], [ %z, %.preheader5 ]
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %58 ], [ %n, %.preheader5 ]
    %passed.446 = phi i32 [ %passed.5, %58 ], [ 0, %.preheader5 ]
    %m.244 = phi i8* [ %60, %58 ], [ %mask, %.preheader5 ]
    %zptr.243 = phi i16* [ %59, %58 ], [ %9, %.preheader5 ]
    %49 = load i8, i8* %m.244, align 1, !tbaa !49
    %50 = icmp eq i8 %49, 0
    br i1 %50, label %58, label %51
  
  ; <label>:51                                      ; preds = %.lr.ph47
    %52 = load i16, i16* %lsr.iv12, align 2, !tbaa !50
    %53 = load i16, i16* %zptr.243, align 2, !tbaa !50
    %54 = icmp ugt i16 %52, %53
    br i1 %54, label %57, label %55
  
  ; <label>:55                                      ; preds = %51
    store i16 %52, i16* %zptr.243, align 2, !tbaa !50
    %56 = add i32 %passed.446, 1
    br label %58
  
  ; <label>:57                                      ; preds = %51
    store i8 0, i8* %m.244, align 1, !tbaa !49
    br label %58
  
  ; <label>:58                                      ; preds = %57, %55, %.lr.ph47
    %passed.5 = phi i32 [ %56, %55 ], [ %passed.446, %57 ], [ %passed.446, %.lr.ph47 ]
    %59 = getelementptr inbounds i16, i16* %zptr.243, i32 1
    %60 = getelementptr inbounds i8, i8* %m.244, i32 1
    %lsr.iv.next11 = add i32 %lsr.iv10, -1
    %scevgep13 = getelementptr i16, i16* %lsr.iv12, i32 1
    %exitcond120 = icmp eq i32 %lsr.iv.next11, 0
    br i1 %exitcond120, label %.loopexit, label %.lr.ph47
  
  .lr.ph41:                                         ; preds = %.preheader3, %70
    %lsr.iv8 = phi i16* [ %scevgep9, %70 ], [ %z, %.preheader3 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %70 ], [ %n, %.preheader3 ]
    %passed.640 = phi i32 [ %passed.7, %70 ], [ 0, %.preheader3 ]
    %m.338 = phi i8* [ %72, %70 ], [ %mask, %.preheader3 ]
    %zptr.337 = phi i16* [ %71, %70 ], [ %9, %.preheader3 ]
    %61 = load i8, i8* %m.338, align 1, !tbaa !49
    %62 = icmp eq i8 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %.lr.ph41
    %64 = load i16, i16* %lsr.iv8, align 2, !tbaa !50
    %65 = load i16, i16* %zptr.337, align 2, !tbaa !50
    %66 = icmp ugt i16 %64, %65
    br i1 %66, label %69, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = add i32 %passed.640, 1
    br label %70
  
  ; <label>:69                                      ; preds = %63
    store i8 0, i8* %m.338, align 1, !tbaa !49
    br label %70
  
  ; <label>:70                                      ; preds = %69, %67, %.lr.ph41
    %passed.7 = phi i32 [ %68, %67 ], [ %passed.640, %69 ], [ %passed.640, %.lr.ph41 ]
    %71 = getelementptr inbounds i16, i16* %zptr.337, i32 1
    %72 = getelementptr inbounds i8, i8* %m.338, i32 1
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i16, i16* %lsr.iv8, i32 1
    %exitcond119 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond119, label %.loopexit, label %.lr.ph41
  
  ; <label>:73                                      ; preds = %0
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %75 = load i8, i8* %74, align 1, !tbaa !40
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %73
    %77 = icmp ne i32 %n, 0
    br i1 %77, label %.lr.ph59, label %.loopexit
  
  .preheader7:                                      ; preds = %73
    %78 = icmp ne i32 %n, 0
    br i1 %78, label %.lr.ph53, label %.loopexit
  
  .lr.ph59:                                         ; preds = %.preheader9, %88
    %lsr.iv20 = phi i16* [ %scevgep21, %88 ], [ %z, %.preheader9 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %88 ], [ %n, %.preheader9 ]
    %passed.858 = phi i32 [ %passed.9, %88 ], [ 0, %.preheader9 ]
    %m.456 = phi i8* [ %90, %88 ], [ %mask, %.preheader9 ]
    %zptr.455 = phi i16* [ %89, %88 ], [ %9, %.preheader9 ]
    %79 = load i8, i8* %m.456, align 1, !tbaa !49
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %88, label %81
  
  ; <label>:81                                      ; preds = %.lr.ph59
    %82 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %83 = load i16, i16* %zptr.455, align 2, !tbaa !50
    %84 = icmp ult i16 %82, %83
    br i1 %84, label %87, label %85
  
  ; <label>:85                                      ; preds = %81
    store i16 %82, i16* %zptr.455, align 2, !tbaa !50
    %86 = add i32 %passed.858, 1
    br label %88
  
  ; <label>:87                                      ; preds = %81
    store i8 0, i8* %m.456, align 1, !tbaa !49
    br label %88
  
  ; <label>:88                                      ; preds = %87, %85, %.lr.ph59
    %passed.9 = phi i32 [ %86, %85 ], [ %passed.858, %87 ], [ %passed.858, %.lr.ph59 ]
    %89 = getelementptr inbounds i16, i16* %zptr.455, i32 1
    %90 = getelementptr inbounds i8, i8* %m.456, i32 1
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %exitcond122 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond122, label %.loopexit, label %.lr.ph59
  
  .lr.ph53:                                         ; preds = %.preheader7, %100
    %lsr.iv16 = phi i16* [ %scevgep17, %100 ], [ %z, %.preheader7 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %100 ], [ %n, %.preheader7 ]
    %passed.1052 = phi i32 [ %passed.11, %100 ], [ 0, %.preheader7 ]
    %m.550 = phi i8* [ %102, %100 ], [ %mask, %.preheader7 ]
    %zptr.549 = phi i16* [ %101, %100 ], [ %9, %.preheader7 ]
    %91 = load i8, i8* %m.550, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %100, label %93
  
  ; <label>:93                                      ; preds = %.lr.ph53
    %94 = load i16, i16* %lsr.iv16, align 2, !tbaa !50
    %95 = load i16, i16* %zptr.549, align 2, !tbaa !50
    %96 = icmp ult i16 %94, %95
    br i1 %96, label %99, label %97
  
  ; <label>:97                                      ; preds = %93
    %98 = add i32 %passed.1052, 1
    br label %100
  
  ; <label>:99                                      ; preds = %93
    store i8 0, i8* %m.550, align 1, !tbaa !49
    br label %100
  
  ; <label>:100                                     ; preds = %99, %97, %.lr.ph53
    %passed.11 = phi i32 [ %98, %97 ], [ %passed.1052, %99 ], [ %passed.1052, %.lr.ph53 ]
    %101 = getelementptr inbounds i16, i16* %zptr.549, i32 1
    %102 = getelementptr inbounds i8, i8* %m.550, i32 1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond121 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond121, label %.loopexit, label %.lr.ph53
  
  ; <label>:103                                     ; preds = %0
    %104 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %105 = load i8, i8* %104, align 1, !tbaa !40
    %106 = icmp eq i8 %105, 0
    br i1 %106, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %103
    %107 = icmp ne i32 %n, 0
    br i1 %107, label %.lr.ph71, label %.loopexit
  
  .preheader11:                                     ; preds = %103
    %108 = icmp ne i32 %n, 0
    br i1 %108, label %.lr.ph65, label %.loopexit
  
  .lr.ph71:                                         ; preds = %.preheader13, %118
    %lsr.iv28 = phi i16* [ %scevgep29, %118 ], [ %z, %.preheader13 ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %118 ], [ %n, %.preheader13 ]
    %passed.1270 = phi i32 [ %passed.13, %118 ], [ 0, %.preheader13 ]
    %m.668 = phi i8* [ %120, %118 ], [ %mask, %.preheader13 ]
    %zptr.667 = phi i16* [ %119, %118 ], [ %9, %.preheader13 ]
    %109 = load i8, i8* %m.668, align 1, !tbaa !49
    %110 = icmp eq i8 %109, 0
    br i1 %110, label %118, label %111
  
  ; <label>:111                                     ; preds = %.lr.ph71
    %112 = load i16, i16* %lsr.iv28, align 2, !tbaa !50
    %113 = load i16, i16* %zptr.667, align 2, !tbaa !50
    %114 = icmp ugt i16 %112, %113
    br i1 %114, label %115, label %117
  
  ; <label>:115                                     ; preds = %111
    store i16 %112, i16* %zptr.667, align 2, !tbaa !50
    %116 = add i32 %passed.1270, 1
    br label %118
  
  ; <label>:117                                     ; preds = %111
    store i8 0, i8* %m.668, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %117, %115, %.lr.ph71
    %passed.13 = phi i32 [ %116, %115 ], [ %passed.1270, %117 ], [ %passed.1270, %.lr.ph71 ]
    %119 = getelementptr inbounds i16, i16* %zptr.667, i32 1
    %120 = getelementptr inbounds i8, i8* %m.668, i32 1
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep29 = getelementptr i16, i16* %lsr.iv28, i32 1
    %exitcond124 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond124, label %.loopexit, label %.lr.ph71
  
  .lr.ph65:                                         ; preds = %.preheader11, %130
    %lsr.iv24 = phi i16* [ %scevgep25, %130 ], [ %z, %.preheader11 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %130 ], [ %n, %.preheader11 ]
    %passed.1464 = phi i32 [ %passed.15, %130 ], [ 0, %.preheader11 ]
    %m.762 = phi i8* [ %132, %130 ], [ %mask, %.preheader11 ]
    %zptr.761 = phi i16* [ %131, %130 ], [ %9, %.preheader11 ]
    %121 = load i8, i8* %m.762, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %130, label %123
  
  ; <label>:123                                     ; preds = %.lr.ph65
    %124 = load i16, i16* %lsr.iv24, align 2, !tbaa !50
    %125 = load i16, i16* %zptr.761, align 2, !tbaa !50
    %126 = icmp ugt i16 %124, %125
    br i1 %126, label %127, label %129
  
  ; <label>:127                                     ; preds = %123
    %128 = add i32 %passed.1464, 1
    br label %130
  
  ; <label>:129                                     ; preds = %123
    store i8 0, i8* %m.762, align 1, !tbaa !49
    br label %130
  
  ; <label>:130                                     ; preds = %129, %127, %.lr.ph65
    %passed.15 = phi i32 [ %128, %127 ], [ %passed.1464, %129 ], [ %passed.1464, %.lr.ph65 ]
    %131 = getelementptr inbounds i16, i16* %zptr.761, i32 1
    %132 = getelementptr inbounds i8, i8* %m.762, i32 1
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i16, i16* %lsr.iv24, i32 1
    %exitcond123 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond123, label %.loopexit, label %.lr.ph65
  
  ; <label>:133                                     ; preds = %0
    %134 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %135 = load i8, i8* %134, align 1, !tbaa !40
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %133
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph83, label %.loopexit
  
  .preheader15:                                     ; preds = %133
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph77, label %.loopexit
  
  .lr.ph83:                                         ; preds = %.preheader17, %148
    %lsr.iv36 = phi i16* [ %scevgep37, %148 ], [ %z, %.preheader17 ]
    %lsr.iv34 = phi i32 [ %lsr.iv.next35, %148 ], [ %n, %.preheader17 ]
    %passed.1682 = phi i32 [ %passed.17, %148 ], [ 0, %.preheader17 ]
    %m.880 = phi i8* [ %150, %148 ], [ %mask, %.preheader17 ]
    %zptr.879 = phi i16* [ %149, %148 ], [ %9, %.preheader17 ]
    %139 = load i8, i8* %m.880, align 1, !tbaa !49
    %140 = icmp eq i8 %139, 0
    br i1 %140, label %148, label %141
  
  ; <label>:141                                     ; preds = %.lr.ph83
    %142 = load i16, i16* %lsr.iv36, align 2, !tbaa !50
    %143 = load i16, i16* %zptr.879, align 2, !tbaa !50
    %144 = icmp eq i16 %142, %143
    br i1 %144, label %147, label %145
  
  ; <label>:145                                     ; preds = %141
    store i16 %142, i16* %zptr.879, align 2, !tbaa !50
    %146 = add i32 %passed.1682, 1
    br label %148
  
  ; <label>:147                                     ; preds = %141
    store i8 0, i8* %m.880, align 1, !tbaa !49
    br label %148
  
  ; <label>:148                                     ; preds = %147, %145, %.lr.ph83
    %passed.17 = phi i32 [ %146, %145 ], [ %passed.1682, %147 ], [ %passed.1682, %.lr.ph83 ]
    %149 = getelementptr inbounds i16, i16* %zptr.879, i32 1
    %150 = getelementptr inbounds i8, i8* %m.880, i32 1
    %lsr.iv.next35 = add i32 %lsr.iv34, -1
    %scevgep37 = getelementptr i16, i16* %lsr.iv36, i32 1
    %exitcond126 = icmp eq i32 %lsr.iv.next35, 0
    br i1 %exitcond126, label %.loopexit, label %.lr.ph83
  
  .lr.ph77:                                         ; preds = %.preheader15, %160
    %lsr.iv32 = phi i16* [ %scevgep33, %160 ], [ %z, %.preheader15 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %160 ], [ %n, %.preheader15 ]
    %passed.1876 = phi i32 [ %passed.19, %160 ], [ 0, %.preheader15 ]
    %m.974 = phi i8* [ %162, %160 ], [ %mask, %.preheader15 ]
    %zptr.973 = phi i16* [ %161, %160 ], [ %9, %.preheader15 ]
    %151 = load i8, i8* %m.974, align 1, !tbaa !49
    %152 = icmp eq i8 %151, 0
    br i1 %152, label %160, label %153
  
  ; <label>:153                                     ; preds = %.lr.ph77
    %154 = load i16, i16* %lsr.iv32, align 2, !tbaa !50
    %155 = load i16, i16* %zptr.973, align 2, !tbaa !50
    %156 = icmp eq i16 %154, %155
    br i1 %156, label %159, label %157
  
  ; <label>:157                                     ; preds = %153
    %158 = add i32 %passed.1876, 1
    br label %160
  
  ; <label>:159                                     ; preds = %153
    store i8 0, i8* %m.974, align 1, !tbaa !49
    br label %160
  
  ; <label>:160                                     ; preds = %159, %157, %.lr.ph77
    %passed.19 = phi i32 [ %158, %157 ], [ %passed.1876, %159 ], [ %passed.1876, %.lr.ph77 ]
    %161 = getelementptr inbounds i16, i16* %zptr.973, i32 1
    %162 = getelementptr inbounds i8, i8* %m.974, i32 1
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i16, i16* %lsr.iv32, i32 1
    %exitcond125 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond125, label %.loopexit, label %.lr.ph77
  
  ; <label>:163                                     ; preds = %0
    %164 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %165 = load i8, i8* %164, align 1, !tbaa !40
    %166 = icmp eq i8 %165, 0
    br i1 %166, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %163
    %167 = icmp ne i32 %n, 0
    br i1 %167, label %.lr.ph95, label %.loopexit
  
  .preheader19:                                     ; preds = %163
    %168 = icmp ne i32 %n, 0
    br i1 %168, label %.lr.ph89, label %.loopexit
  
  .lr.ph95:                                         ; preds = %.preheader21, %178
    %lsr.iv44 = phi i16* [ %scevgep45, %178 ], [ %z, %.preheader21 ]
    %lsr.iv42 = phi i32 [ %lsr.iv.next43, %178 ], [ %n, %.preheader21 ]
    %passed.2094 = phi i32 [ %passed.21, %178 ], [ 0, %.preheader21 ]
    %m.1092 = phi i8* [ %180, %178 ], [ %mask, %.preheader21 ]
    %zptr.1091 = phi i16* [ %179, %178 ], [ %9, %.preheader21 ]
    %169 = load i8, i8* %m.1092, align 1, !tbaa !49
    %170 = icmp eq i8 %169, 0
    br i1 %170, label %178, label %171
  
  ; <label>:171                                     ; preds = %.lr.ph95
    %172 = load i16, i16* %lsr.iv44, align 2, !tbaa !50
    %173 = load i16, i16* %zptr.1091, align 2, !tbaa !50
    %174 = icmp eq i16 %172, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %171
    store i16 %172, i16* %zptr.1091, align 2, !tbaa !50
    %176 = add i32 %passed.2094, 1
    br label %178
  
  ; <label>:177                                     ; preds = %171
    store i8 0, i8* %m.1092, align 1, !tbaa !49
    br label %178
  
  ; <label>:178                                     ; preds = %177, %175, %.lr.ph95
    %passed.21 = phi i32 [ %176, %175 ], [ %passed.2094, %177 ], [ %passed.2094, %.lr.ph95 ]
    %179 = getelementptr inbounds i16, i16* %zptr.1091, i32 1
    %180 = getelementptr inbounds i8, i8* %m.1092, i32 1
    %lsr.iv.next43 = add i32 %lsr.iv42, -1
    %scevgep45 = getelementptr i16, i16* %lsr.iv44, i32 1
    %exitcond128 = icmp eq i32 %lsr.iv.next43, 0
    br i1 %exitcond128, label %.loopexit, label %.lr.ph95
  
  .lr.ph89:                                         ; preds = %.preheader19, %190
    %lsr.iv40 = phi i16* [ %scevgep41, %190 ], [ %z, %.preheader19 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %190 ], [ %n, %.preheader19 ]
    %passed.2288 = phi i32 [ %passed.23, %190 ], [ 0, %.preheader19 ]
    %m.1186 = phi i8* [ %192, %190 ], [ %mask, %.preheader19 ]
    %zptr.1185 = phi i16* [ %191, %190 ], [ %9, %.preheader19 ]
    %181 = load i8, i8* %m.1186, align 1, !tbaa !49
    %182 = icmp eq i8 %181, 0
    br i1 %182, label %190, label %183
  
  ; <label>:183                                     ; preds = %.lr.ph89
    %184 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %185 = load i16, i16* %zptr.1185, align 2, !tbaa !50
    %186 = icmp eq i16 %184, %185
    br i1 %186, label %187, label %189
  
  ; <label>:187                                     ; preds = %183
    %188 = add i32 %passed.2288, 1
    br label %190
  
  ; <label>:189                                     ; preds = %183
    store i8 0, i8* %m.1186, align 1, !tbaa !49
    br label %190
  
  ; <label>:190                                     ; preds = %189, %187, %.lr.ph89
    %passed.23 = phi i32 [ %188, %187 ], [ %passed.2288, %189 ], [ %passed.2288, %.lr.ph89 ]
    %191 = getelementptr inbounds i16, i16* %zptr.1185, i32 1
    %192 = getelementptr inbounds i8, i8* %m.1186, i32 1
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %exitcond127 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond127, label %.loopexit, label %.lr.ph89
  
  ; <label>:193                                     ; preds = %0
    %194 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %195 = load i8, i8* %194, align 1, !tbaa !40
    %196 = icmp eq i8 %195, 0
    br i1 %196, label %.loopexit, label %.preheader23
  
  .preheader23:                                     ; preds = %193
    %197 = icmp eq i32 %n, 0
    br i1 %197, label %.loopexit, label %.lr.ph101
  
  .lr.ph101:                                        ; preds = %.preheader23, %203
    %lsr.iv48 = phi i16* [ %scevgep49, %203 ], [ %z, %.preheader23 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %203 ], [ %n, %.preheader23 ]
    %passed.24100 = phi i32 [ %passed.25, %203 ], [ 0, %.preheader23 ]
    %m.1298 = phi i8* [ %205, %203 ], [ %mask, %.preheader23 ]
    %zptr.1297 = phi i16* [ %204, %203 ], [ %9, %.preheader23 ]
    %198 = load i8, i8* %m.1298, align 1, !tbaa !49
    %199 = icmp eq i8 %198, 0
    br i1 %199, label %203, label %200
  
  ; <label>:200                                     ; preds = %.lr.ph101
    %201 = load i16, i16* %lsr.iv48, align 2, !tbaa !50
    store i16 %201, i16* %zptr.1297, align 2, !tbaa !50
    %202 = add i32 %passed.24100, 1
    br label %203
  
  ; <label>:203                                     ; preds = %200, %.lr.ph101
    %passed.25 = phi i32 [ %202, %200 ], [ %passed.24100, %.lr.ph101 ]
    %204 = getelementptr inbounds i16, i16* %zptr.1297, i32 1
    %205 = getelementptr inbounds i8, i8* %m.1298, i32 1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i16, i16* %lsr.iv48, i32 1
    %exitcond129 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond129, label %.loopexit, label %.lr.ph101
  
  ; <label>:206                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %203, %178, %190, %148, %160, %118, %130, %88, %100, %58, %70, %28, %40, %.preheader23, %193, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph104.preheader, %.preheader25
    %passed.26 = phi i32 [ %n, %193 ], [ 0, %.preheader ], [ 0, %.preheader1 ], [ 0, %.preheader3 ], [ 0, %.preheader5 ], [ 0, %.preheader7 ], [ 0, %.preheader9 ], [ 0, %.preheader11 ], [ 0, %.preheader13 ], [ 0, %.preheader15 ], [ 0, %.preheader17 ], [ 0, %.preheader19 ], [ 0, %.preheader21 ], [ 0, %.preheader23 ], [ 0, %.preheader25 ], [ 0, %.lr.ph104.preheader ], [ %passed.3, %40 ], [ %passed.1, %28 ], [ %passed.7, %70 ], [ %passed.5, %58 ], [ %passed.11, %100 ], [ %passed.9, %88 ], [ %passed.15, %130 ], [ %passed.13, %118 ], [ %passed.19, %160 ], [ %passed.17, %148 ], [ %passed.23, %190 ], [ %passed.21, %178 ], [ %passed.25, %203 ]
    ret i32 %passed.26
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ult i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ugt i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_test_pixels_generic(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %2 = load i32, i32* %1, align 4, !tbaa !38
    switch i32 %2, label %295 [
      i32 513, label %4
      i32 515, label %49
      i32 518, label %94
      i32 516, label %139
      i32 517, label %184
      i32 514, label %229
      i32 519, label %274
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %3 = icmp eq i32 %n, 0
    br i1 %3, label %.loopexit, label %.lr.ph53.preheader
  
  .lr.ph53.preheader:                               ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %6 = load i8, i8* %5, align 1, !tbaa !40
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %4
    %8 = icmp ne i32 %n, 0
    br i1 %8, label %.lr.ph29, label %.loopexit
  
  .lr.ph29:                                         ; preds = %.preheader1
    br label %10
  
  .preheader:                                       ; preds = %4
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %30
  
  ; <label>:10                                      ; preds = %29, %.lr.ph29
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %mask, %.lr.ph29 ]
    %lsr.iv14 = phi i32* [ %scevgep15, %29 ], [ %y, %.lr.ph29 ]
    %lsr.iv12 = phi i32* [ %scevgep13, %29 ], [ %x, %.lr.ph29 ]
    %lsr.iv10 = phi i16* [ %scevgep11, %29 ], [ %z, %.lr.ph29 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %29 ], [ %n, %.lr.ph29 ]
    %11 = load i8, i8* %lsr.iv16, align 1, !tbaa !49
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %29, label %13
  
  ; <label>:13                                      ; preds = %10
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr128 = add i32 %sunkaddr, 2024
    %sunkaddr129 = inttoptr i32 %sunkaddr128 to %struct.gl_frame_buffer**
    %14 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr129, align 4, !tbaa !45
    %15 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 3
    %16 = load i16*, i16** %15, align 4, !tbaa !46
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 1
    %18 = load i32, i32* %17, align 4, !tbaa !48
    %19 = load i32, i32* %lsr.iv14, align 4, !tbaa !51
    %20 = mul nsw i32 %19, %18
    %21 = getelementptr inbounds i16, i16* %16, i32 %20
    %22 = load i32, i32* %lsr.iv12, align 4, !tbaa !51
    %23 = getelementptr inbounds i16, i16* %21, i32 %22
    %24 = load i16, i16* %lsr.iv10, align 2, !tbaa !50
    %25 = load i16, i16* %23, align 2, !tbaa !50
    %26 = icmp ult i16 %24, %25
    br i1 %26, label %27, label %28
  
  ; <label>:27                                      ; preds = %13
    store i16 %24, i16* %23, align 2, !tbaa !50
    br label %29
  
  ; <label>:28                                      ; preds = %13
    store i8 0, i8* %lsr.iv16, align 1, !tbaa !49
    br label %29
  
  ; <label>:29                                      ; preds = %28, %27, %10
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i16, i16* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i32, i32* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i32, i32* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %exitcond67 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond67, label %.loopexit, label %10
  
  ; <label>:30                                      ; preds = %48, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %48 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %48 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %48 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %48 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %48 ], [ %n, %.lr.ph ]
    %31 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %48, label %33
  
  ; <label>:33                                      ; preds = %30
    %sunkaddr130 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr131 = add i32 %sunkaddr130, 2024
    %sunkaddr132 = inttoptr i32 %sunkaddr131 to %struct.gl_frame_buffer**
    %34 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr132, align 4, !tbaa !45
    %35 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 3
    %36 = load i16*, i16** %35, align 4, !tbaa !46
    %37 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 1
    %38 = load i32, i32* %37, align 4, !tbaa !48
    %39 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %40 = mul nsw i32 %39, %38
    %41 = getelementptr inbounds i16, i16* %36, i32 %40
    %42 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %43 = getelementptr inbounds i16, i16* %41, i32 %42
    %44 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %45 = load i16, i16* %43, align 2, !tbaa !50
    %46 = icmp ult i16 %44, %45
    br i1 %46, label %48, label %47
  
  ; <label>:47                                      ; preds = %33
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %48
  
  ; <label>:48                                      ; preds = %47, %33, %30
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %30
  
  ; <label>:49                                      ; preds = %0
    %50 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %51 = load i8, i8* %50, align 1, !tbaa !40
    %52 = icmp eq i8 %51, 0
    br i1 %52, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %49
    %53 = icmp ne i32 %n, 0
    br i1 %53, label %.lr.ph33, label %.loopexit
  
  .lr.ph33:                                         ; preds = %.preheader5
    br label %55
  
  .preheader3:                                      ; preds = %49
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph31, label %.loopexit
  
  .lr.ph31:                                         ; preds = %.preheader3
    br label %75
  
  ; <label>:55                                      ; preds = %74, %.lr.ph33
    %lsr.iv36 = phi i8* [ %scevgep37, %74 ], [ %mask, %.lr.ph33 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %74 ], [ %y, %.lr.ph33 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %74 ], [ %x, %.lr.ph33 ]
    %lsr.iv30 = phi i16* [ %scevgep31, %74 ], [ %z, %.lr.ph33 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %74 ], [ %n, %.lr.ph33 ]
    %56 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %57 = icmp eq i8 %56, 0
    br i1 %57, label %74, label %58
  
  ; <label>:58                                      ; preds = %55
    %sunkaddr133 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr134 = add i32 %sunkaddr133, 2024
    %sunkaddr135 = inttoptr i32 %sunkaddr134 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr135, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 3
    %61 = load i16*, i16** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv34, align 4, !tbaa !51
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i16, i16* %61, i32 %65
    %67 = load i32, i32* %lsr.iv32, align 4, !tbaa !51
    %68 = getelementptr inbounds i16, i16* %66, i32 %67
    %69 = load i16, i16* %lsr.iv30, align 2, !tbaa !50
    %70 = load i16, i16* %68, align 2, !tbaa !50
    %71 = icmp ugt i16 %69, %70
    br i1 %71, label %73, label %72
  
  ; <label>:72                                      ; preds = %58
    store i16 %69, i16* %68, align 2, !tbaa !50
    br label %74
  
  ; <label>:73                                      ; preds = %58
    store i8 0, i8* %lsr.iv36, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %73, %72, %55
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr i16, i16* %lsr.iv30, i32 1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond69 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond69, label %.loopexit, label %55
  
  ; <label>:75                                      ; preds = %93, %.lr.ph31
    %lsr.iv26 = phi i8* [ %scevgep27, %93 ], [ %mask, %.lr.ph31 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %93 ], [ %y, %.lr.ph31 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %93 ], [ %x, %.lr.ph31 ]
    %lsr.iv20 = phi i16* [ %scevgep21, %93 ], [ %z, %.lr.ph31 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %93 ], [ %n, %.lr.ph31 ]
    %76 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %77 = icmp eq i8 %76, 0
    br i1 %77, label %93, label %78
  
  ; <label>:78                                      ; preds = %75
    %sunkaddr136 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr137 = add i32 %sunkaddr136, 2024
    %sunkaddr138 = inttoptr i32 %sunkaddr137 to %struct.gl_frame_buffer**
    %79 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr138, align 4, !tbaa !45
    %80 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 3
    %81 = load i16*, i16** %80, align 4, !tbaa !46
    %82 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 1
    %83 = load i32, i32* %82, align 4, !tbaa !48
    %84 = load i32, i32* %lsr.iv24, align 4, !tbaa !51
    %85 = mul nsw i32 %84, %83
    %86 = getelementptr inbounds i16, i16* %81, i32 %85
    %87 = load i32, i32* %lsr.iv22, align 4, !tbaa !51
    %88 = getelementptr inbounds i16, i16* %86, i32 %87
    %89 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %90 = load i16, i16* %88, align 2, !tbaa !50
    %91 = icmp ugt i16 %89, %90
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %78
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %93
  
  ; <label>:93                                      ; preds = %92, %78, %75
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond68 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond68, label %.loopexit, label %75
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %96 = load i8, i8* %95, align 1, !tbaa !40
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %94
    %98 = icmp ne i32 %n, 0
    br i1 %98, label %.lr.ph37, label %.loopexit
  
  .lr.ph37:                                         ; preds = %.preheader9
    br label %100
  
  .preheader7:                                      ; preds = %94
    %99 = icmp ne i32 %n, 0
    br i1 %99, label %.lr.ph35, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader7
    br label %120
  
  ; <label>:100                                     ; preds = %119, %.lr.ph37
    %lsr.iv56 = phi i8* [ %scevgep57, %119 ], [ %mask, %.lr.ph37 ]
    %lsr.iv54 = phi i32* [ %scevgep55, %119 ], [ %y, %.lr.ph37 ]
    %lsr.iv52 = phi i32* [ %scevgep53, %119 ], [ %x, %.lr.ph37 ]
    %lsr.iv50 = phi i16* [ %scevgep51, %119 ], [ %z, %.lr.ph37 ]
    %lsr.iv48 = phi i32 [ %lsr.iv.next49, %119 ], [ %n, %.lr.ph37 ]
    %101 = load i8, i8* %lsr.iv56, align 1, !tbaa !49
    %102 = icmp eq i8 %101, 0
    br i1 %102, label %119, label %103
  
  ; <label>:103                                     ; preds = %100
    %sunkaddr139 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr140 = add i32 %sunkaddr139, 2024
    %sunkaddr141 = inttoptr i32 %sunkaddr140 to %struct.gl_frame_buffer**
    %104 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr141, align 4, !tbaa !45
    %105 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 3
    %106 = load i16*, i16** %105, align 4, !tbaa !46
    %107 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 1
    %108 = load i32, i32* %107, align 4, !tbaa !48
    %109 = load i32, i32* %lsr.iv54, align 4, !tbaa !51
    %110 = mul nsw i32 %109, %108
    %111 = getelementptr inbounds i16, i16* %106, i32 %110
    %112 = load i32, i32* %lsr.iv52, align 4, !tbaa !51
    %113 = getelementptr inbounds i16, i16* %111, i32 %112
    %114 = load i16, i16* %lsr.iv50, align 2, !tbaa !50
    %115 = load i16, i16* %113, align 2, !tbaa !50
    %116 = icmp ult i16 %114, %115
    br i1 %116, label %118, label %117
  
  ; <label>:117                                     ; preds = %103
    store i16 %114, i16* %113, align 2, !tbaa !50
    br label %119
  
  ; <label>:118                                     ; preds = %103
    store i8 0, i8* %lsr.iv56, align 1, !tbaa !49
    br label %119
  
  ; <label>:119                                     ; preds = %118, %117, %100
    %lsr.iv.next49 = add i32 %lsr.iv48, -1
    %scevgep51 = getelementptr i16, i16* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i32, i32* %lsr.iv52, i32 1
    %scevgep55 = getelementptr i32, i32* %lsr.iv54, i32 1
    %scevgep57 = getelementptr i8, i8* %lsr.iv56, i32 1
    %exitcond71 = icmp eq i32 %lsr.iv.next49, 0
    br i1 %exitcond71, label %.loopexit, label %100
  
  ; <label>:120                                     ; preds = %138, %.lr.ph35
    %lsr.iv46 = phi i8* [ %scevgep47, %138 ], [ %mask, %.lr.ph35 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %138 ], [ %y, %.lr.ph35 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %138 ], [ %x, %.lr.ph35 ]
    %lsr.iv40 = phi i16* [ %scevgep41, %138 ], [ %z, %.lr.ph35 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %138 ], [ %n, %.lr.ph35 ]
    %121 = load i8, i8* %lsr.iv46, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %138, label %123
  
  ; <label>:123                                     ; preds = %120
    %sunkaddr142 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr143 = add i32 %sunkaddr142, 2024
    %sunkaddr144 = inttoptr i32 %sunkaddr143 to %struct.gl_frame_buffer**
    %124 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr144, align 4, !tbaa !45
    %125 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 3
    %126 = load i16*, i16** %125, align 4, !tbaa !46
    %127 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 1
    %128 = load i32, i32* %127, align 4, !tbaa !48
    %129 = load i32, i32* %lsr.iv44, align 4, !tbaa !51
    %130 = mul nsw i32 %129, %128
    %131 = getelementptr inbounds i16, i16* %126, i32 %130
    %132 = load i32, i32* %lsr.iv42, align 4, !tbaa !51
    %133 = getelementptr inbounds i16, i16* %131, i32 %132
    %134 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %135 = load i16, i16* %133, align 2, !tbaa !50
    %136 = icmp ult i16 %134, %135
    br i1 %136, label %137, label %138
  
  ; <label>:137                                     ; preds = %123
    store i8 0, i8* %lsr.iv46, align 1, !tbaa !49
    br label %138
  
  ; <label>:138                                     ; preds = %137, %123, %120
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i8, i8* %lsr.iv46, i32 1
    %exitcond70 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond70, label %.loopexit, label %120
  
  ; <label>:139                                     ; preds = %0
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %141 = load i8, i8* %140, align 1, !tbaa !40
    %142 = icmp eq i8 %141, 0
    br i1 %142, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %139
    %143 = icmp ne i32 %n, 0
    br i1 %143, label %.lr.ph41, label %.loopexit
  
  .lr.ph41:                                         ; preds = %.preheader13
    br label %145
  
  .preheader11:                                     ; preds = %139
    %144 = icmp ne i32 %n, 0
    br i1 %144, label %.lr.ph39, label %.loopexit
  
  .lr.ph39:                                         ; preds = %.preheader11
    br label %165
  
  ; <label>:145                                     ; preds = %164, %.lr.ph41
    %lsr.iv76 = phi i8* [ %scevgep77, %164 ], [ %mask, %.lr.ph41 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %164 ], [ %y, %.lr.ph41 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %164 ], [ %x, %.lr.ph41 ]
    %lsr.iv70 = phi i16* [ %scevgep71, %164 ], [ %z, %.lr.ph41 ]
    %lsr.iv68 = phi i32 [ %lsr.iv.next69, %164 ], [ %n, %.lr.ph41 ]
    %146 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %147 = icmp eq i8 %146, 0
    br i1 %147, label %164, label %148
  
  ; <label>:148                                     ; preds = %145
    %sunkaddr145 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr146 = add i32 %sunkaddr145, 2024
    %sunkaddr147 = inttoptr i32 %sunkaddr146 to %struct.gl_frame_buffer**
    %149 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr147, align 4, !tbaa !45
    %150 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 3
    %151 = load i16*, i16** %150, align 4, !tbaa !46
    %152 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 1
    %153 = load i32, i32* %152, align 4, !tbaa !48
    %154 = load i32, i32* %lsr.iv74, align 4, !tbaa !51
    %155 = mul nsw i32 %154, %153
    %156 = getelementptr inbounds i16, i16* %151, i32 %155
    %157 = load i32, i32* %lsr.iv72, align 4, !tbaa !51
    %158 = getelementptr inbounds i16, i16* %156, i32 %157
    %159 = load i16, i16* %lsr.iv70, align 2, !tbaa !50
    %160 = load i16, i16* %158, align 2, !tbaa !50
    %161 = icmp ugt i16 %159, %160
    br i1 %161, label %162, label %163
  
  ; <label>:162                                     ; preds = %148
    store i16 %159, i16* %158, align 2, !tbaa !50
    br label %164
  
  ; <label>:163                                     ; preds = %148
    store i8 0, i8* %lsr.iv76, align 1, !tbaa !49
    br label %164
  
  ; <label>:164                                     ; preds = %163, %162, %145
    %lsr.iv.next69 = add i32 %lsr.iv68, -1
    %scevgep71 = getelementptr i16, i16* %lsr.iv70, i32 1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond73 = icmp eq i32 %lsr.iv.next69, 0
    br i1 %exitcond73, label %.loopexit, label %145
  
  ; <label>:165                                     ; preds = %183, %.lr.ph39
    %lsr.iv66 = phi i8* [ %scevgep67, %183 ], [ %mask, %.lr.ph39 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %183 ], [ %y, %.lr.ph39 ]
    %lsr.iv62 = phi i32* [ %scevgep63, %183 ], [ %x, %.lr.ph39 ]
    %lsr.iv60 = phi i16* [ %scevgep61, %183 ], [ %z, %.lr.ph39 ]
    %lsr.iv58 = phi i32 [ %lsr.iv.next59, %183 ], [ %n, %.lr.ph39 ]
    %166 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %167 = icmp eq i8 %166, 0
    br i1 %167, label %183, label %168
  
  ; <label>:168                                     ; preds = %165
    %sunkaddr148 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr149 = add i32 %sunkaddr148, 2024
    %sunkaddr150 = inttoptr i32 %sunkaddr149 to %struct.gl_frame_buffer**
    %169 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr150, align 4, !tbaa !45
    %170 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 3
    %171 = load i16*, i16** %170, align 4, !tbaa !46
    %172 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 1
    %173 = load i32, i32* %172, align 4, !tbaa !48
    %174 = load i32, i32* %lsr.iv64, align 4, !tbaa !51
    %175 = mul nsw i32 %174, %173
    %176 = getelementptr inbounds i16, i16* %171, i32 %175
    %177 = load i32, i32* %lsr.iv62, align 4, !tbaa !51
    %178 = getelementptr inbounds i16, i16* %176, i32 %177
    %179 = load i16, i16* %lsr.iv60, align 2, !tbaa !50
    %180 = load i16, i16* %178, align 2, !tbaa !50
    %181 = icmp ugt i16 %179, %180
    br i1 %181, label %183, label %182
  
  ; <label>:182                                     ; preds = %168
    store i8 0, i8* %lsr.iv66, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %182, %168, %165
    %lsr.iv.next59 = add i32 %lsr.iv58, -1
    %scevgep61 = getelementptr i16, i16* %lsr.iv60, i32 1
    %scevgep63 = getelementptr i32, i32* %lsr.iv62, i32 1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond72 = icmp eq i32 %lsr.iv.next59, 0
    br i1 %exitcond72, label %.loopexit, label %165
  
  ; <label>:184                                     ; preds = %0
    %185 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %186 = load i8, i8* %185, align 1, !tbaa !40
    %187 = icmp eq i8 %186, 0
    br i1 %187, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %184
    %188 = icmp ne i32 %n, 0
    br i1 %188, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %.preheader17
    br label %190
  
  .preheader15:                                     ; preds = %184
    %189 = icmp ne i32 %n, 0
    br i1 %189, label %.lr.ph43, label %.loopexit
  
  .lr.ph43:                                         ; preds = %.preheader15
    br label %210
  
  ; <label>:190                                     ; preds = %209, %.lr.ph45
    %lsr.iv96 = phi i8* [ %scevgep97, %209 ], [ %mask, %.lr.ph45 ]
    %lsr.iv94 = phi i32* [ %scevgep95, %209 ], [ %y, %.lr.ph45 ]
    %lsr.iv92 = phi i32* [ %scevgep93, %209 ], [ %x, %.lr.ph45 ]
    %lsr.iv90 = phi i16* [ %scevgep91, %209 ], [ %z, %.lr.ph45 ]
    %lsr.iv88 = phi i32 [ %lsr.iv.next89, %209 ], [ %n, %.lr.ph45 ]
    %191 = load i8, i8* %lsr.iv96, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %209, label %193
  
  ; <label>:193                                     ; preds = %190
    %sunkaddr151 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr152 = add i32 %sunkaddr151, 2024
    %sunkaddr153 = inttoptr i32 %sunkaddr152 to %struct.gl_frame_buffer**
    %194 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr153, align 4, !tbaa !45
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 3
    %196 = load i16*, i16** %195, align 4, !tbaa !46
    %197 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !48
    %199 = load i32, i32* %lsr.iv94, align 4, !tbaa !51
    %200 = mul nsw i32 %199, %198
    %201 = getelementptr inbounds i16, i16* %196, i32 %200
    %202 = load i32, i32* %lsr.iv92, align 4, !tbaa !51
    %203 = getelementptr inbounds i16, i16* %201, i32 %202
    %204 = load i16, i16* %lsr.iv90, align 2, !tbaa !50
    %205 = load i16, i16* %203, align 2, !tbaa !50
    %206 = icmp eq i16 %204, %205
    br i1 %206, label %208, label %207
  
  ; <label>:207                                     ; preds = %193
    store i16 %204, i16* %203, align 2, !tbaa !50
    br label %209
  
  ; <label>:208                                     ; preds = %193
    store i8 0, i8* %lsr.iv96, align 1, !tbaa !49
    br label %209
  
  ; <label>:209                                     ; preds = %208, %207, %190
    %lsr.iv.next89 = add i32 %lsr.iv88, -1
    %scevgep91 = getelementptr i16, i16* %lsr.iv90, i32 1
    %scevgep93 = getelementptr i32, i32* %lsr.iv92, i32 1
    %scevgep95 = getelementptr i32, i32* %lsr.iv94, i32 1
    %scevgep97 = getelementptr i8, i8* %lsr.iv96, i32 1
    %exitcond75 = icmp eq i32 %lsr.iv.next89, 0
    br i1 %exitcond75, label %.loopexit, label %190
  
  ; <label>:210                                     ; preds = %228, %.lr.ph43
    %lsr.iv86 = phi i8* [ %scevgep87, %228 ], [ %mask, %.lr.ph43 ]
    %lsr.iv84 = phi i32* [ %scevgep85, %228 ], [ %y, %.lr.ph43 ]
    %lsr.iv82 = phi i32* [ %scevgep83, %228 ], [ %x, %.lr.ph43 ]
    %lsr.iv80 = phi i16* [ %scevgep81, %228 ], [ %z, %.lr.ph43 ]
    %lsr.iv78 = phi i32 [ %lsr.iv.next79, %228 ], [ %n, %.lr.ph43 ]
    %211 = load i8, i8* %lsr.iv86, align 1, !tbaa !49
    %212 = icmp eq i8 %211, 0
    br i1 %212, label %228, label %213
  
  ; <label>:213                                     ; preds = %210
    %sunkaddr154 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr155 = add i32 %sunkaddr154, 2024
    %sunkaddr156 = inttoptr i32 %sunkaddr155 to %struct.gl_frame_buffer**
    %214 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr156, align 4, !tbaa !45
    %215 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 3
    %216 = load i16*, i16** %215, align 4, !tbaa !46
    %217 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 1
    %218 = load i32, i32* %217, align 4, !tbaa !48
    %219 = load i32, i32* %lsr.iv84, align 4, !tbaa !51
    %220 = mul nsw i32 %219, %218
    %221 = getelementptr inbounds i16, i16* %216, i32 %220
    %222 = load i32, i32* %lsr.iv82, align 4, !tbaa !51
    %223 = getelementptr inbounds i16, i16* %221, i32 %222
    %224 = load i16, i16* %lsr.iv80, align 2, !tbaa !50
    %225 = load i16, i16* %223, align 2, !tbaa !50
    %226 = icmp eq i16 %224, %225
    br i1 %226, label %227, label %228
  
  ; <label>:227                                     ; preds = %213
    store i8 0, i8* %lsr.iv86, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %227, %213, %210
    %lsr.iv.next79 = add i32 %lsr.iv78, -1
    %scevgep81 = getelementptr i16, i16* %lsr.iv80, i32 1
    %scevgep83 = getelementptr i32, i32* %lsr.iv82, i32 1
    %scevgep85 = getelementptr i32, i32* %lsr.iv84, i32 1
    %scevgep87 = getelementptr i8, i8* %lsr.iv86, i32 1
    %exitcond74 = icmp eq i32 %lsr.iv.next79, 0
    br i1 %exitcond74, label %.loopexit, label %210
  
  ; <label>:229                                     ; preds = %0
    %230 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %231 = load i8, i8* %230, align 1, !tbaa !40
    %232 = icmp eq i8 %231, 0
    br i1 %232, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %229
    %233 = icmp ne i32 %n, 0
    br i1 %233, label %.lr.ph49, label %.loopexit
  
  .lr.ph49:                                         ; preds = %.preheader21
    br label %235
  
  .preheader19:                                     ; preds = %229
    %234 = icmp ne i32 %n, 0
    br i1 %234, label %.lr.ph47, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader19
    br label %255
  
  ; <label>:235                                     ; preds = %254, %.lr.ph49
    %lsr.iv116 = phi i8* [ %scevgep117, %254 ], [ %mask, %.lr.ph49 ]
    %lsr.iv114 = phi i32* [ %scevgep115, %254 ], [ %y, %.lr.ph49 ]
    %lsr.iv112 = phi i32* [ %scevgep113, %254 ], [ %x, %.lr.ph49 ]
    %lsr.iv110 = phi i16* [ %scevgep111, %254 ], [ %z, %.lr.ph49 ]
    %lsr.iv108 = phi i32 [ %lsr.iv.next109, %254 ], [ %n, %.lr.ph49 ]
    %236 = load i8, i8* %lsr.iv116, align 1, !tbaa !49
    %237 = icmp eq i8 %236, 0
    br i1 %237, label %254, label %238
  
  ; <label>:238                                     ; preds = %235
    %sunkaddr157 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr158 = add i32 %sunkaddr157, 2024
    %sunkaddr159 = inttoptr i32 %sunkaddr158 to %struct.gl_frame_buffer**
    %239 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr159, align 4, !tbaa !45
    %240 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 3
    %241 = load i16*, i16** %240, align 4, !tbaa !46
    %242 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 1
    %243 = load i32, i32* %242, align 4, !tbaa !48
    %244 = load i32, i32* %lsr.iv114, align 4, !tbaa !51
    %245 = mul nsw i32 %244, %243
    %246 = getelementptr inbounds i16, i16* %241, i32 %245
    %247 = load i32, i32* %lsr.iv112, align 4, !tbaa !51
    %248 = getelementptr inbounds i16, i16* %246, i32 %247
    %249 = load i16, i16* %lsr.iv110, align 2, !tbaa !50
    %250 = load i16, i16* %248, align 2, !tbaa !50
    %251 = icmp eq i16 %249, %250
    br i1 %251, label %252, label %253
  
  ; <label>:252                                     ; preds = %238
    store i16 %249, i16* %248, align 2, !tbaa !50
    br label %254
  
  ; <label>:253                                     ; preds = %238
    store i8 0, i8* %lsr.iv116, align 1, !tbaa !49
    br label %254
  
  ; <label>:254                                     ; preds = %253, %252, %235
    %lsr.iv.next109 = add i32 %lsr.iv108, -1
    %scevgep111 = getelementptr i16, i16* %lsr.iv110, i32 1
    %scevgep113 = getelementptr i32, i32* %lsr.iv112, i32 1
    %scevgep115 = getelementptr i32, i32* %lsr.iv114, i32 1
    %scevgep117 = getelementptr i8, i8* %lsr.iv116, i32 1
    %exitcond77 = icmp eq i32 %lsr.iv.next109, 0
    br i1 %exitcond77, label %.loopexit, label %235
  
  ; <label>:255                                     ; preds = %273, %.lr.ph47
    %lsr.iv106 = phi i8* [ %scevgep107, %273 ], [ %mask, %.lr.ph47 ]
    %lsr.iv104 = phi i32* [ %scevgep105, %273 ], [ %y, %.lr.ph47 ]
    %lsr.iv102 = phi i32* [ %scevgep103, %273 ], [ %x, %.lr.ph47 ]
    %lsr.iv100 = phi i16* [ %scevgep101, %273 ], [ %z, %.lr.ph47 ]
    %lsr.iv98 = phi i32 [ %lsr.iv.next99, %273 ], [ %n, %.lr.ph47 ]
    %256 = load i8, i8* %lsr.iv106, align 1, !tbaa !49
    %257 = icmp eq i8 %256, 0
    br i1 %257, label %273, label %258
  
  ; <label>:258                                     ; preds = %255
    %sunkaddr160 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr161 = add i32 %sunkaddr160, 2024
    %sunkaddr162 = inttoptr i32 %sunkaddr161 to %struct.gl_frame_buffer**
    %259 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr162, align 4, !tbaa !45
    %260 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 3
    %261 = load i16*, i16** %260, align 4, !tbaa !46
    %262 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 1
    %263 = load i32, i32* %262, align 4, !tbaa !48
    %264 = load i32, i32* %lsr.iv104, align 4, !tbaa !51
    %265 = mul nsw i32 %264, %263
    %266 = getelementptr inbounds i16, i16* %261, i32 %265
    %267 = load i32, i32* %lsr.iv102, align 4, !tbaa !51
    %268 = getelementptr inbounds i16, i16* %266, i32 %267
    %269 = load i16, i16* %lsr.iv100, align 2, !tbaa !50
    %270 = load i16, i16* %268, align 2, !tbaa !50
    %271 = icmp eq i16 %269, %270
    br i1 %271, label %273, label %272
  
  ; <label>:272                                     ; preds = %258
    store i8 0, i8* %lsr.iv106, align 1, !tbaa !49
    br label %273
  
  ; <label>:273                                     ; preds = %272, %258, %255
    %lsr.iv.next99 = add i32 %lsr.iv98, -1
    %scevgep101 = getelementptr i16, i16* %lsr.iv100, i32 1
    %scevgep103 = getelementptr i32, i32* %lsr.iv102, i32 1
    %scevgep105 = getelementptr i32, i32* %lsr.iv104, i32 1
    %scevgep107 = getelementptr i8, i8* %lsr.iv106, i32 1
    %exitcond76 = icmp eq i32 %lsr.iv.next99, 0
    br i1 %exitcond76, label %.loopexit, label %255
  
  ; <label>:274                                     ; preds = %0
    %275 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %276 = load i8, i8* %275, align 1, !tbaa !40
    %277 = icmp ne i8 %276, 0
    %278 = icmp ne i32 %n, 0
    %or.cond = and i1 %277, %278
    br i1 %or.cond, label %.lr.ph51, label %.loopexit
  
  .lr.ph51:                                         ; preds = %274
    br label %279
  
  ; <label>:279                                     ; preds = %294, %.lr.ph51
    %lsr.iv126 = phi i8* [ %scevgep127, %294 ], [ %mask, %.lr.ph51 ]
    %lsr.iv124 = phi i32* [ %scevgep125, %294 ], [ %y, %.lr.ph51 ]
    %lsr.iv122 = phi i32* [ %scevgep123, %294 ], [ %x, %.lr.ph51 ]
    %lsr.iv120 = phi i16* [ %scevgep121, %294 ], [ %z, %.lr.ph51 ]
    %lsr.iv118 = phi i32 [ %lsr.iv.next119, %294 ], [ %n, %.lr.ph51 ]
    %280 = load i8, i8* %lsr.iv126, align 1, !tbaa !49
    %281 = icmp eq i8 %280, 0
    br i1 %281, label %294, label %282
  
  ; <label>:282                                     ; preds = %279
    %sunkaddr163 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr164 = add i32 %sunkaddr163, 2024
    %sunkaddr165 = inttoptr i32 %sunkaddr164 to %struct.gl_frame_buffer**
    %283 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr165, align 4, !tbaa !45
    %284 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 3
    %285 = load i16*, i16** %284, align 4, !tbaa !46
    %286 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 1
    %287 = load i32, i32* %286, align 4, !tbaa !48
    %288 = load i32, i32* %lsr.iv124, align 4, !tbaa !51
    %289 = mul nsw i32 %288, %287
    %290 = getelementptr inbounds i16, i16* %285, i32 %289
    %291 = load i32, i32* %lsr.iv122, align 4, !tbaa !51
    %292 = getelementptr inbounds i16, i16* %290, i32 %291
    %293 = load i16, i16* %lsr.iv120, align 2, !tbaa !50
    store i16 %293, i16* %292, align 2, !tbaa !50
    br label %294
  
  ; <label>:294                                     ; preds = %282, %279
    %lsr.iv.next119 = add i32 %lsr.iv118, -1
    %scevgep121 = getelementptr i16, i16* %lsr.iv120, i32 1
    %scevgep123 = getelementptr i32, i32* %lsr.iv122, i32 1
    %scevgep125 = getelementptr i32, i32* %lsr.iv124, i32 1
    %scevgep127 = getelementptr i8, i8* %lsr.iv126, i32 1
    %exitcond78 = icmp eq i32 %lsr.iv.next119, 0
    br i1 %exitcond78, label %.loopexit, label %279
  
  ; <label>:295                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %294, %254, %273, %209, %228, %164, %183, %119, %138, %74, %93, %29, %48, %274, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph53.preheader, %.preheader25
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ult i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ugt i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_float(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, float* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast float* %depth to i8*
    %8 = shl i32 %n, 2
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 4, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %11 = load i32, i32* %10, align 4, !tbaa !48
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph4.preheader
  
  .lr.ph4.preheader:                                ; preds = %9
    %13 = mul i32 %11, %y
    %14 = add i32 %x, %13
    %scevgep2 = getelementptr i16, i16* %4, i32 %14
    br label %.lr.ph4
  
  .lr.ph4:                                          ; preds = %.lr.ph4, %.lr.ph4.preheader
    %lsr.iv3 = phi i16* [ %scevgep4, %.lr.ph4 ], [ %scevgep2, %.lr.ph4.preheader ]
    %lsr.iv1 = phi float* [ %scevgep, %.lr.ph4 ], [ %depth, %.lr.ph4.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph4 ], [ %n, %.lr.ph4.preheader ]
    %15 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %16 = uitofp i16 %15 to float
    %17 = fmul float %16, 0x3EF0001000000000
    store float %17, float* %lsr.iv1, align 4, !tbaa !52
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr float, float* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %exitcond6 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond6, label %.loopexit, label %.lr.ph4
  
  .loopexit:                                        ; preds = %.lr.ph4, %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_int(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast i16* %depth to i8*
    %8 = shl i32 %n, 1
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 2, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = bitcast i16* %depth to i8*
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    %13 = mul nsw i32 %12, %y
    %14 = getelementptr inbounds i16, i16* %4, i32 %13
    %15 = getelementptr inbounds i16, i16* %14, i32 %x
    %16 = bitcast i16* %15 to i8*
    %17 = shl i32 %n, 1
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %10, i8* %16, i32 %17, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4
  
  ; Function Attrs: nounwind
  define void @gl_alloc_depth_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %10, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast i16* %4 to i8*
    tail call void @free(i8* %7) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 3
    store i16* null, i16** %9, align 4, !tbaa !46
    br label %10
  
  ; <label>:10                                      ; preds = %6, %0
    %11 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %8, %6 ]
    %12 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 1
    %13 = load i32, i32* %12, align 4, !tbaa !48
    %14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 2
    %15 = load i32, i32* %14, align 4, !tbaa !53
    %16 = shl i32 %13, 1
    %17 = mul i32 %16, %15
    %18 = tail call noalias i8* @malloc(i32 signext %17) #5
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 3
    %20 = bitcast i16** %19 to i8**
    store i8* %18, i8** %20, align 4, !tbaa !46
    %21 = icmp eq i8* %18, null
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %10
    %23 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    store i8 0, i8* %23, align 4, !tbaa !54
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0)) #5
    br label %24
  
  ; <label>:24                                      ; preds = %22, %10
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_depth_buffer(%struct.gl_context* nocapture readonly %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    %2 = load float, float* %1, align 4, !tbaa !37
    %3 = fmul float %2, 6.553500e+04
    %4 = fptoui float %3 to i16
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %6 = load %struct.gl_visual*, %struct.gl_visual** %5, align 4, !tbaa !55
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %6, i32 0, i32 13
    %8 = load i32, i32* %7, align 4, !tbaa !56
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %.loopexit, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %11, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 3
    %14 = load i16*, i16** %13, align 4, !tbaa !46
    %15 = icmp eq i16* %14, null
    br i1 %15, label %.loopexit, label %16
  
  ; <label>:16                                      ; preds = %10
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %18 = load i8, i8* %17, align 4, !tbaa !58
    %19 = icmp eq i8 %18, 0
    br i1 %19, label %38, label %20
  
  ; <label>:20                                      ; preds = %16
    %21 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 11
    %22 = load i32, i32* %21, align 4, !tbaa !59
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 12
    %24 = load i32, i32* %23, align 4, !tbaa !60
    %25 = icmp sgt i32 %22, %24
    br i1 %25, label %.loopexit, label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %20
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !48
    %.phi.trans.insert14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 9
    %.pre15 = load i32, i32* %.phi.trans.insert14, align 4, !tbaa !61
    %.phi.trans.insert16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 10
    %.pre17 = load i32, i32* %.phi.trans.insert16, align 4, !tbaa !62
    %26 = add i32 %.pre15, -1
    %27 = sub i32 %26, %.pre17
    br label %28
  
  ; <label>:28                                      ; preds = %35, %.lr.ph11
    %y.010 = phi i32 [ %22, %.lr.ph11 ], [ %36, %35 ]
    %29 = mul nsw i32 %.pre, %y.010
    %30 = getelementptr inbounds i16, i16* %14, i32 %29
    %31 = getelementptr inbounds i16, i16* %30, i32 %.pre15
    br label %32
  
  ; <label>:32                                      ; preds = %32, %28
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %32 ], [ %27, %28 ]
    %d.0 = phi i16* [ %31, %28 ], [ %33, %32 ]
    %33 = getelementptr inbounds i16, i16* %d.0, i32 1
    store i16 %4, i16* %d.0, align 2, !tbaa !50
    %lsr.iv.next18 = add i32 %lsr.iv17, 1
    %34 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %34, label %35, label %32
  
  ; <label>:35                                      ; preds = %32
    %36 = add nsw i32 %y.010, 1
    %37 = icmp slt i32 %y.010, %24
    br i1 %37, label %28, label %.loopexit
  
  ; <label>:38                                      ; preds = %16
    %39 = zext i16 %4 to i32
    %40 = and i32 %39, 255
    %41 = lshr i32 %39, 8
    %42 = icmp eq i32 %40, %41
    br i1 %42, label %43, label %52
  
  ; <label>:43                                      ; preds = %38
    %44 = bitcast i16* %14 to i8*
    %45 = trunc i16 %4 to i8
    %46 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %47 = load i32, i32* %46, align 4, !tbaa !48
    %48 = shl i32 %47, 1
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %50 = load i32, i32* %49, align 4, !tbaa !53
    %51 = mul nsw i32 %48, %50
    tail call void @llvm.memset.p0i8.i32(i8* %44, i8 %45, i32 %51, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:52                                      ; preds = %38
    %53 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %54 = load i32, i32* %53, align 4, !tbaa !48
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !53
    %57 = mul i32 %56, %54
    %58 = icmp sgt i32 %57, 15
    br i1 %58, label %.lr.ph8.preheader, label %.preheader
  
  .lr.ph8.preheader:                                ; preds = %52
    %59 = add i32 %57, -16
    %60 = and i32 %59, -16
    %61 = add i32 %60, 16
    br label %.lr.ph8
  
  .preheader.loopexit:                              ; preds = %.lr.ph8
    %62 = sub i32 %59, %60
    %scevgep = getelementptr i16, i16* %14, i32 %61
    br label %.preheader
  
  .preheader:                                       ; preds = %.preheader.loopexit, %52
    %n2.0.lcssa = phi i32 [ %57, %52 ], [ %62, %.preheader.loopexit ]
    %d1.0.lcssa = phi i16* [ %14, %52 ], [ %scevgep, %.preheader.loopexit ]
    %63 = icmp sgt i32 %n2.0.lcssa, 0
    br i1 %63, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %64 = add i32 %n2.0.lcssa, 1
    br label %.lr.ph
  
  .lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader
    %n2.07 = phi i32 [ %65, %.lr.ph8 ], [ %57, %.lr.ph8.preheader ]
    %d1.06 = phi i16* [ %scevgep16, %.lr.ph8 ], [ %14, %.lr.ph8.preheader ]
    store i16 %4, i16* %d1.06, align 2, !tbaa !50
    %scevgep1 = getelementptr i16, i16* %d1.06, i32 1
    store i16 %4, i16* %scevgep1, align 2, !tbaa !50
    %scevgep2 = getelementptr i16, i16* %d1.06, i32 2
    store i16 %4, i16* %scevgep2, align 2, !tbaa !50
    %scevgep3 = getelementptr i16, i16* %d1.06, i32 3
    store i16 %4, i16* %scevgep3, align 2, !tbaa !50
    %scevgep4 = getelementptr i16, i16* %d1.06, i32 4
    store i16 %4, i16* %scevgep4, align 2, !tbaa !50
    %scevgep5 = getelementptr i16, i16* %d1.06, i32 5
    store i16 %4, i16* %scevgep5, align 2, !tbaa !50
    %scevgep6 = getelementptr i16, i16* %d1.06, i32 6
    store i16 %4, i16* %scevgep6, align 2, !tbaa !50
    %scevgep7 = getelementptr i16, i16* %d1.06, i32 7
    store i16 %4, i16* %scevgep7, align 2, !tbaa !50
    %scevgep8 = getelementptr i16, i16* %d1.06, i32 8
    store i16 %4, i16* %scevgep8, align 2, !tbaa !50
    %scevgep9 = getelementptr i16, i16* %d1.06, i32 9
    store i16 %4, i16* %scevgep9, align 2, !tbaa !50
    %scevgep10 = getelementptr i16, i16* %d1.06, i32 10
    store i16 %4, i16* %scevgep10, align 2, !tbaa !50
    %scevgep11 = getelementptr i16, i16* %d1.06, i32 11
    store i16 %4, i16* %scevgep11, align 2, !tbaa !50
    %scevgep12 = getelementptr i16, i16* %d1.06, i32 12
    store i16 %4, i16* %scevgep12, align 2, !tbaa !50
    %scevgep13 = getelementptr i16, i16* %d1.06, i32 13
    store i16 %4, i16* %scevgep13, align 2, !tbaa !50
    %scevgep14 = getelementptr i16, i16* %d1.06, i32 14
    store i16 %4, i16* %scevgep14, align 2, !tbaa !50
    %scevgep15 = getelementptr i16, i16* %d1.06, i32 15
    store i16 %4, i16* %scevgep15, align 2, !tbaa !50
    %65 = add nsw i32 %n2.07, -16
    %66 = icmp sgt i32 %65, 15
    %scevgep16 = getelementptr i16, i16* %d1.06, i32 16
    br i1 %66, label %.lr.ph8, label %.preheader.loopexit
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %64, %.lr.ph.preheader ]
    %d1.14 = phi i16* [ %67, %.lr.ph ], [ %d1.0.lcssa, %.lr.ph.preheader ]
    %67 = getelementptr inbounds i16, i16* %d1.14, i32 1
    store i16 %4, i16* %d1.14, align 2, !tbaa !50
    %lsr.iv.next = add i32 %lsr.iv, -1
    %68 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %68, label %.lr.ph, label %.loopexit
  
  .loopexit:                                        ; preds = %35, %.lr.ph, %.preheader, %43, %20, %10, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 7516}
  !38 = !{!2, !4, i64 7512}
  !39 = !{!2, !8, i64 55736}
  !40 = !{!2, !4, i64 7521}
  !41 = !{!2, !11, i64 54672}
  !42 = !{!2, !11, i64 54676}
  !43 = !{!2, !11, i64 54688}
  !44 = !{!2, !11, i64 54700}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 12}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!20, !20, i64 0}
  !51 = !{!8, !8, i64 0}
  !52 = !{!11, !11, i64 0}
  !53 = !{!47, !8, i64 8}
  !54 = !{!2, !4, i64 7520}
  !55 = !{!2, !3, i64 2020}
  !56 = !{!57, !8, i64 48}
  !57 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !58 = !{!2, !4, i64 54308}
  !59 = !{!47, !8, i64 44}
  !60 = !{!47, !8, i64 48}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 40}

...
---
name:            gl_DepthMask
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 16):
    successors: %bb.2(50), %bb.1(50)
    liveins: %a0, %a1, %t9, %v0
  
    %7 = ADDu %v0, %t9
    %1 = COPY %a1
    %0 = COPY %a0
    %3 = ORi %zero, 55744
    %4 = ADDu %0, killed %3
    %5 = LW killed %4, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !1)
    %6 = ADDiu %zero, 6656
    BEQ killed %5, killed %6, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.4, freq 8):
    successors: %bb.3(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %8 = LW %7, target-flags(<unknown>) @.str.3, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %9 = ADDiu killed %8, target-flags(<unknown>) @.str.3
    %10 = LW %7, target-flags(<unknown>) @gl_error, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %11 = ADDiu %zero, 1282
    %a0 = COPY %0
    %a1 = COPY %11
    %a2 = COPY %9
    %gp = COPY %7
    %t9 = COPY %10
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.3, implicit-def dead %at
  
  bb.2 (%ir-block.5, freq 8):
    successors: %bb.3(100)
  
    %2 = COPY %1
    SB %2, %0, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.6, !tbaa !40)
    %12 = ORi %zero, 55736
    %13 = ADDu %0, killed %12
    %14 = LW %13, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.7, !tbaa !39)
    %15 = ORi killed %14, 2
    SW killed %15, %13, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.7, !tbaa !39)
  
  bb.3 (%ir-block.10, freq 16):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.depth.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type opaque
  
  @.str = private unnamed_addr constant [13 x i8] c"glClearDepth\00", align 1
  @.str.1 = private unnamed_addr constant [12 x i8] c"glDepthFunc\00", align 1
  @.str.2 = private unnamed_addr constant [13 x i8] c"glDepth.Func\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glDepthMask\00", align 1
  @.str.4 = private unnamed_addr constant [13 x i8] c"glDepthRange\00", align 1
  @.str.5 = private unnamed_addr constant [31 x i8] c"Couldn't allocate depth buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearDepth(%struct.gl_context* %ctx, double %depth) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %depth, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %depth, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %depth
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    store float %11, float* %12, align 4, !tbaa !37
    br label %13
  
  ; <label>:13                                      ; preds = %10, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_DepthFunc(%struct.gl_context* %ctx, i32 signext %func) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %12
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %10 = load i32, i32* %9, align 4, !tbaa !39
    %11 = or i32 %10, 2
    store i32 %11, i32* %9, align 4, !tbaa !39
    br label %13
  
  ; <label>:12                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:13                                      ; preds = %12, %7, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthMask(%struct.gl_context* %ctx, i8 zeroext %flag) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %10
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    store i8 %flag, i8* %6, align 1, !tbaa !40
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %8 = load i32, i32* %7, align 4, !tbaa !39
    %9 = or i32 %8, 2
    store i32 %9, i32* %7, align 4, !tbaa !39
    br label %10
  
  ; <label>:10                                      ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthRange(%struct.gl_context* %ctx, double %nearval, double %farval) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %31
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %nearval, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %nearval, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %nearval
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = fcmp olt double %farval, 0.000000e+00
    br i1 %12, label %16, label %13
  
  ; <label>:13                                      ; preds = %10
    %14 = fcmp ogt double %farval, 1.000000e+00
    %15 = select i1 %14, double 1.000000e+00, double %farval
    %phitmp1 = fptrunc double %15 to float
    br label %16
  
  ; <label>:16                                      ; preds = %13, %10
    %17 = phi float [ 0.000000e+00, %10 ], [ %phitmp1, %13 ]
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 4
    store float %11, float* %18, align 4, !tbaa !41
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 5
    store float %17, float* %19, align 4, !tbaa !42
    %20 = fsub float %17, %11
    %21 = fpext float %20 to double
    %22 = fmul double %21, 5.000000e-01
    %23 = fmul double %22, 6.553500e+04
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 8
    store float %24, float* %25, align 4, !tbaa !43
    %26 = fpext float %11 to double
    %27 = fadd double %26, %22
    %28 = fmul double %27, 6.553500e+04
    %29 = fptrunc double %28 to float
    %30 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 11
    store float %29, float* %30, align 4, !tbaa !44
    br label %31
  
  ; <label>:31                                      ; preds = %16, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_depth_test_span_generic(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = mul nsw i32 %6, %y
    %8 = getelementptr inbounds i16, i16* %4, i32 %7
    %9 = getelementptr inbounds i16, i16* %8, i32 %x
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %11 = load i32, i32* %10, align 4, !tbaa !38
    switch i32 %11, label %206 [
      i32 513, label %13
      i32 515, label %43
      i32 518, label %73
      i32 516, label %103
      i32 517, label %133
      i32 514, label %163
      i32 519, label %193
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph104.preheader
  
  .lr.ph104.preheader:                              ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %15 = load i8, i8* %14, align 1, !tbaa !40
    %16 = icmp eq i8 %15, 0
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph35, label %.loopexit
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader1, %28
    %lsr.iv4 = phi i16* [ %scevgep5, %28 ], [ %z, %.preheader1 ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %28 ], [ %n, %.preheader1 ]
    %passed.034 = phi i32 [ %passed.1, %28 ], [ 0, %.preheader1 ]
    %m.032 = phi i8* [ %30, %28 ], [ %mask, %.preheader1 ]
    %zptr.031 = phi i16* [ %29, %28 ], [ %9, %.preheader1 ]
    %19 = load i8, i8* %m.032, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph35
    %22 = load i16, i16* %lsr.iv4, align 2, !tbaa !50
    %23 = load i16, i16* %zptr.031, align 2, !tbaa !50
    %24 = icmp ult i16 %22, %23
    br i1 %24, label %25, label %27
  
  ; <label>:25                                      ; preds = %21
    store i16 %22, i16* %zptr.031, align 2, !tbaa !50
    %26 = add i32 %passed.034, 1
    br label %28
  
  ; <label>:27                                      ; preds = %21
    store i8 0, i8* %m.032, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %27, %25, %.lr.ph35
    %passed.1 = phi i32 [ %26, %25 ], [ %passed.034, %27 ], [ %passed.034, %.lr.ph35 ]
    %29 = getelementptr inbounds i16, i16* %zptr.031, i32 1
    %30 = getelementptr inbounds i8, i8* %m.032, i32 1
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %scevgep5 = getelementptr i16, i16* %lsr.iv4, i32 1
    %exitcond118 = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond118, label %.loopexit, label %.lr.ph35
  
  .lr.ph:                                           ; preds = %.preheader, %40
    %lsr.iv1 = phi i16* [ %scevgep, %40 ], [ %z, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %40 ], [ %n, %.preheader ]
    %passed.230 = phi i32 [ %passed.3, %40 ], [ 0, %.preheader ]
    %m.128 = phi i8* [ %42, %40 ], [ %mask, %.preheader ]
    %zptr.127 = phi i16* [ %41, %40 ], [ %9, %.preheader ]
    %31 = load i8, i8* %m.128, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %40, label %33
  
  ; <label>:33                                      ; preds = %.lr.ph
    %34 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %35 = load i16, i16* %zptr.127, align 2, !tbaa !50
    %36 = icmp ult i16 %34, %35
    br i1 %36, label %37, label %39
  
  ; <label>:37                                      ; preds = %33
    %38 = add i32 %passed.230, 1
    br label %40
  
  ; <label>:39                                      ; preds = %33
    store i8 0, i8* %m.128, align 1, !tbaa !49
    br label %40
  
  ; <label>:40                                      ; preds = %39, %37, %.lr.ph
    %passed.3 = phi i32 [ %38, %37 ], [ %passed.230, %39 ], [ %passed.230, %.lr.ph ]
    %41 = getelementptr inbounds i16, i16* %zptr.127, i32 1
    %42 = getelementptr inbounds i8, i8* %m.128, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:43                                      ; preds = %0
    %44 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %45 = load i8, i8* %44, align 1, !tbaa !40
    %46 = icmp eq i8 %45, 0
    br i1 %46, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %43
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph47, label %.loopexit
  
  .preheader3:                                      ; preds = %43
    %48 = icmp ne i32 %n, 0
    br i1 %48, label %.lr.ph41, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader5, %58
    %lsr.iv12 = phi i16* [ %scevgep13, %58 ], [ %z, %.preheader5 ]
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %58 ], [ %n, %.preheader5 ]
    %passed.446 = phi i32 [ %passed.5, %58 ], [ 0, %.preheader5 ]
    %m.244 = phi i8* [ %60, %58 ], [ %mask, %.preheader5 ]
    %zptr.243 = phi i16* [ %59, %58 ], [ %9, %.preheader5 ]
    %49 = load i8, i8* %m.244, align 1, !tbaa !49
    %50 = icmp eq i8 %49, 0
    br i1 %50, label %58, label %51
  
  ; <label>:51                                      ; preds = %.lr.ph47
    %52 = load i16, i16* %lsr.iv12, align 2, !tbaa !50
    %53 = load i16, i16* %zptr.243, align 2, !tbaa !50
    %54 = icmp ugt i16 %52, %53
    br i1 %54, label %57, label %55
  
  ; <label>:55                                      ; preds = %51
    store i16 %52, i16* %zptr.243, align 2, !tbaa !50
    %56 = add i32 %passed.446, 1
    br label %58
  
  ; <label>:57                                      ; preds = %51
    store i8 0, i8* %m.244, align 1, !tbaa !49
    br label %58
  
  ; <label>:58                                      ; preds = %57, %55, %.lr.ph47
    %passed.5 = phi i32 [ %56, %55 ], [ %passed.446, %57 ], [ %passed.446, %.lr.ph47 ]
    %59 = getelementptr inbounds i16, i16* %zptr.243, i32 1
    %60 = getelementptr inbounds i8, i8* %m.244, i32 1
    %lsr.iv.next11 = add i32 %lsr.iv10, -1
    %scevgep13 = getelementptr i16, i16* %lsr.iv12, i32 1
    %exitcond120 = icmp eq i32 %lsr.iv.next11, 0
    br i1 %exitcond120, label %.loopexit, label %.lr.ph47
  
  .lr.ph41:                                         ; preds = %.preheader3, %70
    %lsr.iv8 = phi i16* [ %scevgep9, %70 ], [ %z, %.preheader3 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %70 ], [ %n, %.preheader3 ]
    %passed.640 = phi i32 [ %passed.7, %70 ], [ 0, %.preheader3 ]
    %m.338 = phi i8* [ %72, %70 ], [ %mask, %.preheader3 ]
    %zptr.337 = phi i16* [ %71, %70 ], [ %9, %.preheader3 ]
    %61 = load i8, i8* %m.338, align 1, !tbaa !49
    %62 = icmp eq i8 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %.lr.ph41
    %64 = load i16, i16* %lsr.iv8, align 2, !tbaa !50
    %65 = load i16, i16* %zptr.337, align 2, !tbaa !50
    %66 = icmp ugt i16 %64, %65
    br i1 %66, label %69, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = add i32 %passed.640, 1
    br label %70
  
  ; <label>:69                                      ; preds = %63
    store i8 0, i8* %m.338, align 1, !tbaa !49
    br label %70
  
  ; <label>:70                                      ; preds = %69, %67, %.lr.ph41
    %passed.7 = phi i32 [ %68, %67 ], [ %passed.640, %69 ], [ %passed.640, %.lr.ph41 ]
    %71 = getelementptr inbounds i16, i16* %zptr.337, i32 1
    %72 = getelementptr inbounds i8, i8* %m.338, i32 1
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i16, i16* %lsr.iv8, i32 1
    %exitcond119 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond119, label %.loopexit, label %.lr.ph41
  
  ; <label>:73                                      ; preds = %0
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %75 = load i8, i8* %74, align 1, !tbaa !40
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %73
    %77 = icmp ne i32 %n, 0
    br i1 %77, label %.lr.ph59, label %.loopexit
  
  .preheader7:                                      ; preds = %73
    %78 = icmp ne i32 %n, 0
    br i1 %78, label %.lr.ph53, label %.loopexit
  
  .lr.ph59:                                         ; preds = %.preheader9, %88
    %lsr.iv20 = phi i16* [ %scevgep21, %88 ], [ %z, %.preheader9 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %88 ], [ %n, %.preheader9 ]
    %passed.858 = phi i32 [ %passed.9, %88 ], [ 0, %.preheader9 ]
    %m.456 = phi i8* [ %90, %88 ], [ %mask, %.preheader9 ]
    %zptr.455 = phi i16* [ %89, %88 ], [ %9, %.preheader9 ]
    %79 = load i8, i8* %m.456, align 1, !tbaa !49
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %88, label %81
  
  ; <label>:81                                      ; preds = %.lr.ph59
    %82 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %83 = load i16, i16* %zptr.455, align 2, !tbaa !50
    %84 = icmp ult i16 %82, %83
    br i1 %84, label %87, label %85
  
  ; <label>:85                                      ; preds = %81
    store i16 %82, i16* %zptr.455, align 2, !tbaa !50
    %86 = add i32 %passed.858, 1
    br label %88
  
  ; <label>:87                                      ; preds = %81
    store i8 0, i8* %m.456, align 1, !tbaa !49
    br label %88
  
  ; <label>:88                                      ; preds = %87, %85, %.lr.ph59
    %passed.9 = phi i32 [ %86, %85 ], [ %passed.858, %87 ], [ %passed.858, %.lr.ph59 ]
    %89 = getelementptr inbounds i16, i16* %zptr.455, i32 1
    %90 = getelementptr inbounds i8, i8* %m.456, i32 1
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %exitcond122 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond122, label %.loopexit, label %.lr.ph59
  
  .lr.ph53:                                         ; preds = %.preheader7, %100
    %lsr.iv16 = phi i16* [ %scevgep17, %100 ], [ %z, %.preheader7 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %100 ], [ %n, %.preheader7 ]
    %passed.1052 = phi i32 [ %passed.11, %100 ], [ 0, %.preheader7 ]
    %m.550 = phi i8* [ %102, %100 ], [ %mask, %.preheader7 ]
    %zptr.549 = phi i16* [ %101, %100 ], [ %9, %.preheader7 ]
    %91 = load i8, i8* %m.550, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %100, label %93
  
  ; <label>:93                                      ; preds = %.lr.ph53
    %94 = load i16, i16* %lsr.iv16, align 2, !tbaa !50
    %95 = load i16, i16* %zptr.549, align 2, !tbaa !50
    %96 = icmp ult i16 %94, %95
    br i1 %96, label %99, label %97
  
  ; <label>:97                                      ; preds = %93
    %98 = add i32 %passed.1052, 1
    br label %100
  
  ; <label>:99                                      ; preds = %93
    store i8 0, i8* %m.550, align 1, !tbaa !49
    br label %100
  
  ; <label>:100                                     ; preds = %99, %97, %.lr.ph53
    %passed.11 = phi i32 [ %98, %97 ], [ %passed.1052, %99 ], [ %passed.1052, %.lr.ph53 ]
    %101 = getelementptr inbounds i16, i16* %zptr.549, i32 1
    %102 = getelementptr inbounds i8, i8* %m.550, i32 1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond121 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond121, label %.loopexit, label %.lr.ph53
  
  ; <label>:103                                     ; preds = %0
    %104 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %105 = load i8, i8* %104, align 1, !tbaa !40
    %106 = icmp eq i8 %105, 0
    br i1 %106, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %103
    %107 = icmp ne i32 %n, 0
    br i1 %107, label %.lr.ph71, label %.loopexit
  
  .preheader11:                                     ; preds = %103
    %108 = icmp ne i32 %n, 0
    br i1 %108, label %.lr.ph65, label %.loopexit
  
  .lr.ph71:                                         ; preds = %.preheader13, %118
    %lsr.iv28 = phi i16* [ %scevgep29, %118 ], [ %z, %.preheader13 ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %118 ], [ %n, %.preheader13 ]
    %passed.1270 = phi i32 [ %passed.13, %118 ], [ 0, %.preheader13 ]
    %m.668 = phi i8* [ %120, %118 ], [ %mask, %.preheader13 ]
    %zptr.667 = phi i16* [ %119, %118 ], [ %9, %.preheader13 ]
    %109 = load i8, i8* %m.668, align 1, !tbaa !49
    %110 = icmp eq i8 %109, 0
    br i1 %110, label %118, label %111
  
  ; <label>:111                                     ; preds = %.lr.ph71
    %112 = load i16, i16* %lsr.iv28, align 2, !tbaa !50
    %113 = load i16, i16* %zptr.667, align 2, !tbaa !50
    %114 = icmp ugt i16 %112, %113
    br i1 %114, label %115, label %117
  
  ; <label>:115                                     ; preds = %111
    store i16 %112, i16* %zptr.667, align 2, !tbaa !50
    %116 = add i32 %passed.1270, 1
    br label %118
  
  ; <label>:117                                     ; preds = %111
    store i8 0, i8* %m.668, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %117, %115, %.lr.ph71
    %passed.13 = phi i32 [ %116, %115 ], [ %passed.1270, %117 ], [ %passed.1270, %.lr.ph71 ]
    %119 = getelementptr inbounds i16, i16* %zptr.667, i32 1
    %120 = getelementptr inbounds i8, i8* %m.668, i32 1
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep29 = getelementptr i16, i16* %lsr.iv28, i32 1
    %exitcond124 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond124, label %.loopexit, label %.lr.ph71
  
  .lr.ph65:                                         ; preds = %.preheader11, %130
    %lsr.iv24 = phi i16* [ %scevgep25, %130 ], [ %z, %.preheader11 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %130 ], [ %n, %.preheader11 ]
    %passed.1464 = phi i32 [ %passed.15, %130 ], [ 0, %.preheader11 ]
    %m.762 = phi i8* [ %132, %130 ], [ %mask, %.preheader11 ]
    %zptr.761 = phi i16* [ %131, %130 ], [ %9, %.preheader11 ]
    %121 = load i8, i8* %m.762, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %130, label %123
  
  ; <label>:123                                     ; preds = %.lr.ph65
    %124 = load i16, i16* %lsr.iv24, align 2, !tbaa !50
    %125 = load i16, i16* %zptr.761, align 2, !tbaa !50
    %126 = icmp ugt i16 %124, %125
    br i1 %126, label %127, label %129
  
  ; <label>:127                                     ; preds = %123
    %128 = add i32 %passed.1464, 1
    br label %130
  
  ; <label>:129                                     ; preds = %123
    store i8 0, i8* %m.762, align 1, !tbaa !49
    br label %130
  
  ; <label>:130                                     ; preds = %129, %127, %.lr.ph65
    %passed.15 = phi i32 [ %128, %127 ], [ %passed.1464, %129 ], [ %passed.1464, %.lr.ph65 ]
    %131 = getelementptr inbounds i16, i16* %zptr.761, i32 1
    %132 = getelementptr inbounds i8, i8* %m.762, i32 1
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i16, i16* %lsr.iv24, i32 1
    %exitcond123 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond123, label %.loopexit, label %.lr.ph65
  
  ; <label>:133                                     ; preds = %0
    %134 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %135 = load i8, i8* %134, align 1, !tbaa !40
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %133
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph83, label %.loopexit
  
  .preheader15:                                     ; preds = %133
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph77, label %.loopexit
  
  .lr.ph83:                                         ; preds = %.preheader17, %148
    %lsr.iv36 = phi i16* [ %scevgep37, %148 ], [ %z, %.preheader17 ]
    %lsr.iv34 = phi i32 [ %lsr.iv.next35, %148 ], [ %n, %.preheader17 ]
    %passed.1682 = phi i32 [ %passed.17, %148 ], [ 0, %.preheader17 ]
    %m.880 = phi i8* [ %150, %148 ], [ %mask, %.preheader17 ]
    %zptr.879 = phi i16* [ %149, %148 ], [ %9, %.preheader17 ]
    %139 = load i8, i8* %m.880, align 1, !tbaa !49
    %140 = icmp eq i8 %139, 0
    br i1 %140, label %148, label %141
  
  ; <label>:141                                     ; preds = %.lr.ph83
    %142 = load i16, i16* %lsr.iv36, align 2, !tbaa !50
    %143 = load i16, i16* %zptr.879, align 2, !tbaa !50
    %144 = icmp eq i16 %142, %143
    br i1 %144, label %147, label %145
  
  ; <label>:145                                     ; preds = %141
    store i16 %142, i16* %zptr.879, align 2, !tbaa !50
    %146 = add i32 %passed.1682, 1
    br label %148
  
  ; <label>:147                                     ; preds = %141
    store i8 0, i8* %m.880, align 1, !tbaa !49
    br label %148
  
  ; <label>:148                                     ; preds = %147, %145, %.lr.ph83
    %passed.17 = phi i32 [ %146, %145 ], [ %passed.1682, %147 ], [ %passed.1682, %.lr.ph83 ]
    %149 = getelementptr inbounds i16, i16* %zptr.879, i32 1
    %150 = getelementptr inbounds i8, i8* %m.880, i32 1
    %lsr.iv.next35 = add i32 %lsr.iv34, -1
    %scevgep37 = getelementptr i16, i16* %lsr.iv36, i32 1
    %exitcond126 = icmp eq i32 %lsr.iv.next35, 0
    br i1 %exitcond126, label %.loopexit, label %.lr.ph83
  
  .lr.ph77:                                         ; preds = %.preheader15, %160
    %lsr.iv32 = phi i16* [ %scevgep33, %160 ], [ %z, %.preheader15 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %160 ], [ %n, %.preheader15 ]
    %passed.1876 = phi i32 [ %passed.19, %160 ], [ 0, %.preheader15 ]
    %m.974 = phi i8* [ %162, %160 ], [ %mask, %.preheader15 ]
    %zptr.973 = phi i16* [ %161, %160 ], [ %9, %.preheader15 ]
    %151 = load i8, i8* %m.974, align 1, !tbaa !49
    %152 = icmp eq i8 %151, 0
    br i1 %152, label %160, label %153
  
  ; <label>:153                                     ; preds = %.lr.ph77
    %154 = load i16, i16* %lsr.iv32, align 2, !tbaa !50
    %155 = load i16, i16* %zptr.973, align 2, !tbaa !50
    %156 = icmp eq i16 %154, %155
    br i1 %156, label %159, label %157
  
  ; <label>:157                                     ; preds = %153
    %158 = add i32 %passed.1876, 1
    br label %160
  
  ; <label>:159                                     ; preds = %153
    store i8 0, i8* %m.974, align 1, !tbaa !49
    br label %160
  
  ; <label>:160                                     ; preds = %159, %157, %.lr.ph77
    %passed.19 = phi i32 [ %158, %157 ], [ %passed.1876, %159 ], [ %passed.1876, %.lr.ph77 ]
    %161 = getelementptr inbounds i16, i16* %zptr.973, i32 1
    %162 = getelementptr inbounds i8, i8* %m.974, i32 1
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i16, i16* %lsr.iv32, i32 1
    %exitcond125 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond125, label %.loopexit, label %.lr.ph77
  
  ; <label>:163                                     ; preds = %0
    %164 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %165 = load i8, i8* %164, align 1, !tbaa !40
    %166 = icmp eq i8 %165, 0
    br i1 %166, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %163
    %167 = icmp ne i32 %n, 0
    br i1 %167, label %.lr.ph95, label %.loopexit
  
  .preheader19:                                     ; preds = %163
    %168 = icmp ne i32 %n, 0
    br i1 %168, label %.lr.ph89, label %.loopexit
  
  .lr.ph95:                                         ; preds = %.preheader21, %178
    %lsr.iv44 = phi i16* [ %scevgep45, %178 ], [ %z, %.preheader21 ]
    %lsr.iv42 = phi i32 [ %lsr.iv.next43, %178 ], [ %n, %.preheader21 ]
    %passed.2094 = phi i32 [ %passed.21, %178 ], [ 0, %.preheader21 ]
    %m.1092 = phi i8* [ %180, %178 ], [ %mask, %.preheader21 ]
    %zptr.1091 = phi i16* [ %179, %178 ], [ %9, %.preheader21 ]
    %169 = load i8, i8* %m.1092, align 1, !tbaa !49
    %170 = icmp eq i8 %169, 0
    br i1 %170, label %178, label %171
  
  ; <label>:171                                     ; preds = %.lr.ph95
    %172 = load i16, i16* %lsr.iv44, align 2, !tbaa !50
    %173 = load i16, i16* %zptr.1091, align 2, !tbaa !50
    %174 = icmp eq i16 %172, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %171
    store i16 %172, i16* %zptr.1091, align 2, !tbaa !50
    %176 = add i32 %passed.2094, 1
    br label %178
  
  ; <label>:177                                     ; preds = %171
    store i8 0, i8* %m.1092, align 1, !tbaa !49
    br label %178
  
  ; <label>:178                                     ; preds = %177, %175, %.lr.ph95
    %passed.21 = phi i32 [ %176, %175 ], [ %passed.2094, %177 ], [ %passed.2094, %.lr.ph95 ]
    %179 = getelementptr inbounds i16, i16* %zptr.1091, i32 1
    %180 = getelementptr inbounds i8, i8* %m.1092, i32 1
    %lsr.iv.next43 = add i32 %lsr.iv42, -1
    %scevgep45 = getelementptr i16, i16* %lsr.iv44, i32 1
    %exitcond128 = icmp eq i32 %lsr.iv.next43, 0
    br i1 %exitcond128, label %.loopexit, label %.lr.ph95
  
  .lr.ph89:                                         ; preds = %.preheader19, %190
    %lsr.iv40 = phi i16* [ %scevgep41, %190 ], [ %z, %.preheader19 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %190 ], [ %n, %.preheader19 ]
    %passed.2288 = phi i32 [ %passed.23, %190 ], [ 0, %.preheader19 ]
    %m.1186 = phi i8* [ %192, %190 ], [ %mask, %.preheader19 ]
    %zptr.1185 = phi i16* [ %191, %190 ], [ %9, %.preheader19 ]
    %181 = load i8, i8* %m.1186, align 1, !tbaa !49
    %182 = icmp eq i8 %181, 0
    br i1 %182, label %190, label %183
  
  ; <label>:183                                     ; preds = %.lr.ph89
    %184 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %185 = load i16, i16* %zptr.1185, align 2, !tbaa !50
    %186 = icmp eq i16 %184, %185
    br i1 %186, label %187, label %189
  
  ; <label>:187                                     ; preds = %183
    %188 = add i32 %passed.2288, 1
    br label %190
  
  ; <label>:189                                     ; preds = %183
    store i8 0, i8* %m.1186, align 1, !tbaa !49
    br label %190
  
  ; <label>:190                                     ; preds = %189, %187, %.lr.ph89
    %passed.23 = phi i32 [ %188, %187 ], [ %passed.2288, %189 ], [ %passed.2288, %.lr.ph89 ]
    %191 = getelementptr inbounds i16, i16* %zptr.1185, i32 1
    %192 = getelementptr inbounds i8, i8* %m.1186, i32 1
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %exitcond127 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond127, label %.loopexit, label %.lr.ph89
  
  ; <label>:193                                     ; preds = %0
    %194 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %195 = load i8, i8* %194, align 1, !tbaa !40
    %196 = icmp eq i8 %195, 0
    br i1 %196, label %.loopexit, label %.preheader23
  
  .preheader23:                                     ; preds = %193
    %197 = icmp eq i32 %n, 0
    br i1 %197, label %.loopexit, label %.lr.ph101
  
  .lr.ph101:                                        ; preds = %.preheader23, %203
    %lsr.iv48 = phi i16* [ %scevgep49, %203 ], [ %z, %.preheader23 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %203 ], [ %n, %.preheader23 ]
    %passed.24100 = phi i32 [ %passed.25, %203 ], [ 0, %.preheader23 ]
    %m.1298 = phi i8* [ %205, %203 ], [ %mask, %.preheader23 ]
    %zptr.1297 = phi i16* [ %204, %203 ], [ %9, %.preheader23 ]
    %198 = load i8, i8* %m.1298, align 1, !tbaa !49
    %199 = icmp eq i8 %198, 0
    br i1 %199, label %203, label %200
  
  ; <label>:200                                     ; preds = %.lr.ph101
    %201 = load i16, i16* %lsr.iv48, align 2, !tbaa !50
    store i16 %201, i16* %zptr.1297, align 2, !tbaa !50
    %202 = add i32 %passed.24100, 1
    br label %203
  
  ; <label>:203                                     ; preds = %200, %.lr.ph101
    %passed.25 = phi i32 [ %202, %200 ], [ %passed.24100, %.lr.ph101 ]
    %204 = getelementptr inbounds i16, i16* %zptr.1297, i32 1
    %205 = getelementptr inbounds i8, i8* %m.1298, i32 1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i16, i16* %lsr.iv48, i32 1
    %exitcond129 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond129, label %.loopexit, label %.lr.ph101
  
  ; <label>:206                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %203, %178, %190, %148, %160, %118, %130, %88, %100, %58, %70, %28, %40, %.preheader23, %193, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph104.preheader, %.preheader25
    %passed.26 = phi i32 [ %n, %193 ], [ 0, %.preheader ], [ 0, %.preheader1 ], [ 0, %.preheader3 ], [ 0, %.preheader5 ], [ 0, %.preheader7 ], [ 0, %.preheader9 ], [ 0, %.preheader11 ], [ 0, %.preheader13 ], [ 0, %.preheader15 ], [ 0, %.preheader17 ], [ 0, %.preheader19 ], [ 0, %.preheader21 ], [ 0, %.preheader23 ], [ 0, %.preheader25 ], [ 0, %.lr.ph104.preheader ], [ %passed.3, %40 ], [ %passed.1, %28 ], [ %passed.7, %70 ], [ %passed.5, %58 ], [ %passed.11, %100 ], [ %passed.9, %88 ], [ %passed.15, %130 ], [ %passed.13, %118 ], [ %passed.19, %160 ], [ %passed.17, %148 ], [ %passed.23, %190 ], [ %passed.21, %178 ], [ %passed.25, %203 ]
    ret i32 %passed.26
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ult i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ugt i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_test_pixels_generic(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %2 = load i32, i32* %1, align 4, !tbaa !38
    switch i32 %2, label %295 [
      i32 513, label %4
      i32 515, label %49
      i32 518, label %94
      i32 516, label %139
      i32 517, label %184
      i32 514, label %229
      i32 519, label %274
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %3 = icmp eq i32 %n, 0
    br i1 %3, label %.loopexit, label %.lr.ph53.preheader
  
  .lr.ph53.preheader:                               ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %6 = load i8, i8* %5, align 1, !tbaa !40
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %4
    %8 = icmp ne i32 %n, 0
    br i1 %8, label %.lr.ph29, label %.loopexit
  
  .lr.ph29:                                         ; preds = %.preheader1
    br label %10
  
  .preheader:                                       ; preds = %4
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %30
  
  ; <label>:10                                      ; preds = %29, %.lr.ph29
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %mask, %.lr.ph29 ]
    %lsr.iv14 = phi i32* [ %scevgep15, %29 ], [ %y, %.lr.ph29 ]
    %lsr.iv12 = phi i32* [ %scevgep13, %29 ], [ %x, %.lr.ph29 ]
    %lsr.iv10 = phi i16* [ %scevgep11, %29 ], [ %z, %.lr.ph29 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %29 ], [ %n, %.lr.ph29 ]
    %11 = load i8, i8* %lsr.iv16, align 1, !tbaa !49
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %29, label %13
  
  ; <label>:13                                      ; preds = %10
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr128 = add i32 %sunkaddr, 2024
    %sunkaddr129 = inttoptr i32 %sunkaddr128 to %struct.gl_frame_buffer**
    %14 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr129, align 4, !tbaa !45
    %15 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 3
    %16 = load i16*, i16** %15, align 4, !tbaa !46
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 1
    %18 = load i32, i32* %17, align 4, !tbaa !48
    %19 = load i32, i32* %lsr.iv14, align 4, !tbaa !51
    %20 = mul nsw i32 %19, %18
    %21 = getelementptr inbounds i16, i16* %16, i32 %20
    %22 = load i32, i32* %lsr.iv12, align 4, !tbaa !51
    %23 = getelementptr inbounds i16, i16* %21, i32 %22
    %24 = load i16, i16* %lsr.iv10, align 2, !tbaa !50
    %25 = load i16, i16* %23, align 2, !tbaa !50
    %26 = icmp ult i16 %24, %25
    br i1 %26, label %27, label %28
  
  ; <label>:27                                      ; preds = %13
    store i16 %24, i16* %23, align 2, !tbaa !50
    br label %29
  
  ; <label>:28                                      ; preds = %13
    store i8 0, i8* %lsr.iv16, align 1, !tbaa !49
    br label %29
  
  ; <label>:29                                      ; preds = %28, %27, %10
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i16, i16* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i32, i32* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i32, i32* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %exitcond67 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond67, label %.loopexit, label %10
  
  ; <label>:30                                      ; preds = %48, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %48 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %48 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %48 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %48 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %48 ], [ %n, %.lr.ph ]
    %31 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %48, label %33
  
  ; <label>:33                                      ; preds = %30
    %sunkaddr130 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr131 = add i32 %sunkaddr130, 2024
    %sunkaddr132 = inttoptr i32 %sunkaddr131 to %struct.gl_frame_buffer**
    %34 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr132, align 4, !tbaa !45
    %35 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 3
    %36 = load i16*, i16** %35, align 4, !tbaa !46
    %37 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 1
    %38 = load i32, i32* %37, align 4, !tbaa !48
    %39 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %40 = mul nsw i32 %39, %38
    %41 = getelementptr inbounds i16, i16* %36, i32 %40
    %42 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %43 = getelementptr inbounds i16, i16* %41, i32 %42
    %44 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %45 = load i16, i16* %43, align 2, !tbaa !50
    %46 = icmp ult i16 %44, %45
    br i1 %46, label %48, label %47
  
  ; <label>:47                                      ; preds = %33
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %48
  
  ; <label>:48                                      ; preds = %47, %33, %30
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %30
  
  ; <label>:49                                      ; preds = %0
    %50 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %51 = load i8, i8* %50, align 1, !tbaa !40
    %52 = icmp eq i8 %51, 0
    br i1 %52, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %49
    %53 = icmp ne i32 %n, 0
    br i1 %53, label %.lr.ph33, label %.loopexit
  
  .lr.ph33:                                         ; preds = %.preheader5
    br label %55
  
  .preheader3:                                      ; preds = %49
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph31, label %.loopexit
  
  .lr.ph31:                                         ; preds = %.preheader3
    br label %75
  
  ; <label>:55                                      ; preds = %74, %.lr.ph33
    %lsr.iv36 = phi i8* [ %scevgep37, %74 ], [ %mask, %.lr.ph33 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %74 ], [ %y, %.lr.ph33 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %74 ], [ %x, %.lr.ph33 ]
    %lsr.iv30 = phi i16* [ %scevgep31, %74 ], [ %z, %.lr.ph33 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %74 ], [ %n, %.lr.ph33 ]
    %56 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %57 = icmp eq i8 %56, 0
    br i1 %57, label %74, label %58
  
  ; <label>:58                                      ; preds = %55
    %sunkaddr133 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr134 = add i32 %sunkaddr133, 2024
    %sunkaddr135 = inttoptr i32 %sunkaddr134 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr135, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 3
    %61 = load i16*, i16** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv34, align 4, !tbaa !51
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i16, i16* %61, i32 %65
    %67 = load i32, i32* %lsr.iv32, align 4, !tbaa !51
    %68 = getelementptr inbounds i16, i16* %66, i32 %67
    %69 = load i16, i16* %lsr.iv30, align 2, !tbaa !50
    %70 = load i16, i16* %68, align 2, !tbaa !50
    %71 = icmp ugt i16 %69, %70
    br i1 %71, label %73, label %72
  
  ; <label>:72                                      ; preds = %58
    store i16 %69, i16* %68, align 2, !tbaa !50
    br label %74
  
  ; <label>:73                                      ; preds = %58
    store i8 0, i8* %lsr.iv36, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %73, %72, %55
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr i16, i16* %lsr.iv30, i32 1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond69 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond69, label %.loopexit, label %55
  
  ; <label>:75                                      ; preds = %93, %.lr.ph31
    %lsr.iv26 = phi i8* [ %scevgep27, %93 ], [ %mask, %.lr.ph31 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %93 ], [ %y, %.lr.ph31 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %93 ], [ %x, %.lr.ph31 ]
    %lsr.iv20 = phi i16* [ %scevgep21, %93 ], [ %z, %.lr.ph31 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %93 ], [ %n, %.lr.ph31 ]
    %76 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %77 = icmp eq i8 %76, 0
    br i1 %77, label %93, label %78
  
  ; <label>:78                                      ; preds = %75
    %sunkaddr136 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr137 = add i32 %sunkaddr136, 2024
    %sunkaddr138 = inttoptr i32 %sunkaddr137 to %struct.gl_frame_buffer**
    %79 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr138, align 4, !tbaa !45
    %80 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 3
    %81 = load i16*, i16** %80, align 4, !tbaa !46
    %82 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 1
    %83 = load i32, i32* %82, align 4, !tbaa !48
    %84 = load i32, i32* %lsr.iv24, align 4, !tbaa !51
    %85 = mul nsw i32 %84, %83
    %86 = getelementptr inbounds i16, i16* %81, i32 %85
    %87 = load i32, i32* %lsr.iv22, align 4, !tbaa !51
    %88 = getelementptr inbounds i16, i16* %86, i32 %87
    %89 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %90 = load i16, i16* %88, align 2, !tbaa !50
    %91 = icmp ugt i16 %89, %90
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %78
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %93
  
  ; <label>:93                                      ; preds = %92, %78, %75
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond68 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond68, label %.loopexit, label %75
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %96 = load i8, i8* %95, align 1, !tbaa !40
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %94
    %98 = icmp ne i32 %n, 0
    br i1 %98, label %.lr.ph37, label %.loopexit
  
  .lr.ph37:                                         ; preds = %.preheader9
    br label %100
  
  .preheader7:                                      ; preds = %94
    %99 = icmp ne i32 %n, 0
    br i1 %99, label %.lr.ph35, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader7
    br label %120
  
  ; <label>:100                                     ; preds = %119, %.lr.ph37
    %lsr.iv56 = phi i8* [ %scevgep57, %119 ], [ %mask, %.lr.ph37 ]
    %lsr.iv54 = phi i32* [ %scevgep55, %119 ], [ %y, %.lr.ph37 ]
    %lsr.iv52 = phi i32* [ %scevgep53, %119 ], [ %x, %.lr.ph37 ]
    %lsr.iv50 = phi i16* [ %scevgep51, %119 ], [ %z, %.lr.ph37 ]
    %lsr.iv48 = phi i32 [ %lsr.iv.next49, %119 ], [ %n, %.lr.ph37 ]
    %101 = load i8, i8* %lsr.iv56, align 1, !tbaa !49
    %102 = icmp eq i8 %101, 0
    br i1 %102, label %119, label %103
  
  ; <label>:103                                     ; preds = %100
    %sunkaddr139 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr140 = add i32 %sunkaddr139, 2024
    %sunkaddr141 = inttoptr i32 %sunkaddr140 to %struct.gl_frame_buffer**
    %104 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr141, align 4, !tbaa !45
    %105 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 3
    %106 = load i16*, i16** %105, align 4, !tbaa !46
    %107 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 1
    %108 = load i32, i32* %107, align 4, !tbaa !48
    %109 = load i32, i32* %lsr.iv54, align 4, !tbaa !51
    %110 = mul nsw i32 %109, %108
    %111 = getelementptr inbounds i16, i16* %106, i32 %110
    %112 = load i32, i32* %lsr.iv52, align 4, !tbaa !51
    %113 = getelementptr inbounds i16, i16* %111, i32 %112
    %114 = load i16, i16* %lsr.iv50, align 2, !tbaa !50
    %115 = load i16, i16* %113, align 2, !tbaa !50
    %116 = icmp ult i16 %114, %115
    br i1 %116, label %118, label %117
  
  ; <label>:117                                     ; preds = %103
    store i16 %114, i16* %113, align 2, !tbaa !50
    br label %119
  
  ; <label>:118                                     ; preds = %103
    store i8 0, i8* %lsr.iv56, align 1, !tbaa !49
    br label %119
  
  ; <label>:119                                     ; preds = %118, %117, %100
    %lsr.iv.next49 = add i32 %lsr.iv48, -1
    %scevgep51 = getelementptr i16, i16* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i32, i32* %lsr.iv52, i32 1
    %scevgep55 = getelementptr i32, i32* %lsr.iv54, i32 1
    %scevgep57 = getelementptr i8, i8* %lsr.iv56, i32 1
    %exitcond71 = icmp eq i32 %lsr.iv.next49, 0
    br i1 %exitcond71, label %.loopexit, label %100
  
  ; <label>:120                                     ; preds = %138, %.lr.ph35
    %lsr.iv46 = phi i8* [ %scevgep47, %138 ], [ %mask, %.lr.ph35 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %138 ], [ %y, %.lr.ph35 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %138 ], [ %x, %.lr.ph35 ]
    %lsr.iv40 = phi i16* [ %scevgep41, %138 ], [ %z, %.lr.ph35 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %138 ], [ %n, %.lr.ph35 ]
    %121 = load i8, i8* %lsr.iv46, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %138, label %123
  
  ; <label>:123                                     ; preds = %120
    %sunkaddr142 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr143 = add i32 %sunkaddr142, 2024
    %sunkaddr144 = inttoptr i32 %sunkaddr143 to %struct.gl_frame_buffer**
    %124 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr144, align 4, !tbaa !45
    %125 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 3
    %126 = load i16*, i16** %125, align 4, !tbaa !46
    %127 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 1
    %128 = load i32, i32* %127, align 4, !tbaa !48
    %129 = load i32, i32* %lsr.iv44, align 4, !tbaa !51
    %130 = mul nsw i32 %129, %128
    %131 = getelementptr inbounds i16, i16* %126, i32 %130
    %132 = load i32, i32* %lsr.iv42, align 4, !tbaa !51
    %133 = getelementptr inbounds i16, i16* %131, i32 %132
    %134 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %135 = load i16, i16* %133, align 2, !tbaa !50
    %136 = icmp ult i16 %134, %135
    br i1 %136, label %137, label %138
  
  ; <label>:137                                     ; preds = %123
    store i8 0, i8* %lsr.iv46, align 1, !tbaa !49
    br label %138
  
  ; <label>:138                                     ; preds = %137, %123, %120
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i8, i8* %lsr.iv46, i32 1
    %exitcond70 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond70, label %.loopexit, label %120
  
  ; <label>:139                                     ; preds = %0
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %141 = load i8, i8* %140, align 1, !tbaa !40
    %142 = icmp eq i8 %141, 0
    br i1 %142, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %139
    %143 = icmp ne i32 %n, 0
    br i1 %143, label %.lr.ph41, label %.loopexit
  
  .lr.ph41:                                         ; preds = %.preheader13
    br label %145
  
  .preheader11:                                     ; preds = %139
    %144 = icmp ne i32 %n, 0
    br i1 %144, label %.lr.ph39, label %.loopexit
  
  .lr.ph39:                                         ; preds = %.preheader11
    br label %165
  
  ; <label>:145                                     ; preds = %164, %.lr.ph41
    %lsr.iv76 = phi i8* [ %scevgep77, %164 ], [ %mask, %.lr.ph41 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %164 ], [ %y, %.lr.ph41 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %164 ], [ %x, %.lr.ph41 ]
    %lsr.iv70 = phi i16* [ %scevgep71, %164 ], [ %z, %.lr.ph41 ]
    %lsr.iv68 = phi i32 [ %lsr.iv.next69, %164 ], [ %n, %.lr.ph41 ]
    %146 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %147 = icmp eq i8 %146, 0
    br i1 %147, label %164, label %148
  
  ; <label>:148                                     ; preds = %145
    %sunkaddr145 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr146 = add i32 %sunkaddr145, 2024
    %sunkaddr147 = inttoptr i32 %sunkaddr146 to %struct.gl_frame_buffer**
    %149 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr147, align 4, !tbaa !45
    %150 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 3
    %151 = load i16*, i16** %150, align 4, !tbaa !46
    %152 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 1
    %153 = load i32, i32* %152, align 4, !tbaa !48
    %154 = load i32, i32* %lsr.iv74, align 4, !tbaa !51
    %155 = mul nsw i32 %154, %153
    %156 = getelementptr inbounds i16, i16* %151, i32 %155
    %157 = load i32, i32* %lsr.iv72, align 4, !tbaa !51
    %158 = getelementptr inbounds i16, i16* %156, i32 %157
    %159 = load i16, i16* %lsr.iv70, align 2, !tbaa !50
    %160 = load i16, i16* %158, align 2, !tbaa !50
    %161 = icmp ugt i16 %159, %160
    br i1 %161, label %162, label %163
  
  ; <label>:162                                     ; preds = %148
    store i16 %159, i16* %158, align 2, !tbaa !50
    br label %164
  
  ; <label>:163                                     ; preds = %148
    store i8 0, i8* %lsr.iv76, align 1, !tbaa !49
    br label %164
  
  ; <label>:164                                     ; preds = %163, %162, %145
    %lsr.iv.next69 = add i32 %lsr.iv68, -1
    %scevgep71 = getelementptr i16, i16* %lsr.iv70, i32 1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond73 = icmp eq i32 %lsr.iv.next69, 0
    br i1 %exitcond73, label %.loopexit, label %145
  
  ; <label>:165                                     ; preds = %183, %.lr.ph39
    %lsr.iv66 = phi i8* [ %scevgep67, %183 ], [ %mask, %.lr.ph39 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %183 ], [ %y, %.lr.ph39 ]
    %lsr.iv62 = phi i32* [ %scevgep63, %183 ], [ %x, %.lr.ph39 ]
    %lsr.iv60 = phi i16* [ %scevgep61, %183 ], [ %z, %.lr.ph39 ]
    %lsr.iv58 = phi i32 [ %lsr.iv.next59, %183 ], [ %n, %.lr.ph39 ]
    %166 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %167 = icmp eq i8 %166, 0
    br i1 %167, label %183, label %168
  
  ; <label>:168                                     ; preds = %165
    %sunkaddr148 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr149 = add i32 %sunkaddr148, 2024
    %sunkaddr150 = inttoptr i32 %sunkaddr149 to %struct.gl_frame_buffer**
    %169 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr150, align 4, !tbaa !45
    %170 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 3
    %171 = load i16*, i16** %170, align 4, !tbaa !46
    %172 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 1
    %173 = load i32, i32* %172, align 4, !tbaa !48
    %174 = load i32, i32* %lsr.iv64, align 4, !tbaa !51
    %175 = mul nsw i32 %174, %173
    %176 = getelementptr inbounds i16, i16* %171, i32 %175
    %177 = load i32, i32* %lsr.iv62, align 4, !tbaa !51
    %178 = getelementptr inbounds i16, i16* %176, i32 %177
    %179 = load i16, i16* %lsr.iv60, align 2, !tbaa !50
    %180 = load i16, i16* %178, align 2, !tbaa !50
    %181 = icmp ugt i16 %179, %180
    br i1 %181, label %183, label %182
  
  ; <label>:182                                     ; preds = %168
    store i8 0, i8* %lsr.iv66, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %182, %168, %165
    %lsr.iv.next59 = add i32 %lsr.iv58, -1
    %scevgep61 = getelementptr i16, i16* %lsr.iv60, i32 1
    %scevgep63 = getelementptr i32, i32* %lsr.iv62, i32 1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond72 = icmp eq i32 %lsr.iv.next59, 0
    br i1 %exitcond72, label %.loopexit, label %165
  
  ; <label>:184                                     ; preds = %0
    %185 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %186 = load i8, i8* %185, align 1, !tbaa !40
    %187 = icmp eq i8 %186, 0
    br i1 %187, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %184
    %188 = icmp ne i32 %n, 0
    br i1 %188, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %.preheader17
    br label %190
  
  .preheader15:                                     ; preds = %184
    %189 = icmp ne i32 %n, 0
    br i1 %189, label %.lr.ph43, label %.loopexit
  
  .lr.ph43:                                         ; preds = %.preheader15
    br label %210
  
  ; <label>:190                                     ; preds = %209, %.lr.ph45
    %lsr.iv96 = phi i8* [ %scevgep97, %209 ], [ %mask, %.lr.ph45 ]
    %lsr.iv94 = phi i32* [ %scevgep95, %209 ], [ %y, %.lr.ph45 ]
    %lsr.iv92 = phi i32* [ %scevgep93, %209 ], [ %x, %.lr.ph45 ]
    %lsr.iv90 = phi i16* [ %scevgep91, %209 ], [ %z, %.lr.ph45 ]
    %lsr.iv88 = phi i32 [ %lsr.iv.next89, %209 ], [ %n, %.lr.ph45 ]
    %191 = load i8, i8* %lsr.iv96, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %209, label %193
  
  ; <label>:193                                     ; preds = %190
    %sunkaddr151 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr152 = add i32 %sunkaddr151, 2024
    %sunkaddr153 = inttoptr i32 %sunkaddr152 to %struct.gl_frame_buffer**
    %194 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr153, align 4, !tbaa !45
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 3
    %196 = load i16*, i16** %195, align 4, !tbaa !46
    %197 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !48
    %199 = load i32, i32* %lsr.iv94, align 4, !tbaa !51
    %200 = mul nsw i32 %199, %198
    %201 = getelementptr inbounds i16, i16* %196, i32 %200
    %202 = load i32, i32* %lsr.iv92, align 4, !tbaa !51
    %203 = getelementptr inbounds i16, i16* %201, i32 %202
    %204 = load i16, i16* %lsr.iv90, align 2, !tbaa !50
    %205 = load i16, i16* %203, align 2, !tbaa !50
    %206 = icmp eq i16 %204, %205
    br i1 %206, label %208, label %207
  
  ; <label>:207                                     ; preds = %193
    store i16 %204, i16* %203, align 2, !tbaa !50
    br label %209
  
  ; <label>:208                                     ; preds = %193
    store i8 0, i8* %lsr.iv96, align 1, !tbaa !49
    br label %209
  
  ; <label>:209                                     ; preds = %208, %207, %190
    %lsr.iv.next89 = add i32 %lsr.iv88, -1
    %scevgep91 = getelementptr i16, i16* %lsr.iv90, i32 1
    %scevgep93 = getelementptr i32, i32* %lsr.iv92, i32 1
    %scevgep95 = getelementptr i32, i32* %lsr.iv94, i32 1
    %scevgep97 = getelementptr i8, i8* %lsr.iv96, i32 1
    %exitcond75 = icmp eq i32 %lsr.iv.next89, 0
    br i1 %exitcond75, label %.loopexit, label %190
  
  ; <label>:210                                     ; preds = %228, %.lr.ph43
    %lsr.iv86 = phi i8* [ %scevgep87, %228 ], [ %mask, %.lr.ph43 ]
    %lsr.iv84 = phi i32* [ %scevgep85, %228 ], [ %y, %.lr.ph43 ]
    %lsr.iv82 = phi i32* [ %scevgep83, %228 ], [ %x, %.lr.ph43 ]
    %lsr.iv80 = phi i16* [ %scevgep81, %228 ], [ %z, %.lr.ph43 ]
    %lsr.iv78 = phi i32 [ %lsr.iv.next79, %228 ], [ %n, %.lr.ph43 ]
    %211 = load i8, i8* %lsr.iv86, align 1, !tbaa !49
    %212 = icmp eq i8 %211, 0
    br i1 %212, label %228, label %213
  
  ; <label>:213                                     ; preds = %210
    %sunkaddr154 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr155 = add i32 %sunkaddr154, 2024
    %sunkaddr156 = inttoptr i32 %sunkaddr155 to %struct.gl_frame_buffer**
    %214 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr156, align 4, !tbaa !45
    %215 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 3
    %216 = load i16*, i16** %215, align 4, !tbaa !46
    %217 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 1
    %218 = load i32, i32* %217, align 4, !tbaa !48
    %219 = load i32, i32* %lsr.iv84, align 4, !tbaa !51
    %220 = mul nsw i32 %219, %218
    %221 = getelementptr inbounds i16, i16* %216, i32 %220
    %222 = load i32, i32* %lsr.iv82, align 4, !tbaa !51
    %223 = getelementptr inbounds i16, i16* %221, i32 %222
    %224 = load i16, i16* %lsr.iv80, align 2, !tbaa !50
    %225 = load i16, i16* %223, align 2, !tbaa !50
    %226 = icmp eq i16 %224, %225
    br i1 %226, label %227, label %228
  
  ; <label>:227                                     ; preds = %213
    store i8 0, i8* %lsr.iv86, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %227, %213, %210
    %lsr.iv.next79 = add i32 %lsr.iv78, -1
    %scevgep81 = getelementptr i16, i16* %lsr.iv80, i32 1
    %scevgep83 = getelementptr i32, i32* %lsr.iv82, i32 1
    %scevgep85 = getelementptr i32, i32* %lsr.iv84, i32 1
    %scevgep87 = getelementptr i8, i8* %lsr.iv86, i32 1
    %exitcond74 = icmp eq i32 %lsr.iv.next79, 0
    br i1 %exitcond74, label %.loopexit, label %210
  
  ; <label>:229                                     ; preds = %0
    %230 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %231 = load i8, i8* %230, align 1, !tbaa !40
    %232 = icmp eq i8 %231, 0
    br i1 %232, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %229
    %233 = icmp ne i32 %n, 0
    br i1 %233, label %.lr.ph49, label %.loopexit
  
  .lr.ph49:                                         ; preds = %.preheader21
    br label %235
  
  .preheader19:                                     ; preds = %229
    %234 = icmp ne i32 %n, 0
    br i1 %234, label %.lr.ph47, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader19
    br label %255
  
  ; <label>:235                                     ; preds = %254, %.lr.ph49
    %lsr.iv116 = phi i8* [ %scevgep117, %254 ], [ %mask, %.lr.ph49 ]
    %lsr.iv114 = phi i32* [ %scevgep115, %254 ], [ %y, %.lr.ph49 ]
    %lsr.iv112 = phi i32* [ %scevgep113, %254 ], [ %x, %.lr.ph49 ]
    %lsr.iv110 = phi i16* [ %scevgep111, %254 ], [ %z, %.lr.ph49 ]
    %lsr.iv108 = phi i32 [ %lsr.iv.next109, %254 ], [ %n, %.lr.ph49 ]
    %236 = load i8, i8* %lsr.iv116, align 1, !tbaa !49
    %237 = icmp eq i8 %236, 0
    br i1 %237, label %254, label %238
  
  ; <label>:238                                     ; preds = %235
    %sunkaddr157 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr158 = add i32 %sunkaddr157, 2024
    %sunkaddr159 = inttoptr i32 %sunkaddr158 to %struct.gl_frame_buffer**
    %239 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr159, align 4, !tbaa !45
    %240 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 3
    %241 = load i16*, i16** %240, align 4, !tbaa !46
    %242 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 1
    %243 = load i32, i32* %242, align 4, !tbaa !48
    %244 = load i32, i32* %lsr.iv114, align 4, !tbaa !51
    %245 = mul nsw i32 %244, %243
    %246 = getelementptr inbounds i16, i16* %241, i32 %245
    %247 = load i32, i32* %lsr.iv112, align 4, !tbaa !51
    %248 = getelementptr inbounds i16, i16* %246, i32 %247
    %249 = load i16, i16* %lsr.iv110, align 2, !tbaa !50
    %250 = load i16, i16* %248, align 2, !tbaa !50
    %251 = icmp eq i16 %249, %250
    br i1 %251, label %252, label %253
  
  ; <label>:252                                     ; preds = %238
    store i16 %249, i16* %248, align 2, !tbaa !50
    br label %254
  
  ; <label>:253                                     ; preds = %238
    store i8 0, i8* %lsr.iv116, align 1, !tbaa !49
    br label %254
  
  ; <label>:254                                     ; preds = %253, %252, %235
    %lsr.iv.next109 = add i32 %lsr.iv108, -1
    %scevgep111 = getelementptr i16, i16* %lsr.iv110, i32 1
    %scevgep113 = getelementptr i32, i32* %lsr.iv112, i32 1
    %scevgep115 = getelementptr i32, i32* %lsr.iv114, i32 1
    %scevgep117 = getelementptr i8, i8* %lsr.iv116, i32 1
    %exitcond77 = icmp eq i32 %lsr.iv.next109, 0
    br i1 %exitcond77, label %.loopexit, label %235
  
  ; <label>:255                                     ; preds = %273, %.lr.ph47
    %lsr.iv106 = phi i8* [ %scevgep107, %273 ], [ %mask, %.lr.ph47 ]
    %lsr.iv104 = phi i32* [ %scevgep105, %273 ], [ %y, %.lr.ph47 ]
    %lsr.iv102 = phi i32* [ %scevgep103, %273 ], [ %x, %.lr.ph47 ]
    %lsr.iv100 = phi i16* [ %scevgep101, %273 ], [ %z, %.lr.ph47 ]
    %lsr.iv98 = phi i32 [ %lsr.iv.next99, %273 ], [ %n, %.lr.ph47 ]
    %256 = load i8, i8* %lsr.iv106, align 1, !tbaa !49
    %257 = icmp eq i8 %256, 0
    br i1 %257, label %273, label %258
  
  ; <label>:258                                     ; preds = %255
    %sunkaddr160 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr161 = add i32 %sunkaddr160, 2024
    %sunkaddr162 = inttoptr i32 %sunkaddr161 to %struct.gl_frame_buffer**
    %259 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr162, align 4, !tbaa !45
    %260 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 3
    %261 = load i16*, i16** %260, align 4, !tbaa !46
    %262 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 1
    %263 = load i32, i32* %262, align 4, !tbaa !48
    %264 = load i32, i32* %lsr.iv104, align 4, !tbaa !51
    %265 = mul nsw i32 %264, %263
    %266 = getelementptr inbounds i16, i16* %261, i32 %265
    %267 = load i32, i32* %lsr.iv102, align 4, !tbaa !51
    %268 = getelementptr inbounds i16, i16* %266, i32 %267
    %269 = load i16, i16* %lsr.iv100, align 2, !tbaa !50
    %270 = load i16, i16* %268, align 2, !tbaa !50
    %271 = icmp eq i16 %269, %270
    br i1 %271, label %273, label %272
  
  ; <label>:272                                     ; preds = %258
    store i8 0, i8* %lsr.iv106, align 1, !tbaa !49
    br label %273
  
  ; <label>:273                                     ; preds = %272, %258, %255
    %lsr.iv.next99 = add i32 %lsr.iv98, -1
    %scevgep101 = getelementptr i16, i16* %lsr.iv100, i32 1
    %scevgep103 = getelementptr i32, i32* %lsr.iv102, i32 1
    %scevgep105 = getelementptr i32, i32* %lsr.iv104, i32 1
    %scevgep107 = getelementptr i8, i8* %lsr.iv106, i32 1
    %exitcond76 = icmp eq i32 %lsr.iv.next99, 0
    br i1 %exitcond76, label %.loopexit, label %255
  
  ; <label>:274                                     ; preds = %0
    %275 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %276 = load i8, i8* %275, align 1, !tbaa !40
    %277 = icmp ne i8 %276, 0
    %278 = icmp ne i32 %n, 0
    %or.cond = and i1 %277, %278
    br i1 %or.cond, label %.lr.ph51, label %.loopexit
  
  .lr.ph51:                                         ; preds = %274
    br label %279
  
  ; <label>:279                                     ; preds = %294, %.lr.ph51
    %lsr.iv126 = phi i8* [ %scevgep127, %294 ], [ %mask, %.lr.ph51 ]
    %lsr.iv124 = phi i32* [ %scevgep125, %294 ], [ %y, %.lr.ph51 ]
    %lsr.iv122 = phi i32* [ %scevgep123, %294 ], [ %x, %.lr.ph51 ]
    %lsr.iv120 = phi i16* [ %scevgep121, %294 ], [ %z, %.lr.ph51 ]
    %lsr.iv118 = phi i32 [ %lsr.iv.next119, %294 ], [ %n, %.lr.ph51 ]
    %280 = load i8, i8* %lsr.iv126, align 1, !tbaa !49
    %281 = icmp eq i8 %280, 0
    br i1 %281, label %294, label %282
  
  ; <label>:282                                     ; preds = %279
    %sunkaddr163 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr164 = add i32 %sunkaddr163, 2024
    %sunkaddr165 = inttoptr i32 %sunkaddr164 to %struct.gl_frame_buffer**
    %283 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr165, align 4, !tbaa !45
    %284 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 3
    %285 = load i16*, i16** %284, align 4, !tbaa !46
    %286 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 1
    %287 = load i32, i32* %286, align 4, !tbaa !48
    %288 = load i32, i32* %lsr.iv124, align 4, !tbaa !51
    %289 = mul nsw i32 %288, %287
    %290 = getelementptr inbounds i16, i16* %285, i32 %289
    %291 = load i32, i32* %lsr.iv122, align 4, !tbaa !51
    %292 = getelementptr inbounds i16, i16* %290, i32 %291
    %293 = load i16, i16* %lsr.iv120, align 2, !tbaa !50
    store i16 %293, i16* %292, align 2, !tbaa !50
    br label %294
  
  ; <label>:294                                     ; preds = %282, %279
    %lsr.iv.next119 = add i32 %lsr.iv118, -1
    %scevgep121 = getelementptr i16, i16* %lsr.iv120, i32 1
    %scevgep123 = getelementptr i32, i32* %lsr.iv122, i32 1
    %scevgep125 = getelementptr i32, i32* %lsr.iv124, i32 1
    %scevgep127 = getelementptr i8, i8* %lsr.iv126, i32 1
    %exitcond78 = icmp eq i32 %lsr.iv.next119, 0
    br i1 %exitcond78, label %.loopexit, label %279
  
  ; <label>:295                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %294, %254, %273, %209, %228, %164, %183, %119, %138, %74, %93, %29, %48, %274, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph53.preheader, %.preheader25
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ult i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ugt i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_float(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, float* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast float* %depth to i8*
    %8 = shl i32 %n, 2
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 4, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %11 = load i32, i32* %10, align 4, !tbaa !48
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph4.preheader
  
  .lr.ph4.preheader:                                ; preds = %9
    %13 = mul i32 %11, %y
    %14 = add i32 %x, %13
    %scevgep2 = getelementptr i16, i16* %4, i32 %14
    br label %.lr.ph4
  
  .lr.ph4:                                          ; preds = %.lr.ph4, %.lr.ph4.preheader
    %lsr.iv3 = phi i16* [ %scevgep4, %.lr.ph4 ], [ %scevgep2, %.lr.ph4.preheader ]
    %lsr.iv1 = phi float* [ %scevgep, %.lr.ph4 ], [ %depth, %.lr.ph4.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph4 ], [ %n, %.lr.ph4.preheader ]
    %15 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %16 = uitofp i16 %15 to float
    %17 = fmul float %16, 0x3EF0001000000000
    store float %17, float* %lsr.iv1, align 4, !tbaa !52
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr float, float* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %exitcond6 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond6, label %.loopexit, label %.lr.ph4
  
  .loopexit:                                        ; preds = %.lr.ph4, %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_int(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast i16* %depth to i8*
    %8 = shl i32 %n, 1
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 2, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = bitcast i16* %depth to i8*
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    %13 = mul nsw i32 %12, %y
    %14 = getelementptr inbounds i16, i16* %4, i32 %13
    %15 = getelementptr inbounds i16, i16* %14, i32 %x
    %16 = bitcast i16* %15 to i8*
    %17 = shl i32 %n, 1
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %10, i8* %16, i32 %17, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4
  
  ; Function Attrs: nounwind
  define void @gl_alloc_depth_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %10, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast i16* %4 to i8*
    tail call void @free(i8* %7) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 3
    store i16* null, i16** %9, align 4, !tbaa !46
    br label %10
  
  ; <label>:10                                      ; preds = %6, %0
    %11 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %8, %6 ]
    %12 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 1
    %13 = load i32, i32* %12, align 4, !tbaa !48
    %14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 2
    %15 = load i32, i32* %14, align 4, !tbaa !53
    %16 = shl i32 %13, 1
    %17 = mul i32 %16, %15
    %18 = tail call noalias i8* @malloc(i32 signext %17) #5
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 3
    %20 = bitcast i16** %19 to i8**
    store i8* %18, i8** %20, align 4, !tbaa !46
    %21 = icmp eq i8* %18, null
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %10
    %23 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    store i8 0, i8* %23, align 4, !tbaa !54
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0)) #5
    br label %24
  
  ; <label>:24                                      ; preds = %22, %10
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_depth_buffer(%struct.gl_context* nocapture readonly %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    %2 = load float, float* %1, align 4, !tbaa !37
    %3 = fmul float %2, 6.553500e+04
    %4 = fptoui float %3 to i16
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %6 = load %struct.gl_visual*, %struct.gl_visual** %5, align 4, !tbaa !55
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %6, i32 0, i32 13
    %8 = load i32, i32* %7, align 4, !tbaa !56
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %.loopexit, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %11, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 3
    %14 = load i16*, i16** %13, align 4, !tbaa !46
    %15 = icmp eq i16* %14, null
    br i1 %15, label %.loopexit, label %16
  
  ; <label>:16                                      ; preds = %10
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %18 = load i8, i8* %17, align 4, !tbaa !58
    %19 = icmp eq i8 %18, 0
    br i1 %19, label %38, label %20
  
  ; <label>:20                                      ; preds = %16
    %21 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 11
    %22 = load i32, i32* %21, align 4, !tbaa !59
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 12
    %24 = load i32, i32* %23, align 4, !tbaa !60
    %25 = icmp sgt i32 %22, %24
    br i1 %25, label %.loopexit, label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %20
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !48
    %.phi.trans.insert14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 9
    %.pre15 = load i32, i32* %.phi.trans.insert14, align 4, !tbaa !61
    %.phi.trans.insert16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 10
    %.pre17 = load i32, i32* %.phi.trans.insert16, align 4, !tbaa !62
    %26 = add i32 %.pre15, -1
    %27 = sub i32 %26, %.pre17
    br label %28
  
  ; <label>:28                                      ; preds = %35, %.lr.ph11
    %y.010 = phi i32 [ %22, %.lr.ph11 ], [ %36, %35 ]
    %29 = mul nsw i32 %.pre, %y.010
    %30 = getelementptr inbounds i16, i16* %14, i32 %29
    %31 = getelementptr inbounds i16, i16* %30, i32 %.pre15
    br label %32
  
  ; <label>:32                                      ; preds = %32, %28
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %32 ], [ %27, %28 ]
    %d.0 = phi i16* [ %31, %28 ], [ %33, %32 ]
    %33 = getelementptr inbounds i16, i16* %d.0, i32 1
    store i16 %4, i16* %d.0, align 2, !tbaa !50
    %lsr.iv.next18 = add i32 %lsr.iv17, 1
    %34 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %34, label %35, label %32
  
  ; <label>:35                                      ; preds = %32
    %36 = add nsw i32 %y.010, 1
    %37 = icmp slt i32 %y.010, %24
    br i1 %37, label %28, label %.loopexit
  
  ; <label>:38                                      ; preds = %16
    %39 = zext i16 %4 to i32
    %40 = and i32 %39, 255
    %41 = lshr i32 %39, 8
    %42 = icmp eq i32 %40, %41
    br i1 %42, label %43, label %52
  
  ; <label>:43                                      ; preds = %38
    %44 = bitcast i16* %14 to i8*
    %45 = trunc i16 %4 to i8
    %46 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %47 = load i32, i32* %46, align 4, !tbaa !48
    %48 = shl i32 %47, 1
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %50 = load i32, i32* %49, align 4, !tbaa !53
    %51 = mul nsw i32 %48, %50
    tail call void @llvm.memset.p0i8.i32(i8* %44, i8 %45, i32 %51, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:52                                      ; preds = %38
    %53 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %54 = load i32, i32* %53, align 4, !tbaa !48
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !53
    %57 = mul i32 %56, %54
    %58 = icmp sgt i32 %57, 15
    br i1 %58, label %.lr.ph8.preheader, label %.preheader
  
  .lr.ph8.preheader:                                ; preds = %52
    %59 = add i32 %57, -16
    %60 = and i32 %59, -16
    %61 = add i32 %60, 16
    br label %.lr.ph8
  
  .preheader.loopexit:                              ; preds = %.lr.ph8
    %62 = sub i32 %59, %60
    %scevgep = getelementptr i16, i16* %14, i32 %61
    br label %.preheader
  
  .preheader:                                       ; preds = %.preheader.loopexit, %52
    %n2.0.lcssa = phi i32 [ %57, %52 ], [ %62, %.preheader.loopexit ]
    %d1.0.lcssa = phi i16* [ %14, %52 ], [ %scevgep, %.preheader.loopexit ]
    %63 = icmp sgt i32 %n2.0.lcssa, 0
    br i1 %63, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %64 = add i32 %n2.0.lcssa, 1
    br label %.lr.ph
  
  .lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader
    %n2.07 = phi i32 [ %65, %.lr.ph8 ], [ %57, %.lr.ph8.preheader ]
    %d1.06 = phi i16* [ %scevgep16, %.lr.ph8 ], [ %14, %.lr.ph8.preheader ]
    store i16 %4, i16* %d1.06, align 2, !tbaa !50
    %scevgep1 = getelementptr i16, i16* %d1.06, i32 1
    store i16 %4, i16* %scevgep1, align 2, !tbaa !50
    %scevgep2 = getelementptr i16, i16* %d1.06, i32 2
    store i16 %4, i16* %scevgep2, align 2, !tbaa !50
    %scevgep3 = getelementptr i16, i16* %d1.06, i32 3
    store i16 %4, i16* %scevgep3, align 2, !tbaa !50
    %scevgep4 = getelementptr i16, i16* %d1.06, i32 4
    store i16 %4, i16* %scevgep4, align 2, !tbaa !50
    %scevgep5 = getelementptr i16, i16* %d1.06, i32 5
    store i16 %4, i16* %scevgep5, align 2, !tbaa !50
    %scevgep6 = getelementptr i16, i16* %d1.06, i32 6
    store i16 %4, i16* %scevgep6, align 2, !tbaa !50
    %scevgep7 = getelementptr i16, i16* %d1.06, i32 7
    store i16 %4, i16* %scevgep7, align 2, !tbaa !50
    %scevgep8 = getelementptr i16, i16* %d1.06, i32 8
    store i16 %4, i16* %scevgep8, align 2, !tbaa !50
    %scevgep9 = getelementptr i16, i16* %d1.06, i32 9
    store i16 %4, i16* %scevgep9, align 2, !tbaa !50
    %scevgep10 = getelementptr i16, i16* %d1.06, i32 10
    store i16 %4, i16* %scevgep10, align 2, !tbaa !50
    %scevgep11 = getelementptr i16, i16* %d1.06, i32 11
    store i16 %4, i16* %scevgep11, align 2, !tbaa !50
    %scevgep12 = getelementptr i16, i16* %d1.06, i32 12
    store i16 %4, i16* %scevgep12, align 2, !tbaa !50
    %scevgep13 = getelementptr i16, i16* %d1.06, i32 13
    store i16 %4, i16* %scevgep13, align 2, !tbaa !50
    %scevgep14 = getelementptr i16, i16* %d1.06, i32 14
    store i16 %4, i16* %scevgep14, align 2, !tbaa !50
    %scevgep15 = getelementptr i16, i16* %d1.06, i32 15
    store i16 %4, i16* %scevgep15, align 2, !tbaa !50
    %65 = add nsw i32 %n2.07, -16
    %66 = icmp sgt i32 %65, 15
    %scevgep16 = getelementptr i16, i16* %d1.06, i32 16
    br i1 %66, label %.lr.ph8, label %.preheader.loopexit
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %64, %.lr.ph.preheader ]
    %d1.14 = phi i16* [ %67, %.lr.ph ], [ %d1.0.lcssa, %.lr.ph.preheader ]
    %67 = getelementptr inbounds i16, i16* %d1.14, i32 1
    store i16 %4, i16* %d1.14, align 2, !tbaa !50
    %lsr.iv.next = add i32 %lsr.iv, -1
    %68 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %68, label %.lr.ph, label %.loopexit
  
  .loopexit:                                        ; preds = %35, %.lr.ph, %.preheader, %43, %20, %10, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 7516}
  !38 = !{!2, !4, i64 7512}
  !39 = !{!2, !8, i64 55736}
  !40 = !{!2, !4, i64 7521}
  !41 = !{!2, !11, i64 54672}
  !42 = !{!2, !11, i64 54676}
  !43 = !{!2, !11, i64 54688}
  !44 = !{!2, !11, i64 54700}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 12}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!20, !20, i64 0}
  !51 = !{!8, !8, i64 0}
  !52 = !{!11, !11, i64 0}
  !53 = !{!47, !8, i64 8}
  !54 = !{!2, !4, i64 7520}
  !55 = !{!2, !3, i64 2020}
  !56 = !{!57, !8, i64 48}
  !57 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !58 = !{!2, !4, i64 54308}
  !59 = !{!47, !8, i64 44}
  !60 = !{!47, !8, i64 48}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 40}

...
---
name:            gl_DepthRange
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: afgr64 }
  - { id: 8, class: afgr64 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: afgr64 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: afgr64 }
  - { id: 23, class: afgr64 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: afgr64 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: afgr64 }
  - { id: 29, class: afgr64 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: afgr64 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: afgr64 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: afgr64 }
  - { id: 36, class: afgr64 }
  - { id: 37, class: afgr64 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: afgr64 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: afgr64 }
  - { id: 44, class: afgr64 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%4' }
  - { reg: '%a2', virtual-reg: '%5' }
  - { reg: '%a3', virtual-reg: '%6' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 8, alignment: 8, isImmutable: true, isAliased: false }
constants:       
  - id:              0
    value:           'double 1.000000e+00'
    alignment:       8
  - id:              1
    value:           double 5.000000e-01
    alignment:       8
  - id:              2
    value:           'double 6.553500e+04'
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 31):
    successors: %bb.2(50), %bb.1(50)
    liveins: %a0, %a2, %a3, %t9, %v0
  
    %13 = ADDu %v0, %t9
    %6 = COPY %a3
    %5 = COPY %a2
    %4 = COPY %a0
    %9 = ORi %zero, 55744
    %10 = ADDu %4, killed %9
    %11 = LW killed %10, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !1)
    %12 = ADDiu %zero, 6656
    BEQ killed %11, killed %12, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.4, freq 15):
    successors: %bb.7(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %14 = LW %13, target-flags(<unknown>) @.str.4, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %15 = ADDiu killed %14, target-flags(<unknown>) @.str.4
    %16 = LW %13, target-flags(<unknown>) @gl_error, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %17 = ADDiu %zero, 1282
    %a0 = COPY %4
    %a1 = COPY %17
    %a2 = COPY %15
    %gp = COPY %13
    %t9 = COPY %16
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.7, implicit-def dead %at
  
  bb.2 (%ir-block.5, freq 15):
    successors: %bb.4(50), %bb.3(50)
  
    %7 = BuildPairF64 %6, %5
    %8 = LDC1 %fixed-stack.0, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 8 from stack)
    %19 = COPY %zero
    %20 = BuildPairF64 %19, %19
    %18 = MTC1 %zero
    FCMP_D32 %7, killed %20, 4, implicit-def %fcc0
    BC1T %fcc0, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.7, freq 8):
    successors: %bb.4(100)
  
    %21 = LW %13, target-flags(<unknown>) %const.0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %22 = LDC1 killed %21, target-flags(<unknown>) %const.0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 8 from constant-pool)
    FCMP_D32 %7, %22, 23, implicit-def %fcc0
    %23 = MOVF_D32 %22, %fcc0, %7
    %0 = CVT_S_D32 killed %23
  
  bb.4 (%ir-block.10, freq 15):
    successors: %bb.6(50), %bb.5(50)
  
    %1 = PHI %18, %bb.2, %0, %bb.3
    %25 = COPY %zero
    %26 = BuildPairF64 %25, %25
    FCMP_D32 %8, killed %26, 4, implicit-def %fcc0
    BC1T %fcc0, %bb.6, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.13, freq 8):
    successors: %bb.6(100)
  
    %27 = LW %13, target-flags(<unknown>) %const.0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %28 = LDC1 killed %27, target-flags(<unknown>) %const.0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 8 from constant-pool)
    FCMP_D32 %8, %28, 23, implicit-def %fcc0
    %29 = MOVF_D32 %28, %fcc0, %8
    %2 = CVT_S_D32 killed %29
  
  bb.6 (%ir-block.16, freq 15):
    successors: %bb.7(100)
  
    %3 = PHI %18, %bb.4, %2, %bb.5
    %30 = FSUB_S %3, %1
    %31 = CVT_D32_S killed %30
    %32 = LW %13, target-flags(<unknown>) %const.1, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %33 = LDC1 killed %32, target-flags(<unknown>) %const.1, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 8 from constant-pool)
    %34 = ORi %zero, 54672
    SWXC1 %1, %4, killed %34, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.18, !tbaa !41)
    %35 = FMUL_D32 %31, %33
    %36 = CVT_D32_S %1
    %37 = MADD_D32 killed %36, %31, %33
    %38 = LW %13, target-flags(<unknown>) %const.2, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %39 = LDC1 killed %38, target-flags(<unknown>) %const.2, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 8 from constant-pool)
    %40 = ORi %zero, 54676
    SWXC1 %3, %4, killed %40, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.19, !tbaa !42)
    %41 = ORi %zero, 54700
    %42 = ORi %zero, 54688
    %43 = FMUL_D32 killed %37, %39
    %44 = FMUL_D32 killed %35, %39
    %45 = CVT_S_D32 killed %44
    SWXC1 killed %45, %4, killed %42, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.25, !tbaa !43)
    %46 = CVT_S_D32 killed %43
    SWXC1 killed %46, %4, killed %41, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.30, !tbaa !44)
  
  bb.7 (%ir-block.31, freq 31):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.depth.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type opaque
  
  @.str = private unnamed_addr constant [13 x i8] c"glClearDepth\00", align 1
  @.str.1 = private unnamed_addr constant [12 x i8] c"glDepthFunc\00", align 1
  @.str.2 = private unnamed_addr constant [13 x i8] c"glDepth.Func\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glDepthMask\00", align 1
  @.str.4 = private unnamed_addr constant [13 x i8] c"glDepthRange\00", align 1
  @.str.5 = private unnamed_addr constant [31 x i8] c"Couldn't allocate depth buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearDepth(%struct.gl_context* %ctx, double %depth) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %depth, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %depth, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %depth
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    store float %11, float* %12, align 4, !tbaa !37
    br label %13
  
  ; <label>:13                                      ; preds = %10, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_DepthFunc(%struct.gl_context* %ctx, i32 signext %func) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %12
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %10 = load i32, i32* %9, align 4, !tbaa !39
    %11 = or i32 %10, 2
    store i32 %11, i32* %9, align 4, !tbaa !39
    br label %13
  
  ; <label>:12                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %13
  
  ; <label>:13                                      ; preds = %12, %7, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthMask(%struct.gl_context* %ctx, i8 zeroext %flag) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %10
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    store i8 %flag, i8* %6, align 1, !tbaa !40
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %8 = load i32, i32* %7, align 4, !tbaa !39
    %9 = or i32 %8, 2
    store i32 %9, i32* %7, align 4, !tbaa !39
    br label %10
  
  ; <label>:10                                      ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_DepthRange(%struct.gl_context* %ctx, double %nearval, double %farval) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %31
  
  ; <label>:5                                       ; preds = %0
    %6 = fcmp olt double %nearval, 0.000000e+00
    br i1 %6, label %10, label %7
  
  ; <label>:7                                       ; preds = %5
    %8 = fcmp ogt double %nearval, 1.000000e+00
    %9 = select i1 %8, double 1.000000e+00, double %nearval
    %phitmp = fptrunc double %9 to float
    br label %10
  
  ; <label>:10                                      ; preds = %7, %5
    %11 = phi float [ 0.000000e+00, %5 ], [ %phitmp, %7 ]
    %12 = fcmp olt double %farval, 0.000000e+00
    br i1 %12, label %16, label %13
  
  ; <label>:13                                      ; preds = %10
    %14 = fcmp ogt double %farval, 1.000000e+00
    %15 = select i1 %14, double 1.000000e+00, double %farval
    %phitmp1 = fptrunc double %15 to float
    br label %16
  
  ; <label>:16                                      ; preds = %13, %10
    %17 = phi float [ 0.000000e+00, %10 ], [ %phitmp1, %13 ]
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 4
    store float %11, float* %18, align 4, !tbaa !41
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 5
    store float %17, float* %19, align 4, !tbaa !42
    %20 = fsub float %17, %11
    %21 = fpext float %20 to double
    %22 = fmul double %21, 5.000000e-01
    %23 = fmul double %22, 6.553500e+04
    %24 = fptrunc double %23 to float
    %25 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 8
    store float %24, float* %25, align 4, !tbaa !43
    %26 = fpext float %11 to double
    %27 = fadd double %26, %22
    %28 = fmul double %27, 6.553500e+04
    %29 = fptrunc double %28 to float
    %30 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 43, i32 11
    store float %29, float* %30, align 4, !tbaa !44
    br label %31
  
  ; <label>:31                                      ; preds = %16, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_depth_test_span_generic(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = mul nsw i32 %6, %y
    %8 = getelementptr inbounds i16, i16* %4, i32 %7
    %9 = getelementptr inbounds i16, i16* %8, i32 %x
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %11 = load i32, i32* %10, align 4, !tbaa !38
    switch i32 %11, label %206 [
      i32 513, label %13
      i32 515, label %43
      i32 518, label %73
      i32 516, label %103
      i32 517, label %133
      i32 514, label %163
      i32 519, label %193
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph104.preheader
  
  .lr.ph104.preheader:                              ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %15 = load i8, i8* %14, align 1, !tbaa !40
    %16 = icmp eq i8 %15, 0
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph35, label %.loopexit
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader1, %28
    %lsr.iv4 = phi i16* [ %scevgep5, %28 ], [ %z, %.preheader1 ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %28 ], [ %n, %.preheader1 ]
    %passed.034 = phi i32 [ %passed.1, %28 ], [ 0, %.preheader1 ]
    %m.032 = phi i8* [ %30, %28 ], [ %mask, %.preheader1 ]
    %zptr.031 = phi i16* [ %29, %28 ], [ %9, %.preheader1 ]
    %19 = load i8, i8* %m.032, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph35
    %22 = load i16, i16* %lsr.iv4, align 2, !tbaa !50
    %23 = load i16, i16* %zptr.031, align 2, !tbaa !50
    %24 = icmp ult i16 %22, %23
    br i1 %24, label %25, label %27
  
  ; <label>:25                                      ; preds = %21
    store i16 %22, i16* %zptr.031, align 2, !tbaa !50
    %26 = add i32 %passed.034, 1
    br label %28
  
  ; <label>:27                                      ; preds = %21
    store i8 0, i8* %m.032, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %27, %25, %.lr.ph35
    %passed.1 = phi i32 [ %26, %25 ], [ %passed.034, %27 ], [ %passed.034, %.lr.ph35 ]
    %29 = getelementptr inbounds i16, i16* %zptr.031, i32 1
    %30 = getelementptr inbounds i8, i8* %m.032, i32 1
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %scevgep5 = getelementptr i16, i16* %lsr.iv4, i32 1
    %exitcond118 = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond118, label %.loopexit, label %.lr.ph35
  
  .lr.ph:                                           ; preds = %.preheader, %40
    %lsr.iv1 = phi i16* [ %scevgep, %40 ], [ %z, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %40 ], [ %n, %.preheader ]
    %passed.230 = phi i32 [ %passed.3, %40 ], [ 0, %.preheader ]
    %m.128 = phi i8* [ %42, %40 ], [ %mask, %.preheader ]
    %zptr.127 = phi i16* [ %41, %40 ], [ %9, %.preheader ]
    %31 = load i8, i8* %m.128, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %40, label %33
  
  ; <label>:33                                      ; preds = %.lr.ph
    %34 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %35 = load i16, i16* %zptr.127, align 2, !tbaa !50
    %36 = icmp ult i16 %34, %35
    br i1 %36, label %37, label %39
  
  ; <label>:37                                      ; preds = %33
    %38 = add i32 %passed.230, 1
    br label %40
  
  ; <label>:39                                      ; preds = %33
    store i8 0, i8* %m.128, align 1, !tbaa !49
    br label %40
  
  ; <label>:40                                      ; preds = %39, %37, %.lr.ph
    %passed.3 = phi i32 [ %38, %37 ], [ %passed.230, %39 ], [ %passed.230, %.lr.ph ]
    %41 = getelementptr inbounds i16, i16* %zptr.127, i32 1
    %42 = getelementptr inbounds i8, i8* %m.128, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:43                                      ; preds = %0
    %44 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %45 = load i8, i8* %44, align 1, !tbaa !40
    %46 = icmp eq i8 %45, 0
    br i1 %46, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %43
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph47, label %.loopexit
  
  .preheader3:                                      ; preds = %43
    %48 = icmp ne i32 %n, 0
    br i1 %48, label %.lr.ph41, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader5, %58
    %lsr.iv12 = phi i16* [ %scevgep13, %58 ], [ %z, %.preheader5 ]
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %58 ], [ %n, %.preheader5 ]
    %passed.446 = phi i32 [ %passed.5, %58 ], [ 0, %.preheader5 ]
    %m.244 = phi i8* [ %60, %58 ], [ %mask, %.preheader5 ]
    %zptr.243 = phi i16* [ %59, %58 ], [ %9, %.preheader5 ]
    %49 = load i8, i8* %m.244, align 1, !tbaa !49
    %50 = icmp eq i8 %49, 0
    br i1 %50, label %58, label %51
  
  ; <label>:51                                      ; preds = %.lr.ph47
    %52 = load i16, i16* %lsr.iv12, align 2, !tbaa !50
    %53 = load i16, i16* %zptr.243, align 2, !tbaa !50
    %54 = icmp ugt i16 %52, %53
    br i1 %54, label %57, label %55
  
  ; <label>:55                                      ; preds = %51
    store i16 %52, i16* %zptr.243, align 2, !tbaa !50
    %56 = add i32 %passed.446, 1
    br label %58
  
  ; <label>:57                                      ; preds = %51
    store i8 0, i8* %m.244, align 1, !tbaa !49
    br label %58
  
  ; <label>:58                                      ; preds = %57, %55, %.lr.ph47
    %passed.5 = phi i32 [ %56, %55 ], [ %passed.446, %57 ], [ %passed.446, %.lr.ph47 ]
    %59 = getelementptr inbounds i16, i16* %zptr.243, i32 1
    %60 = getelementptr inbounds i8, i8* %m.244, i32 1
    %lsr.iv.next11 = add i32 %lsr.iv10, -1
    %scevgep13 = getelementptr i16, i16* %lsr.iv12, i32 1
    %exitcond120 = icmp eq i32 %lsr.iv.next11, 0
    br i1 %exitcond120, label %.loopexit, label %.lr.ph47
  
  .lr.ph41:                                         ; preds = %.preheader3, %70
    %lsr.iv8 = phi i16* [ %scevgep9, %70 ], [ %z, %.preheader3 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %70 ], [ %n, %.preheader3 ]
    %passed.640 = phi i32 [ %passed.7, %70 ], [ 0, %.preheader3 ]
    %m.338 = phi i8* [ %72, %70 ], [ %mask, %.preheader3 ]
    %zptr.337 = phi i16* [ %71, %70 ], [ %9, %.preheader3 ]
    %61 = load i8, i8* %m.338, align 1, !tbaa !49
    %62 = icmp eq i8 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %.lr.ph41
    %64 = load i16, i16* %lsr.iv8, align 2, !tbaa !50
    %65 = load i16, i16* %zptr.337, align 2, !tbaa !50
    %66 = icmp ugt i16 %64, %65
    br i1 %66, label %69, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = add i32 %passed.640, 1
    br label %70
  
  ; <label>:69                                      ; preds = %63
    store i8 0, i8* %m.338, align 1, !tbaa !49
    br label %70
  
  ; <label>:70                                      ; preds = %69, %67, %.lr.ph41
    %passed.7 = phi i32 [ %68, %67 ], [ %passed.640, %69 ], [ %passed.640, %.lr.ph41 ]
    %71 = getelementptr inbounds i16, i16* %zptr.337, i32 1
    %72 = getelementptr inbounds i8, i8* %m.338, i32 1
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i16, i16* %lsr.iv8, i32 1
    %exitcond119 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond119, label %.loopexit, label %.lr.ph41
  
  ; <label>:73                                      ; preds = %0
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %75 = load i8, i8* %74, align 1, !tbaa !40
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %73
    %77 = icmp ne i32 %n, 0
    br i1 %77, label %.lr.ph59, label %.loopexit
  
  .preheader7:                                      ; preds = %73
    %78 = icmp ne i32 %n, 0
    br i1 %78, label %.lr.ph53, label %.loopexit
  
  .lr.ph59:                                         ; preds = %.preheader9, %88
    %lsr.iv20 = phi i16* [ %scevgep21, %88 ], [ %z, %.preheader9 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %88 ], [ %n, %.preheader9 ]
    %passed.858 = phi i32 [ %passed.9, %88 ], [ 0, %.preheader9 ]
    %m.456 = phi i8* [ %90, %88 ], [ %mask, %.preheader9 ]
    %zptr.455 = phi i16* [ %89, %88 ], [ %9, %.preheader9 ]
    %79 = load i8, i8* %m.456, align 1, !tbaa !49
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %88, label %81
  
  ; <label>:81                                      ; preds = %.lr.ph59
    %82 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %83 = load i16, i16* %zptr.455, align 2, !tbaa !50
    %84 = icmp ult i16 %82, %83
    br i1 %84, label %87, label %85
  
  ; <label>:85                                      ; preds = %81
    store i16 %82, i16* %zptr.455, align 2, !tbaa !50
    %86 = add i32 %passed.858, 1
    br label %88
  
  ; <label>:87                                      ; preds = %81
    store i8 0, i8* %m.456, align 1, !tbaa !49
    br label %88
  
  ; <label>:88                                      ; preds = %87, %85, %.lr.ph59
    %passed.9 = phi i32 [ %86, %85 ], [ %passed.858, %87 ], [ %passed.858, %.lr.ph59 ]
    %89 = getelementptr inbounds i16, i16* %zptr.455, i32 1
    %90 = getelementptr inbounds i8, i8* %m.456, i32 1
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %exitcond122 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond122, label %.loopexit, label %.lr.ph59
  
  .lr.ph53:                                         ; preds = %.preheader7, %100
    %lsr.iv16 = phi i16* [ %scevgep17, %100 ], [ %z, %.preheader7 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %100 ], [ %n, %.preheader7 ]
    %passed.1052 = phi i32 [ %passed.11, %100 ], [ 0, %.preheader7 ]
    %m.550 = phi i8* [ %102, %100 ], [ %mask, %.preheader7 ]
    %zptr.549 = phi i16* [ %101, %100 ], [ %9, %.preheader7 ]
    %91 = load i8, i8* %m.550, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %100, label %93
  
  ; <label>:93                                      ; preds = %.lr.ph53
    %94 = load i16, i16* %lsr.iv16, align 2, !tbaa !50
    %95 = load i16, i16* %zptr.549, align 2, !tbaa !50
    %96 = icmp ult i16 %94, %95
    br i1 %96, label %99, label %97
  
  ; <label>:97                                      ; preds = %93
    %98 = add i32 %passed.1052, 1
    br label %100
  
  ; <label>:99                                      ; preds = %93
    store i8 0, i8* %m.550, align 1, !tbaa !49
    br label %100
  
  ; <label>:100                                     ; preds = %99, %97, %.lr.ph53
    %passed.11 = phi i32 [ %98, %97 ], [ %passed.1052, %99 ], [ %passed.1052, %.lr.ph53 ]
    %101 = getelementptr inbounds i16, i16* %zptr.549, i32 1
    %102 = getelementptr inbounds i8, i8* %m.550, i32 1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond121 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond121, label %.loopexit, label %.lr.ph53
  
  ; <label>:103                                     ; preds = %0
    %104 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %105 = load i8, i8* %104, align 1, !tbaa !40
    %106 = icmp eq i8 %105, 0
    br i1 %106, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %103
    %107 = icmp ne i32 %n, 0
    br i1 %107, label %.lr.ph71, label %.loopexit
  
  .preheader11:                                     ; preds = %103
    %108 = icmp ne i32 %n, 0
    br i1 %108, label %.lr.ph65, label %.loopexit
  
  .lr.ph71:                                         ; preds = %.preheader13, %118
    %lsr.iv28 = phi i16* [ %scevgep29, %118 ], [ %z, %.preheader13 ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %118 ], [ %n, %.preheader13 ]
    %passed.1270 = phi i32 [ %passed.13, %118 ], [ 0, %.preheader13 ]
    %m.668 = phi i8* [ %120, %118 ], [ %mask, %.preheader13 ]
    %zptr.667 = phi i16* [ %119, %118 ], [ %9, %.preheader13 ]
    %109 = load i8, i8* %m.668, align 1, !tbaa !49
    %110 = icmp eq i8 %109, 0
    br i1 %110, label %118, label %111
  
  ; <label>:111                                     ; preds = %.lr.ph71
    %112 = load i16, i16* %lsr.iv28, align 2, !tbaa !50
    %113 = load i16, i16* %zptr.667, align 2, !tbaa !50
    %114 = icmp ugt i16 %112, %113
    br i1 %114, label %115, label %117
  
  ; <label>:115                                     ; preds = %111
    store i16 %112, i16* %zptr.667, align 2, !tbaa !50
    %116 = add i32 %passed.1270, 1
    br label %118
  
  ; <label>:117                                     ; preds = %111
    store i8 0, i8* %m.668, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %117, %115, %.lr.ph71
    %passed.13 = phi i32 [ %116, %115 ], [ %passed.1270, %117 ], [ %passed.1270, %.lr.ph71 ]
    %119 = getelementptr inbounds i16, i16* %zptr.667, i32 1
    %120 = getelementptr inbounds i8, i8* %m.668, i32 1
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep29 = getelementptr i16, i16* %lsr.iv28, i32 1
    %exitcond124 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond124, label %.loopexit, label %.lr.ph71
  
  .lr.ph65:                                         ; preds = %.preheader11, %130
    %lsr.iv24 = phi i16* [ %scevgep25, %130 ], [ %z, %.preheader11 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %130 ], [ %n, %.preheader11 ]
    %passed.1464 = phi i32 [ %passed.15, %130 ], [ 0, %.preheader11 ]
    %m.762 = phi i8* [ %132, %130 ], [ %mask, %.preheader11 ]
    %zptr.761 = phi i16* [ %131, %130 ], [ %9, %.preheader11 ]
    %121 = load i8, i8* %m.762, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %130, label %123
  
  ; <label>:123                                     ; preds = %.lr.ph65
    %124 = load i16, i16* %lsr.iv24, align 2, !tbaa !50
    %125 = load i16, i16* %zptr.761, align 2, !tbaa !50
    %126 = icmp ugt i16 %124, %125
    br i1 %126, label %127, label %129
  
  ; <label>:127                                     ; preds = %123
    %128 = add i32 %passed.1464, 1
    br label %130
  
  ; <label>:129                                     ; preds = %123
    store i8 0, i8* %m.762, align 1, !tbaa !49
    br label %130
  
  ; <label>:130                                     ; preds = %129, %127, %.lr.ph65
    %passed.15 = phi i32 [ %128, %127 ], [ %passed.1464, %129 ], [ %passed.1464, %.lr.ph65 ]
    %131 = getelementptr inbounds i16, i16* %zptr.761, i32 1
    %132 = getelementptr inbounds i8, i8* %m.762, i32 1
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i16, i16* %lsr.iv24, i32 1
    %exitcond123 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond123, label %.loopexit, label %.lr.ph65
  
  ; <label>:133                                     ; preds = %0
    %134 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %135 = load i8, i8* %134, align 1, !tbaa !40
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %133
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph83, label %.loopexit
  
  .preheader15:                                     ; preds = %133
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph77, label %.loopexit
  
  .lr.ph83:                                         ; preds = %.preheader17, %148
    %lsr.iv36 = phi i16* [ %scevgep37, %148 ], [ %z, %.preheader17 ]
    %lsr.iv34 = phi i32 [ %lsr.iv.next35, %148 ], [ %n, %.preheader17 ]
    %passed.1682 = phi i32 [ %passed.17, %148 ], [ 0, %.preheader17 ]
    %m.880 = phi i8* [ %150, %148 ], [ %mask, %.preheader17 ]
    %zptr.879 = phi i16* [ %149, %148 ], [ %9, %.preheader17 ]
    %139 = load i8, i8* %m.880, align 1, !tbaa !49
    %140 = icmp eq i8 %139, 0
    br i1 %140, label %148, label %141
  
  ; <label>:141                                     ; preds = %.lr.ph83
    %142 = load i16, i16* %lsr.iv36, align 2, !tbaa !50
    %143 = load i16, i16* %zptr.879, align 2, !tbaa !50
    %144 = icmp eq i16 %142, %143
    br i1 %144, label %147, label %145
  
  ; <label>:145                                     ; preds = %141
    store i16 %142, i16* %zptr.879, align 2, !tbaa !50
    %146 = add i32 %passed.1682, 1
    br label %148
  
  ; <label>:147                                     ; preds = %141
    store i8 0, i8* %m.880, align 1, !tbaa !49
    br label %148
  
  ; <label>:148                                     ; preds = %147, %145, %.lr.ph83
    %passed.17 = phi i32 [ %146, %145 ], [ %passed.1682, %147 ], [ %passed.1682, %.lr.ph83 ]
    %149 = getelementptr inbounds i16, i16* %zptr.879, i32 1
    %150 = getelementptr inbounds i8, i8* %m.880, i32 1
    %lsr.iv.next35 = add i32 %lsr.iv34, -1
    %scevgep37 = getelementptr i16, i16* %lsr.iv36, i32 1
    %exitcond126 = icmp eq i32 %lsr.iv.next35, 0
    br i1 %exitcond126, label %.loopexit, label %.lr.ph83
  
  .lr.ph77:                                         ; preds = %.preheader15, %160
    %lsr.iv32 = phi i16* [ %scevgep33, %160 ], [ %z, %.preheader15 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %160 ], [ %n, %.preheader15 ]
    %passed.1876 = phi i32 [ %passed.19, %160 ], [ 0, %.preheader15 ]
    %m.974 = phi i8* [ %162, %160 ], [ %mask, %.preheader15 ]
    %zptr.973 = phi i16* [ %161, %160 ], [ %9, %.preheader15 ]
    %151 = load i8, i8* %m.974, align 1, !tbaa !49
    %152 = icmp eq i8 %151, 0
    br i1 %152, label %160, label %153
  
  ; <label>:153                                     ; preds = %.lr.ph77
    %154 = load i16, i16* %lsr.iv32, align 2, !tbaa !50
    %155 = load i16, i16* %zptr.973, align 2, !tbaa !50
    %156 = icmp eq i16 %154, %155
    br i1 %156, label %159, label %157
  
  ; <label>:157                                     ; preds = %153
    %158 = add i32 %passed.1876, 1
    br label %160
  
  ; <label>:159                                     ; preds = %153
    store i8 0, i8* %m.974, align 1, !tbaa !49
    br label %160
  
  ; <label>:160                                     ; preds = %159, %157, %.lr.ph77
    %passed.19 = phi i32 [ %158, %157 ], [ %passed.1876, %159 ], [ %passed.1876, %.lr.ph77 ]
    %161 = getelementptr inbounds i16, i16* %zptr.973, i32 1
    %162 = getelementptr inbounds i8, i8* %m.974, i32 1
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i16, i16* %lsr.iv32, i32 1
    %exitcond125 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond125, label %.loopexit, label %.lr.ph77
  
  ; <label>:163                                     ; preds = %0
    %164 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %165 = load i8, i8* %164, align 1, !tbaa !40
    %166 = icmp eq i8 %165, 0
    br i1 %166, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %163
    %167 = icmp ne i32 %n, 0
    br i1 %167, label %.lr.ph95, label %.loopexit
  
  .preheader19:                                     ; preds = %163
    %168 = icmp ne i32 %n, 0
    br i1 %168, label %.lr.ph89, label %.loopexit
  
  .lr.ph95:                                         ; preds = %.preheader21, %178
    %lsr.iv44 = phi i16* [ %scevgep45, %178 ], [ %z, %.preheader21 ]
    %lsr.iv42 = phi i32 [ %lsr.iv.next43, %178 ], [ %n, %.preheader21 ]
    %passed.2094 = phi i32 [ %passed.21, %178 ], [ 0, %.preheader21 ]
    %m.1092 = phi i8* [ %180, %178 ], [ %mask, %.preheader21 ]
    %zptr.1091 = phi i16* [ %179, %178 ], [ %9, %.preheader21 ]
    %169 = load i8, i8* %m.1092, align 1, !tbaa !49
    %170 = icmp eq i8 %169, 0
    br i1 %170, label %178, label %171
  
  ; <label>:171                                     ; preds = %.lr.ph95
    %172 = load i16, i16* %lsr.iv44, align 2, !tbaa !50
    %173 = load i16, i16* %zptr.1091, align 2, !tbaa !50
    %174 = icmp eq i16 %172, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %171
    store i16 %172, i16* %zptr.1091, align 2, !tbaa !50
    %176 = add i32 %passed.2094, 1
    br label %178
  
  ; <label>:177                                     ; preds = %171
    store i8 0, i8* %m.1092, align 1, !tbaa !49
    br label %178
  
  ; <label>:178                                     ; preds = %177, %175, %.lr.ph95
    %passed.21 = phi i32 [ %176, %175 ], [ %passed.2094, %177 ], [ %passed.2094, %.lr.ph95 ]
    %179 = getelementptr inbounds i16, i16* %zptr.1091, i32 1
    %180 = getelementptr inbounds i8, i8* %m.1092, i32 1
    %lsr.iv.next43 = add i32 %lsr.iv42, -1
    %scevgep45 = getelementptr i16, i16* %lsr.iv44, i32 1
    %exitcond128 = icmp eq i32 %lsr.iv.next43, 0
    br i1 %exitcond128, label %.loopexit, label %.lr.ph95
  
  .lr.ph89:                                         ; preds = %.preheader19, %190
    %lsr.iv40 = phi i16* [ %scevgep41, %190 ], [ %z, %.preheader19 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %190 ], [ %n, %.preheader19 ]
    %passed.2288 = phi i32 [ %passed.23, %190 ], [ 0, %.preheader19 ]
    %m.1186 = phi i8* [ %192, %190 ], [ %mask, %.preheader19 ]
    %zptr.1185 = phi i16* [ %191, %190 ], [ %9, %.preheader19 ]
    %181 = load i8, i8* %m.1186, align 1, !tbaa !49
    %182 = icmp eq i8 %181, 0
    br i1 %182, label %190, label %183
  
  ; <label>:183                                     ; preds = %.lr.ph89
    %184 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %185 = load i16, i16* %zptr.1185, align 2, !tbaa !50
    %186 = icmp eq i16 %184, %185
    br i1 %186, label %187, label %189
  
  ; <label>:187                                     ; preds = %183
    %188 = add i32 %passed.2288, 1
    br label %190
  
  ; <label>:189                                     ; preds = %183
    store i8 0, i8* %m.1186, align 1, !tbaa !49
    br label %190
  
  ; <label>:190                                     ; preds = %189, %187, %.lr.ph89
    %passed.23 = phi i32 [ %188, %187 ], [ %passed.2288, %189 ], [ %passed.2288, %.lr.ph89 ]
    %191 = getelementptr inbounds i16, i16* %zptr.1185, i32 1
    %192 = getelementptr inbounds i8, i8* %m.1186, i32 1
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %exitcond127 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond127, label %.loopexit, label %.lr.ph89
  
  ; <label>:193                                     ; preds = %0
    %194 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %195 = load i8, i8* %194, align 1, !tbaa !40
    %196 = icmp eq i8 %195, 0
    br i1 %196, label %.loopexit, label %.preheader23
  
  .preheader23:                                     ; preds = %193
    %197 = icmp eq i32 %n, 0
    br i1 %197, label %.loopexit, label %.lr.ph101
  
  .lr.ph101:                                        ; preds = %.preheader23, %203
    %lsr.iv48 = phi i16* [ %scevgep49, %203 ], [ %z, %.preheader23 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %203 ], [ %n, %.preheader23 ]
    %passed.24100 = phi i32 [ %passed.25, %203 ], [ 0, %.preheader23 ]
    %m.1298 = phi i8* [ %205, %203 ], [ %mask, %.preheader23 ]
    %zptr.1297 = phi i16* [ %204, %203 ], [ %9, %.preheader23 ]
    %198 = load i8, i8* %m.1298, align 1, !tbaa !49
    %199 = icmp eq i8 %198, 0
    br i1 %199, label %203, label %200
  
  ; <label>:200                                     ; preds = %.lr.ph101
    %201 = load i16, i16* %lsr.iv48, align 2, !tbaa !50
    store i16 %201, i16* %zptr.1297, align 2, !tbaa !50
    %202 = add i32 %passed.24100, 1
    br label %203
  
  ; <label>:203                                     ; preds = %200, %.lr.ph101
    %passed.25 = phi i32 [ %202, %200 ], [ %passed.24100, %.lr.ph101 ]
    %204 = getelementptr inbounds i16, i16* %zptr.1297, i32 1
    %205 = getelementptr inbounds i8, i8* %m.1298, i32 1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i16, i16* %lsr.iv48, i32 1
    %exitcond129 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond129, label %.loopexit, label %.lr.ph101
  
  ; <label>:206                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %203, %178, %190, %148, %160, %118, %130, %88, %100, %58, %70, %28, %40, %.preheader23, %193, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph104.preheader, %.preheader25
    %passed.26 = phi i32 [ %n, %193 ], [ 0, %.preheader ], [ 0, %.preheader1 ], [ 0, %.preheader3 ], [ 0, %.preheader5 ], [ 0, %.preheader7 ], [ 0, %.preheader9 ], [ 0, %.preheader11 ], [ 0, %.preheader13 ], [ 0, %.preheader15 ], [ 0, %.preheader17 ], [ 0, %.preheader19 ], [ 0, %.preheader21 ], [ 0, %.preheader23 ], [ 0, %.preheader25 ], [ 0, %.lr.ph104.preheader ], [ %passed.3, %40 ], [ %passed.1, %28 ], [ %passed.7, %70 ], [ %passed.5, %58 ], [ %passed.11, %100 ], [ %passed.9, %88 ], [ %passed.15, %130 ], [ %passed.13, %118 ], [ %passed.19, %160 ], [ %passed.17, %148 ], [ %passed.23, %190 ], [ %passed.21, %178 ], [ %passed.25, %203 ]
    ret i32 %passed.26
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #2
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ult i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: norecurse nounwind
  define i32 @gl_depth_test_span_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %6 = load i32, i32* %5, align 4, !tbaa !48
    %7 = icmp eq i32 %n, 0
    br i1 %7, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %8 = mul i32 %6, %y
    %9 = add i32 %x, %8
    %scevgep = getelementptr i16, i16* %4, i32 %9
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %19, %.lr.ph.preheader
    %lsr.iv5 = phi i8* [ %scevgep6, %19 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi i16* [ %scevgep4, %19 ], [ %z, %.lr.ph.preheader ]
    %lsr.iv1 = phi i16* [ %scevgep2, %19 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %19 ], [ %n, %.lr.ph.preheader ]
    %passed.02 = phi i32 [ %passed.1, %19 ], [ 0, %.lr.ph.preheader ]
    %10 = load i8, i8* %lsr.iv5, align 1, !tbaa !49
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %19, label %12
  
  ; <label>:12                                      ; preds = %.lr.ph
    %13 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %14 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %15 = icmp ugt i16 %13, %14
    br i1 %15, label %16, label %18
  
  ; <label>:16                                      ; preds = %12
    store i16 %13, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = add i32 %passed.02, 1
    br label %19
  
  ; <label>:18                                      ; preds = %12
    store i8 0, i8* %lsr.iv5, align 1, !tbaa !49
    br label %19
  
  ; <label>:19                                      ; preds = %18, %16, %.lr.ph
    %passed.1 = phi i32 [ %17, %16 ], [ %passed.02, %18 ], [ %passed.02, %.lr.ph ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %19, %0
    %passed.0.lcssa = phi i32 [ 0, %0 ], [ %passed.1, %19 ]
    ret i32 %passed.0.lcssa
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_test_pixels_generic(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %2 = load i32, i32* %1, align 4, !tbaa !38
    switch i32 %2, label %295 [
      i32 513, label %4
      i32 515, label %49
      i32 518, label %94
      i32 516, label %139
      i32 517, label %184
      i32 514, label %229
      i32 519, label %274
      i32 512, label %.preheader25
    ]
  
  .preheader25:                                     ; preds = %0
    %3 = icmp eq i32 %n, 0
    br i1 %3, label %.loopexit, label %.lr.ph53.preheader
  
  .lr.ph53.preheader:                               ; preds = %.preheader25
    call void @llvm.memset.p0i8.i32(i8* %mask, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %6 = load i8, i8* %5, align 1, !tbaa !40
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %4
    %8 = icmp ne i32 %n, 0
    br i1 %8, label %.lr.ph29, label %.loopexit
  
  .lr.ph29:                                         ; preds = %.preheader1
    br label %10
  
  .preheader:                                       ; preds = %4
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %30
  
  ; <label>:10                                      ; preds = %29, %.lr.ph29
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %mask, %.lr.ph29 ]
    %lsr.iv14 = phi i32* [ %scevgep15, %29 ], [ %y, %.lr.ph29 ]
    %lsr.iv12 = phi i32* [ %scevgep13, %29 ], [ %x, %.lr.ph29 ]
    %lsr.iv10 = phi i16* [ %scevgep11, %29 ], [ %z, %.lr.ph29 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %29 ], [ %n, %.lr.ph29 ]
    %11 = load i8, i8* %lsr.iv16, align 1, !tbaa !49
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %29, label %13
  
  ; <label>:13                                      ; preds = %10
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr128 = add i32 %sunkaddr, 2024
    %sunkaddr129 = inttoptr i32 %sunkaddr128 to %struct.gl_frame_buffer**
    %14 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr129, align 4, !tbaa !45
    %15 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 3
    %16 = load i16*, i16** %15, align 4, !tbaa !46
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %14, i32 0, i32 1
    %18 = load i32, i32* %17, align 4, !tbaa !48
    %19 = load i32, i32* %lsr.iv14, align 4, !tbaa !51
    %20 = mul nsw i32 %19, %18
    %21 = getelementptr inbounds i16, i16* %16, i32 %20
    %22 = load i32, i32* %lsr.iv12, align 4, !tbaa !51
    %23 = getelementptr inbounds i16, i16* %21, i32 %22
    %24 = load i16, i16* %lsr.iv10, align 2, !tbaa !50
    %25 = load i16, i16* %23, align 2, !tbaa !50
    %26 = icmp ult i16 %24, %25
    br i1 %26, label %27, label %28
  
  ; <label>:27                                      ; preds = %13
    store i16 %24, i16* %23, align 2, !tbaa !50
    br label %29
  
  ; <label>:28                                      ; preds = %13
    store i8 0, i8* %lsr.iv16, align 1, !tbaa !49
    br label %29
  
  ; <label>:29                                      ; preds = %28, %27, %10
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i16, i16* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i32, i32* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i32, i32* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %exitcond67 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond67, label %.loopexit, label %10
  
  ; <label>:30                                      ; preds = %48, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %48 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %48 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %48 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %48 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %48 ], [ %n, %.lr.ph ]
    %31 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %48, label %33
  
  ; <label>:33                                      ; preds = %30
    %sunkaddr130 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr131 = add i32 %sunkaddr130, 2024
    %sunkaddr132 = inttoptr i32 %sunkaddr131 to %struct.gl_frame_buffer**
    %34 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr132, align 4, !tbaa !45
    %35 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 3
    %36 = load i16*, i16** %35, align 4, !tbaa !46
    %37 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %34, i32 0, i32 1
    %38 = load i32, i32* %37, align 4, !tbaa !48
    %39 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %40 = mul nsw i32 %39, %38
    %41 = getelementptr inbounds i16, i16* %36, i32 %40
    %42 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %43 = getelementptr inbounds i16, i16* %41, i32 %42
    %44 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %45 = load i16, i16* %43, align 2, !tbaa !50
    %46 = icmp ult i16 %44, %45
    br i1 %46, label %48, label %47
  
  ; <label>:47                                      ; preds = %33
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %48
  
  ; <label>:48                                      ; preds = %47, %33, %30
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %30
  
  ; <label>:49                                      ; preds = %0
    %50 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %51 = load i8, i8* %50, align 1, !tbaa !40
    %52 = icmp eq i8 %51, 0
    br i1 %52, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %49
    %53 = icmp ne i32 %n, 0
    br i1 %53, label %.lr.ph33, label %.loopexit
  
  .lr.ph33:                                         ; preds = %.preheader5
    br label %55
  
  .preheader3:                                      ; preds = %49
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph31, label %.loopexit
  
  .lr.ph31:                                         ; preds = %.preheader3
    br label %75
  
  ; <label>:55                                      ; preds = %74, %.lr.ph33
    %lsr.iv36 = phi i8* [ %scevgep37, %74 ], [ %mask, %.lr.ph33 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %74 ], [ %y, %.lr.ph33 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %74 ], [ %x, %.lr.ph33 ]
    %lsr.iv30 = phi i16* [ %scevgep31, %74 ], [ %z, %.lr.ph33 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %74 ], [ %n, %.lr.ph33 ]
    %56 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %57 = icmp eq i8 %56, 0
    br i1 %57, label %74, label %58
  
  ; <label>:58                                      ; preds = %55
    %sunkaddr133 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr134 = add i32 %sunkaddr133, 2024
    %sunkaddr135 = inttoptr i32 %sunkaddr134 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr135, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 3
    %61 = load i16*, i16** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv34, align 4, !tbaa !51
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i16, i16* %61, i32 %65
    %67 = load i32, i32* %lsr.iv32, align 4, !tbaa !51
    %68 = getelementptr inbounds i16, i16* %66, i32 %67
    %69 = load i16, i16* %lsr.iv30, align 2, !tbaa !50
    %70 = load i16, i16* %68, align 2, !tbaa !50
    %71 = icmp ugt i16 %69, %70
    br i1 %71, label %73, label %72
  
  ; <label>:72                                      ; preds = %58
    store i16 %69, i16* %68, align 2, !tbaa !50
    br label %74
  
  ; <label>:73                                      ; preds = %58
    store i8 0, i8* %lsr.iv36, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %73, %72, %55
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr i16, i16* %lsr.iv30, i32 1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond69 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond69, label %.loopexit, label %55
  
  ; <label>:75                                      ; preds = %93, %.lr.ph31
    %lsr.iv26 = phi i8* [ %scevgep27, %93 ], [ %mask, %.lr.ph31 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %93 ], [ %y, %.lr.ph31 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %93 ], [ %x, %.lr.ph31 ]
    %lsr.iv20 = phi i16* [ %scevgep21, %93 ], [ %z, %.lr.ph31 ]
    %lsr.iv18 = phi i32 [ %lsr.iv.next19, %93 ], [ %n, %.lr.ph31 ]
    %76 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %77 = icmp eq i8 %76, 0
    br i1 %77, label %93, label %78
  
  ; <label>:78                                      ; preds = %75
    %sunkaddr136 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr137 = add i32 %sunkaddr136, 2024
    %sunkaddr138 = inttoptr i32 %sunkaddr137 to %struct.gl_frame_buffer**
    %79 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr138, align 4, !tbaa !45
    %80 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 3
    %81 = load i16*, i16** %80, align 4, !tbaa !46
    %82 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %79, i32 0, i32 1
    %83 = load i32, i32* %82, align 4, !tbaa !48
    %84 = load i32, i32* %lsr.iv24, align 4, !tbaa !51
    %85 = mul nsw i32 %84, %83
    %86 = getelementptr inbounds i16, i16* %81, i32 %85
    %87 = load i32, i32* %lsr.iv22, align 4, !tbaa !51
    %88 = getelementptr inbounds i16, i16* %86, i32 %87
    %89 = load i16, i16* %lsr.iv20, align 2, !tbaa !50
    %90 = load i16, i16* %88, align 2, !tbaa !50
    %91 = icmp ugt i16 %89, %90
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %78
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %93
  
  ; <label>:93                                      ; preds = %92, %78, %75
    %lsr.iv.next19 = add i32 %lsr.iv18, -1
    %scevgep21 = getelementptr i16, i16* %lsr.iv20, i32 1
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond68 = icmp eq i32 %lsr.iv.next19, 0
    br i1 %exitcond68, label %.loopexit, label %75
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %96 = load i8, i8* %95, align 1, !tbaa !40
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %94
    %98 = icmp ne i32 %n, 0
    br i1 %98, label %.lr.ph37, label %.loopexit
  
  .lr.ph37:                                         ; preds = %.preheader9
    br label %100
  
  .preheader7:                                      ; preds = %94
    %99 = icmp ne i32 %n, 0
    br i1 %99, label %.lr.ph35, label %.loopexit
  
  .lr.ph35:                                         ; preds = %.preheader7
    br label %120
  
  ; <label>:100                                     ; preds = %119, %.lr.ph37
    %lsr.iv56 = phi i8* [ %scevgep57, %119 ], [ %mask, %.lr.ph37 ]
    %lsr.iv54 = phi i32* [ %scevgep55, %119 ], [ %y, %.lr.ph37 ]
    %lsr.iv52 = phi i32* [ %scevgep53, %119 ], [ %x, %.lr.ph37 ]
    %lsr.iv50 = phi i16* [ %scevgep51, %119 ], [ %z, %.lr.ph37 ]
    %lsr.iv48 = phi i32 [ %lsr.iv.next49, %119 ], [ %n, %.lr.ph37 ]
    %101 = load i8, i8* %lsr.iv56, align 1, !tbaa !49
    %102 = icmp eq i8 %101, 0
    br i1 %102, label %119, label %103
  
  ; <label>:103                                     ; preds = %100
    %sunkaddr139 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr140 = add i32 %sunkaddr139, 2024
    %sunkaddr141 = inttoptr i32 %sunkaddr140 to %struct.gl_frame_buffer**
    %104 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr141, align 4, !tbaa !45
    %105 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 3
    %106 = load i16*, i16** %105, align 4, !tbaa !46
    %107 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %104, i32 0, i32 1
    %108 = load i32, i32* %107, align 4, !tbaa !48
    %109 = load i32, i32* %lsr.iv54, align 4, !tbaa !51
    %110 = mul nsw i32 %109, %108
    %111 = getelementptr inbounds i16, i16* %106, i32 %110
    %112 = load i32, i32* %lsr.iv52, align 4, !tbaa !51
    %113 = getelementptr inbounds i16, i16* %111, i32 %112
    %114 = load i16, i16* %lsr.iv50, align 2, !tbaa !50
    %115 = load i16, i16* %113, align 2, !tbaa !50
    %116 = icmp ult i16 %114, %115
    br i1 %116, label %118, label %117
  
  ; <label>:117                                     ; preds = %103
    store i16 %114, i16* %113, align 2, !tbaa !50
    br label %119
  
  ; <label>:118                                     ; preds = %103
    store i8 0, i8* %lsr.iv56, align 1, !tbaa !49
    br label %119
  
  ; <label>:119                                     ; preds = %118, %117, %100
    %lsr.iv.next49 = add i32 %lsr.iv48, -1
    %scevgep51 = getelementptr i16, i16* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i32, i32* %lsr.iv52, i32 1
    %scevgep55 = getelementptr i32, i32* %lsr.iv54, i32 1
    %scevgep57 = getelementptr i8, i8* %lsr.iv56, i32 1
    %exitcond71 = icmp eq i32 %lsr.iv.next49, 0
    br i1 %exitcond71, label %.loopexit, label %100
  
  ; <label>:120                                     ; preds = %138, %.lr.ph35
    %lsr.iv46 = phi i8* [ %scevgep47, %138 ], [ %mask, %.lr.ph35 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %138 ], [ %y, %.lr.ph35 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %138 ], [ %x, %.lr.ph35 ]
    %lsr.iv40 = phi i16* [ %scevgep41, %138 ], [ %z, %.lr.ph35 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %138 ], [ %n, %.lr.ph35 ]
    %121 = load i8, i8* %lsr.iv46, align 1, !tbaa !49
    %122 = icmp eq i8 %121, 0
    br i1 %122, label %138, label %123
  
  ; <label>:123                                     ; preds = %120
    %sunkaddr142 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr143 = add i32 %sunkaddr142, 2024
    %sunkaddr144 = inttoptr i32 %sunkaddr143 to %struct.gl_frame_buffer**
    %124 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr144, align 4, !tbaa !45
    %125 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 3
    %126 = load i16*, i16** %125, align 4, !tbaa !46
    %127 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %124, i32 0, i32 1
    %128 = load i32, i32* %127, align 4, !tbaa !48
    %129 = load i32, i32* %lsr.iv44, align 4, !tbaa !51
    %130 = mul nsw i32 %129, %128
    %131 = getelementptr inbounds i16, i16* %126, i32 %130
    %132 = load i32, i32* %lsr.iv42, align 4, !tbaa !51
    %133 = getelementptr inbounds i16, i16* %131, i32 %132
    %134 = load i16, i16* %lsr.iv40, align 2, !tbaa !50
    %135 = load i16, i16* %133, align 2, !tbaa !50
    %136 = icmp ult i16 %134, %135
    br i1 %136, label %137, label %138
  
  ; <label>:137                                     ; preds = %123
    store i8 0, i8* %lsr.iv46, align 1, !tbaa !49
    br label %138
  
  ; <label>:138                                     ; preds = %137, %123, %120
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i16, i16* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i8, i8* %lsr.iv46, i32 1
    %exitcond70 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond70, label %.loopexit, label %120
  
  ; <label>:139                                     ; preds = %0
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %141 = load i8, i8* %140, align 1, !tbaa !40
    %142 = icmp eq i8 %141, 0
    br i1 %142, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %139
    %143 = icmp ne i32 %n, 0
    br i1 %143, label %.lr.ph41, label %.loopexit
  
  .lr.ph41:                                         ; preds = %.preheader13
    br label %145
  
  .preheader11:                                     ; preds = %139
    %144 = icmp ne i32 %n, 0
    br i1 %144, label %.lr.ph39, label %.loopexit
  
  .lr.ph39:                                         ; preds = %.preheader11
    br label %165
  
  ; <label>:145                                     ; preds = %164, %.lr.ph41
    %lsr.iv76 = phi i8* [ %scevgep77, %164 ], [ %mask, %.lr.ph41 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %164 ], [ %y, %.lr.ph41 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %164 ], [ %x, %.lr.ph41 ]
    %lsr.iv70 = phi i16* [ %scevgep71, %164 ], [ %z, %.lr.ph41 ]
    %lsr.iv68 = phi i32 [ %lsr.iv.next69, %164 ], [ %n, %.lr.ph41 ]
    %146 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %147 = icmp eq i8 %146, 0
    br i1 %147, label %164, label %148
  
  ; <label>:148                                     ; preds = %145
    %sunkaddr145 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr146 = add i32 %sunkaddr145, 2024
    %sunkaddr147 = inttoptr i32 %sunkaddr146 to %struct.gl_frame_buffer**
    %149 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr147, align 4, !tbaa !45
    %150 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 3
    %151 = load i16*, i16** %150, align 4, !tbaa !46
    %152 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %149, i32 0, i32 1
    %153 = load i32, i32* %152, align 4, !tbaa !48
    %154 = load i32, i32* %lsr.iv74, align 4, !tbaa !51
    %155 = mul nsw i32 %154, %153
    %156 = getelementptr inbounds i16, i16* %151, i32 %155
    %157 = load i32, i32* %lsr.iv72, align 4, !tbaa !51
    %158 = getelementptr inbounds i16, i16* %156, i32 %157
    %159 = load i16, i16* %lsr.iv70, align 2, !tbaa !50
    %160 = load i16, i16* %158, align 2, !tbaa !50
    %161 = icmp ugt i16 %159, %160
    br i1 %161, label %162, label %163
  
  ; <label>:162                                     ; preds = %148
    store i16 %159, i16* %158, align 2, !tbaa !50
    br label %164
  
  ; <label>:163                                     ; preds = %148
    store i8 0, i8* %lsr.iv76, align 1, !tbaa !49
    br label %164
  
  ; <label>:164                                     ; preds = %163, %162, %145
    %lsr.iv.next69 = add i32 %lsr.iv68, -1
    %scevgep71 = getelementptr i16, i16* %lsr.iv70, i32 1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond73 = icmp eq i32 %lsr.iv.next69, 0
    br i1 %exitcond73, label %.loopexit, label %145
  
  ; <label>:165                                     ; preds = %183, %.lr.ph39
    %lsr.iv66 = phi i8* [ %scevgep67, %183 ], [ %mask, %.lr.ph39 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %183 ], [ %y, %.lr.ph39 ]
    %lsr.iv62 = phi i32* [ %scevgep63, %183 ], [ %x, %.lr.ph39 ]
    %lsr.iv60 = phi i16* [ %scevgep61, %183 ], [ %z, %.lr.ph39 ]
    %lsr.iv58 = phi i32 [ %lsr.iv.next59, %183 ], [ %n, %.lr.ph39 ]
    %166 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %167 = icmp eq i8 %166, 0
    br i1 %167, label %183, label %168
  
  ; <label>:168                                     ; preds = %165
    %sunkaddr148 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr149 = add i32 %sunkaddr148, 2024
    %sunkaddr150 = inttoptr i32 %sunkaddr149 to %struct.gl_frame_buffer**
    %169 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr150, align 4, !tbaa !45
    %170 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 3
    %171 = load i16*, i16** %170, align 4, !tbaa !46
    %172 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %169, i32 0, i32 1
    %173 = load i32, i32* %172, align 4, !tbaa !48
    %174 = load i32, i32* %lsr.iv64, align 4, !tbaa !51
    %175 = mul nsw i32 %174, %173
    %176 = getelementptr inbounds i16, i16* %171, i32 %175
    %177 = load i32, i32* %lsr.iv62, align 4, !tbaa !51
    %178 = getelementptr inbounds i16, i16* %176, i32 %177
    %179 = load i16, i16* %lsr.iv60, align 2, !tbaa !50
    %180 = load i16, i16* %178, align 2, !tbaa !50
    %181 = icmp ugt i16 %179, %180
    br i1 %181, label %183, label %182
  
  ; <label>:182                                     ; preds = %168
    store i8 0, i8* %lsr.iv66, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %182, %168, %165
    %lsr.iv.next59 = add i32 %lsr.iv58, -1
    %scevgep61 = getelementptr i16, i16* %lsr.iv60, i32 1
    %scevgep63 = getelementptr i32, i32* %lsr.iv62, i32 1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond72 = icmp eq i32 %lsr.iv.next59, 0
    br i1 %exitcond72, label %.loopexit, label %165
  
  ; <label>:184                                     ; preds = %0
    %185 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %186 = load i8, i8* %185, align 1, !tbaa !40
    %187 = icmp eq i8 %186, 0
    br i1 %187, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %184
    %188 = icmp ne i32 %n, 0
    br i1 %188, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %.preheader17
    br label %190
  
  .preheader15:                                     ; preds = %184
    %189 = icmp ne i32 %n, 0
    br i1 %189, label %.lr.ph43, label %.loopexit
  
  .lr.ph43:                                         ; preds = %.preheader15
    br label %210
  
  ; <label>:190                                     ; preds = %209, %.lr.ph45
    %lsr.iv96 = phi i8* [ %scevgep97, %209 ], [ %mask, %.lr.ph45 ]
    %lsr.iv94 = phi i32* [ %scevgep95, %209 ], [ %y, %.lr.ph45 ]
    %lsr.iv92 = phi i32* [ %scevgep93, %209 ], [ %x, %.lr.ph45 ]
    %lsr.iv90 = phi i16* [ %scevgep91, %209 ], [ %z, %.lr.ph45 ]
    %lsr.iv88 = phi i32 [ %lsr.iv.next89, %209 ], [ %n, %.lr.ph45 ]
    %191 = load i8, i8* %lsr.iv96, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %209, label %193
  
  ; <label>:193                                     ; preds = %190
    %sunkaddr151 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr152 = add i32 %sunkaddr151, 2024
    %sunkaddr153 = inttoptr i32 %sunkaddr152 to %struct.gl_frame_buffer**
    %194 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr153, align 4, !tbaa !45
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 3
    %196 = load i16*, i16** %195, align 4, !tbaa !46
    %197 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %194, i32 0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !48
    %199 = load i32, i32* %lsr.iv94, align 4, !tbaa !51
    %200 = mul nsw i32 %199, %198
    %201 = getelementptr inbounds i16, i16* %196, i32 %200
    %202 = load i32, i32* %lsr.iv92, align 4, !tbaa !51
    %203 = getelementptr inbounds i16, i16* %201, i32 %202
    %204 = load i16, i16* %lsr.iv90, align 2, !tbaa !50
    %205 = load i16, i16* %203, align 2, !tbaa !50
    %206 = icmp eq i16 %204, %205
    br i1 %206, label %208, label %207
  
  ; <label>:207                                     ; preds = %193
    store i16 %204, i16* %203, align 2, !tbaa !50
    br label %209
  
  ; <label>:208                                     ; preds = %193
    store i8 0, i8* %lsr.iv96, align 1, !tbaa !49
    br label %209
  
  ; <label>:209                                     ; preds = %208, %207, %190
    %lsr.iv.next89 = add i32 %lsr.iv88, -1
    %scevgep91 = getelementptr i16, i16* %lsr.iv90, i32 1
    %scevgep93 = getelementptr i32, i32* %lsr.iv92, i32 1
    %scevgep95 = getelementptr i32, i32* %lsr.iv94, i32 1
    %scevgep97 = getelementptr i8, i8* %lsr.iv96, i32 1
    %exitcond75 = icmp eq i32 %lsr.iv.next89, 0
    br i1 %exitcond75, label %.loopexit, label %190
  
  ; <label>:210                                     ; preds = %228, %.lr.ph43
    %lsr.iv86 = phi i8* [ %scevgep87, %228 ], [ %mask, %.lr.ph43 ]
    %lsr.iv84 = phi i32* [ %scevgep85, %228 ], [ %y, %.lr.ph43 ]
    %lsr.iv82 = phi i32* [ %scevgep83, %228 ], [ %x, %.lr.ph43 ]
    %lsr.iv80 = phi i16* [ %scevgep81, %228 ], [ %z, %.lr.ph43 ]
    %lsr.iv78 = phi i32 [ %lsr.iv.next79, %228 ], [ %n, %.lr.ph43 ]
    %211 = load i8, i8* %lsr.iv86, align 1, !tbaa !49
    %212 = icmp eq i8 %211, 0
    br i1 %212, label %228, label %213
  
  ; <label>:213                                     ; preds = %210
    %sunkaddr154 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr155 = add i32 %sunkaddr154, 2024
    %sunkaddr156 = inttoptr i32 %sunkaddr155 to %struct.gl_frame_buffer**
    %214 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr156, align 4, !tbaa !45
    %215 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 3
    %216 = load i16*, i16** %215, align 4, !tbaa !46
    %217 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %214, i32 0, i32 1
    %218 = load i32, i32* %217, align 4, !tbaa !48
    %219 = load i32, i32* %lsr.iv84, align 4, !tbaa !51
    %220 = mul nsw i32 %219, %218
    %221 = getelementptr inbounds i16, i16* %216, i32 %220
    %222 = load i32, i32* %lsr.iv82, align 4, !tbaa !51
    %223 = getelementptr inbounds i16, i16* %221, i32 %222
    %224 = load i16, i16* %lsr.iv80, align 2, !tbaa !50
    %225 = load i16, i16* %223, align 2, !tbaa !50
    %226 = icmp eq i16 %224, %225
    br i1 %226, label %227, label %228
  
  ; <label>:227                                     ; preds = %213
    store i8 0, i8* %lsr.iv86, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %227, %213, %210
    %lsr.iv.next79 = add i32 %lsr.iv78, -1
    %scevgep81 = getelementptr i16, i16* %lsr.iv80, i32 1
    %scevgep83 = getelementptr i32, i32* %lsr.iv82, i32 1
    %scevgep85 = getelementptr i32, i32* %lsr.iv84, i32 1
    %scevgep87 = getelementptr i8, i8* %lsr.iv86, i32 1
    %exitcond74 = icmp eq i32 %lsr.iv.next79, 0
    br i1 %exitcond74, label %.loopexit, label %210
  
  ; <label>:229                                     ; preds = %0
    %230 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %231 = load i8, i8* %230, align 1, !tbaa !40
    %232 = icmp eq i8 %231, 0
    br i1 %232, label %.preheader19, label %.preheader21
  
  .preheader21:                                     ; preds = %229
    %233 = icmp ne i32 %n, 0
    br i1 %233, label %.lr.ph49, label %.loopexit
  
  .lr.ph49:                                         ; preds = %.preheader21
    br label %235
  
  .preheader19:                                     ; preds = %229
    %234 = icmp ne i32 %n, 0
    br i1 %234, label %.lr.ph47, label %.loopexit
  
  .lr.ph47:                                         ; preds = %.preheader19
    br label %255
  
  ; <label>:235                                     ; preds = %254, %.lr.ph49
    %lsr.iv116 = phi i8* [ %scevgep117, %254 ], [ %mask, %.lr.ph49 ]
    %lsr.iv114 = phi i32* [ %scevgep115, %254 ], [ %y, %.lr.ph49 ]
    %lsr.iv112 = phi i32* [ %scevgep113, %254 ], [ %x, %.lr.ph49 ]
    %lsr.iv110 = phi i16* [ %scevgep111, %254 ], [ %z, %.lr.ph49 ]
    %lsr.iv108 = phi i32 [ %lsr.iv.next109, %254 ], [ %n, %.lr.ph49 ]
    %236 = load i8, i8* %lsr.iv116, align 1, !tbaa !49
    %237 = icmp eq i8 %236, 0
    br i1 %237, label %254, label %238
  
  ; <label>:238                                     ; preds = %235
    %sunkaddr157 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr158 = add i32 %sunkaddr157, 2024
    %sunkaddr159 = inttoptr i32 %sunkaddr158 to %struct.gl_frame_buffer**
    %239 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr159, align 4, !tbaa !45
    %240 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 3
    %241 = load i16*, i16** %240, align 4, !tbaa !46
    %242 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %239, i32 0, i32 1
    %243 = load i32, i32* %242, align 4, !tbaa !48
    %244 = load i32, i32* %lsr.iv114, align 4, !tbaa !51
    %245 = mul nsw i32 %244, %243
    %246 = getelementptr inbounds i16, i16* %241, i32 %245
    %247 = load i32, i32* %lsr.iv112, align 4, !tbaa !51
    %248 = getelementptr inbounds i16, i16* %246, i32 %247
    %249 = load i16, i16* %lsr.iv110, align 2, !tbaa !50
    %250 = load i16, i16* %248, align 2, !tbaa !50
    %251 = icmp eq i16 %249, %250
    br i1 %251, label %252, label %253
  
  ; <label>:252                                     ; preds = %238
    store i16 %249, i16* %248, align 2, !tbaa !50
    br label %254
  
  ; <label>:253                                     ; preds = %238
    store i8 0, i8* %lsr.iv116, align 1, !tbaa !49
    br label %254
  
  ; <label>:254                                     ; preds = %253, %252, %235
    %lsr.iv.next109 = add i32 %lsr.iv108, -1
    %scevgep111 = getelementptr i16, i16* %lsr.iv110, i32 1
    %scevgep113 = getelementptr i32, i32* %lsr.iv112, i32 1
    %scevgep115 = getelementptr i32, i32* %lsr.iv114, i32 1
    %scevgep117 = getelementptr i8, i8* %lsr.iv116, i32 1
    %exitcond77 = icmp eq i32 %lsr.iv.next109, 0
    br i1 %exitcond77, label %.loopexit, label %235
  
  ; <label>:255                                     ; preds = %273, %.lr.ph47
    %lsr.iv106 = phi i8* [ %scevgep107, %273 ], [ %mask, %.lr.ph47 ]
    %lsr.iv104 = phi i32* [ %scevgep105, %273 ], [ %y, %.lr.ph47 ]
    %lsr.iv102 = phi i32* [ %scevgep103, %273 ], [ %x, %.lr.ph47 ]
    %lsr.iv100 = phi i16* [ %scevgep101, %273 ], [ %z, %.lr.ph47 ]
    %lsr.iv98 = phi i32 [ %lsr.iv.next99, %273 ], [ %n, %.lr.ph47 ]
    %256 = load i8, i8* %lsr.iv106, align 1, !tbaa !49
    %257 = icmp eq i8 %256, 0
    br i1 %257, label %273, label %258
  
  ; <label>:258                                     ; preds = %255
    %sunkaddr160 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr161 = add i32 %sunkaddr160, 2024
    %sunkaddr162 = inttoptr i32 %sunkaddr161 to %struct.gl_frame_buffer**
    %259 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr162, align 4, !tbaa !45
    %260 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 3
    %261 = load i16*, i16** %260, align 4, !tbaa !46
    %262 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %259, i32 0, i32 1
    %263 = load i32, i32* %262, align 4, !tbaa !48
    %264 = load i32, i32* %lsr.iv104, align 4, !tbaa !51
    %265 = mul nsw i32 %264, %263
    %266 = getelementptr inbounds i16, i16* %261, i32 %265
    %267 = load i32, i32* %lsr.iv102, align 4, !tbaa !51
    %268 = getelementptr inbounds i16, i16* %266, i32 %267
    %269 = load i16, i16* %lsr.iv100, align 2, !tbaa !50
    %270 = load i16, i16* %268, align 2, !tbaa !50
    %271 = icmp eq i16 %269, %270
    br i1 %271, label %273, label %272
  
  ; <label>:272                                     ; preds = %258
    store i8 0, i8* %lsr.iv106, align 1, !tbaa !49
    br label %273
  
  ; <label>:273                                     ; preds = %272, %258, %255
    %lsr.iv.next99 = add i32 %lsr.iv98, -1
    %scevgep101 = getelementptr i16, i16* %lsr.iv100, i32 1
    %scevgep103 = getelementptr i32, i32* %lsr.iv102, i32 1
    %scevgep105 = getelementptr i32, i32* %lsr.iv104, i32 1
    %scevgep107 = getelementptr i8, i8* %lsr.iv106, i32 1
    %exitcond76 = icmp eq i32 %lsr.iv.next99, 0
    br i1 %exitcond76, label %.loopexit, label %255
  
  ; <label>:274                                     ; preds = %0
    %275 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %276 = load i8, i8* %275, align 1, !tbaa !40
    %277 = icmp ne i8 %276, 0
    %278 = icmp ne i32 %n, 0
    %or.cond = and i1 %277, %278
    br i1 %or.cond, label %.lr.ph51, label %.loopexit
  
  .lr.ph51:                                         ; preds = %274
    br label %279
  
  ; <label>:279                                     ; preds = %294, %.lr.ph51
    %lsr.iv126 = phi i8* [ %scevgep127, %294 ], [ %mask, %.lr.ph51 ]
    %lsr.iv124 = phi i32* [ %scevgep125, %294 ], [ %y, %.lr.ph51 ]
    %lsr.iv122 = phi i32* [ %scevgep123, %294 ], [ %x, %.lr.ph51 ]
    %lsr.iv120 = phi i16* [ %scevgep121, %294 ], [ %z, %.lr.ph51 ]
    %lsr.iv118 = phi i32 [ %lsr.iv.next119, %294 ], [ %n, %.lr.ph51 ]
    %280 = load i8, i8* %lsr.iv126, align 1, !tbaa !49
    %281 = icmp eq i8 %280, 0
    br i1 %281, label %294, label %282
  
  ; <label>:282                                     ; preds = %279
    %sunkaddr163 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr164 = add i32 %sunkaddr163, 2024
    %sunkaddr165 = inttoptr i32 %sunkaddr164 to %struct.gl_frame_buffer**
    %283 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr165, align 4, !tbaa !45
    %284 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 3
    %285 = load i16*, i16** %284, align 4, !tbaa !46
    %286 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %283, i32 0, i32 1
    %287 = load i32, i32* %286, align 4, !tbaa !48
    %288 = load i32, i32* %lsr.iv124, align 4, !tbaa !51
    %289 = mul nsw i32 %288, %287
    %290 = getelementptr inbounds i16, i16* %285, i32 %289
    %291 = load i32, i32* %lsr.iv122, align 4, !tbaa !51
    %292 = getelementptr inbounds i16, i16* %290, i32 %291
    %293 = load i16, i16* %lsr.iv120, align 2, !tbaa !50
    store i16 %293, i16* %292, align 2, !tbaa !50
    br label %294
  
  ; <label>:294                                     ; preds = %282, %279
    %lsr.iv.next119 = add i32 %lsr.iv118, -1
    %scevgep121 = getelementptr i16, i16* %lsr.iv120, i32 1
    %scevgep123 = getelementptr i32, i32* %lsr.iv122, i32 1
    %scevgep125 = getelementptr i32, i32* %lsr.iv124, i32 1
    %scevgep127 = getelementptr i8, i8* %lsr.iv126, i32 1
    %exitcond78 = icmp eq i32 %lsr.iv.next119, 0
    br i1 %exitcond78, label %.loopexit, label %279
  
  ; <label>:295                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %294, %254, %273, %209, %228, %164, %183, %119, %138, %74, %93, %29, %48, %274, %.preheader19, %.preheader21, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %.lr.ph53.preheader, %.preheader25
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_less(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ult i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_depth_test_pixels_greater(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i16* nocapture readonly %z, i8* nocapture %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %2
  
  ; <label>:2                                       ; preds = %21, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %21 ], [ %mask, %.lr.ph ]
    %lsr.iv4 = phi i32* [ %scevgep5, %21 ], [ %y, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %21 ], [ %x, %.lr.ph ]
    %lsr.iv1 = phi i16* [ %scevgep, %21 ], [ %z, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %21 ], [ %n, %.lr.ph ]
    %3 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %4 = icmp eq i8 %3, 0
    br i1 %4, label %21, label %5
  
  ; <label>:5                                       ; preds = %2
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr, 2024
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to %struct.gl_frame_buffer**
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr9, align 4, !tbaa !45
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 3
    %8 = load i16*, i16** %7, align 4, !tbaa !46
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %6, i32 0, i32 1
    %10 = load i32, i32* %9, align 4, !tbaa !48
    %11 = load i32, i32* %lsr.iv4, align 4, !tbaa !51
    %12 = mul nsw i32 %11, %10
    %13 = getelementptr inbounds i16, i16* %8, i32 %12
    %14 = load i32, i32* %lsr.iv2, align 4, !tbaa !51
    %15 = getelementptr inbounds i16, i16* %13, i32 %14
    %16 = load i16, i16* %lsr.iv1, align 2, !tbaa !50
    %17 = load i16, i16* %15, align 2, !tbaa !50
    %18 = icmp ugt i16 %16, %17
    br i1 %18, label %19, label %20
  
  ; <label>:19                                      ; preds = %5
    store i16 %16, i16* %15, align 2, !tbaa !50
    br label %21
  
  ; <label>:20                                      ; preds = %5
    store i8 0, i8* %lsr.iv6, align 1, !tbaa !49
    br label %21
  
  ; <label>:21                                      ; preds = %20, %19, %2
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %2
  
  ._crit_edge:                                      ; preds = %21, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_float(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, float* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast float* %depth to i8*
    %8 = shl i32 %n, 2
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 4, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %11 = load i32, i32* %10, align 4, !tbaa !48
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph4.preheader
  
  .lr.ph4.preheader:                                ; preds = %9
    %13 = mul i32 %11, %y
    %14 = add i32 %x, %13
    %scevgep2 = getelementptr i16, i16* %4, i32 %14
    br label %.lr.ph4
  
  .lr.ph4:                                          ; preds = %.lr.ph4, %.lr.ph4.preheader
    %lsr.iv3 = phi i16* [ %scevgep4, %.lr.ph4 ], [ %scevgep2, %.lr.ph4.preheader ]
    %lsr.iv1 = phi float* [ %scevgep, %.lr.ph4 ], [ %depth, %.lr.ph4.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph4 ], [ %n, %.lr.ph4.preheader ]
    %15 = load i16, i16* %lsr.iv3, align 2, !tbaa !50
    %16 = uitofp i16 %15 to float
    %17 = fmul float %16, 0x3EF0001000000000
    store float %17, float* %lsr.iv1, align 4, !tbaa !52
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr float, float* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i16, i16* %lsr.iv3, i32 1
    %exitcond6 = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond6, label %.loopexit, label %.lr.ph4
  
  .loopexit:                                        ; preds = %.lr.ph4, %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_depth_span_int(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* nocapture %depth) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %.preheader, label %9
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %7 = bitcast i16* %depth to i8*
    %8 = shl i32 %n, 1
    call void @llvm.memset.p0i8.i32(i8* %7, i8 0, i32 %8, i32 2, i1 false)
    br label %.loopexit
  
  ; <label>:9                                       ; preds = %0
    %10 = bitcast i16* %depth to i8*
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    %13 = mul nsw i32 %12, %y
    %14 = getelementptr inbounds i16, i16* %4, i32 %13
    %15 = getelementptr inbounds i16, i16* %14, i32 %x
    %16 = bitcast i16* %15 to i8*
    %17 = shl i32 %n, 1
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %10, i8* %16, i32 %17, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %9, %.lr.ph.preheader, %.preheader
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4
  
  ; Function Attrs: nounwind
  define void @gl_alloc_depth_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 3
    %4 = load i16*, i16** %3, align 4, !tbaa !46
    %5 = icmp eq i16* %4, null
    br i1 %5, label %10, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast i16* %4 to i8*
    tail call void @free(i8* %7) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 3
    store i16* null, i16** %9, align 4, !tbaa !46
    br label %10
  
  ; <label>:10                                      ; preds = %6, %0
    %11 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %8, %6 ]
    %12 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 1
    %13 = load i32, i32* %12, align 4, !tbaa !48
    %14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 2
    %15 = load i32, i32* %14, align 4, !tbaa !53
    %16 = shl i32 %13, 1
    %17 = mul i32 %16, %15
    %18 = tail call noalias i8* @malloc(i32 signext %17) #5
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %11, i32 0, i32 3
    %20 = bitcast i16** %19 to i8**
    store i8* %18, i8** %20, align 4, !tbaa !46
    %21 = icmp eq i8* %18, null
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %10
    %23 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    store i8 0, i8* %23, align 4, !tbaa !54
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0)) #5
    br label %24
  
  ; <label>:24                                      ; preds = %22, %10
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_depth_buffer(%struct.gl_context* nocapture readonly %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 1
    %2 = load float, float* %1, align 4, !tbaa !37
    %3 = fmul float %2, 6.553500e+04
    %4 = fptoui float %3 to i16
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %6 = load %struct.gl_visual*, %struct.gl_visual** %5, align 4, !tbaa !55
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %6, i32 0, i32 13
    %8 = load i32, i32* %7, align 4, !tbaa !56
    %9 = icmp eq i32 %8, 0
    br i1 %9, label %.loopexit, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %11, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 3
    %14 = load i16*, i16** %13, align 4, !tbaa !46
    %15 = icmp eq i16* %14, null
    br i1 %15, label %.loopexit, label %16
  
  ; <label>:16                                      ; preds = %10
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %18 = load i8, i8* %17, align 4, !tbaa !58
    %19 = icmp eq i8 %18, 0
    br i1 %19, label %38, label %20
  
  ; <label>:20                                      ; preds = %16
    %21 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 11
    %22 = load i32, i32* %21, align 4, !tbaa !59
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 12
    %24 = load i32, i32* %23, align 4, !tbaa !60
    %25 = icmp sgt i32 %22, %24
    br i1 %25, label %.loopexit, label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %20
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %.pre = load i32, i32* %.phi.trans.insert, align 4, !tbaa !48
    %.phi.trans.insert14 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 9
    %.pre15 = load i32, i32* %.phi.trans.insert14, align 4, !tbaa !61
    %.phi.trans.insert16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 10
    %.pre17 = load i32, i32* %.phi.trans.insert16, align 4, !tbaa !62
    %26 = add i32 %.pre15, -1
    %27 = sub i32 %26, %.pre17
    br label %28
  
  ; <label>:28                                      ; preds = %35, %.lr.ph11
    %y.010 = phi i32 [ %22, %.lr.ph11 ], [ %36, %35 ]
    %29 = mul nsw i32 %.pre, %y.010
    %30 = getelementptr inbounds i16, i16* %14, i32 %29
    %31 = getelementptr inbounds i16, i16* %30, i32 %.pre15
    br label %32
  
  ; <label>:32                                      ; preds = %32, %28
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %32 ], [ %27, %28 ]
    %d.0 = phi i16* [ %31, %28 ], [ %33, %32 ]
    %33 = getelementptr inbounds i16, i16* %d.0, i32 1
    store i16 %4, i16* %d.0, align 2, !tbaa !50
    %lsr.iv.next18 = add i32 %lsr.iv17, 1
    %34 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %34, label %35, label %32
  
  ; <label>:35                                      ; preds = %32
    %36 = add nsw i32 %y.010, 1
    %37 = icmp slt i32 %y.010, %24
    br i1 %37, label %28, label %.loopexit
  
  ; <label>:38                                      ; preds = %16
    %39 = zext i16 %4 to i32
    %40 = and i32 %39, 255
    %41 = lshr i32 %39, 8
    %42 = icmp eq i32 %40, %41
    br i1 %42, label %43, label %52
  
  ; <label>:43                                      ; preds = %38
    %44 = bitcast i16* %14 to i8*
    %45 = trunc i16 %4 to i8
    %46 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %47 = load i32, i32* %46, align 4, !tbaa !48
    %48 = shl i32 %47, 1
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %50 = load i32, i32* %49, align 4, !tbaa !53
    %51 = mul nsw i32 %48, %50
    tail call void @llvm.memset.p0i8.i32(i8* %44, i8 %45, i32 %51, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:52                                      ; preds = %38
    %53 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 1
    %54 = load i32, i32* %53, align 4, !tbaa !48
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !53
    %57 = mul i32 %56, %54
    %58 = icmp sgt i32 %57, 15
    br i1 %58, label %.lr.ph8.preheader, label %.preheader
  
  .lr.ph8.preheader:                                ; preds = %52
    %59 = add i32 %57, -16
    %60 = and i32 %59, -16
    %61 = add i32 %60, 16
    br label %.lr.ph8
  
  .preheader.loopexit:                              ; preds = %.lr.ph8
    %62 = sub i32 %59, %60
    %scevgep = getelementptr i16, i16* %14, i32 %61
    br label %.preheader
  
  .preheader:                                       ; preds = %.preheader.loopexit, %52
    %n2.0.lcssa = phi i32 [ %57, %52 ], [ %62, %.preheader.loopexit ]
    %d1.0.lcssa = phi i16* [ %14, %52 ], [ %scevgep, %.preheader.loopexit ]
    %63 = icmp sgt i32 %n2.0.lcssa, 0
    br i1 %63, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %64 = add i32 %n2.0.lcssa, 1
    br label %.lr.ph
  
  .lr.ph8:                                          ; preds = %.lr.ph8, %.lr.ph8.preheader
    %n2.07 = phi i32 [ %65, %.lr.ph8 ], [ %57, %.lr.ph8.preheader ]
    %d1.06 = phi i16* [ %scevgep16, %.lr.ph8 ], [ %14, %.lr.ph8.preheader ]
    store i16 %4, i16* %d1.06, align 2, !tbaa !50
    %scevgep1 = getelementptr i16, i16* %d1.06, i32 1
    store i16 %4, i16* %scevgep1, align 2, !tbaa !50
    %scevgep2 = getelementptr i16, i16* %d1.06, i32 2
    store i16 %4, i16* %scevgep2, align 2, !tbaa !50
    %scevgep3 = getelementptr i16, i16* %d1.06, i32 3
    store i16 %4, i16* %scevgep3, align 2, !tbaa !50
    %scevgep4 = getelementptr i16, i16* %d1.06, i32 4
    store i16 %4, i16* %scevgep4, align 2, !tbaa !50
    %scevgep5 = getelementptr i16, i16* %d1.06, i32 5
    store i16 %4, i16* %scevgep5, align 2, !tbaa !50
    %scevgep6 = getelementptr i16, i16* %d1.06, i32 6
    store i16 %4, i16* %scevgep6, align 2, !tbaa !50
    %scevgep7 = getelementptr i16, i16* %d1.06, i32 7
    store i16 %4, i16* %scevgep7, align 2, !tbaa !50
    %scevgep8 = getelementptr i16, i16* %d1.06, i32 8
    store i16 %4, i16* %scevgep8, align 2, !tbaa !50
    %scevgep9 = getelementptr i16, i16* %d1.06, i32 9
    store i16 %4, i16* %scevgep9, align 2, !tbaa !50
    %scevgep10 = getelementptr i16, i16* %d1.06, i32 10
    store i16 %4, i16* %scevgep10, align 2, !tbaa !50
    %scevgep11 = getelementptr i16, i16* %d1.06, i32 11
    store i16 %4, i16* %scevgep11, align 2, !tbaa !50
    %scevgep12 = getelementptr i16, i16* %d1.06, i32 12
    store i16 %4, i16* %scevgep12, align 2, !tbaa !50
    %scevgep13 = getelementptr i16, i16* %d1.06, i32 13
    store i16 %4, i16* %scevgep13, align 2, !tbaa !50
    %scevgep14 = getelementptr i16, i16* %d1.06, i32 14
    store i16 %4, i16* %scevgep14, align 2, !tbaa !50
    %scevgep15 = getelementptr i16, i16* %d1.06, i32 15
    store i16 %4, i16* %scevgep15, align 2, !tbaa !50
    %65 = add nsw i32 %n2.07, -16
    %66 = icmp sgt i32 %65, 15
    %scevgep16 = getelementptr i16, i16* %d1.06, i32 16
    br i1 %66, label %.lr.ph8, label %.preheader.loopexit
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %64, %.lr.ph.preheader ]
    %d1.14 = phi i16* [ %67, %.lr.ph ], [ %d1.0.lcssa, %.lr.ph.preheader ]
    %67 = getelementptr inbounds i16, i16* %d1.14, i32 1
    store i16 %4, i16* %d1.14, align 2, !tbaa !50
    %lsr.iv.next = add i32 %lsr.iv, -1
    %68 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %68, label %.lr.ph, label %.loopexit
  
  .loopexit:                                        ; preds = %35, %.lr.ph, %.preheader, %43, %20, %10, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 7516}
  !38 = !{!2, !4, i64 7512}
  !39 = !{!2, !8, i64 55736}
  !40 = !{!2, !4, i64 7521}
  !41 = !{!2, !11, i64 54672}
  !42 = !{!2, !11, i64 54676}
  !43 = !{!2, !11, i64 54688}
  !44 = !{!2, !11, i64 54700}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 12}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!20, !20, i64 0}
  !51 = !{!8, !8, i64 0}
  !52 = !{!11, !11, i64 0}
  !53 = !{!47, !8, i64 8}
  !54 = !{!2, !4, i64 7520}
  !55 = !{!2, !3, i64 2020}
  !56 = !{!57, !8, i64 48}
  !57 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !58 = !{!2, !4, i64 54308}
  !59 = !{!47, !8, i64 44}
  !60 = !{!47, !8, i64 48}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 40}

...
---
name:            gl_depth_test_span_generic
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: gpr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: gpr32 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: gpr32 }
  - { id: 56, class: gpr32 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: gpr32 }
  - { id: 61, class: gpr32 }
  - { id: 62, class: gpr32 }
  - { id: 63, class: gpr32 }
  - { id: 64, class: gpr32 }
  - { id: 65, class: gpr32 }
  - { id: 66, class: gpr32 }
  - { id: 67, class: gpr32 }
  - { id: 68, class: gpr32 }
  - { id: 69, class: gpr32 }
  - { id: 70, class: gpr32 }
  - { id: 71, class: gpr32 }
  - { id: 72, class: gpr32 }
  - { id: 73, class: gpr32 }
  - { id: 74, class: gpr32 }
  - { id: 75, class: gpr32 }
  - { id: 76, class: gpr32 }
  - { id: 77, class: gpr32 }
  - { id: 78, class: gpr32 }
  - { id: 79, class: gpr32 }
  - { id: 80, class: gpr32 }
  - { id: 81, class: gpr32 }
  - { id: 82, class: gpr32 }
  - { id: 83, class: gpr32 }
  - { id: 84, class: gpr32 }
  - { id: 85, class: gpr32 }
  - { id: 86, class: gpr32 }
  - { id: 87, class: gpr32 }
  - { id: 88, class: gpr32 }
  - { id: 89, class: gpr32 }
  - { id: 90, class: gpr32 }
  - { id: 91, class: gpr32 }
  - { id: 92, class: gpr32 }
  - { id: 93, class: gpr32 }
  - { id: 94, class: gpr32 }
  - { id: 95, class: gpr32 }
  - { id: 96, class: gpr32 }
  - { id: 97, class: gpr32 }
  - { id: 98, class: gpr32 }
  - { id: 99, class: gpr32 }
  - { id: 100, class: gpr32 }
  - { id: 101, class: gpr32 }
  - { id: 102, class: gpr32 }
  - { id: 103, class: gpr32 }
  - { id: 104, class: gpr32 }
  - { id: 105, class: gpr32 }
  - { id: 106, class: gpr32 }
  - { id: 107, class: gpr32 }
  - { id: 108, class: gpr32 }
  - { id: 109, class: gpr32 }
  - { id: 110, class: gpr32 }
  - { id: 111, class: gpr32 }
  - { id: 112, class: gpr32 }
  - { id: 113, class: gpr32 }
  - { id: 114, class: gpr32 }
  - { id: 115, class: gpr32 }
  - { id: 116, class: gpr32 }
  - { id: 117, class: gpr32 }
  - { id: 118, class: gpr32 }
  - { id: 119, class: gpr32 }
  - { id: 120, class: gpr32 }
  - { id: 121, class: gpr32 }
  - { id: 122, class: gpr32 }
  - { id: 123, class: gpr32 }
  - { id: 124, class: gpr32 }
  - { id: 125, class: gpr32 }
  - { id: 126, class: gpr32 }
  - { id: 127, class: gpr32 }
  - { id: 128, class: gpr32 }
  - { id: 129, class: gpr32 }
  - { id: 130, class: gpr32 }
  - { id: 131, class: gpr32 }
  - { id: 132, class: gpr32 }
  - { id: 133, class: gpr32 }
  - { id: 134, class: gpr32 }
  - { id: 135, class: gpr32 }
  - { id: 136, class: gpr32 }
  - { id: 137, class: gpr32 }
  - { id: 138, class: gpr32 }
  - { id: 139, class: gpr32 }
  - { id: 140, class: gpr32 }
  - { id: 141, class: gpr32 }
  - { id: 142, class: gpr32 }
  - { id: 143, class: gpr32 }
  - { id: 144, class: gpr32 }
  - { id: 145, class: gpr32 }
  - { id: 146, class: gpr32 }
  - { id: 147, class: gpr32 }
  - { id: 148, class: gpr32 }
  - { id: 149, class: gpr32 }
  - { id: 150, class: gpr32 }
  - { id: 151, class: gpr32 }
  - { id: 152, class: gpr32 }
  - { id: 153, class: gpr32 }
  - { id: 154, class: gpr32 }
  - { id: 155, class: gpr32 }
  - { id: 156, class: gpr32 }
  - { id: 157, class: gpr32 }
  - { id: 158, class: gpr32 }
  - { id: 159, class: gpr32 }
  - { id: 160, class: gpr32 }
  - { id: 161, class: gpr32 }
  - { id: 162, class: gpr32 }
  - { id: 163, class: gpr32 }
  - { id: 164, class: gpr32 }
  - { id: 165, class: gpr32 }
  - { id: 166, class: gpr32 }
  - { id: 167, class: gpr32 }
  - { id: 168, class: gpr32 }
  - { id: 169, class: gpr32 }
  - { id: 170, class: gpr32 }
  - { id: 171, class: gpr32 }
  - { id: 172, class: gpr32 }
  - { id: 173, class: gpr32 }
  - { id: 174, class: gpr32 }
  - { id: 175, class: gpr32 }
  - { id: 176, class: gpr32 }
  - { id: 177, class: gpr32 }
  - { id: 178, class: gpr32 }
  - { id: 179, class: gpr32 }
  - { id: 180, class: gpr32 }
  - { id: 181, class: gpr32 }
  - { id: 182, class: gpr32 }
  - { id: 183, class: gpr32 }
  - { id: 184, class: gpr32 }
  - { id: 185, class: gpr32 }
  - { id: 186, class: gpr32 }
  - { id: 187, class: gpr32 }
  - { id: 188, class: gpr32 }
  - { id: 189, class: gpr32 }
  - { id: 190, class: gpr32 }
  - { id: 191, class: gpr32 }
  - { id: 192, class: gpr32 }
  - { id: 193, class: gpr32 }
  - { id: 194, class: gpr32 }
  - { id: 195, class: gpr32 }
  - { id: 196, class: gpr32 }
  - { id: 197, class: gpr32 }
  - { id: 198, class: gpr32 }
  - { id: 199, class: gpr32 }
  - { id: 200, class: gpr32 }
  - { id: 201, class: gpr32 }
  - { id: 202, class: gpr32 }
  - { id: 203, class: gpr32 }
  - { id: 204, class: gpr32 }
  - { id: 205, class: gpr32 }
  - { id: 206, class: gpr32 }
  - { id: 207, class: gpr32 }
  - { id: 208, class: gpr32 }
  - { id: 209, class: gpr32 }
  - { id: 210, class: gpr32 }
  - { id: 211, class: gpr32 }
  - { id: 212, class: gpr32 }
  - { id: 213, class: gpr32 }
  - { id: 214, class: gpr32 }
  - { id: 215, class: gpr32 }
  - { id: 216, class: gpr32 }
  - { id: 217, class: gpr32 }
  - { id: 218, class: gpr32 }
  - { id: 219, class: gpr32 }
  - { id: 220, class: gpr32 }
  - { id: 221, class: gpr32 }
  - { id: 222, class: gpr32 }
  - { id: 223, class: gpr32 }
  - { id: 224, class: gpr32 }
  - { id: 225, class: gpr32 }
  - { id: 226, class: gpr32 }
  - { id: 227, class: gpr32 }
  - { id: 228, class: gpr32 }
  - { id: 229, class: gpr32 }
  - { id: 230, class: gpr32 }
  - { id: 231, class: gpr32 }
  - { id: 232, class: gpr32 }
  - { id: 233, class: gpr32 }
  - { id: 234, class: gpr32 }
  - { id: 235, class: gpr32 }
  - { id: 236, class: gpr32 }
  - { id: 237, class: gpr32 }
  - { id: 238, class: gpr32 }
  - { id: 239, class: gpr32 }
  - { id: 240, class: gpr32 }
  - { id: 241, class: gpr32 }
  - { id: 242, class: gpr32 }
  - { id: 243, class: gpr32 }
  - { id: 244, class: gpr32 }
  - { id: 245, class: gpr32 }
  - { id: 246, class: gpr32 }
  - { id: 247, class: gpr32 }
  - { id: 248, class: gpr32 }
  - { id: 249, class: gpr32 }
  - { id: 250, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%151' }
  - { reg: '%a1', virtual-reg: '%152' }
  - { reg: '%a2', virtual-reg: '%153' }
  - { reg: '%a3', virtual-reg: '%154' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 20, size: 4, alignment: 4, isImmutable: true, isAliased: false }
  - { id: 1, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.1..preheader25', '%bb.3', '%bb.68', '%bb.16', 
                         '%bb.42', '%bb.55', '%bb.29', '%bb.81' ]
body:             |
  bb.0 (%ir-block.0, freq 8388607):
    successors: %bb.86(0), %bb.88(99)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %167 = ADDu %v0, %t9
    %154 = COPY %a3
    %153 = COPY %a2
    %152 = COPY %a1
    %151 = COPY %a0
    %162 = LW %151, 7512, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.10, !tbaa !38)
    %157 = ADDiu killed %162, -512
    %163 = SLTiu %157, 8
    BEQ killed %163, %zero, %bb.86, implicit-def dead %at
  
  bb.88 (%ir-block.0, freq 8388599):
    successors: %bb.1..preheader25(12), %bb.3(12), %bb.68(12), %bb.16(12), %bb.42(12), %bb.55(12), %bb.29(12), %bb.81(12)
  
    %156 = LW %fixed-stack.0, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack)
    %155 = LW %fixed-stack.1, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 4 from stack, align 8)
    %158 = LW %151, 2024, <0x3c87330> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.1, !tbaa !45)
    %159 = LW %158, 4, <0x3c62320> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.5, !tbaa !48)
    %160 = MUL %159, %154, implicit-def dead %hi0, implicit-def dead %lo0
    %161 = LW %158, 12, <0x3c6d6c0> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.3, !tbaa !46)
    %164 = SLL %153, 1
    %165 = SLL %160, 1
    %166 = ADDu %161, %165
    %0 = ADDu %166, %164
    %168 = SLL %157, 2
    %169 = LW %167, target-flags(<unknown>) %jump-table.0, <0x3bd8580> = !{!"unison-memory-partition", i32 5} :: (load 4 from got)
    %170 = ADDu killed %168, killed %169
    %171 = LW killed %170, target-flags(<unknown>) %jump-table.0, <0x3cc70d0> = !{!"unison-memory-partition", i32 6} :: (load 4 from jump-table)
    %172 = ADDu killed %171, %167
    PseudoIndirectBranch killed %172
  
  bb.1..preheader25 (freq 1048574):
    successors: %bb.87..loopexit(37), %bb.2..lr.ph104.preheader(62)
  
    %173 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.2..lr.ph104.preheader, implicit-def dead %at
  
  bb.2..lr.ph104.preheader (freq 655359):
    successors: %bb.87..loopexit(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %175 = LW %167, target-flags(<unknown>) $memset, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry $memset)
    %174 = ADDiu %zero, 0
    %a0 = COPY %156
    %a1 = COPY %174
    %a2 = COPY %152
    %gp = COPY %167
    %t9 = COPY %175
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.87..loopexit, implicit-def dead %at
  
  bb.3 (%ir-block.13, freq 1048574):
    successors: %bb.5..preheader(37), %bb.4..preheader1(62)
  
    %236 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.14, !tbaa !40)
    BEQ killed %236, %zero, %bb.5..preheader, implicit-def dead %at
    B %bb.4..preheader1, implicit-def dead %at
  
  bb.4..preheader1 (freq 655359):
    successors: %bb.100(62), %bb.87..loopexit(37)
  
    %237 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.100 (freq 409599):
    successors: %bb.6..lr.ph35(100)
  
    B %bb.6..lr.ph35, implicit-def %at
  
  bb.5..preheader (freq 393215):
    successors: %bb.101(62), %bb.87..loopexit(37)
  
    %242 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.101 (freq 245759):
    successors: %bb.11..lr.ph(100)
  
    B %bb.11..lr.ph, implicit-def %at
  
  bb.6..lr.ph35 (freq 13107187):
    successors: %bb.10(37), %bb.7(62)
  
    %1 = PHI %155, %bb.100, %12, %bb.10
    %2 = PHI %152, %bb.100, %11, %bb.10
    %3 = PHI %237, %bb.100, %8, %bb.10
    %4 = PHI %156, %bb.100, %10, %bb.10
    %5 = PHI %0, %bb.100, %9, %bb.10
    %238 = LBu %4, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.032, !tbaa !49)
    BEQ killed %238, %zero, %bb.10, implicit-def dead %at
    B %bb.7, implicit-def dead %at
  
  bb.7 (%ir-block.21, freq 8191992):
    successors: %bb.8(50), %bb.9(50)
  
    %239 = LHu %5, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.031, !tbaa !50)
    %6 = LHu %1, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv4, !tbaa !50)
    %240 = SLTu %6, killed %239
    BEQ killed %240, %zero, %bb.9, implicit-def dead %at
    B %bb.8, implicit-def dead %at
  
  bb.8 (%ir-block.25, freq 4095996):
    successors: %bb.10(100)
  
    SH %6, %5, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.031, !tbaa !50)
    %7 = ADDiu %3, 1
    B %bb.10, implicit-def dead %at
  
  bb.9 (%ir-block.27, freq 4095996):
    successors: %bb.10(100)
  
    SB killed %zero, %4, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.032, !tbaa !49)
  
  bb.10 (%ir-block.28, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.6..lr.ph35(96)
  
    %8 = PHI %3, %bb.6..lr.ph35, %3, %bb.9, %7, %bb.8
    %12 = ADDiu %1, 2
    %11 = ADDiu %2, -1
    %10 = ADDiu %4, 1
    %9 = ADDiu %5, 2
    BEQ %11, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.6..lr.ph35, implicit-def dead %at
  
  bb.11..lr.ph (freq 7864312):
    successors: %bb.15(37), %bb.12(62)
  
    %13 = PHI %155, %bb.101, %23, %bb.15
    %14 = PHI %152, %bb.101, %22, %bb.15
    %15 = PHI %242, %bb.101, %19, %bb.15
    %16 = PHI %156, %bb.101, %21, %bb.15
    %17 = PHI %0, %bb.101, %20, %bb.15
    %243 = LBu %16, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.128, !tbaa !49)
    BEQ killed %243, %zero, %bb.15, implicit-def dead %at
    B %bb.12, implicit-def dead %at
  
  bb.12 (%ir-block.33, freq 4915195):
    successors: %bb.13(50), %bb.14(50)
  
    %244 = LHu %17, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.127, !tbaa !50)
    %245 = LHu %13, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv1, !tbaa !50)
    %246 = SLTu killed %245, killed %244
    BEQ killed %246, %zero, %bb.14, implicit-def dead %at
    B %bb.13, implicit-def dead %at
  
  bb.13 (%ir-block.37, freq 2457597):
    successors: %bb.15(100)
  
    %18 = ADDiu %15, 1
    B %bb.15, implicit-def dead %at
  
  bb.14 (%ir-block.39, freq 2457597):
    successors: %bb.15(100)
  
    SB killed %zero, %16, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.128, !tbaa !49)
  
  bb.15 (%ir-block.40, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.11..lr.ph(96)
  
    %19 = PHI %15, %bb.11..lr.ph, %15, %bb.14, %18, %bb.13
    %23 = ADDiu %13, 2
    %22 = ADDiu %14, -1
    %21 = ADDiu %16, 1
    %20 = ADDiu %17, 2
    BEQ %22, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.11..lr.ph, implicit-def dead %at
  
  bb.16 (%ir-block.43, freq 1048575):
    successors: %bb.18..preheader3(37), %bb.17..preheader5(62)
  
    %224 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.44, !tbaa !40)
    BEQ killed %224, %zero, %bb.18..preheader3, implicit-def dead %at
    B %bb.17..preheader5, implicit-def dead %at
  
  bb.17..preheader5 (freq 655359):
    successors: %bb.96(62), %bb.87..loopexit(37)
  
    %225 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.96 (freq 409599):
    successors: %bb.19..lr.ph47(100)
  
    B %bb.19..lr.ph47, implicit-def %at
  
  bb.18..preheader3 (freq 393215):
    successors: %bb.97(62), %bb.87..loopexit(37)
  
    %230 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.97 (freq 245759):
    successors: %bb.24..lr.ph41(100)
  
    B %bb.24..lr.ph41, implicit-def %at
  
  bb.19..lr.ph47 (freq 13107187):
    successors: %bb.23(37), %bb.20(62)
  
    %24 = PHI %155, %bb.96, %35, %bb.23
    %25 = PHI %152, %bb.96, %34, %bb.23
    %26 = PHI %225, %bb.96, %31, %bb.23
    %27 = PHI %156, %bb.96, %33, %bb.23
    %28 = PHI %0, %bb.96, %32, %bb.23
    %226 = LBu %27, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.244, !tbaa !49)
    BEQ killed %226, %zero, %bb.23, implicit-def dead %at
    B %bb.20, implicit-def dead %at
  
  bb.20 (%ir-block.51, freq 8191992):
    successors: %bb.22(50), %bb.21(50)
  
    %29 = LHu %24, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv12, !tbaa !50)
    %227 = LHu %28, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.243, !tbaa !50)
    %228 = SLTu killed %227, %29
    BNE killed %228, %zero, %bb.22, implicit-def dead %at
    B %bb.21, implicit-def dead %at
  
  bb.21 (%ir-block.55, freq 4095996):
    successors: %bb.23(100)
  
    SH %29, %28, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.243, !tbaa !50)
    %30 = ADDiu %26, 1
    B %bb.23, implicit-def dead %at
  
  bb.22 (%ir-block.57, freq 4095996):
    successors: %bb.23(100)
  
    SB killed %zero, %27, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.244, !tbaa !49)
  
  bb.23 (%ir-block.58, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.19..lr.ph47(96)
  
    %31 = PHI %26, %bb.19..lr.ph47, %30, %bb.21, %26, %bb.22
    %35 = ADDiu %24, 2
    %34 = ADDiu %25, -1
    %33 = ADDiu %27, 1
    %32 = ADDiu %28, 2
    BEQ %34, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.19..lr.ph47, implicit-def dead %at
  
  bb.24..lr.ph41 (freq 7864312):
    successors: %bb.28(37), %bb.25(62)
  
    %36 = PHI %155, %bb.97, %46, %bb.28
    %37 = PHI %152, %bb.97, %45, %bb.28
    %38 = PHI %230, %bb.97, %42, %bb.28
    %39 = PHI %156, %bb.97, %44, %bb.28
    %40 = PHI %0, %bb.97, %43, %bb.28
    %231 = LBu %39, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.338, !tbaa !49)
    BEQ killed %231, %zero, %bb.28, implicit-def dead %at
    B %bb.25, implicit-def dead %at
  
  bb.25 (%ir-block.63, freq 4915195):
    successors: %bb.27(50), %bb.26(50)
  
    %232 = LHu %36, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv8, !tbaa !50)
    %233 = LHu %40, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.337, !tbaa !50)
    %234 = SLTu killed %233, killed %232
    BNE killed %234, %zero, %bb.27, implicit-def dead %at
    B %bb.26, implicit-def dead %at
  
  bb.26 (%ir-block.67, freq 2457597):
    successors: %bb.28(100)
  
    %41 = ADDiu %38, 1
    B %bb.28, implicit-def dead %at
  
  bb.27 (%ir-block.69, freq 2457597):
    successors: %bb.28(100)
  
    SB killed %zero, %39, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.338, !tbaa !49)
  
  bb.28 (%ir-block.70, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.24..lr.ph41(96)
  
    %42 = PHI %38, %bb.24..lr.ph41, %41, %bb.26, %38, %bb.27
    %46 = ADDiu %36, 2
    %45 = ADDiu %37, -1
    %44 = ADDiu %39, 1
    %43 = ADDiu %40, 2
    BEQ %45, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.24..lr.ph41, implicit-def dead %at
  
  bb.29 (%ir-block.73, freq 1048574):
    successors: %bb.31..preheader7(37), %bb.30..preheader9(62)
  
    %212 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.74, !tbaa !40)
    BEQ killed %212, %zero, %bb.31..preheader7, implicit-def dead %at
    B %bb.30..preheader9, implicit-def dead %at
  
  bb.30..preheader9 (freq 655359):
    successors: %bb.90(62), %bb.87..loopexit(37)
  
    %213 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.90 (freq 409599):
    successors: %bb.32..lr.ph59(100)
  
    B %bb.32..lr.ph59, implicit-def %at
  
  bb.31..preheader7 (freq 393215):
    successors: %bb.91(62), %bb.87..loopexit(37)
  
    %218 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.91 (freq 245759):
    successors: %bb.37..lr.ph53(100)
  
    B %bb.37..lr.ph53, implicit-def %at
  
  bb.32..lr.ph59 (freq 13107187):
    successors: %bb.36(37), %bb.33(62)
  
    %47 = PHI %155, %bb.90, %58, %bb.36
    %48 = PHI %152, %bb.90, %57, %bb.36
    %49 = PHI %213, %bb.90, %54, %bb.36
    %50 = PHI %156, %bb.90, %56, %bb.36
    %51 = PHI %0, %bb.90, %55, %bb.36
    %214 = LBu %50, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.456, !tbaa !49)
    BEQ killed %214, %zero, %bb.36, implicit-def dead %at
    B %bb.33, implicit-def dead %at
  
  bb.33 (%ir-block.81, freq 8191992):
    successors: %bb.35(50), %bb.34(50)
  
    %215 = LHu %51, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.455, !tbaa !50)
    %52 = LHu %47, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv20, !tbaa !50)
    %216 = SLTu %52, killed %215
    BNE killed %216, %zero, %bb.35, implicit-def dead %at
    B %bb.34, implicit-def dead %at
  
  bb.34 (%ir-block.85, freq 4095996):
    successors: %bb.36(100)
  
    SH %52, %51, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.455, !tbaa !50)
    %53 = ADDiu %49, 1
    B %bb.36, implicit-def dead %at
  
  bb.35 (%ir-block.87, freq 4095996):
    successors: %bb.36(100)
  
    SB killed %zero, %50, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.456, !tbaa !49)
  
  bb.36 (%ir-block.88, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.32..lr.ph59(96)
  
    %54 = PHI %49, %bb.32..lr.ph59, %53, %bb.34, %49, %bb.35
    %58 = ADDiu %47, 2
    %57 = ADDiu %48, -1
    %56 = ADDiu %50, 1
    %55 = ADDiu %51, 2
    BEQ %57, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.32..lr.ph59, implicit-def dead %at
  
  bb.37..lr.ph53 (freq 7864312):
    successors: %bb.41(37), %bb.38(62)
  
    %59 = PHI %155, %bb.91, %69, %bb.41
    %60 = PHI %152, %bb.91, %68, %bb.41
    %61 = PHI %218, %bb.91, %65, %bb.41
    %62 = PHI %156, %bb.91, %67, %bb.41
    %63 = PHI %0, %bb.91, %66, %bb.41
    %219 = LBu %62, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.550, !tbaa !49)
    BEQ killed %219, %zero, %bb.41, implicit-def dead %at
    B %bb.38, implicit-def dead %at
  
  bb.38 (%ir-block.93, freq 4915195):
    successors: %bb.40(50), %bb.39(50)
  
    %220 = LHu %63, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.549, !tbaa !50)
    %221 = LHu %59, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv16, !tbaa !50)
    %222 = SLTu killed %221, killed %220
    BNE killed %222, %zero, %bb.40, implicit-def dead %at
    B %bb.39, implicit-def dead %at
  
  bb.39 (%ir-block.97, freq 2457597):
    successors: %bb.41(100)
  
    %64 = ADDiu %61, 1
    B %bb.41, implicit-def dead %at
  
  bb.40 (%ir-block.99, freq 2457597):
    successors: %bb.41(100)
  
    SB killed %zero, %62, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.550, !tbaa !49)
  
  bb.41 (%ir-block.100, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.37..lr.ph53(96)
  
    %65 = PHI %61, %bb.37..lr.ph53, %64, %bb.39, %61, %bb.40
    %69 = ADDiu %59, 2
    %68 = ADDiu %60, -1
    %67 = ADDiu %62, 1
    %66 = ADDiu %63, 2
    BEQ %68, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.37..lr.ph53, implicit-def dead %at
  
  bb.42 (%ir-block.103, freq 1048575):
    successors: %bb.44..preheader11(37), %bb.43..preheader13(62)
  
    %200 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.104, !tbaa !40)
    BEQ killed %200, %zero, %bb.44..preheader11, implicit-def dead %at
    B %bb.43..preheader13, implicit-def dead %at
  
  bb.43..preheader13 (freq 655359):
    successors: %bb.94(62), %bb.87..loopexit(37)
  
    %201 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.94 (freq 409599):
    successors: %bb.45..lr.ph71(100)
  
    B %bb.45..lr.ph71, implicit-def %at
  
  bb.44..preheader11 (freq 393215):
    successors: %bb.95(62), %bb.87..loopexit(37)
  
    %206 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.95 (freq 245759):
    successors: %bb.50..lr.ph65(100)
  
    B %bb.50..lr.ph65, implicit-def %at
  
  bb.45..lr.ph71 (freq 13107187):
    successors: %bb.49(37), %bb.46(62)
  
    %70 = PHI %155, %bb.94, %81, %bb.49
    %71 = PHI %152, %bb.94, %80, %bb.49
    %72 = PHI %201, %bb.94, %77, %bb.49
    %73 = PHI %156, %bb.94, %79, %bb.49
    %74 = PHI %0, %bb.94, %78, %bb.49
    %202 = LBu %73, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.668, !tbaa !49)
    BEQ killed %202, %zero, %bb.49, implicit-def dead %at
    B %bb.46, implicit-def dead %at
  
  bb.46 (%ir-block.111, freq 8191992):
    successors: %bb.47(50), %bb.48(50)
  
    %75 = LHu %70, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv28, !tbaa !50)
    %203 = LHu %74, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.667, !tbaa !50)
    %204 = SLTu killed %203, %75
    BEQ killed %204, %zero, %bb.48, implicit-def dead %at
    B %bb.47, implicit-def dead %at
  
  bb.47 (%ir-block.115, freq 4095996):
    successors: %bb.49(100)
  
    SH %75, %74, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.667, !tbaa !50)
    %76 = ADDiu %72, 1
    B %bb.49, implicit-def dead %at
  
  bb.48 (%ir-block.117, freq 4095996):
    successors: %bb.49(100)
  
    SB killed %zero, %73, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.668, !tbaa !49)
  
  bb.49 (%ir-block.118, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.45..lr.ph71(96)
  
    %77 = PHI %72, %bb.45..lr.ph71, %72, %bb.48, %76, %bb.47
    %81 = ADDiu %70, 2
    %80 = ADDiu %71, -1
    %79 = ADDiu %73, 1
    %78 = ADDiu %74, 2
    BEQ %80, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.45..lr.ph71, implicit-def dead %at
  
  bb.50..lr.ph65 (freq 7864312):
    successors: %bb.54(37), %bb.51(62)
  
    %82 = PHI %155, %bb.95, %92, %bb.54
    %83 = PHI %152, %bb.95, %91, %bb.54
    %84 = PHI %206, %bb.95, %88, %bb.54
    %85 = PHI %156, %bb.95, %90, %bb.54
    %86 = PHI %0, %bb.95, %89, %bb.54
    %207 = LBu %85, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.762, !tbaa !49)
    BEQ killed %207, %zero, %bb.54, implicit-def dead %at
    B %bb.51, implicit-def dead %at
  
  bb.51 (%ir-block.123, freq 4915195):
    successors: %bb.52(50), %bb.53(50)
  
    %208 = LHu %82, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv24, !tbaa !50)
    %209 = LHu %86, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.761, !tbaa !50)
    %210 = SLTu killed %209, killed %208
    BEQ killed %210, %zero, %bb.53, implicit-def dead %at
    B %bb.52, implicit-def dead %at
  
  bb.52 (%ir-block.127, freq 2457597):
    successors: %bb.54(100)
  
    %87 = ADDiu %84, 1
    B %bb.54, implicit-def dead %at
  
  bb.53 (%ir-block.129, freq 2457597):
    successors: %bb.54(100)
  
    SB killed %zero, %85, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.762, !tbaa !49)
  
  bb.54 (%ir-block.130, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.50..lr.ph65(96)
  
    %88 = PHI %84, %bb.50..lr.ph65, %84, %bb.53, %87, %bb.52
    %92 = ADDiu %82, 2
    %91 = ADDiu %83, -1
    %90 = ADDiu %85, 1
    %89 = ADDiu %86, 2
    BEQ %91, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.50..lr.ph65, implicit-def dead %at
  
  bb.55 (%ir-block.133, freq 1048574):
    successors: %bb.57..preheader15(37), %bb.56..preheader17(62)
  
    %190 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.134, !tbaa !40)
    BEQ killed %190, %zero, %bb.57..preheader15, implicit-def dead %at
    B %bb.56..preheader17, implicit-def dead %at
  
  bb.56..preheader17 (freq 655359):
    successors: %bb.92(62), %bb.87..loopexit(37)
  
    %191 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.92 (freq 409599):
    successors: %bb.58..lr.ph83(100)
  
    B %bb.58..lr.ph83, implicit-def %at
  
  bb.57..preheader15 (freq 393215):
    successors: %bb.93(62), %bb.87..loopexit(37)
  
    %195 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.93 (freq 245759):
    successors: %bb.63..lr.ph77(100)
  
    B %bb.63..lr.ph77, implicit-def %at
  
  bb.58..lr.ph83 (freq 13107187):
    successors: %bb.62(37), %bb.59(62)
  
    %93 = PHI %155, %bb.92, %104, %bb.62
    %94 = PHI %152, %bb.92, %103, %bb.62
    %95 = PHI %191, %bb.92, %100, %bb.62
    %96 = PHI %156, %bb.92, %102, %bb.62
    %97 = PHI %0, %bb.92, %101, %bb.62
    %192 = LBu %96, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.880, !tbaa !49)
    BEQ killed %192, %zero, %bb.62, implicit-def dead %at
    B %bb.59, implicit-def dead %at
  
  bb.59 (%ir-block.141, freq 8191992):
    successors: %bb.61(50), %bb.60(50)
  
    %98 = LHu %93, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv36, !tbaa !50)
    %193 = LHu %97, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.879, !tbaa !50)
    BEQ %98, killed %193, %bb.61, implicit-def dead %at
    B %bb.60, implicit-def dead %at
  
  bb.60 (%ir-block.145, freq 4095996):
    successors: %bb.62(100)
  
    SH %98, %97, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.879, !tbaa !50)
    %99 = ADDiu %95, 1
    B %bb.62, implicit-def dead %at
  
  bb.61 (%ir-block.147, freq 4095996):
    successors: %bb.62(100)
  
    SB killed %zero, %96, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.880, !tbaa !49)
  
  bb.62 (%ir-block.148, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.58..lr.ph83(96)
  
    %100 = PHI %95, %bb.58..lr.ph83, %99, %bb.60, %95, %bb.61
    %104 = ADDiu %93, 2
    %103 = ADDiu %94, -1
    %102 = ADDiu %96, 1
    %101 = ADDiu %97, 2
    BEQ %103, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.58..lr.ph83, implicit-def dead %at
  
  bb.63..lr.ph77 (freq 7864312):
    successors: %bb.67(37), %bb.64(62)
  
    %105 = PHI %155, %bb.93, %115, %bb.67
    %106 = PHI %152, %bb.93, %114, %bb.67
    %107 = PHI %195, %bb.93, %111, %bb.67
    %108 = PHI %156, %bb.93, %113, %bb.67
    %109 = PHI %0, %bb.93, %112, %bb.67
    %196 = LBu %108, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.974, !tbaa !49)
    BEQ killed %196, %zero, %bb.67, implicit-def dead %at
    B %bb.64, implicit-def dead %at
  
  bb.64 (%ir-block.153, freq 4915195):
    successors: %bb.66(50), %bb.65(50)
  
    %197 = LHu %109, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.973, !tbaa !50)
    %198 = LHu %105, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv32, !tbaa !50)
    BEQ killed %198, killed %197, %bb.66, implicit-def dead %at
    B %bb.65, implicit-def dead %at
  
  bb.65 (%ir-block.157, freq 2457597):
    successors: %bb.67(100)
  
    %110 = ADDiu %107, 1
    B %bb.67, implicit-def dead %at
  
  bb.66 (%ir-block.159, freq 2457597):
    successors: %bb.67(100)
  
    SB killed %zero, %108, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.974, !tbaa !49)
  
  bb.67 (%ir-block.160, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.63..lr.ph77(96)
  
    %111 = PHI %107, %bb.63..lr.ph77, %110, %bb.65, %107, %bb.66
    %115 = ADDiu %105, 2
    %114 = ADDiu %106, -1
    %113 = ADDiu %108, 1
    %112 = ADDiu %109, 2
    BEQ %114, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.63..lr.ph77, implicit-def dead %at
  
  bb.68 (%ir-block.163, freq 1048575):
    successors: %bb.70..preheader19(37), %bb.69..preheader21(62)
  
    %180 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.164, !tbaa !40)
    BEQ killed %180, %zero, %bb.70..preheader19, implicit-def dead %at
    B %bb.69..preheader21, implicit-def dead %at
  
  bb.69..preheader21 (freq 655359):
    successors: %bb.98(62), %bb.87..loopexit(37)
  
    %181 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.98 (freq 409599):
    successors: %bb.71..lr.ph95(100)
  
    B %bb.71..lr.ph95, implicit-def %at
  
  bb.70..preheader19 (freq 393215):
    successors: %bb.99(62), %bb.87..loopexit(37)
  
    %185 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.99 (freq 245759):
    successors: %bb.76..lr.ph89(100)
  
    B %bb.76..lr.ph89, implicit-def %at
  
  bb.71..lr.ph95 (freq 13107187):
    successors: %bb.75(37), %bb.72(62)
  
    %116 = PHI %155, %bb.98, %127, %bb.75
    %117 = PHI %152, %bb.98, %126, %bb.75
    %118 = PHI %181, %bb.98, %123, %bb.75
    %119 = PHI %156, %bb.98, %125, %bb.75
    %120 = PHI %0, %bb.98, %124, %bb.75
    %182 = LBu %119, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.1092, !tbaa !49)
    BEQ killed %182, %zero, %bb.75, implicit-def dead %at
    B %bb.72, implicit-def dead %at
  
  bb.72 (%ir-block.171, freq 8191992):
    successors: %bb.73(50), %bb.74(50)
  
    %121 = LHu %116, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv44, !tbaa !50)
    %183 = LHu %120, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.zptr.1091, !tbaa !50)
    BNE %121, killed %183, %bb.74, implicit-def dead %at
    B %bb.73, implicit-def dead %at
  
  bb.73 (%ir-block.175, freq 4095996):
    successors: %bb.75(100)
  
    SH %121, %120, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.1091, !tbaa !50)
    %122 = ADDiu %118, 1
    B %bb.75, implicit-def dead %at
  
  bb.74 (%ir-block.177, freq 4095996):
    successors: %bb.75(100)
  
    SB killed %zero, %119, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.1092, !tbaa !49)
  
  bb.75 (%ir-block.178, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.71..lr.ph95(96)
  
    %123 = PHI %118, %bb.71..lr.ph95, %118, %bb.74, %122, %bb.73
    %127 = ADDiu %116, 2
    %126 = ADDiu %117, -1
    %125 = ADDiu %119, 1
    %124 = ADDiu %120, 2
    BEQ %126, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.71..lr.ph95, implicit-def dead %at
  
  bb.76..lr.ph89 (freq 7864312):
    successors: %bb.80(37), %bb.77(62)
  
    %128 = PHI %155, %bb.99, %138, %bb.80
    %129 = PHI %152, %bb.99, %137, %bb.80
    %130 = PHI %185, %bb.99, %134, %bb.80
    %131 = PHI %156, %bb.99, %136, %bb.80
    %132 = PHI %0, %bb.99, %135, %bb.80
    %186 = LBu %131, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.1186, !tbaa !49)
    BEQ killed %186, %zero, %bb.80, implicit-def dead %at
    B %bb.77, implicit-def dead %at
  
  bb.77 (%ir-block.183, freq 4915195):
    successors: %bb.78(50), %bb.79(50)
  
    %187 = LHu %132, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.zptr.1185, !tbaa !50)
    %188 = LHu %128, 0, <0x3bb91c0> = !{!"unison-memory-partition", i32 1} :: (load 2 from %ir.lsr.iv40, !tbaa !50)
    BNE killed %188, killed %187, %bb.79, implicit-def dead %at
    B %bb.78, implicit-def dead %at
  
  bb.78 (%ir-block.187, freq 2457597):
    successors: %bb.80(100)
  
    %133 = ADDiu %130, 1
    B %bb.80, implicit-def dead %at
  
  bb.79 (%ir-block.189, freq 2457597):
    successors: %bb.80(100)
  
    SB killed %zero, %131, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.m.1186, !tbaa !49)
  
  bb.80 (%ir-block.190, freq 7864312):
    successors: %bb.87..loopexit(3), %bb.76..lr.ph89(96)
  
    %134 = PHI %130, %bb.76..lr.ph89, %130, %bb.79, %133, %bb.78
    %138 = ADDiu %128, 2
    %137 = ADDiu %129, -1
    %136 = ADDiu %131, 1
    %135 = ADDiu %132, 2
    BEQ %137, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.76..lr.ph89, implicit-def dead %at
  
  bb.81 (%ir-block.193, freq 1048574):
    successors: %bb.87..loopexit(37), %bb.82..preheader23(62)
  
    %176 = LBu %151, 7521, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.194, !tbaa !40)
    BEQ killed %176, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.82..preheader23, implicit-def dead %at
  
  bb.82..preheader23 (freq 655359):
    successors: %bb.87..loopexit(37), %bb.89(62)
  
    %177 = ADDiu %zero, 0
    BEQ %152, %zero, %bb.87..loopexit, implicit-def %at
  
  bb.89 (freq 409599):
    successors: %bb.83..lr.ph101(100)
  
  
  bb.83..lr.ph101 (freq 13107187):
    successors: %bb.85(37), %bb.84(62)
  
    %139 = PHI %155, %bb.89, %149, %bb.85
    %140 = PHI %152, %bb.89, %148, %bb.85
    %141 = PHI %177, %bb.89, %145, %bb.85
    %142 = PHI %156, %bb.89, %147, %bb.85
    %143 = PHI %0, %bb.89, %146, %bb.85
    %178 = LBu %142, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.m.1298, !tbaa !49)
    BEQ killed %178, %zero, %bb.85, implicit-def dead %at
    B %bb.84, implicit-def dead %at
  
  bb.84 (%ir-block.200, freq 8191992):
    successors: %bb.85(100)
  
    %179 = LHu %139, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.lsr.iv48, !tbaa !50)
    SH killed %179, %143, 0, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.zptr.1297, !tbaa !50)
    %144 = ADDiu %141, 1
  
  bb.85 (%ir-block.203, freq 13107187):
    successors: %bb.87..loopexit(3), %bb.83..lr.ph101(96)
  
    %145 = PHI %141, %bb.83..lr.ph101, %144, %bb.84
    %149 = ADDiu %139, 2
    %148 = ADDiu %140, -1
    %147 = ADDiu %142, 1
    %146 = ADDiu %143, 2
    BEQ %148, %zero, %bb.87..loopexit, implicit-def dead %at
    B %bb.83..lr.ph101, implicit-def dead %at
  
  bb.86 (%ir-block.206, freq 8):
    exit
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %248 = LW %167, target-flags(<unknown>) @abort, <0x3bcbeb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @abort)
    %gp = COPY %167
    %t9 = COPY %248
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.87..loopexit (freq 8388599):
    liveouts: %v0
  
    %150 = PHI %173, %bb.1..preheader25, %174, %bb.2..lr.ph104.preheader, %152, %bb.81, %177, %bb.82..preheader23, %145, %bb.85, %181, %bb.69..preheader21, %123, %bb.75, %185, %bb.70..preheader19, %134, %bb.80, %191, %bb.56..preheader17, %100, %bb.62, %195, %bb.57..preheader15, %111, %bb.67, %201, %bb.43..preheader13, %77, %bb.49, %206, %bb.44..preheader11, %88, %bb.54, %213, %bb.30..preheader9, %54, %bb.36, %218, %bb.31..preheader7, %65, %bb.41, %225, %bb.17..preheader5, %31, %bb.23, %230, %bb.18..preheader3, %42, %bb.28, %237, %bb.4..preheader1, %8, %bb.10, %242, %bb.5..preheader, %19, %bb.15
    %v0 = COPY %150
    RetRA implicit %v0

...
