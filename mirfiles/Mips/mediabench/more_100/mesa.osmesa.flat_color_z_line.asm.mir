--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.osmesa.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.osmesa_context = type { %struct.gl_context*, %struct.gl_visual*, %struct.gl_frame_buffer*, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1024 x i8*], i8 }
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type opaque
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.EdgeT = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.0 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  
  @Current = internal unnamed_addr global %struct.osmesa_context* null, align 4
  @.str = private unnamed_addr constant [24 x i8] c"OSMesaPixelStore(value)\00", align 1
  @.str.1 = private unnamed_addr constant [24 x i8] c"OSMesaPixelStore(pname)\00", align 1
  @.str.2 = private unnamed_addr constant [26 x i8] c"OSMesaGetIntergerv(pname)\00", align 1
  
  ; Function Attrs: nounwind
  define %struct.osmesa_context* @OSMesaCreateContext(i32 signext %format, %struct.osmesa_context* readonly %sharelist) #0 {
    switch i32 %format, label %56 [
      i32 6400, label %6
      i32 6408, label %1
      i32 1, label %2
      i32 2, label %3
      i32 6407, label %4
      i32 4, label %5
    ]
  
  ; <label>:1                                       ; preds = %0
    br label %6
  
  ; <label>:2                                       ; preds = %0
    br label %6
  
  ; <label>:3                                       ; preds = %0
    br label %6
  
  ; <label>:4                                       ; preds = %0
    br label %6
  
  ; <label>:5                                       ; preds = %0
    br label %6
  
  ; <label>:6                                       ; preds = %5, %4, %3, %2, %1, %0
    %gscale.0 = phi float [ 2.550000e+02, %1 ], [ 2.550000e+02, %2 ], [ 2.550000e+02, %3 ], [ 2.550000e+02, %4 ], [ 2.550000e+02, %5 ], [ 0.000000e+00, %0 ]
    %rshift.3 = phi i32 [ 24, %1 ], [ 8, %2 ], [ 16, %3 ], [ 16, %4 ], [ 16, %5 ], [ 0, %0 ]
    %gshift.3 = phi i32 [ 16, %1 ], [ 16, %2 ], [ 8, %3 ], [ 8, %4 ], [ 8, %5 ], [ 0, %0 ]
    %bshift.3 = phi i32 [ 8, %1 ], [ 24, %2 ], [ 0, %3 ], [ 0, %4 ], [ 0, %5 ], [ 0, %0 ]
    %ashift.3 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 24, %3 ], [ 24, %4 ], [ 24, %5 ], [ 0, %0 ]
    %rind.0 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 0, %3 ], [ 0, %4 ], [ 2, %5 ], [ 0, %0 ]
    %gind.0 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 0, %3 ], [ 1, %4 ], [ 1, %5 ], [ 0, %0 ]
    %bind.0 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 0, %3 ], [ 2, %4 ], [ 0, %5 ], [ 0, %0 ]
    %index_bits.0 = phi i32 [ 0, %1 ], [ 0, %2 ], [ 0, %3 ], [ 0, %4 ], [ 0, %5 ], [ 8, %0 ]
    %rgbmode.0 = phi i8 [ 1, %1 ], [ 1, %2 ], [ 1, %3 ], [ 1, %4 ], [ 1, %5 ], [ 0, %0 ]
    %swalpha.0 = phi i8 [ 0, %1 ], [ 0, %2 ], [ 0, %3 ], [ 1, %4 ], [ 1, %5 ], [ 0, %0 ]
    %7 = tail call noalias i8* @calloc(i32 signext 1, i32 signext 4168) #6
    %8 = bitcast i8* %7 to %struct.osmesa_context*
    %9 = icmp eq i8* %7, null
    br i1 %9, label %56, label %10
  
  ; <label>:10                                      ; preds = %6
    %11 = tail call %struct.gl_visual* @gl_create_visual(i8 zeroext %rgbmode.0, i8 zeroext %swalpha.0, i8 zeroext 0, i32 signext 16, i32 signext 8, i32 signext 16, i32 signext %index_bits.0, float %gscale.0, float %gscale.0, float %gscale.0, float %gscale.0) #6
    %12 = getelementptr inbounds i8, i8* %7, i32 4
    %13 = bitcast i8* %12 to %struct.gl_visual**
    store %struct.gl_visual* %11, %struct.gl_visual** %13, align 4, !tbaa !1
    %14 = icmp eq %struct.gl_visual* %11, null
    br i1 %14, label %56, label %15
  
  ; <label>:15                                      ; preds = %10
    %16 = icmp eq %struct.osmesa_context* %sharelist, null
    br i1 %16, label %20, label %17
  
  ; <label>:17                                      ; preds = %15
    %18 = bitcast %struct.osmesa_context* %sharelist to %struct.gl_context**
    %19 = load %struct.gl_context*, %struct.gl_context** %18, align 4, !tbaa !7
    br label %20
  
  ; <label>:20                                      ; preds = %17, %15
    %21 = phi %struct.gl_context* [ %19, %17 ], [ null, %15 ]
    %22 = tail call %struct.gl_context* @gl_create_context(%struct.gl_visual* nonnull %11, %struct.gl_context* %21, i8* nonnull %7) #6
    %23 = bitcast i8* %7 to %struct.gl_context**
    store %struct.gl_context* %22, %struct.gl_context** %23, align 4, !tbaa !7
    %24 = icmp eq %struct.gl_context* %22, null
    %sunkaddr = ptrtoint i8* %7 to i32
    %sunkaddr1 = add i32 %sunkaddr, 4
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_visual**
    %25 = load %struct.gl_visual*, %struct.gl_visual** %sunkaddr2, align 4, !tbaa !1
    br i1 %24, label %26, label %27
  
  ; <label>:26                                      ; preds = %20
    tail call void @gl_destroy_visual(%struct.gl_visual* %25) #6
    tail call void @free(i8* nonnull %7) #6
    br label %56
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call %struct.gl_frame_buffer* @gl_create_framebuffer(%struct.gl_visual* %25) #6
    %29 = getelementptr inbounds i8, i8* %7, i32 8
    %30 = bitcast i8* %29 to %struct.gl_frame_buffer**
    store %struct.gl_frame_buffer* %28, %struct.gl_frame_buffer** %30, align 4, !tbaa !8
    %31 = icmp eq %struct.gl_frame_buffer* %28, null
    br i1 %31, label %32, label %36
  
  ; <label>:32                                      ; preds = %27
    %33 = bitcast i8* %7 to %struct.gl_context**
    %sunkaddr3 = ptrtoint i8* %7 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 4
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to %struct.gl_visual**
    %34 = load %struct.gl_visual*, %struct.gl_visual** %sunkaddr5, align 4, !tbaa !1
    tail call void @gl_destroy_visual(%struct.gl_visual* %34) #6
    %35 = load %struct.gl_context*, %struct.gl_context** %33, align 4, !tbaa !7
    tail call void @gl_destroy_context(%struct.gl_context* %35) #6
    tail call void @free(i8* nonnull %7) #6
    br label %56
  
  ; <label>:36                                      ; preds = %27
    %37 = bitcast i8* %7 to %struct.osmesa_context*
    %38 = getelementptr inbounds i8, i8* %7, i32 12
    %39 = bitcast i8* %38 to i32*
    store i32 %format, i32* %39, align 4, !tbaa !9
    %40 = getelementptr inbounds i8, i8* %7, i32 16
    %41 = getelementptr inbounds i8, i8* %7, i32 4164
    call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 24, i32 4, i1 false)
    store i8 1, i8* %41, align 4, !tbaa !10
    %42 = getelementptr inbounds i8, i8* %7, i32 40
    %43 = bitcast i8* %42 to i32*
    store i32 %rshift.3, i32* %43, align 4, !tbaa !11
    %44 = getelementptr inbounds i8, i8* %7, i32 44
    %45 = bitcast i8* %44 to i32*
    store i32 %gshift.3, i32* %45, align 4, !tbaa !12
    %46 = getelementptr inbounds i8, i8* %7, i32 48
    %47 = bitcast i8* %46 to i32*
    store i32 %bshift.3, i32* %47, align 4, !tbaa !13
    %48 = getelementptr inbounds i8, i8* %7, i32 52
    %49 = bitcast i8* %48 to i32*
    store i32 %ashift.3, i32* %49, align 4, !tbaa !14
    %50 = getelementptr inbounds i8, i8* %7, i32 56
    %51 = bitcast i8* %50 to i32*
    store i32 %rind.0, i32* %51, align 4, !tbaa !15
    %52 = getelementptr inbounds i8, i8* %7, i32 60
    %53 = bitcast i8* %52 to i32*
    store i32 %gind.0, i32* %53, align 4, !tbaa !16
    %54 = getelementptr inbounds i8, i8* %7, i32 64
    %55 = bitcast i8* %54 to i32*
    store i32 %bind.0, i32* %55, align 4, !tbaa !17
    br label %56
  
  ; <label>:56                                      ; preds = %36, %32, %26, %10, %6, %0
    %.0 = phi %struct.osmesa_context* [ null, %32 ], [ null, %26 ], [ null, %0 ], [ null, %10 ], [ %8, %6 ], [ %37, %36 ]
    ret %struct.osmesa_context* %.0
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #1
  
  ; Function Attrs: nounwind
  declare noalias i8* @calloc(i32 signext, i32 signext) #0
  
  declare %struct.gl_visual* @gl_create_visual(i8 zeroext, i8 zeroext, i8 zeroext, i32 signext, i32 signext, i32 signext, i32 signext, float, float, float, float) #2
  
  declare %struct.gl_context* @gl_create_context(%struct.gl_visual*, %struct.gl_context*, i8*) #2
  
  declare void @gl_destroy_visual(%struct.gl_visual*) #2
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  declare %struct.gl_frame_buffer* @gl_create_framebuffer(%struct.gl_visual*) #2
  
  declare void @gl_destroy_context(%struct.gl_context*) #2
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #1
  
  ; Function Attrs: nounwind
  define void @OSMesaDestroyContext(%struct.osmesa_context* %ctx) #0 {
    %1 = icmp eq %struct.osmesa_context* %ctx, null
    br i1 %1, label %10, label %2
  
  ; <label>:2                                       ; preds = %0
    %3 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 1
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !1
    tail call void @gl_destroy_visual(%struct.gl_visual* %4) #6
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 2
    %6 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %5, align 4, !tbaa !8
    tail call void @gl_destroy_framebuffer(%struct.gl_frame_buffer* %6) #6
    %7 = bitcast %struct.osmesa_context* %ctx to %struct.gl_context**
    %8 = load %struct.gl_context*, %struct.gl_context** %7, align 4, !tbaa !7
    tail call void @gl_destroy_context(%struct.gl_context* %8) #6
    %9 = bitcast %struct.osmesa_context* %ctx to i8*
    tail call void @free(i8* %9) #6
    br label %10
  
  ; <label>:10                                      ; preds = %2, %0
    ret void
  }
  
  declare void @gl_destroy_framebuffer(%struct.gl_frame_buffer*) #2
  
  ; Function Attrs: nounwind
  define zeroext i8 @OSMesaMakeCurrent(%struct.osmesa_context* %ctx, i8* %buffer, i32 signext %type, i32 signext %width, i32 signext %height) #0 {
    %notlhs = icmp eq %struct.osmesa_context* %ctx, null
    %notrhs = icmp eq i8* %buffer, null
    %or.cond.not = or i1 %notlhs, %notrhs
    %1 = icmp ne i32 %type, 5121
    %or.cond3 = or i1 %or.cond.not, %1
    %2 = icmp slt i32 %width, 1
    %or.cond5 = or i1 %or.cond3, %2
    %3 = icmp slt i32 %height, 1
    %or.cond7 = or i1 %or.cond5, %3
    %4 = icmp sgt i32 %width, 1280
    %or.cond9 = or i1 %4, %or.cond7
    %5 = icmp sgt i32 %height, 1024
    %or.cond11 = or i1 %5, %or.cond9
    br i1 %or.cond11, label %30, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = bitcast %struct.osmesa_context* %ctx to %struct.gl_context**
    %8 = load %struct.gl_context*, %struct.gl_context** %7, align 4, !tbaa !7
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 2
    %10 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %9, align 4, !tbaa !8
    tail call void @gl_make_current(%struct.gl_context* %8, %struct.gl_frame_buffer* %10) #6
    %11 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    store i8* %buffer, i8** %11, align 4, !tbaa !18
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 5
    store i32 %width, i32* %12, align 4, !tbaa !19
    %13 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 6
    store i32 %height, i32* %13, align 4, !tbaa !20
    %14 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 9
    %15 = load i32, i32* %14, align 4, !tbaa !21
    %16 = icmp eq i32 %15, 0
    br i1 %16, label %17, label %18
  
  ; <label>:17                                      ; preds = %6
    %sunkaddr = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 36
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 %width, i32* %sunkaddr2, align 4, !tbaa !21
    br label %18
  
  ; <label>:18                                      ; preds = %17, %6
    %19 = bitcast %struct.osmesa_context* %ctx to %struct.gl_context**
    %20 = load %struct.gl_context*, %struct.gl_context** %19, align 4, !tbaa !7
    tail call void @osmesa_setup_DD_pointers(%struct.gl_context* %20)
    store %struct.osmesa_context* %ctx, %struct.osmesa_context** @Current, align 4, !tbaa !22
    tail call fastcc void @compute_row_addresses(%struct.osmesa_context* nonnull %ctx)
    %21 = load %struct.gl_context*, %struct.gl_context** %19, align 4, !tbaa !7
    %22 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %21, i32 0, i32 43, i32 2
    %23 = load i32, i32* %22, align 4, !tbaa !23
    %24 = icmp eq i32 %23, 0
    br i1 %24, label %25, label %30
  
  ; <label>:25                                      ; preds = %18
    %26 = bitcast %struct.osmesa_context* %ctx to %struct.gl_context**
    tail call void @gl_Viewport(%struct.gl_context* %21, i32 signext 0, i32 signext 0, i32 signext %width, i32 signext %height) #6
    %27 = load %struct.gl_context*, %struct.gl_context** %26, align 4, !tbaa !7
    %28 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %27, i32 0, i32 39, i32 3
    store i32 %width, i32* %28, align 4, !tbaa !55
    %29 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %27, i32 0, i32 39, i32 4
    store i32 %height, i32* %29, align 4, !tbaa !56
    br label %30
  
  ; <label>:30                                      ; preds = %25, %18, %0
    %.0 = phi i8 [ 0, %0 ], [ 1, %25 ], [ 1, %18 ]
    ret i8 %.0
  }
  
  declare void @gl_make_current(%struct.gl_context*, %struct.gl_frame_buffer*) #2
  
  ; Function Attrs: norecurse nounwind
  define internal void @osmesa_setup_DD_pointers(%struct.gl_context* %ctx) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 0
    store void (%struct.gl_context*)* @osmesa_setup_DD_pointers, void (%struct.gl_context*)** %4, align 4, !tbaa !58
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 6
    store i8 (%struct.gl_context*, i32)* @set_buffer, i8 (%struct.gl_context*, i32)** %5, align 4, !tbaa !59
    %6 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 5
    store void (%struct.gl_context*, i8, i8, i8, i8)* @set_color, void (%struct.gl_context*, i8, i8, i8, i8)** %6, align 4, !tbaa !60
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 4
    store void (%struct.gl_context*, i32)* @set_index, void (%struct.gl_context*, i32)** %7, align 4, !tbaa !61
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 1
    store void (%struct.gl_context*, i32)* @clear_index, void (%struct.gl_context*, i32)** %8, align 4, !tbaa !62
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 2
    store void (%struct.gl_context*, i8, i8, i8, i8)* @clear_color, void (%struct.gl_context*, i8, i8, i8, i8)** %9, align 4, !tbaa !63
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 3
    store void (%struct.gl_context*, i8, i32, i32, i32, i32)* @clear, void (%struct.gl_context*, i8, i32, i32, i32, i32)** %10, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 7
    store void (%struct.gl_context*, i32*, i32*)* @buffer_size, void (%struct.gl_context*, i32*, i32*)** %11, align 4, !tbaa !65
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    store void (%struct.gl_context*, i32, i32)* null, void (%struct.gl_context*, i32, i32)** %12, align 4, !tbaa !66
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 33, i32 0
    %14 = bitcast i8* %13 to i16*
    %15 = load i16, i16* %14, align 4
    %16 = icmp ult i16 %15, 256
    br i1 %16, label %17, label %choose_line_function.exit
  
  ; <label>:17                                      ; preds = %0
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 0
    %19 = load i32, i32* %18, align 4, !tbaa !67
    %20 = icmp eq i32 %19, 0
    br i1 %20, label %21, label %choose_line_function.exit
  
  ; <label>:21                                      ; preds = %17
    %22 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %23 = load i32, i32* %22, align 4, !tbaa !68
    %24 = icmp eq i32 %23, 7424
    br i1 %24, label %25, label %choose_line_function.exit
  
  ; <label>:25                                      ; preds = %21
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 58
    %27 = load i32, i32* %26, align 4, !tbaa !69
    switch i32 %27, label %choose_line_function.exit [
      i32 4, label %28
      i32 0, label %46
    ]
  
  ; <label>:28                                      ; preds = %25
    %29 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %30 = load i32, i32* %29, align 4, !tbaa !70
    %31 = icmp eq i32 %30, 513
    br i1 %31, label %32, label %choose_line_function.exit
  
  ; <label>:32                                      ; preds = %28
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %34 = load i8, i8* %33, align 1, !tbaa !71
    %35 = icmp eq i8 %34, 1
    br i1 %35, label %36, label %choose_line_function.exit
  
  ; <label>:36                                      ; preds = %32
    %37 = trunc i16 %15 to i8
    %38 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 33, i32 4
    %39 = load float, float* %38, align 4, !tbaa !72
    %40 = fcmp oeq float %39, 1.000000e+00
    %41 = icmp eq i8 %37, 0
    %or.cond.i = and i1 %41, %40
    br i1 %or.cond.i, label %42, label %choose_line_function.exit
  
  ; <label>:42                                      ; preds = %36
    %43 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 3
    %44 = load i32, i32* %43, align 4, !tbaa !9
    switch i32 %44, label %45 [
      i32 6408, label %choose_line_function.exit
      i32 1, label %choose_line_function.exit
      i32 2, label %choose_line_function.exit
    ]
  
  ; <label>:45                                      ; preds = %42
    br label %choose_line_function.exit
  
  ; <label>:46                                      ; preds = %25
    %47 = trunc i16 %15 to i8
    %48 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 33, i32 4
    %49 = load float, float* %48, align 4, !tbaa !72
    %50 = fcmp oeq float %49, 1.000000e+00
    %51 = icmp eq i8 %47, 0
    %or.cond1.i = and i1 %51, %50
    br i1 %or.cond1.i, label %52, label %choose_line_function.exit
  
  ; <label>:52                                      ; preds = %46
    %53 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 3
    %54 = load i32, i32* %53, align 4, !tbaa !9
    switch i32 %54, label %55 [
      i32 6408, label %choose_line_function.exit
      i32 1, label %choose_line_function.exit
      i32 2, label %choose_line_function.exit
    ]
  
  ; <label>:55                                      ; preds = %52
    br label %choose_line_function.exit
  
  choose_line_function.exit:                        ; preds = %55, %52, %52, %52, %46, %45, %42, %42, %42, %36, %32, %28, %25, %21, %17, %0
    %.0.i = phi void (%struct.gl_context*, i32, i32, i32)* [ null, %45 ], [ null, %55 ], [ null, %0 ], [ null, %17 ], [ null, %21 ], [ @flat_color_z_line, %42 ], [ @flat_color_z_line, %42 ], [ @flat_color_z_line, %42 ], [ @flat_color_line, %52 ], [ @flat_color_line, %52 ], [ @flat_color_line, %52 ], [ null, %46 ], [ null, %36 ], [ null, %32 ], [ null, %28 ], [ null, %25 ]
    %56 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 34
    store void (%struct.gl_context*, i32, i32, i32)* %.0.i, void (%struct.gl_context*, i32, i32, i32)** %56, align 4, !tbaa !73
    %57 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 3
    %58 = load i32, i32* %57, align 4, !tbaa !9
    switch i32 %58, label %59 [
      i32 6407, label %choose_triangle_function.exit
      i32 4, label %choose_triangle_function.exit
    ]
  
  ; <label>:59                                      ; preds = %choose_line_function.exit
    %60 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 37, i32 7
    %61 = bitcast i8* %60 to i16*
    %62 = load i16, i16* %61, align 4
    %63 = icmp ult i16 %62, 256
    %64 = trunc i16 %62 to i8
    %65 = icmp eq i8 %64, 0
    %or.cond2.i = and i1 %63, %65
    br i1 %or.cond2.i, label %66, label %choose_triangle_function.exit
  
  ; <label>:66                                      ; preds = %59
    %67 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 0
    %68 = load i32, i32* %67, align 4, !tbaa !67
    %69 = icmp eq i32 %68, 0
    br i1 %69, label %70, label %choose_triangle_function.exit
  
  ; <label>:70                                      ; preds = %66
    %71 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 58
    %72 = load i32, i32* %71, align 4, !tbaa !69
    %73 = icmp eq i32 %72, 4
    br i1 %73, label %74, label %choose_triangle_function.exit
  
  ; <label>:74                                      ; preds = %70
    %75 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %76 = load i32, i32* %75, align 4, !tbaa !70
    %77 = icmp eq i32 %76, 513
    br i1 %77, label %78, label %choose_triangle_function.exit
  
  ; <label>:78                                      ; preds = %74
    %79 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %80 = load i8, i8* %79, align 1, !tbaa !71
    %81 = icmp ne i8 %80, 1
    %82 = icmp eq i32 %58, 6400
    %or.cond.i1 = or i1 %82, %81
    br i1 %or.cond.i1, label %choose_triangle_function.exit, label %83
  
  ; <label>:83                                      ; preds = %78
    %84 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %85 = load i32, i32* %84, align 4, !tbaa !68
    %86 = icmp eq i32 %85, 7425
    %smooth_color_z_triangle.flat_color_z_triangle.i = select i1 %86, void (%struct.gl_context*, i32, i32, i32, i32)* @smooth_color_z_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @flat_color_z_triangle
    br label %choose_triangle_function.exit
  
  choose_triangle_function.exit:                    ; preds = %83, %78, %74, %70, %66, %59, %choose_line_function.exit, %choose_line_function.exit
    %.0.i2 = phi void (%struct.gl_context*, i32, i32, i32, i32)* [ null, %choose_line_function.exit ], [ null, %choose_line_function.exit ], [ null, %59 ], [ null, %66 ], [ %smooth_color_z_triangle.flat_color_z_triangle.i, %83 ], [ null, %78 ], [ null, %74 ], [ null, %70 ]
    %87 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 35
    store void (%struct.gl_context*, i32, i32, i32, i32)* %.0.i2, void (%struct.gl_context*, i32, i32, i32, i32)** %87, align 4, !tbaa !74
    %88 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 8
    store void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)* @write_color_span, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)** %88, align 4, !tbaa !75
    %89 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 10
    store void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)* @write_color_pixels, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)** %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 12
    store void (%struct.gl_context*, i32, i32, i32, i32*, i8*)* @write_index_span, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)** %90, align 4, !tbaa !77
    %91 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 9
    store void (%struct.gl_context*, i32, i32, i32, i8*)* @write_monocolor_span, void (%struct.gl_context*, i32, i32, i32, i8*)** %91, align 4, !tbaa !78
    %92 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 13
    store void (%struct.gl_context*, i32, i32, i32, i8*)* @write_monoindex_span, void (%struct.gl_context*, i32, i32, i32, i8*)** %92, align 4, !tbaa !79
    %93 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 14
    store void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)* @write_index_pixels, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)** %93, align 4, !tbaa !80
    %94 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 11
    store void (%struct.gl_context*, i32, i32*, i32*, i8*)* @write_monocolor_pixels, void (%struct.gl_context*, i32, i32*, i32*, i8*)** %94, align 4, !tbaa !81
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 15
    store void (%struct.gl_context*, i32, i32*, i32*, i8*)* @write_monoindex_pixels, void (%struct.gl_context*, i32, i32*, i32*, i8*)** %95, align 4, !tbaa !82
    %96 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 17
    store void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)* @read_color_span, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)** %96, align 4, !tbaa !83
    %97 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 16
    store void (%struct.gl_context*, i32, i32, i32, i32*)* @read_index_span, void (%struct.gl_context*, i32, i32, i32, i32*)** %97, align 4, !tbaa !84
    %98 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 19
    store void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)* @read_color_pixels, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)** %98, align 4, !tbaa !85
    %99 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 18
    store void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)* @read_index_pixels, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)** %99, align 4, !tbaa !86
    switch i32 %58, label %101 [
      i32 6407, label %100
      i32 4, label %100
    ]
  
  ; <label>:100                                     ; preds = %choose_triangle_function.exit, %choose_triangle_function.exit
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2060
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)**
    store void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)* @write_color_span3, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)** %sunkaddr2, align 4, !tbaa !75
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 2068
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)**
    store void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)* @write_color_pixels3, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)** %sunkaddr5, align 4, !tbaa !76
    %sunkaddr6 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr7 = add i32 %sunkaddr6, 2064
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to void (%struct.gl_context*, i32, i32, i32, i8*)**
    store void (%struct.gl_context*, i32, i32, i32, i8*)* @write_monocolor_span3, void (%struct.gl_context*, i32, i32, i32, i8*)** %sunkaddr8, align 4, !tbaa !78
    %sunkaddr9 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr10 = add i32 %sunkaddr9, 2072
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to void (%struct.gl_context*, i32, i32*, i32*, i8*)**
    store void (%struct.gl_context*, i32, i32*, i32*, i8*)* @write_monocolor_pixels3, void (%struct.gl_context*, i32, i32*, i32*, i8*)** %sunkaddr11, align 4, !tbaa !81
    %sunkaddr12 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr12, 2096
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)**
    store void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)* @read_color_span3, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)** %sunkaddr14, align 4, !tbaa !83
    %sunkaddr15 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr16 = add i32 %sunkaddr15, 2104
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)**
    store void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)* @read_color_pixels3, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)** %sunkaddr17, align 4, !tbaa !85
    br label %101
  
  ; <label>:101                                     ; preds = %100, %choose_triangle_function.exit
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal fastcc void @compute_row_addresses(%struct.osmesa_context* %ctx) unnamed_addr #3 {
    %1 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 18
    %2 = load i8, i8* %1, align 4, !tbaa !10
    %3 = icmp eq i8 %2, 0
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 3
    %5 = load i32, i32* %4, align 4, !tbaa !9
    br i1 %3, label %36, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = icmp eq i32 %5, 6400
    br i1 %7, label %8, label %17
  
  ; <label>:8                                       ; preds = %6
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %10 = load i8*, i8** %9, align 4, !tbaa !18
    %scevgep19 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep1920 = bitcast i8** %scevgep19 to %struct.osmesa_context*
    br label %11
  
  ; <label>:11                                      ; preds = %11, %8
    %lsr.iv21 = phi %struct.osmesa_context* [ %16, %11 ], [ %scevgep1920, %8 ]
    %i.014 = phi i32 [ 0, %8 ], [ %15, %11 ]
    %lsr.iv2123 = bitcast %struct.osmesa_context* %lsr.iv21 to i8**
    %sunkaddr = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr36 = add i32 %sunkaddr, 36
    %sunkaddr37 = inttoptr i32 %sunkaddr36 to i32*
    %12 = load i32, i32* %sunkaddr37, align 4, !tbaa !21
    %13 = mul nsw i32 %12, %i.014
    %14 = getelementptr inbounds i8, i8* %10, i32 %13
    store i8* %14, i8** %lsr.iv2123, align 4, !tbaa !22
    %15 = add nuw nsw i32 %i.014, 1
    %scevgep22 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv21, i32 0, i32 1
    %16 = bitcast %struct.gl_visual** %scevgep22 to %struct.osmesa_context*
    %exitcond24 = icmp eq i32 %15, 1024
    br i1 %exitcond24, label %.loopexit, label %11
  
  ; <label>:17                                      ; preds = %6
    switch i32 %5, label %26 [
      i32 6407, label %18
      i32 4, label %18
    ]
  
  ; <label>:18                                      ; preds = %17, %17
    %19 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %20 = load i8*, i8** %19, align 4, !tbaa !18
    %scevgep31 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep3132 = bitcast i8** %scevgep31 to %struct.osmesa_context*
    br label %21
  
  ; <label>:21                                      ; preds = %21, %18
    %lsr.iv33 = phi %struct.osmesa_context* [ %25, %21 ], [ %scevgep3132, %18 ]
    %lsr.iv29 = phi i32 [ %lsr.iv.next30, %21 ], [ 0, %18 ]
    %lsr.iv3335 = bitcast %struct.osmesa_context* %lsr.iv33 to i8**
    %sunkaddr38 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr39 = add i32 %sunkaddr38, 36
    %sunkaddr40 = inttoptr i32 %sunkaddr39 to i32*
    %22 = load i32, i32* %sunkaddr40, align 4, !tbaa !21
    %23 = mul i32 %lsr.iv29, %22
    %24 = getelementptr inbounds i8, i8* %20, i32 %23
    store i8* %24, i8** %lsr.iv3335, align 4, !tbaa !22
    %lsr.iv.next30 = add nuw nsw i32 %lsr.iv29, 3
    %scevgep34 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv33, i32 0, i32 1
    %25 = bitcast %struct.gl_visual** %scevgep34 to %struct.osmesa_context*
    %exitcond26 = icmp eq i32 %lsr.iv.next30, 3072
    br i1 %exitcond26, label %.loopexit, label %21
  
  ; <label>:26                                      ; preds = %17
    %27 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %28 = bitcast i8** %27 to i32**
    %29 = load i32*, i32** %28, align 4, !tbaa !18
    %scevgep24 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep2425 = bitcast i8** %scevgep24 to %struct.osmesa_context*
    br label %30
  
  ; <label>:30                                      ; preds = %30, %26
    %lsr.iv26 = phi %struct.osmesa_context* [ %35, %30 ], [ %scevgep2425, %26 ]
    %i.215 = phi i32 [ 0, %26 ], [ %34, %30 ]
    %lsr.iv2628 = bitcast %struct.osmesa_context* %lsr.iv26 to i32**
    %sunkaddr41 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr42 = add i32 %sunkaddr41, 36
    %sunkaddr43 = inttoptr i32 %sunkaddr42 to i32*
    %31 = load i32, i32* %sunkaddr43, align 4, !tbaa !21
    %32 = mul nsw i32 %31, %i.215
    %33 = getelementptr inbounds i32, i32* %29, i32 %32
    store i32* %33, i32** %lsr.iv2628, align 4, !tbaa !22
    %34 = add nuw nsw i32 %i.215, 1
    %scevgep27 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv26, i32 0, i32 1
    %35 = bitcast %struct.gl_visual** %scevgep27 to %struct.osmesa_context*
    %exitcond25 = icmp eq i32 %34, 1024
    br i1 %exitcond25, label %.loopexit, label %30
  
  ; <label>:36                                      ; preds = %0
    %37 = icmp eq i32 %5, 6400
    br i1 %37, label %38, label %48
  
  ; <label>:38                                      ; preds = %36
    %39 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %40 = load i8*, i8** %39, align 4, !tbaa !18
    %scevgep = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep1 = bitcast i8** %scevgep to %struct.osmesa_context*
    br label %41
  
  ; <label>:41                                      ; preds = %41, %38
    %lsr.iv2 = phi %struct.osmesa_context* [ %47, %41 ], [ %scevgep1, %38 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %41 ], [ -1, %38 ]
    %lsr.iv24 = bitcast %struct.osmesa_context* %lsr.iv2 to i8**
    %sunkaddr44 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr45 = add i32 %sunkaddr44, 24
    %sunkaddr46 = inttoptr i32 %sunkaddr45 to i32*
    %42 = load i32, i32* %sunkaddr46, align 4, !tbaa !20
    %sunkaddr47 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr48 = add i32 %sunkaddr47, 36
    %sunkaddr49 = inttoptr i32 %sunkaddr48 to i32*
    %43 = load i32, i32* %sunkaddr49, align 4, !tbaa !21
    %44 = add i32 %lsr.iv, %42
    %45 = mul nsw i32 %44, %43
    %46 = getelementptr inbounds i8, i8* %40, i32 %45
    store i8* %46, i8** %lsr.iv24, align 4, !tbaa !22
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %scevgep3 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv2, i32 0, i32 1
    %47 = bitcast %struct.gl_visual** %scevgep3 to %struct.osmesa_context*
    %exitcond = icmp eq i32 %lsr.iv.next, -1025
    br i1 %exitcond, label %.loopexit, label %41
  
  ; <label>:48                                      ; preds = %36
    switch i32 %5, label %60 [
      i32 6407, label %49
      i32 4, label %49
    ]
  
  ; <label>:49                                      ; preds = %48, %48
    %50 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %51 = load i8*, i8** %50, align 4, !tbaa !18
    %scevgep14 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep1415 = bitcast i8** %scevgep14 to %struct.osmesa_context*
    br label %52
  
  ; <label>:52                                      ; preds = %52, %49
    %lsr.iv16 = phi %struct.osmesa_context* [ %59, %52 ], [ %scevgep1415, %49 ]
    %lsr.iv12 = phi i32 [ %lsr.iv.next13, %52 ], [ -1, %49 ]
    %lsr.iv1618 = bitcast %struct.osmesa_context* %lsr.iv16 to i8**
    %sunkaddr50 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr51 = add i32 %sunkaddr50, 24
    %sunkaddr52 = inttoptr i32 %sunkaddr51 to i32*
    %53 = load i32, i32* %sunkaddr52, align 4, !tbaa !20
    %sunkaddr53 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr53, 36
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %54 = load i32, i32* %sunkaddr55, align 4, !tbaa !21
    %55 = mul nsw i32 %54, 3
    %56 = add i32 %lsr.iv12, %53
    %57 = mul nsw i32 %55, %56
    %58 = getelementptr inbounds i8, i8* %51, i32 %57
    store i8* %58, i8** %lsr.iv1618, align 4, !tbaa !22
    %lsr.iv.next13 = add nsw i32 %lsr.iv12, -1
    %scevgep17 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv16, i32 0, i32 1
    %59 = bitcast %struct.gl_visual** %scevgep17 to %struct.osmesa_context*
    %exitcond23 = icmp eq i32 %lsr.iv.next13, -1025
    br i1 %exitcond23, label %.loopexit, label %52
  
  ; <label>:60                                      ; preds = %48
    %61 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 4
    %62 = bitcast i8** %61 to i32**
    %63 = load i32*, i32** %62, align 4, !tbaa !18
    %scevgep7 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %ctx, i32 0, i32 17, i32 0
    %scevgep78 = bitcast i8** %scevgep7 to %struct.osmesa_context*
    br label %64
  
  ; <label>:64                                      ; preds = %64, %60
    %lsr.iv9 = phi %struct.osmesa_context* [ %70, %64 ], [ %scevgep78, %60 ]
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %64 ], [ -1, %60 ]
    %lsr.iv911 = bitcast %struct.osmesa_context* %lsr.iv9 to i32**
    %sunkaddr56 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr57 = add i32 %sunkaddr56, 24
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to i32*
    %65 = load i32, i32* %sunkaddr58, align 4, !tbaa !20
    %sunkaddr59 = ptrtoint %struct.osmesa_context* %ctx to i32
    %sunkaddr60 = add i32 %sunkaddr59, 36
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to i32*
    %66 = load i32, i32* %sunkaddr61, align 4, !tbaa !21
    %67 = add i32 %lsr.iv5, %65
    %68 = mul nsw i32 %67, %66
    %69 = getelementptr inbounds i32, i32* %63, i32 %68
    store i32* %69, i32** %lsr.iv911, align 4, !tbaa !22
    %lsr.iv.next6 = add nsw i32 %lsr.iv5, -1
    %scevgep10 = getelementptr %struct.osmesa_context, %struct.osmesa_context* %lsr.iv9, i32 0, i32 1
    %70 = bitcast %struct.gl_visual** %scevgep10 to %struct.osmesa_context*
    %exitcond22 = icmp eq i32 %lsr.iv.next6, -1025
    br i1 %exitcond22, label %.loopexit, label %64
  
  .loopexit:                                        ; preds = %21, %30, %11, %52, %64, %41
    ret void
  }
  
  declare void @gl_Viewport(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i32 signext) #2
  
  ; Function Attrs: norecurse nounwind readonly
  define %struct.osmesa_context* @OSMesaGetCurrentContext() #4 {
    %1 = load %struct.osmesa_context*, %struct.osmesa_context** @Current, align 4, !tbaa !22
    ret %struct.osmesa_context* %1
  }
  
  ; Function Attrs: nounwind
  define void @OSMesaPixelStore(i32 signext %pname, i32 signext %value) #0 {
    %1 = load %struct.osmesa_context*, %struct.osmesa_context** @Current, align 4, !tbaa !22
    switch i32 %pname, label %13 [
      i32 16, label %2
      i32 17, label %9
    ]
  
  ; <label>:2                                       ; preds = %0
    %3 = icmp slt i32 %value, 0
    br i1 %3, label %4, label %7
  
  ; <label>:4                                       ; preds = %2
    %5 = bitcast %struct.osmesa_context* %1 to %struct.gl_context**
    %6 = load %struct.gl_context*, %struct.gl_context** %5, align 4, !tbaa !7
    tail call void @gl_error(%struct.gl_context* %6, i32 signext 1281, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0)) #6
    br label %17
  
  ; <label>:7                                       ; preds = %2
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 9
    store i32 %value, i32* %8, align 4, !tbaa !21
    br label %16
  
  ; <label>:9                                       ; preds = %0
    %10 = icmp ne i32 %value, 0
    %11 = zext i1 %10 to i8
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 18
    store i8 %11, i8* %12, align 4, !tbaa !10
    br label %16
  
  ; <label>:13                                      ; preds = %0
    %14 = bitcast %struct.osmesa_context* %1 to %struct.gl_context**
    %15 = load %struct.gl_context*, %struct.gl_context** %14, align 4, !tbaa !7
    tail call void @gl_error(%struct.gl_context* %15, i32 signext 1280, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i32 0, i32 0)) #6
    br label %17
  
  ; <label>:16                                      ; preds = %9, %7
    tail call fastcc void @compute_row_addresses(%struct.osmesa_context* nonnull %1)
    br label %17
  
  ; <label>:17                                      ; preds = %16, %13, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #2
  
  ; Function Attrs: nounwind
  define void @OSMesaGetIntegerv(i32 signext %pname, i32* nocapture %value) #0 {
    %1 = load %struct.osmesa_context*, %struct.osmesa_context** @Current, align 4, !tbaa !22
    switch i32 %pname, label %19 [
      i32 32, label %2
      i32 33, label %5
      i32 34, label %8
      i32 35, label %11
      i32 16, label %12
      i32 17, label %15
    ]
  
  ; <label>:2                                       ; preds = %0
    %3 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 5
    %4 = load i32, i32* %3, align 4, !tbaa !19
    store i32 %4, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 6
    %7 = load i32, i32* %6, align 4, !tbaa !20
    store i32 %7, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 3
    %10 = load i32, i32* %9, align 4, !tbaa !9
    store i32 %10, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:11                                      ; preds = %0
    store i32 5121, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:12                                      ; preds = %0
    %13 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 9
    %14 = load i32, i32* %13, align 4, !tbaa !21
    store i32 %14, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:15                                      ; preds = %0
    %16 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %1, i32 0, i32 18
    %17 = load i8, i8* %16, align 4, !tbaa !10
    %18 = zext i8 %17 to i32
    store i32 %18, i32* %value, align 4, !tbaa !87
    br label %22
  
  ; <label>:19                                      ; preds = %0
    %20 = bitcast %struct.osmesa_context* %1 to %struct.gl_context**
    %21 = load %struct.gl_context*, %struct.gl_context** %20, align 4, !tbaa !7
    tail call void @gl_error(%struct.gl_context* %21, i32 signext 1280, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i32 0, i32 0)) #6
    br label %22
  
  ; <label>:22                                      ; preds = %19, %15, %12, %11, %8, %5, %2
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal zeroext i8 @set_buffer(%struct.gl_context* nocapture readnone %ctx, i32 signext %mode) #5 {
    %1 = icmp eq i32 %mode, 1028
    %. = zext i1 %1 to i8
    ret i8 %.
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @set_color(%struct.gl_context* nocapture readonly %ctx, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = zext i8 %r to i32
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %6 = load i32, i32* %5, align 4, !tbaa !11
    %7 = shl i32 %4, %6
    %8 = zext i8 %g to i32
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %10 = load i32, i32* %9, align 4, !tbaa !12
    %11 = shl i32 %8, %10
    %12 = or i32 %11, %7
    %13 = zext i8 %b to i32
    %14 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %15 = load i32, i32* %14, align 4, !tbaa !13
    %16 = shl i32 %13, %15
    %17 = or i32 %12, %16
    %18 = zext i8 %a to i32
    %19 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %20 = load i32, i32* %19, align 4, !tbaa !14
    %21 = shl i32 %18, %20
    %22 = or i32 %17, %21
    %23 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 7
    store i32 %22, i32* %23, align 4, !tbaa !88
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @set_index(%struct.gl_context* nocapture readonly %ctx, i32 signext %index) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 7
    store i32 %index, i32* %4, align 4, !tbaa !88
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @clear_index(%struct.gl_context* nocapture readonly %ctx, i32 signext %index) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 8
    store i32 %index, i32* %4, align 4, !tbaa !89
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @clear_color(%struct.gl_context* nocapture readonly %ctx, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = zext i8 %r to i32
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %6 = load i32, i32* %5, align 4, !tbaa !11
    %7 = shl i32 %4, %6
    %8 = zext i8 %g to i32
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %10 = load i32, i32* %9, align 4, !tbaa !12
    %11 = shl i32 %8, %10
    %12 = or i32 %11, %7
    %13 = zext i8 %b to i32
    %14 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %15 = load i32, i32* %14, align 4, !tbaa !13
    %16 = shl i32 %13, %15
    %17 = or i32 %12, %16
    %18 = zext i8 %a to i32
    %19 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %20 = load i32, i32* %19, align 4, !tbaa !14
    %21 = shl i32 %18, %20
    %22 = or i32 %17, %21
    %23 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 8
    store i32 %22, i32* %23, align 4, !tbaa !89
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @clear(%struct.gl_context* nocapture readonly %ctx, i8 zeroext %all, i32 signext %x, i32 signext %y, i32 signext %width, i32 signext %height) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 3
    %5 = load i32, i32* %4, align 4, !tbaa !9
    switch i32 %5, label %76 [
      i32 6400, label %6
      i32 6407, label %30
      i32 4, label %30
    ]
  
  ; <label>:6                                       ; preds = %0
    %7 = icmp eq i8 %all, 0
    br i1 %7, label %.preheader11, label %9
  
  .preheader11:                                     ; preds = %6
    %8 = icmp eq i32 %height, 0
    br i1 %8, label %.loopexit, label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.preheader11
    br label %20
  
  ; <label>:9                                       ; preds = %6
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 4
    %11 = load i8*, i8** %10, align 4, !tbaa !18
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 8
    %13 = load i32, i32* %12, align 4, !tbaa !89
    %14 = trunc i32 %13 to i8
    %15 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 9
    %16 = load i32, i32* %15, align 4, !tbaa !21
    %17 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 6
    %18 = load i32, i32* %17, align 4, !tbaa !20
    %19 = mul nsw i32 %18, %16
    tail call void @llvm.memset.p0i8.i32(i8* %11, i8 %14, i32 %19, i32 1, i1 false)
    br label %.loopexit
  
  ; <label>:20                                      ; preds = %._crit_edge28, %.lr.ph30
    %i.029 = phi i32 [ 0, %.lr.ph30 ], [ %29, %._crit_edge28 ]
    %21 = icmp eq i32 %width, 0
    br i1 %21, label %._crit_edge28, label %.lr.ph27.preheader
  
  .lr.ph27.preheader:                               ; preds = %20
    %22 = add i32 %i.029, %y
    %23 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %22
    %24 = load i8*, i8** %23, align 4, !tbaa !22
    %25 = getelementptr inbounds i8, i8* %24, i32 %x
    br label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.lr.ph27, %.lr.ph27.preheader
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %.lr.ph27 ], [ %width, %.lr.ph27.preheader ]
    %ptr1.024 = phi i8* [ %28, %.lr.ph27 ], [ %25, %.lr.ph27.preheader ]
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr26 = add i32 %sunkaddr, 32
    %sunkaddr27 = inttoptr i32 %sunkaddr26 to i32*
    %26 = load i32, i32* %sunkaddr27, align 4, !tbaa !89
    %27 = trunc i32 %26 to i8
    %28 = getelementptr inbounds i8, i8* %ptr1.024, i32 1
    store i8 %27, i8* %ptr1.024, align 1, !tbaa !90
    %lsr.iv.next4 = add i32 %lsr.iv3, -1
    %exitcond48 = icmp eq i32 %lsr.iv.next4, 0
    br i1 %exitcond48, label %._crit_edge28, label %.lr.ph27
  
  ._crit_edge28:                                    ; preds = %.lr.ph27, %20
    %29 = add nuw i32 %i.029, 1
    %exitcond49 = icmp eq i32 %29, %height
    br i1 %exitcond49, label %.loopexit, label %20
  
  ; <label>:30                                      ; preds = %0, %0
    %31 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 8
    %32 = load i32, i32* %31, align 4, !tbaa !89
    %33 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %34 = load i32, i32* %33, align 4, !tbaa !11
    %35 = lshr i32 %32, %34
    %36 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %37 = load i32, i32* %36, align 4, !tbaa !12
    %38 = lshr i32 %32, %37
    %39 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %40 = load i32, i32* %39, align 4, !tbaa !13
    %41 = lshr i32 %32, %40
    %42 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %43 = load i32, i32* %42, align 4, !tbaa !15
    %44 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %45 = load i32, i32* %44, align 4, !tbaa !16
    %46 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %47 = load i32, i32* %46, align 4, !tbaa !17
    %48 = icmp eq i8 %all, 0
    br i1 %48, label %.preheader13, label %54
  
  .preheader13:                                     ; preds = %30
    %49 = icmp eq i32 %height, 0
    br i1 %49, label %.loopexit, label %.lr.ph37
  
  .lr.ph37:                                         ; preds = %.preheader13
    %50 = mul nsw i32 %x, 3
    %51 = add i32 %47, %50
    %52 = add i32 %45, %50
    %53 = add i32 %43, %50
    br label %67
  
  ; <label>:54                                      ; preds = %30
    %55 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 9
    %56 = load i32, i32* %55, align 4, !tbaa !21
    %57 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 6
    %58 = load i32, i32* %57, align 4, !tbaa !20
    %59 = mul i32 %58, %56
    %60 = icmp eq i32 %59, 0
    br i1 %60, label %.loopexit, label %.lr.ph41.preheader
  
  .lr.ph41.preheader:                               ; preds = %54
    %61 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 4
    %62 = load i8*, i8** %61, align 4, !tbaa !18
    %scevgep15 = getelementptr i8, i8* %62, i32 %47
    %scevgep18 = getelementptr i8, i8* %62, i32 %45
    %scevgep21 = getelementptr i8, i8* %62, i32 %43
    %63 = mul i32 %58, %56
    br label %.lr.ph41
  
  .lr.ph41:                                         ; preds = %.lr.ph41, %.lr.ph41.preheader
    %lsr.iv24 = phi i32 [ %lsr.iv.next25, %.lr.ph41 ], [ %63, %.lr.ph41.preheader ]
    %lsr.iv22 = phi i8* [ %scevgep23, %.lr.ph41 ], [ %scevgep21, %.lr.ph41.preheader ]
    %lsr.iv19 = phi i8* [ %scevgep20, %.lr.ph41 ], [ %scevgep18, %.lr.ph41.preheader ]
    %lsr.iv16 = phi i8* [ %scevgep17, %.lr.ph41 ], [ %scevgep15, %.lr.ph41.preheader ]
    %64 = trunc i32 %41 to i8
    %65 = trunc i32 %38 to i8
    %66 = trunc i32 %35 to i8
    store i8 %66, i8* %lsr.iv22, align 1, !tbaa !90
    store i8 %65, i8* %lsr.iv19, align 1, !tbaa !90
    store i8 %64, i8* %lsr.iv16, align 1, !tbaa !90
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 3
    %scevgep20 = getelementptr i8, i8* %lsr.iv19, i32 3
    %scevgep23 = getelementptr i8, i8* %lsr.iv22, i32 3
    %lsr.iv.next25 = add i32 %lsr.iv24, -1
    %exitcond52 = icmp eq i32 %lsr.iv.next25, 0
    br i1 %exitcond52, label %.loopexit, label %.lr.ph41
  
  ; <label>:67                                      ; preds = %._crit_edge35, %.lr.ph37
    %i2.036 = phi i32 [ 0, %.lr.ph37 ], [ %75, %._crit_edge35 ]
    %68 = icmp eq i32 %width, 0
    br i1 %68, label %._crit_edge35, label %.lr.ph34.preheader
  
  .lr.ph34.preheader:                               ; preds = %67
    %69 = add i32 %i2.036, %y
    %70 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %69
    %71 = load i8*, i8** %70, align 4, !tbaa !22
    %scevgep = getelementptr i8, i8* %71, i32 %51
    %scevgep7 = getelementptr i8, i8* %71, i32 %52
    %scevgep10 = getelementptr i8, i8* %71, i32 %53
    br label %.lr.ph34
  
  .lr.ph34:                                         ; preds = %.lr.ph34, %.lr.ph34.preheader
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph34 ], [ %width, %.lr.ph34.preheader ]
    %lsr.iv11 = phi i8* [ %scevgep12, %.lr.ph34 ], [ %scevgep10, %.lr.ph34.preheader ]
    %lsr.iv8 = phi i8* [ %scevgep9, %.lr.ph34 ], [ %scevgep7, %.lr.ph34.preheader ]
    %lsr.iv5 = phi i8* [ %scevgep6, %.lr.ph34 ], [ %scevgep, %.lr.ph34.preheader ]
    %72 = trunc i32 %41 to i8
    %73 = trunc i32 %38 to i8
    %74 = trunc i32 %35 to i8
    store i8 %74, i8* %lsr.iv11, align 1, !tbaa !90
    store i8 %73, i8* %lsr.iv8, align 1, !tbaa !90
    store i8 %72, i8* %lsr.iv5, align 1, !tbaa !90
    %scevgep6 = getelementptr i8, i8* %lsr.iv5, i32 3
    %scevgep9 = getelementptr i8, i8* %lsr.iv8, i32 3
    %scevgep12 = getelementptr i8, i8* %lsr.iv11, i32 3
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %exitcond50 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond50, label %._crit_edge35, label %.lr.ph34
  
  ._crit_edge35:                                    ; preds = %.lr.ph34, %67
    %75 = add nuw i32 %i2.036, 1
    %exitcond51 = icmp eq i32 %75, %height
    br i1 %exitcond51, label %.loopexit, label %67
  
  ; <label>:76                                      ; preds = %0
    %77 = icmp eq i8 %all, 0
    br i1 %77, label %.preheader, label %79
  
  .preheader:                                       ; preds = %76
    %78 = icmp eq i32 %height, 0
    br i1 %78, label %.loopexit, label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.preheader
    br label %93
  
  ; <label>:79                                      ; preds = %76
    %80 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 9
    %81 = load i32, i32* %80, align 4, !tbaa !21
    %82 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 6
    %83 = load i32, i32* %82, align 4, !tbaa !20
    %84 = mul i32 %83, %81
    %85 = icmp eq i32 %84, 0
    br i1 %85, label %.loopexit, label %.lr.ph23
  
  .lr.ph23:                                         ; preds = %79
    %86 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 4
    %87 = bitcast i8** %86 to i32**
    %88 = load i32*, i32** %87, align 4, !tbaa !18
    %89 = mul i32 %83, %81
    br label %90
  
  ; <label>:90                                      ; preds = %90, %.lr.ph23
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %90 ], [ %89, %.lr.ph23 ]
    %ptr4.021 = phi i32* [ %88, %.lr.ph23 ], [ %92, %90 ]
    %sunkaddr28 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr29 = add i32 %sunkaddr28, 32
    %sunkaddr30 = inttoptr i32 %sunkaddr29 to i32*
    %91 = load i32, i32* %sunkaddr30, align 4, !tbaa !89
    %92 = getelementptr inbounds i32, i32* %ptr4.021, i32 1
    store i32 %91, i32* %ptr4.021, align 4, !tbaa !87
    %lsr.iv.next2 = add i32 %lsr.iv1, -1
    %exitcond47 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %exitcond47, label %.loopexit, label %90
  
  ; <label>:93                                      ; preds = %._crit_edge, %.lr.ph19
    %i7.018 = phi i32 [ 0, %.lr.ph19 ], [ %102, %._crit_edge ]
    %94 = icmp eq i32 %width, 0
    br i1 %94, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %93
    %95 = add i32 %i7.018, %y
    %96 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %95
    %97 = bitcast i8** %96 to i32**
    %98 = load i32*, i32** %97, align 4, !tbaa !22
    %99 = getelementptr inbounds i32, i32* %98, i32 %x
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %width, %.lr.ph.preheader ]
    %ptr49.017 = phi i32* [ %101, %.lr.ph ], [ %99, %.lr.ph.preheader ]
    %sunkaddr31 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr32 = add i32 %sunkaddr31, 32
    %sunkaddr33 = inttoptr i32 %sunkaddr32 to i32*
    %100 = load i32, i32* %sunkaddr33, align 4, !tbaa !89
    %101 = getelementptr inbounds i32, i32* %ptr49.017, i32 1
    store i32 %100, i32* %ptr49.017, align 4, !tbaa !87
    %lsr.iv.next = add i32 %lsr.iv, -1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %93
    %102 = add nuw i32 %i7.018, 1
    %exitcond46 = icmp eq i32 %102, %height
    br i1 %exitcond46, label %.loopexit, label %93
  
  .loopexit:                                        ; preds = %.lr.ph41, %._crit_edge35, %._crit_edge28, %90, %._crit_edge, %79, %.preheader, %54, %.preheader13, %9, %.preheader11
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @buffer_size(%struct.gl_context* nocapture readonly %ctx, i32* nocapture %width, i32* nocapture %height) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 5
    %5 = load i32, i32* %4, align 4, !tbaa !19
    store i32 %5, i32* %width, align 4, !tbaa !87
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 6
    %7 = load i32, i32* %6, align 4, !tbaa !20
    store i32 %7, i32* %height, align 4, !tbaa !87
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_color_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %red, i8* nocapture readonly %green, i8* nocapture readonly %blue, i8* nocapture readonly %alpha, i8* readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %5 = bitcast i8** %4 to i32**
    %6 = load i32*, i32** %5, align 4, !tbaa !22
    %7 = getelementptr inbounds i32, i32* %6, i32 %x
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %9 = load i32, i32* %8, align 4, !tbaa !11
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %11 = load i32, i32* %10, align 4, !tbaa !12
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %13 = load i32, i32* %12, align 4, !tbaa !13
    %14 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %15 = load i32, i32* %14, align 4, !tbaa !14
    %16 = icmp eq i8* %mask, null
    br i1 %16, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %0
    %17 = icmp ne i32 %n, 0
    br i1 %17, label %.lr.ph7, label %.loopexit
  
  .preheader:                                       ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph, label %.loopexit
  
  .lr.ph7:                                          ; preds = %.preheader1, %37
    %lsr.iv18 = phi i8* [ %scevgep19, %37 ], [ %mask, %.preheader1 ]
    %lsr.iv16 = phi i8* [ %scevgep17, %37 ], [ %red, %.preheader1 ]
    %lsr.iv14 = phi i8* [ %scevgep15, %37 ], [ %green, %.preheader1 ]
    %lsr.iv12 = phi i8* [ %scevgep13, %37 ], [ %blue, %.preheader1 ]
    %lsr.iv10 = phi i8* [ %scevgep11, %37 ], [ %alpha, %.preheader1 ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next9, %37 ], [ %n, %.preheader1 ]
    %ptr4.06 = phi i32* [ %38, %37 ], [ %7, %.preheader1 ]
    %19 = load i8, i8* %lsr.iv18, align 1, !tbaa !90
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %37, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph7
    %22 = load i8, i8* %lsr.iv16, align 1, !tbaa !90
    %23 = zext i8 %22 to i32
    %24 = shl i32 %23, %9
    %25 = load i8, i8* %lsr.iv14, align 1, !tbaa !90
    %26 = zext i8 %25 to i32
    %27 = shl i32 %26, %11
    %28 = or i32 %27, %24
    %29 = load i8, i8* %lsr.iv12, align 1, !tbaa !90
    %30 = zext i8 %29 to i32
    %31 = shl i32 %30, %13
    %32 = or i32 %28, %31
    %33 = load i8, i8* %lsr.iv10, align 1, !tbaa !90
    %34 = zext i8 %33 to i32
    %35 = shl i32 %34, %15
    %36 = or i32 %32, %35
    store i32 %36, i32* %ptr4.06, align 4, !tbaa !87
    br label %37
  
  ; <label>:37                                      ; preds = %21, %.lr.ph7
    %38 = getelementptr inbounds i32, i32* %ptr4.06, i32 1
    %lsr.iv.next9 = add i32 %lsr.iv8, -1
    %scevgep11 = getelementptr i8, i8* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i8, i8* %lsr.iv12, i32 1
    %scevgep15 = getelementptr i8, i8* %lsr.iv14, i32 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 1
    %scevgep19 = getelementptr i8, i8* %lsr.iv18, i32 1
    %exitcond9 = icmp eq i32 %lsr.iv.next9, 0
    br i1 %exitcond9, label %.loopexit, label %.lr.ph7
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %.lr.ph ], [ %red, %.preheader ]
    %lsr.iv4 = phi i8* [ %scevgep5, %.lr.ph ], [ %green, %.preheader ]
    %lsr.iv2 = phi i8* [ %scevgep3, %.lr.ph ], [ %blue, %.preheader ]
    %lsr.iv1 = phi i8* [ %scevgep, %.lr.ph ], [ %alpha, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.preheader ]
    %ptr4.14 = phi i32* [ %54, %.lr.ph ], [ %7, %.preheader ]
    %39 = load i8, i8* %lsr.iv6, align 1, !tbaa !90
    %40 = zext i8 %39 to i32
    %41 = shl i32 %40, %9
    %42 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %43 = zext i8 %42 to i32
    %44 = shl i32 %43, %11
    %45 = or i32 %44, %41
    %46 = load i8, i8* %lsr.iv2, align 1, !tbaa !90
    %47 = zext i8 %46 to i32
    %48 = shl i32 %47, %13
    %49 = or i32 %45, %48
    %50 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %51 = zext i8 %50 to i32
    %52 = shl i32 %51, %15
    %53 = or i32 %49, %52
    store i32 %53, i32* %ptr4.14, align 4, !tbaa !87
    %54 = getelementptr inbounds i32, i32* %ptr4.14, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %37, %.lr.ph, %.preheader, %.preheader1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_color_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture readonly %red, i8* nocapture readonly %green, i8* nocapture readonly %blue, i8* nocapture readonly %alpha, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %5 = load i32, i32* %4, align 4, !tbaa !11
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %7 = load i32, i32* %6, align 4, !tbaa !12
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %9 = load i32, i32* %8, align 4, !tbaa !13
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %11 = load i32, i32* %10, align 4, !tbaa !14
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %37
    %lsr.iv12 = phi i8* [ %scevgep13, %37 ], [ %mask, %0 ]
    %lsr.iv10 = phi i32* [ %scevgep11, %37 ], [ %y, %0 ]
    %lsr.iv8 = phi i32* [ %scevgep9, %37 ], [ %x, %0 ]
    %lsr.iv6 = phi i8* [ %scevgep7, %37 ], [ %red, %0 ]
    %lsr.iv4 = phi i8* [ %scevgep5, %37 ], [ %green, %0 ]
    %lsr.iv2 = phi i8* [ %scevgep3, %37 ], [ %blue, %0 ]
    %lsr.iv1 = phi i8* [ %scevgep, %37 ], [ %alpha, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %37 ], [ %n, %0 ]
    %13 = load i8, i8* %lsr.iv12, align 1, !tbaa !90
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %37, label %15
  
  ; <label>:15                                      ; preds = %.lr.ph
    %16 = load i32, i32* %lsr.iv10, align 4, !tbaa !87
    %17 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %16
    %18 = bitcast i8** %17 to i32**
    %19 = load i32*, i32** %18, align 4, !tbaa !22
    %20 = load i32, i32* %lsr.iv8, align 4, !tbaa !87
    %21 = getelementptr inbounds i32, i32* %19, i32 %20
    %22 = load i8, i8* %lsr.iv6, align 1, !tbaa !90
    %23 = zext i8 %22 to i32
    %24 = shl i32 %23, %5
    %25 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %26 = zext i8 %25 to i32
    %27 = shl i32 %26, %7
    %28 = or i32 %27, %24
    %29 = load i8, i8* %lsr.iv2, align 1, !tbaa !90
    %30 = zext i8 %29 to i32
    %31 = shl i32 %30, %9
    %32 = or i32 %28, %31
    %33 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %34 = zext i8 %33 to i32
    %35 = shl i32 %34, %11
    %36 = or i32 %32, %35
    store i32 %36, i32* %21, align 4, !tbaa !87
    br label %37
  
  ; <label>:37                                      ; preds = %15, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %scevgep9 = getelementptr i32, i32* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i32, i32* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i8, i8* %lsr.iv12, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %37, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_index_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32* nocapture readonly %index, i8* nocapture readonly %mask) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %2 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %3 = bitcast i8** %2 to %struct.osmesa_context**
    %4 = load %struct.osmesa_context*, %struct.osmesa_context** %3, align 4, !tbaa !57
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %4, i32 0, i32 17, i32 %y
    %6 = load i8*, i8** %5, align 4, !tbaa !22
    %7 = getelementptr inbounds i8, i8* %6, i32 %x
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv2 = phi i8* [ %scevgep3, %13 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv1 = phi i32* [ %scevgep, %13 ], [ %index, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %13 ], [ %n, %.lr.ph.preheader ]
    %ptr1.01 = phi i8* [ %14, %13 ], [ %7, %.lr.ph.preheader ]
    %8 = load i8, i8* %lsr.iv2, align 1, !tbaa !90
    %9 = icmp eq i8 %8, 0
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %.lr.ph
    %11 = load i32, i32* %lsr.iv1, align 4, !tbaa !87
    %12 = trunc i32 %11 to i8
    store i8 %12, i8* %ptr1.01, align 1, !tbaa !90
    br label %13
  
  ; <label>:13                                      ; preds = %10, %.lr.ph
    %14 = getelementptr inbounds i8, i8* %ptr1.01, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monocolor_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %6 = bitcast i8** %5 to i32**
    %7 = load i32*, i32** %6, align 4, !tbaa !22
    %8 = getelementptr inbounds i32, i32* %7, i32 %x
    br label %9
  
  ; <label>:9                                       ; preds = %14, %.lr.ph
    %lsr.iv1 = phi i8* [ %scevgep, %14 ], [ %mask, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %14 ], [ %n, %.lr.ph ]
    %ptr4.01 = phi i32* [ %8, %.lr.ph ], [ %15, %14 ]
    %10 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %9
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr2 = add i32 %sunkaddr, 28
    %sunkaddr3 = inttoptr i32 %sunkaddr2 to i32*
    %13 = load i32, i32* %sunkaddr3, align 4, !tbaa !88
    store i32 %13, i32* %ptr4.01, align 4, !tbaa !87
    br label %14
  
  ; <label>:14                                      ; preds = %12, %9
    %15 = getelementptr inbounds i32, i32* %ptr4.01, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %9
  
  ._crit_edge:                                      ; preds = %14, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monoindex_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %6 = load i8*, i8** %5, align 4, !tbaa !22
    %7 = getelementptr inbounds i8, i8* %6, i32 %x
    br label %8
  
  ; <label>:8                                       ; preds = %14, %.lr.ph
    %lsr.iv1 = phi i8* [ %scevgep, %14 ], [ %mask, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %14 ], [ %n, %.lr.ph ]
    %ptr1.01 = phi i8* [ %7, %.lr.ph ], [ %15, %14 ]
    %9 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %10 = icmp eq i8 %9, 0
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %8
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr2 = add i32 %sunkaddr, 28
    %sunkaddr3 = inttoptr i32 %sunkaddr2 to i32*
    %12 = load i32, i32* %sunkaddr3, align 4, !tbaa !88
    %13 = trunc i32 %12 to i8
    store i8 %13, i8* %ptr1.01, align 1, !tbaa !90
    br label %14
  
  ; <label>:14                                      ; preds = %11, %8
    %15 = getelementptr inbounds i8, i8* %ptr1.01, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %8
  
  ._crit_edge:                                      ; preds = %14, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_index_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i32* nocapture readonly %index, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %15
    %lsr.iv6 = phi i8* [ %scevgep7, %15 ], [ %mask, %0 ]
    %lsr.iv4 = phi i32* [ %scevgep5, %15 ], [ %y, %0 ]
    %lsr.iv2 = phi i32* [ %scevgep3, %15 ], [ %x, %0 ]
    %lsr.iv1 = phi i32* [ %scevgep, %15 ], [ %index, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %15 ], [ %n, %0 ]
    %5 = load i8, i8* %lsr.iv6, align 1, !tbaa !90
    %6 = icmp eq i8 %5, 0
    br i1 %6, label %15, label %7
  
  ; <label>:7                                       ; preds = %.lr.ph
    %8 = load i32, i32* %lsr.iv4, align 4, !tbaa !87
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %8
    %10 = load i8*, i8** %9, align 4, !tbaa !22
    %11 = load i32, i32* %lsr.iv2, align 4, !tbaa !87
    %12 = getelementptr inbounds i8, i8* %10, i32 %11
    %13 = load i32, i32* %lsr.iv1, align 4, !tbaa !87
    %14 = trunc i32 %13 to i8
    store i8 %14, i8* %12, align 1, !tbaa !90
    br label %15
  
  ; <label>:15                                      ; preds = %7, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %15, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monocolor_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %5
  
  ; <label>:5                                       ; preds = %16, %.lr.ph
    %lsr.iv4 = phi i8* [ %scevgep5, %16 ], [ %mask, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %16 ], [ %y, %.lr.ph ]
    %lsr.iv1 = phi i32* [ %scevgep, %16 ], [ %x, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %16 ], [ %n, %.lr.ph ]
    %6 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %16, label %8
  
  ; <label>:8                                       ; preds = %5
    %9 = load i32, i32* %lsr.iv2, align 4, !tbaa !87
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %9
    %11 = bitcast i8** %10 to i32**
    %12 = load i32*, i32** %11, align 4, !tbaa !22
    %13 = load i32, i32* %lsr.iv1, align 4, !tbaa !87
    %14 = getelementptr inbounds i32, i32* %12, i32 %13
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr6 = add i32 %sunkaddr, 28
    %sunkaddr7 = inttoptr i32 %sunkaddr6 to i32*
    %15 = load i32, i32* %sunkaddr7, align 4, !tbaa !88
    store i32 %15, i32* %14, align 4, !tbaa !87
    br label %16
  
  ; <label>:16                                      ; preds = %8, %5
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %5
  
  ._crit_edge:                                      ; preds = %16, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monoindex_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %5
  
  ; <label>:5                                       ; preds = %16, %.lr.ph
    %lsr.iv4 = phi i8* [ %scevgep5, %16 ], [ %mask, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %16 ], [ %y, %.lr.ph ]
    %lsr.iv1 = phi i32* [ %scevgep, %16 ], [ %x, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %16 ], [ %n, %.lr.ph ]
    %6 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %16, label %8
  
  ; <label>:8                                       ; preds = %5
    %9 = load i32, i32* %lsr.iv2, align 4, !tbaa !87
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %9
    %11 = load i8*, i8** %10, align 4, !tbaa !22
    %12 = load i32, i32* %lsr.iv1, align 4, !tbaa !87
    %13 = getelementptr inbounds i8, i8* %11, i32 %12
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr6 = add i32 %sunkaddr, 28
    %sunkaddr7 = inttoptr i32 %sunkaddr6 to i32*
    %14 = load i32, i32* %sunkaddr7, align 4, !tbaa !88
    %15 = trunc i32 %14 to i8
    store i8 %15, i8* %13, align 1, !tbaa !90
    br label %16
  
  ; <label>:16                                      ; preds = %8, %5
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %5
  
  ._crit_edge:                                      ; preds = %16, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_color_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture %red, i8* nocapture %green, i8* nocapture %blue, i8* nocapture %alpha) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %6 = bitcast i8** %5 to i32**
    %7 = load i32*, i32** %6, align 4, !tbaa !22
    %8 = getelementptr inbounds i32, i32* %7, i32 %x
    br label %9
  
  ; <label>:9                                       ; preds = %9, %.lr.ph
    %lsr.iv6 = phi i8* [ %scevgep7, %9 ], [ %red, %.lr.ph ]
    %lsr.iv4 = phi i8* [ %scevgep5, %9 ], [ %green, %.lr.ph ]
    %lsr.iv2 = phi i8* [ %scevgep3, %9 ], [ %blue, %.lr.ph ]
    %lsr.iv1 = phi i8* [ %scevgep, %9 ], [ %alpha, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %9 ], [ %n, %.lr.ph ]
    %ptr4.01 = phi i32* [ %8, %.lr.ph ], [ %10, %9 ]
    %10 = getelementptr inbounds i32, i32* %ptr4.01, i32 1
    %11 = load i32, i32* %ptr4.01, align 4, !tbaa !87
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr8 = add i32 %sunkaddr, 40
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to i32*
    %12 = load i32, i32* %sunkaddr9, align 4, !tbaa !11
    %13 = lshr i32 %11, %12
    %14 = trunc i32 %13 to i8
    store i8 %14, i8* %lsr.iv6, align 1, !tbaa !90
    %sunkaddr10 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr11 = add i32 %sunkaddr10, 44
    %sunkaddr12 = inttoptr i32 %sunkaddr11 to i32*
    %15 = load i32, i32* %sunkaddr12, align 4, !tbaa !12
    %16 = lshr i32 %11, %15
    %17 = trunc i32 %16 to i8
    store i8 %17, i8* %lsr.iv4, align 1, !tbaa !90
    %sunkaddr13 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr14 = add i32 %sunkaddr13, 48
    %sunkaddr15 = inttoptr i32 %sunkaddr14 to i32*
    %18 = load i32, i32* %sunkaddr15, align 4, !tbaa !13
    %19 = lshr i32 %11, %18
    %20 = trunc i32 %19 to i8
    store i8 %20, i8* %lsr.iv2, align 1, !tbaa !90
    %sunkaddr16 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr17 = add i32 %sunkaddr16, 52
    %sunkaddr18 = inttoptr i32 %sunkaddr17 to i32*
    %21 = load i32, i32* %sunkaddr18, align 4, !tbaa !14
    %22 = lshr i32 %11, %21
    %23 = trunc i32 %22 to i8
    store i8 %23, i8* %lsr.iv1, align 1, !tbaa !90
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %9
  
  ._crit_edge:                                      ; preds = %9, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_index_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32* nocapture %index) #3 {
    %1 = icmp eq i32 %n, 0
    br i1 %1, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %2 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %3 = bitcast i8** %2 to %struct.osmesa_context**
    %4 = load %struct.osmesa_context*, %struct.osmesa_context** %3, align 4, !tbaa !57
    %5 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %4, i32 0, i32 17, i32 %y
    %6 = load i8*, i8** %5, align 4, !tbaa !22
    %7 = getelementptr inbounds i8, i8* %6, i32 %x
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv1 = phi i32* [ %scevgep, %.lr.ph ], [ %index, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %ptr1.02 = phi i8* [ %10, %.lr.ph ], [ %7, %.lr.ph.preheader ]
    %8 = load i8, i8* %ptr1.02, align 1, !tbaa !90
    %9 = zext i8 %8 to i32
    store i32 %9, i32* %lsr.iv1, align 4, !tbaa !87
    %10 = getelementptr inbounds i8, i8* %ptr1.02, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_color_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture %red, i8* nocapture %green, i8* nocapture %blue, i8* nocapture %alpha, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    br label %5
  
  ; <label>:5                                       ; preds = %28, %.lr.ph
    %lsr.iv12 = phi i8* [ %scevgep13, %28 ], [ %mask, %.lr.ph ]
    %lsr.iv10 = phi i32* [ %scevgep11, %28 ], [ %y, %.lr.ph ]
    %lsr.iv8 = phi i32* [ %scevgep9, %28 ], [ %x, %.lr.ph ]
    %lsr.iv6 = phi i8* [ %scevgep7, %28 ], [ %red, %.lr.ph ]
    %lsr.iv4 = phi i8* [ %scevgep5, %28 ], [ %green, %.lr.ph ]
    %lsr.iv2 = phi i8* [ %scevgep3, %28 ], [ %blue, %.lr.ph ]
    %lsr.iv1 = phi i8* [ %scevgep, %28 ], [ %alpha, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %28 ], [ %n, %.lr.ph ]
    %6 = load i8, i8* %lsr.iv12, align 1, !tbaa !90
    %7 = icmp eq i8 %6, 0
    br i1 %7, label %28, label %8
  
  ; <label>:8                                       ; preds = %5
    %9 = load i32, i32* %lsr.iv10, align 4, !tbaa !87
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %9
    %11 = bitcast i8** %10 to i32**
    %12 = load i32*, i32** %11, align 4, !tbaa !22
    %13 = load i32, i32* %lsr.iv8, align 4, !tbaa !87
    %14 = getelementptr inbounds i32, i32* %12, i32 %13
    %15 = load i32, i32* %14, align 4, !tbaa !87
    %sunkaddr = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr14 = add i32 %sunkaddr, 40
    %sunkaddr15 = inttoptr i32 %sunkaddr14 to i32*
    %16 = load i32, i32* %sunkaddr15, align 4, !tbaa !11
    %17 = lshr i32 %15, %16
    %18 = trunc i32 %17 to i8
    store i8 %18, i8* %lsr.iv6, align 1, !tbaa !90
    %sunkaddr16 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr17 = add i32 %sunkaddr16, 44
    %sunkaddr18 = inttoptr i32 %sunkaddr17 to i32*
    %19 = load i32, i32* %sunkaddr18, align 4, !tbaa !12
    %20 = lshr i32 %15, %19
    %21 = trunc i32 %20 to i8
    store i8 %21, i8* %lsr.iv4, align 1, !tbaa !90
    %sunkaddr19 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr20 = add i32 %sunkaddr19, 48
    %sunkaddr21 = inttoptr i32 %sunkaddr20 to i32*
    %22 = load i32, i32* %sunkaddr21, align 4, !tbaa !13
    %23 = lshr i32 %15, %22
    %24 = trunc i32 %23 to i8
    store i8 %24, i8* %lsr.iv2, align 1, !tbaa !90
    %sunkaddr22 = ptrtoint %struct.osmesa_context* %3 to i32
    %sunkaddr23 = add i32 %sunkaddr22, 52
    %sunkaddr24 = inttoptr i32 %sunkaddr23 to i32*
    %25 = load i32, i32* %sunkaddr24, align 4, !tbaa !14
    %26 = lshr i32 %15, %25
    %27 = trunc i32 %26 to i8
    store i8 %27, i8* %lsr.iv1, align 1, !tbaa !90
    br label %28
  
  ; <label>:28                                      ; preds = %8, %5
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %scevgep9 = getelementptr i32, i32* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i32, i32* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i8, i8* %lsr.iv12, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %5
  
  ._crit_edge:                                      ; preds = %28, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_index_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i32* nocapture %index, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %15
    %lsr.iv6 = phi i8* [ %scevgep7, %15 ], [ %mask, %0 ]
    %lsr.iv4 = phi i32* [ %scevgep5, %15 ], [ %y, %0 ]
    %lsr.iv2 = phi i32* [ %scevgep3, %15 ], [ %x, %0 ]
    %lsr.iv1 = phi i32* [ %scevgep, %15 ], [ %index, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %15 ], [ %n, %0 ]
    %5 = load i8, i8* %lsr.iv6, align 1, !tbaa !90
    %6 = icmp eq i8 %5, 0
    br i1 %6, label %15, label %7
  
  ; <label>:7                                       ; preds = %.lr.ph
    %8 = load i32, i32* %lsr.iv4, align 4, !tbaa !87
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %8
    %10 = load i8*, i8** %9, align 4, !tbaa !22
    %11 = load i32, i32* %lsr.iv2, align 4, !tbaa !87
    %12 = getelementptr inbounds i8, i8* %10, i32 %11
    %13 = load i8, i8* %12, align 1, !tbaa !90
    %14 = zext i8 %13 to i32
    store i32 %14, i32* %lsr.iv1, align 4, !tbaa !87
    br label %15
  
  ; <label>:15                                      ; preds = %7, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i32, i32* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %15, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_color_span3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %red, i8* nocapture readonly %green, i8* nocapture readonly %blue, i8* nocapture readnone %alpha, i8* readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %5 = load i8*, i8** %4, align 4, !tbaa !22
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %7 = load i32, i32* %6, align 4, !tbaa !15
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %9 = load i32, i32* %8, align 4, !tbaa !16
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %11 = load i32, i32* %10, align 4, !tbaa !17
    %12 = icmp eq i8* %mask, null
    br i1 %12, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %0
    %13 = icmp ne i32 %n, 0
    br i1 %13, label %.lr.ph7.preheader, label %.loopexit
  
  .lr.ph7.preheader:                                ; preds = %.preheader1
    %14 = mul i32 %x, 3
    %15 = add i32 %11, %14
    %scevgep15 = getelementptr i8, i8* %5, i32 %15
    %16 = add i32 %9, %14
    %scevgep18 = getelementptr i8, i8* %5, i32 %16
    %17 = add i32 %7, %14
    %scevgep21 = getelementptr i8, i8* %5, i32 %17
    br label %.lr.ph7
  
  .preheader:                                       ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %19 = mul i32 %x, 3
    %20 = add i32 %11, %19
    %scevgep = getelementptr i8, i8* %5, i32 %20
    %21 = add i32 %9, %19
    %scevgep2 = getelementptr i8, i8* %5, i32 %21
    %22 = add i32 %7, %19
    %scevgep5 = getelementptr i8, i8* %5, i32 %22
    br label %.lr.ph
  
  .lr.ph7:                                          ; preds = %29, %.lr.ph7.preheader
    %lsr.iv22 = phi i8* [ %scevgep23, %29 ], [ %scevgep21, %.lr.ph7.preheader ]
    %lsr.iv19 = phi i8* [ %scevgep20, %29 ], [ %scevgep18, %.lr.ph7.preheader ]
    %lsr.iv16 = phi i8* [ %scevgep17, %29 ], [ %scevgep15, %.lr.ph7.preheader ]
    %i.05 = phi i32 [ %30, %29 ], [ 0, %.lr.ph7.preheader ]
    %scevgep27 = getelementptr i8, i8* %mask, i32 %i.05
    %23 = load i8, i8* %scevgep27, align 1, !tbaa !90
    %24 = icmp eq i8 %23, 0
    br i1 %24, label %29, label %25
  
  ; <label>:25                                      ; preds = %.lr.ph7
    %scevgep26 = getelementptr i8, i8* %red, i32 %i.05
    %26 = load i8, i8* %scevgep26, align 1, !tbaa !90
    store i8 %26, i8* %lsr.iv22, align 1, !tbaa !90
    %scevgep25 = getelementptr i8, i8* %green, i32 %i.05
    %27 = load i8, i8* %scevgep25, align 1, !tbaa !90
    store i8 %27, i8* %lsr.iv19, align 1, !tbaa !90
    %scevgep24 = getelementptr i8, i8* %blue, i32 %i.05
    %28 = load i8, i8* %scevgep24, align 1, !tbaa !90
    store i8 %28, i8* %lsr.iv16, align 1, !tbaa !90
    br label %29
  
  ; <label>:29                                      ; preds = %25, %.lr.ph7
    %30 = add nuw i32 %i.05, 1
    %scevgep17 = getelementptr i8, i8* %lsr.iv16, i32 3
    %scevgep20 = getelementptr i8, i8* %lsr.iv19, i32 3
    %scevgep23 = getelementptr i8, i8* %lsr.iv22, i32 3
    %exitcond9 = icmp eq i32 %n, %30
    br i1 %exitcond9, label %.loopexit, label %.lr.ph7
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv13 = phi i8* [ %scevgep14, %.lr.ph ], [ %red, %.lr.ph.preheader ]
    %lsr.iv11 = phi i8* [ %scevgep12, %.lr.ph ], [ %green, %.lr.ph.preheader ]
    %lsr.iv9 = phi i8* [ %scevgep10, %.lr.ph ], [ %blue, %.lr.ph.preheader ]
    %lsr.iv8 = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv6 = phi i8* [ %scevgep7, %.lr.ph ], [ %scevgep5, %.lr.ph.preheader ]
    %lsr.iv3 = phi i8* [ %scevgep4, %.lr.ph ], [ %scevgep2, %.lr.ph.preheader ]
    %lsr.iv = phi i8* [ %scevgep1, %.lr.ph ], [ %scevgep, %.lr.ph.preheader ]
    %31 = load i8, i8* %lsr.iv13, align 1, !tbaa !90
    store i8 %31, i8* %lsr.iv6, align 1, !tbaa !90
    %32 = load i8, i8* %lsr.iv11, align 1, !tbaa !90
    store i8 %32, i8* %lsr.iv3, align 1, !tbaa !90
    %33 = load i8, i8* %lsr.iv9, align 1, !tbaa !90
    store i8 %33, i8* %lsr.iv, align 1, !tbaa !90
    %scevgep1 = getelementptr i8, i8* %lsr.iv, i32 3
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 3
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 3
    %lsr.iv.next = add i32 %lsr.iv8, -1
    %scevgep10 = getelementptr i8, i8* %lsr.iv9, i32 1
    %scevgep12 = getelementptr i8, i8* %lsr.iv11, i32 1
    %scevgep14 = getelementptr i8, i8* %lsr.iv13, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %29, %.lr.ph, %.preheader, %.preheader1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_color_pixels3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture readonly %red, i8* nocapture readonly %green, i8* nocapture readonly %blue, i8* nocapture readnone %alpha, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %5 = load i32, i32* %4, align 4, !tbaa !15
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %7 = load i32, i32* %6, align 4, !tbaa !16
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %9 = load i32, i32* %8, align 4, !tbaa !17
    %10 = icmp eq i32 %n, 0
    br i1 %10, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %26
    %lsr.iv10 = phi i8* [ %scevgep11, %26 ], [ %mask, %0 ]
    %lsr.iv8 = phi i32* [ %scevgep9, %26 ], [ %y, %0 ]
    %lsr.iv6 = phi i32* [ %scevgep7, %26 ], [ %x, %0 ]
    %lsr.iv4 = phi i8* [ %scevgep5, %26 ], [ %red, %0 ]
    %lsr.iv2 = phi i8* [ %scevgep3, %26 ], [ %green, %0 ]
    %lsr.iv1 = phi i8* [ %scevgep, %26 ], [ %blue, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %26 ], [ %n, %0 ]
    %11 = load i8, i8* %lsr.iv10, align 1, !tbaa !90
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %26, label %13
  
  ; <label>:13                                      ; preds = %.lr.ph
    %14 = load i32, i32* %lsr.iv8, align 4, !tbaa !87
    %15 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %14
    %16 = load i8*, i8** %15, align 4, !tbaa !22
    %17 = load i32, i32* %lsr.iv6, align 4, !tbaa !87
    %18 = mul nsw i32 %17, 3
    %19 = getelementptr inbounds i8, i8* %16, i32 %18
    %20 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %21 = getelementptr inbounds i8, i8* %19, i32 %5
    store i8 %20, i8* %21, align 1, !tbaa !90
    %22 = load i8, i8* %lsr.iv2, align 1, !tbaa !90
    %23 = getelementptr inbounds i8, i8* %19, i32 %7
    store i8 %22, i8* %23, align 1, !tbaa !90
    %24 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %25 = getelementptr inbounds i8, i8* %19, i32 %9
    store i8 %24, i8* %25, align 1, !tbaa !90
    br label %26
  
  ; <label>:26                                      ; preds = %13, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i32, i32* %lsr.iv6, i32 1
    %scevgep9 = getelementptr i32, i32* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i8, i8* %lsr.iv10, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %26, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monocolor_span3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 7
    %5 = load i32, i32* %4, align 4, !tbaa !88
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %7 = load i32, i32* %6, align 4, !tbaa !11
    %8 = lshr i32 %5, %7
    %9 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %10 = load i32, i32* %9, align 4, !tbaa !12
    %11 = lshr i32 %5, %10
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %13 = load i32, i32* %12, align 4, !tbaa !13
    %14 = lshr i32 %5, %13
    %15 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %16 = load i32, i32* %15, align 4, !tbaa !15
    %17 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %18 = load i32, i32* %17, align 4, !tbaa !16
    %19 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %20 = load i32, i32* %19, align 4, !tbaa !17
    %21 = icmp eq i32 %n, 0
    br i1 %21, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %22 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %23 = load i8*, i8** %22, align 4, !tbaa !22
    %24 = mul nsw i32 %x, 3
    %25 = add i32 %20, %24
    %scevgep2 = getelementptr i8, i8* %23, i32 %25
    %26 = add i32 %18, %24
    %scevgep5 = getelementptr i8, i8* %23, i32 %26
    %27 = add i32 %16, %24
    %scevgep8 = getelementptr i8, i8* %23, i32 %27
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %34, %.lr.ph.preheader
    %lsr.iv9 = phi i8* [ %scevgep10, %34 ], [ %scevgep8, %.lr.ph.preheader ]
    %lsr.iv6 = phi i8* [ %scevgep7, %34 ], [ %scevgep5, %.lr.ph.preheader ]
    %lsr.iv3 = phi i8* [ %scevgep4, %34 ], [ %scevgep2, %.lr.ph.preheader ]
    %lsr.iv1 = phi i8* [ %scevgep, %34 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %34 ], [ %n, %.lr.ph.preheader ]
    %28 = load i8, i8* %lsr.iv1, align 1, !tbaa !90
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %34, label %30
  
  ; <label>:30                                      ; preds = %.lr.ph
    %31 = trunc i32 %14 to i8
    %32 = trunc i32 %11 to i8
    %33 = trunc i32 %8 to i8
    store i8 %33, i8* %lsr.iv9, align 1, !tbaa !90
    store i8 %32, i8* %lsr.iv6, align 1, !tbaa !90
    store i8 %31, i8* %lsr.iv3, align 1, !tbaa !90
    br label %34
  
  ; <label>:34                                      ; preds = %30, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 3
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 3
    %scevgep10 = getelementptr i8, i8* %lsr.iv9, i32 3
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %34, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @write_monocolor_pixels3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %5 = load i32, i32* %4, align 4, !tbaa !15
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %7 = load i32, i32* %6, align 4, !tbaa !16
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %9 = load i32, i32* %8, align 4, !tbaa !17
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 7
    %11 = load i32, i32* %10, align 4, !tbaa !88
    %12 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %13 = load i32, i32* %12, align 4, !tbaa !11
    %14 = lshr i32 %11, %13
    %15 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %16 = load i32, i32* %15, align 4, !tbaa !12
    %17 = lshr i32 %11, %16
    %18 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %19 = load i32, i32* %18, align 4, !tbaa !13
    %20 = lshr i32 %11, %19
    %21 = icmp eq i32 %n, 0
    br i1 %21, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %37
    %lsr.iv4 = phi i8* [ %scevgep5, %37 ], [ %mask, %0 ]
    %lsr.iv2 = phi i32* [ %scevgep3, %37 ], [ %y, %0 ]
    %lsr.iv1 = phi i32* [ %scevgep, %37 ], [ %x, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %37 ], [ %n, %0 ]
    %22 = load i8, i8* %lsr.iv4, align 1, !tbaa !90
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %37, label %24
  
  ; <label>:24                                      ; preds = %.lr.ph
    %25 = trunc i32 %20 to i8
    %26 = trunc i32 %17 to i8
    %27 = trunc i32 %14 to i8
    %28 = load i32, i32* %lsr.iv2, align 4, !tbaa !87
    %29 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %28
    %30 = load i8*, i8** %29, align 4, !tbaa !22
    %31 = load i32, i32* %lsr.iv1, align 4, !tbaa !87
    %32 = mul nsw i32 %31, 3
    %33 = getelementptr inbounds i8, i8* %30, i32 %32
    %34 = getelementptr inbounds i8, i8* %33, i32 %5
    store i8 %27, i8* %34, align 1, !tbaa !90
    %35 = getelementptr inbounds i8, i8* %33, i32 %7
    store i8 %26, i8* %35, align 1, !tbaa !90
    %36 = getelementptr inbounds i8, i8* %33, i32 %9
    store i8 %25, i8* %36, align 1, !tbaa !90
    br label %37
  
  ; <label>:37                                      ; preds = %24, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %37, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_color_span3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture %red, i8* nocapture %green, i8* nocapture %blue, i8* nocapture %alpha) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %5 = load i32, i32* %4, align 4, !tbaa !15
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %7 = load i32, i32* %6, align 4, !tbaa !16
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %9 = load i32, i32* %8, align 4, !tbaa !17
    %10 = icmp eq i32 %n, 0
    br i1 %10, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %11 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y
    %12 = load i8*, i8** %11, align 4, !tbaa !22
    %13 = mul nsw i32 %x, 3
    %14 = add i32 %9, %13
    %scevgep = getelementptr i8, i8* %12, i32 %14
    %15 = add i32 %7, %13
    %scevgep2 = getelementptr i8, i8* %12, i32 %15
    %16 = add i32 %5, %13
    %scevgep5 = getelementptr i8, i8* %12, i32 %16
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv6 = phi i8* [ %scevgep7, %.lr.ph ], [ %scevgep5, %.lr.ph.preheader ]
    %lsr.iv3 = phi i8* [ %scevgep4, %.lr.ph ], [ %scevgep2, %.lr.ph.preheader ]
    %lsr.iv = phi i8* [ %scevgep1, %.lr.ph ], [ %scevgep, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %20, %.lr.ph ], [ 0, %.lr.ph.preheader ]
    %17 = load i8, i8* %lsr.iv6, align 1, !tbaa !90
    %scevgep11 = getelementptr i8, i8* %red, i32 %i.01
    store i8 %17, i8* %scevgep11, align 1, !tbaa !90
    %18 = load i8, i8* %lsr.iv3, align 1, !tbaa !90
    %scevgep10 = getelementptr i8, i8* %green, i32 %i.01
    store i8 %18, i8* %scevgep10, align 1, !tbaa !90
    %19 = load i8, i8* %lsr.iv, align 1, !tbaa !90
    %scevgep9 = getelementptr i8, i8* %blue, i32 %i.01
    store i8 %19, i8* %scevgep9, align 1, !tbaa !90
    %scevgep8 = getelementptr i8, i8* %alpha, i32 %i.01
    store i8 0, i8* %scevgep8, align 1, !tbaa !90
    %20 = add nuw i32 %i.01, 1
    %scevgep1 = getelementptr i8, i8* %lsr.iv, i32 3
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 3
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 3
    %exitcond = icmp eq i32 %n, %20
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @read_color_pixels3(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture %red, i8* nocapture %green, i8* nocapture %blue, i8* nocapture %alpha, i8* nocapture readonly %mask) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 14
    %5 = load i32, i32* %4, align 4, !tbaa !15
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 15
    %7 = load i32, i32* %6, align 4, !tbaa !16
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 16
    %9 = load i32, i32* %8, align 4, !tbaa !17
    %10 = icmp eq i32 %n, 0
    br i1 %10, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0, %26
    %lsr.iv12 = phi i8* [ %scevgep13, %26 ], [ %mask, %0 ]
    %lsr.iv10 = phi i32* [ %scevgep11, %26 ], [ %y, %0 ]
    %lsr.iv8 = phi i32* [ %scevgep9, %26 ], [ %x, %0 ]
    %lsr.iv6 = phi i8* [ %scevgep7, %26 ], [ %red, %0 ]
    %lsr.iv4 = phi i8* [ %scevgep5, %26 ], [ %green, %0 ]
    %lsr.iv2 = phi i8* [ %scevgep3, %26 ], [ %blue, %0 ]
    %lsr.iv1 = phi i8* [ %scevgep, %26 ], [ %alpha, %0 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %26 ], [ %n, %0 ]
    %11 = load i8, i8* %lsr.iv12, align 1, !tbaa !90
    %12 = icmp eq i8 %11, 0
    br i1 %12, label %26, label %13
  
  ; <label>:13                                      ; preds = %.lr.ph
    %14 = load i32, i32* %lsr.iv10, align 4, !tbaa !87
    %15 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %14
    %16 = load i8*, i8** %15, align 4, !tbaa !22
    %17 = load i32, i32* %lsr.iv8, align 4, !tbaa !87
    %18 = mul nsw i32 %17, 3
    %19 = getelementptr inbounds i8, i8* %16, i32 %18
    %20 = getelementptr inbounds i8, i8* %19, i32 %5
    %21 = load i8, i8* %20, align 1, !tbaa !90
    store i8 %21, i8* %lsr.iv6, align 1, !tbaa !90
    %22 = getelementptr inbounds i8, i8* %19, i32 %7
    %23 = load i8, i8* %22, align 1, !tbaa !90
    store i8 %23, i8* %lsr.iv4, align 1, !tbaa !90
    %24 = getelementptr inbounds i8, i8* %19, i32 %9
    %25 = load i8, i8* %24, align 1, !tbaa !90
    store i8 %25, i8* %lsr.iv2, align 1, !tbaa !90
    store i8 0, i8* %lsr.iv1, align 1, !tbaa !90
    br label %26
  
  ; <label>:26                                      ; preds = %13, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i8, i8* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %scevgep9 = getelementptr i32, i32* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i32, i32* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i8, i8* %lsr.iv12, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %26, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #1
  
  ; Function Attrs: norecurse nounwind
  define internal void @flat_color_z_line(%struct.gl_context* nocapture readonly %ctx, i32 signext %v0, i32 signext %v1, i32 signext %pv) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %5 = load %struct.vertex_buffer*, %struct.vertex_buffer** %4, align 4, !tbaa !91
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 0
    %7 = load float, float* %6, align 4, !tbaa !92
    %8 = fptosi float %7 to i32
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 0
    %10 = load float, float* %9, align 4, !tbaa !92
    %11 = fptosi float %10 to i32
    %12 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 1
    %13 = load float, float* %12, align 4, !tbaa !92
    %14 = fptosi float %13 to i32
    %15 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 1
    %16 = load float, float* %15, align 4, !tbaa !92
    %17 = fptosi float %16 to i32
    %18 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 2
    %19 = load float, float* %18, align 4, !tbaa !92
    %20 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 62
    %21 = load float, float* %20, align 4, !tbaa !93
    %22 = fadd float %19, %21
    %23 = fptosi float %22 to i32
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 2
    %25 = load float, float* %24, align 4, !tbaa !92
    %26 = fadd float %21, %25
    %27 = fptosi float %26 to i32
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 7
    %29 = load [4 x i32]*, [4 x i32]** %28, align 4, !tbaa !94
    %30 = getelementptr inbounds [4 x i32], [4 x i32]* %29, i32 %pv, i32 0
    %31 = load i32, i32* %30, align 4, !tbaa !87
    %32 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %33 = load i32, i32* %32, align 4, !tbaa !11
    %34 = shl i32 %31, %33
    %35 = getelementptr inbounds [4 x i32], [4 x i32]* %29, i32 %pv, i32 1
    %36 = load i32, i32* %35, align 4, !tbaa !87
    %37 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %38 = load i32, i32* %37, align 4, !tbaa !12
    %39 = shl i32 %36, %38
    %40 = or i32 %39, %34
    %41 = getelementptr inbounds [4 x i32], [4 x i32]* %29, i32 %pv, i32 2
    %42 = load i32, i32* %41, align 4, !tbaa !87
    %43 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %44 = load i32, i32* %43, align 4, !tbaa !13
    %45 = shl i32 %42, %44
    %46 = or i32 %40, %45
    %47 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %48 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %47, align 4, !tbaa !96
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %48, i32 0, i32 1
    %50 = load i32, i32* %49, align 4, !tbaa !97
    %51 = icmp eq i32 %8, %50
    %52 = zext i1 %51 to i32
    %53 = icmp eq i32 %11, %50
    %54 = zext i1 %53 to i32
    %55 = or i32 %52, %54
    %56 = icmp eq i32 %55, 0
    br i1 %56, label %64, label %57
  
  ; <label>:57                                      ; preds = %0
    %58 = icmp eq i32 %11, %50
    %59 = icmp eq i32 %8, %50
    %60 = and i1 %59, %58
    br i1 %60, label %.loopexit, label %61
  
  ; <label>:61                                      ; preds = %57
    %62 = sub nsw i32 %8, %52
    %63 = sub nsw i32 %11, %54
    br label %64
  
  ; <label>:64                                      ; preds = %61, %0
    %x2.1.ph = phi i32 [ %11, %0 ], [ %63, %61 ]
    %x1.1.ph = phi i32 [ %8, %0 ], [ %62, %61 ]
    %65 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %48, i32 0, i32 2
    %66 = load i32, i32* %65, align 4, !tbaa !99
    %67 = icmp eq i32 %14, %66
    %68 = zext i1 %67 to i32
    %69 = icmp eq i32 %17, %66
    %70 = zext i1 %69 to i32
    %71 = or i32 %68, %70
    %72 = icmp eq i32 %71, 0
    br i1 %72, label %80, label %73
  
  ; <label>:73                                      ; preds = %64
    %74 = icmp eq i32 %17, %66
    %75 = icmp eq i32 %14, %66
    %76 = and i1 %75, %74
    br i1 %76, label %.loopexit, label %77
  
  ; <label>:77                                      ; preds = %73
    %78 = sub nsw i32 %14, %68
    %79 = sub nsw i32 %17, %70
    br label %80
  
  ; <label>:80                                      ; preds = %77, %64
    %y2.1.ph = phi i32 [ %17, %64 ], [ %79, %77 ]
    %y1.1.ph = phi i32 [ %14, %64 ], [ %78, %77 ]
    %81 = icmp eq i32 %x1.1.ph, %x2.1.ph
    %82 = icmp eq i32 %y1.1.ph, %y2.1.ph
    %or.cond = and i1 %81, %82
    br i1 %or.cond, label %.loopexit, label %83
  
  ; <label>:83                                      ; preds = %80
    %84 = shl i32 %23, 7
    %85 = shl i32 %27, 7
    %86 = icmp sgt i32 %x2.1.ph, %x1.1.ph
    %87 = sub nsw i32 %x2.1.ph, %x1.1.ph
    %88 = sub nsw i32 %x1.1.ph, %x2.1.ph
    %dx.0 = select i1 %86, i32 %87, i32 %88
    %xstep.0 = select i1 %86, i32 1, i32 -1
    %89 = icmp sgt i32 %y2.1.ph, %y1.1.ph
    %90 = sub nsw i32 %y2.1.ph, %y1.1.ph
    %91 = sub nsw i32 %y1.1.ph, %y2.1.ph
    %92 = sub nsw i32 0, %50
    %dy.0 = select i1 %89, i32 %90, i32 %91
    %ystep.0 = select i1 %89, i32 1, i32 -1
    %dzdy.0 = select i1 %89, i32 %50, i32 %92
    %93 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %48, i32 0, i32 3
    %94 = load i16*, i16** %93, align 4, !tbaa !100
    %95 = mul nsw i32 %50, %y1.1.ph
    %96 = getelementptr inbounds i16, i16* %94, i32 %95
    %97 = getelementptr inbounds i16, i16* %96, i32 %x1.1.ph
    %98 = icmp sgt i32 %dx.0, %dy.0
    %99 = sub nsw i32 %85, %84
    br i1 %98, label %100, label %126
  
  ; <label>:100                                     ; preds = %83
    %101 = sdiv i32 %99, %dx.0
    %102 = shl nsw i32 %dy.0, 1
    %103 = sub nsw i32 %102, %dx.0
    %104 = sub nsw i32 %103, %dx.0
    %105 = icmp slt i32 %dx.0, 0
    br i1 %105, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %100
    %106 = shl i32 %x1.1.ph, 2
    %107 = shl i32 %xstep.0, 2
    %108 = add i32 %dx.0, 1
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %120, %.lr.ph.preheader
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %120 ], [ %108, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %120 ], [ %106, %.lr.ph.preheader ]
    %y1.217 = phi i32 [ %y1.3, %120 ], [ %y1.1.ph, %.lr.ph.preheader ]
    %zptr.016 = phi i16* [ %zptr.1, %120 ], [ %97, %.lr.ph.preheader ]
    %tt.014 = phi i32 [ %tt.1, %120 ], [ %103, %.lr.ph.preheader ]
    %z1.013 = phi i32 [ %125, %120 ], [ %84, %.lr.ph.preheader ]
    %109 = lshr i32 %z1.013, 7
    %110 = and i32 %109, 65535
    %111 = load i16, i16* %zptr.016, align 2, !tbaa !101
    %112 = zext i16 %111 to i32
    %113 = icmp ult i32 %110, %112
    br i1 %113, label %114, label %120
  
  ; <label>:114                                     ; preds = %.lr.ph
    %115 = trunc i32 %109 to i16
    %116 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y1.217
    %117 = bitcast i8** %116 to i32**
    %118 = load i32*, i32** %117, align 4, !tbaa !22
    %119 = bitcast i32* %118 to i8*
    %uglygep = getelementptr i8, i8* %119, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    store i32 %46, i32* %uglygep1, align 4, !tbaa !87
    store i16 %115, i16* %zptr.016, align 2, !tbaa !101
    br label %120
  
  ; <label>:120                                     ; preds = %114, %.lr.ph
    %121 = getelementptr inbounds i16, i16* %zptr.016, i32 %xstep.0
    %122 = icmp slt i32 %tt.014, 0
    %123 = getelementptr inbounds i16, i16* %121, i32 %dzdy.0
    %.pn7 = select i1 %122, i32 %102, i32 %104
    %zptr.1 = select i1 %122, i16* %121, i16* %123
    %124 = select i1 %122, i32 0, i32 %ystep.0
    %y1.3 = add nsw i32 %y1.217, %124
    %tt.1 = add nsw i32 %.pn7, %tt.014
    %125 = add nsw i32 %z1.013, %101
    %lsr.iv.next = add i32 %lsr.iv, %107
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %exitcond = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:126                                     ; preds = %83
    %127 = sdiv i32 %99, %dy.0
    %128 = shl nsw i32 %dx.0, 1
    %129 = sub nsw i32 %128, %dy.0
    %130 = sub nsw i32 %129, %dy.0
    %131 = icmp slt i32 %dy.0, 0
    br i1 %131, label %.loopexit, label %.lr.ph25.preheader
  
  .lr.ph25.preheader:                               ; preds = %126
    %132 = bitcast %struct.osmesa_context* %3 to i8*
    %133 = shl i32 %y1.1.ph, 2
    %134 = add i32 %133, 68
    %uglygep4 = getelementptr i8, i8* %132, i32 %134
    %uglygep45 = bitcast i8* %uglygep4 to %struct.osmesa_context*
    %135 = shl i32 %ystep.0, 2
    %136 = add i32 %dy.0, 1
    br label %.lr.ph25
  
  .lr.ph25:                                         ; preds = %147, %.lr.ph25.preheader
    %lsr.iv9 = phi i32 [ %lsr.iv.next10, %147 ], [ %136, %.lr.ph25.preheader ]
    %lsr.iv6 = phi %struct.osmesa_context* [ %154, %147 ], [ %uglygep45, %.lr.ph25.preheader ]
    %x1.324 = phi i32 [ %x1.4, %147 ], [ %x1.1.ph, %.lr.ph25.preheader ]
    %zptr.222 = phi i16* [ %zptr.3, %147 ], [ %97, %.lr.ph25.preheader ]
    %tt.220 = phi i32 [ %tt.3, %147 ], [ %129, %.lr.ph25.preheader ]
    %z1.119 = phi i32 [ %153, %147 ], [ %84, %.lr.ph25.preheader ]
    %137 = lshr i32 %z1.119, 7
    %138 = and i32 %137, 65535
    %139 = load i16, i16* %zptr.222, align 2, !tbaa !101
    %140 = zext i16 %139 to i32
    %141 = icmp ult i32 %138, %140
    br i1 %141, label %142, label %147
  
  ; <label>:142                                     ; preds = %.lr.ph25
    %143 = bitcast %struct.osmesa_context* %lsr.iv6 to i32**
    %144 = trunc i32 %137 to i16
    %145 = load i32*, i32** %143, align 4, !tbaa !22
    %146 = getelementptr inbounds i32, i32* %145, i32 %x1.324
    store i32 %46, i32* %146, align 4, !tbaa !87
    store i16 %144, i16* %zptr.222, align 2, !tbaa !101
    br label %147
  
  ; <label>:147                                     ; preds = %142, %.lr.ph25
    %148 = bitcast %struct.osmesa_context* %lsr.iv6 to i1*
    %149 = getelementptr inbounds i16, i16* %zptr.222, i32 %dzdy.0
    %150 = icmp slt i32 %tt.220, 0
    %151 = getelementptr inbounds i16, i16* %149, i32 %xstep.0
    %.pn = select i1 %150, i32 %128, i32 %130
    %zptr.3 = select i1 %150, i16* %149, i16* %151
    %152 = select i1 %150, i32 0, i32 %xstep.0
    %x1.4 = add nsw i32 %x1.324, %152
    %tt.3 = add nsw i32 %.pn, %tt.220
    %153 = add nsw i32 %z1.119, %127
    %scevgep = getelementptr i1, i1* %148, i32 %135
    %154 = bitcast i1* %scevgep to %struct.osmesa_context*
    %lsr.iv.next10 = add i32 %lsr.iv9, -1
    %exitcond27 = icmp eq i32 %lsr.iv.next10, 0
    br i1 %exitcond27, label %.loopexit, label %.lr.ph25
  
  .loopexit:                                        ; preds = %147, %120, %126, %100, %80, %73, %57
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @flat_color_line(%struct.gl_context* nocapture readonly %ctx, i32 signext %v0, i32 signext %v1, i32 signext %pv) #3 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %5 = load %struct.vertex_buffer*, %struct.vertex_buffer** %4, align 4, !tbaa !91
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 0
    %7 = load float, float* %6, align 4, !tbaa !92
    %8 = fptosi float %7 to i32
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 1
    %10 = load float, float* %9, align 4, !tbaa !92
    %11 = fptosi float %10 to i32
    %12 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 0
    %13 = load float, float* %12, align 4, !tbaa !92
    %14 = fptosi float %13 to i32
    %15 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 1
    %16 = load float, float* %15, align 4, !tbaa !92
    %17 = fptosi float %16 to i32
    %18 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 7
    %19 = load [4 x i32]*, [4 x i32]** %18, align 4, !tbaa !94
    %20 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 %pv, i32 0
    %21 = load i32, i32* %20, align 4, !tbaa !87
    %22 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %23 = load i32, i32* %22, align 4, !tbaa !11
    %24 = shl i32 %21, %23
    %25 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 %pv, i32 1
    %26 = load i32, i32* %25, align 4, !tbaa !87
    %27 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %28 = load i32, i32* %27, align 4, !tbaa !12
    %29 = shl i32 %26, %28
    %30 = or i32 %29, %24
    %31 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 %pv, i32 2
    %32 = load i32, i32* %31, align 4, !tbaa !87
    %33 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %34 = load i32, i32* %33, align 4, !tbaa !13
    %35 = shl i32 %32, %34
    %36 = or i32 %30, %35
    %37 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %38 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %37, align 4, !tbaa !96
    %39 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %38, i32 0, i32 1
    %40 = load i32, i32* %39, align 4, !tbaa !97
    %41 = icmp eq i32 %8, %40
    %42 = zext i1 %41 to i32
    %43 = icmp eq i32 %14, %40
    %44 = zext i1 %43 to i32
    %45 = or i32 %42, %44
    %46 = icmp eq i32 %45, 0
    br i1 %46, label %54, label %47
  
  ; <label>:47                                      ; preds = %0
    %48 = icmp eq i32 %14, %40
    %49 = icmp eq i32 %8, %40
    %50 = and i1 %49, %48
    br i1 %50, label %.loopexit, label %51
  
  ; <label>:51                                      ; preds = %47
    %52 = sub nsw i32 %8, %42
    %53 = sub nsw i32 %14, %44
    br label %54
  
  ; <label>:54                                      ; preds = %51, %0
    %x2.1.ph = phi i32 [ %14, %0 ], [ %53, %51 ]
    %x1.1.ph = phi i32 [ %8, %0 ], [ %52, %51 ]
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %38, i32 0, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !99
    %57 = icmp eq i32 %11, %56
    %58 = zext i1 %57 to i32
    %59 = icmp eq i32 %17, %56
    %60 = zext i1 %59 to i32
    %61 = or i32 %58, %60
    %62 = icmp eq i32 %61, 0
    br i1 %62, label %70, label %63
  
  ; <label>:63                                      ; preds = %54
    %64 = icmp eq i32 %17, %56
    %65 = icmp eq i32 %11, %56
    %66 = and i1 %65, %64
    br i1 %66, label %.loopexit, label %67
  
  ; <label>:67                                      ; preds = %63
    %68 = sub nsw i32 %11, %58
    %69 = sub nsw i32 %17, %60
    br label %70
  
  ; <label>:70                                      ; preds = %67, %54
    %y2.1.ph = phi i32 [ %17, %54 ], [ %69, %67 ]
    %y1.1.ph = phi i32 [ %11, %54 ], [ %68, %67 ]
    %71 = icmp eq i32 %x1.1.ph, %x2.1.ph
    %72 = icmp eq i32 %y1.1.ph, %y2.1.ph
    %or.cond = and i1 %71, %72
    br i1 %or.cond, label %.loopexit, label %73
  
  ; <label>:73                                      ; preds = %70
    %74 = icmp sgt i32 %x2.1.ph, %x1.1.ph
    %75 = sub nsw i32 %x2.1.ph, %x1.1.ph
    %76 = sub nsw i32 %x1.1.ph, %x2.1.ph
    %dx.0 = select i1 %74, i32 %75, i32 %76
    %xf.0 = select i1 %74, i32 1, i32 -1
    %77 = icmp sgt i32 %y2.1.ph, %y1.1.ph
    %78 = sub nsw i32 %y2.1.ph, %y1.1.ph
    %79 = sub nsw i32 %y1.1.ph, %y2.1.ph
    %dy.0 = select i1 %77, i32 %78, i32 %79
    %yf.0 = select i1 %77, i32 1, i32 -1
    %80 = icmp sgt i32 %dx.0, %dy.0
    br i1 %80, label %81, label %95
  
  ; <label>:81                                      ; preds = %73
    %82 = shl nsw i32 %dy.0, 1
    %83 = sub nsw i32 %82, %dx.0
    %84 = sub nsw i32 %83, %dx.0
    %85 = icmp slt i32 %dx.0, 0
    br i1 %85, label %.loopexit, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %81
    %86 = shl i32 %x1.1.ph, 2
    %87 = shl i32 %xf.0, 2
    %88 = add i32 %dx.0, 1
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %.lr.ph ], [ %88, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %86, %.lr.ph.preheader ]
    %y1.213 = phi i32 [ %y1.3, %.lr.ph ], [ %y1.1.ph, %.lr.ph.preheader ]
    %tt.011 = phi i32 [ %tt.1, %.lr.ph ], [ %83, %.lr.ph.preheader ]
    %89 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %y1.213
    %90 = bitcast i8** %89 to i32**
    %91 = load i32*, i32** %90, align 4, !tbaa !22
    %92 = bitcast i32* %91 to i8*
    %uglygep = getelementptr i8, i8* %92, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    store i32 %36, i32* %uglygep1, align 4, !tbaa !87
    %93 = icmp slt i32 %tt.011, 0
    %.pn5 = select i1 %93, i32 %82, i32 %84
    %94 = select i1 %93, i32 0, i32 %yf.0
    %y1.3 = add nsw i32 %y1.213, %94
    %tt.1 = add nsw i32 %.pn5, %tt.011
    %lsr.iv.next = add i32 %lsr.iv, %87
    %lsr.iv.next3 = add i32 %lsr.iv2, -1
    %exitcond = icmp eq i32 %lsr.iv.next3, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:95                                      ; preds = %73
    %96 = shl nsw i32 %dx.0, 1
    %97 = sub nsw i32 %96, %dy.0
    %98 = sub nsw i32 %97, %dy.0
    %99 = icmp slt i32 %dy.0, 0
    br i1 %99, label %.loopexit, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %95
    %100 = bitcast %struct.osmesa_context* %3 to i8*
    %101 = shl i32 %y1.1.ph, 2
    %102 = add i32 %101, 68
    %uglygep4 = getelementptr i8, i8* %100, i32 %102
    %uglygep45 = bitcast i8* %uglygep4 to %struct.osmesa_context*
    %103 = shl i32 %yf.0, 2
    %104 = add i32 %dy.0, 1
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv9 = phi i32 [ %lsr.iv.next10, %.lr.ph19 ], [ %104, %.lr.ph19.preheader ]
    %lsr.iv6 = phi %struct.osmesa_context* [ %109, %.lr.ph19 ], [ %uglygep45, %.lr.ph19.preheader ]
    %x1.318 = phi i32 [ %x1.4, %.lr.ph19 ], [ %x1.1.ph, %.lr.ph19.preheader ]
    %tt.215 = phi i32 [ %tt.3, %.lr.ph19 ], [ %97, %.lr.ph19.preheader ]
    %lsr.iv68 = bitcast %struct.osmesa_context* %lsr.iv6 to i32**
    %lsr.iv67 = bitcast %struct.osmesa_context* %lsr.iv6 to i1*
    %105 = load i32*, i32** %lsr.iv68, align 4, !tbaa !22
    %106 = getelementptr inbounds i32, i32* %105, i32 %x1.318
    store i32 %36, i32* %106, align 4, !tbaa !87
    %107 = icmp slt i32 %tt.215, 0
    %.pn = select i1 %107, i32 %96, i32 %98
    %108 = select i1 %107, i32 0, i32 %xf.0
    %x1.4 = add nsw i32 %x1.318, %108
    %tt.3 = add nsw i32 %.pn, %tt.215
    %scevgep = getelementptr i1, i1* %lsr.iv67, i32 %103
    %109 = bitcast i1* %scevgep to %struct.osmesa_context*
    %lsr.iv.next10 = add i32 %lsr.iv9, -1
    %exitcond21 = icmp eq i32 %lsr.iv.next10, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph19
  
  .loopexit:                                        ; preds = %.lr.ph19, %.lr.ph, %95, %81, %70, %63, %47
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @smooth_color_z_triangle(%struct.gl_context* nocapture readonly %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #3 {
    %eMaj = alloca %struct.EdgeT, align 4
    %eTop = alloca %struct.EdgeT, align 4
    %eBot = alloca %struct.EdgeT, align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %5 = load i32, i32* %4, align 4, !tbaa !11
    %6 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %7 = load i32, i32* %6, align 4, !tbaa !12
    %8 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %9 = load i32, i32* %8, align 4, !tbaa !13
    %10 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %11 = load i32, i32* %10, align 4, !tbaa !14
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %13 = load %struct.vertex_buffer*, %struct.vertex_buffer** %12, align 4, !tbaa !91
    %14 = bitcast %struct.EdgeT* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %14) #6
    %15 = bitcast %struct.EdgeT* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %15) #6
    %16 = bitcast %struct.EdgeT* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %16) #6
    %17 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %v0, i32 1
    %18 = load float, float* %17, align 4, !tbaa !92
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %v1, i32 1
    %20 = load float, float* %19, align 4, !tbaa !92
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %v2, i32 1
    %22 = load float, float* %21, align 4, !tbaa !92
    %23 = fcmp ugt float %18, %20
    br i1 %23, label %28, label %24
  
  ; <label>:24                                      ; preds = %0
    %25 = fcmp ugt float %20, %22
    br i1 %25, label %26, label %32
  
  ; <label>:26                                      ; preds = %24
    %27 = fcmp ugt float %22, %18
    %v2.v0 = select i1 %27, i32 %v2, i32 %v0
    %v0.v2 = select i1 %27, i32 %v0, i32 %v2
    br label %32
  
  ; <label>:28                                      ; preds = %0
    %29 = fcmp ugt float %18, %22
    br i1 %29, label %30, label %32
  
  ; <label>:30                                      ; preds = %28
    %31 = fcmp ugt float %22, %20
    %v2.v1 = select i1 %31, i32 %v2, i32 %v1
    %v1.v2 = select i1 %31, i32 %v1, i32 %v2
    br label %32
  
  ; <label>:32                                      ; preds = %30, %28, %26, %24
    %vMax.0 = phi i32 [ %v2, %24 ], [ %v1, %26 ], [ %v2, %28 ], [ %v0, %30 ]
    %vMid.0 = phi i32 [ %v1, %24 ], [ %v2.v0, %26 ], [ %v0, %28 ], [ %v2.v1, %30 ]
    %vMin.0 = phi i32 [ %v0, %24 ], [ %v0.v2, %26 ], [ %v1, %28 ], [ %v1.v2, %30 ]
    %33 = bitcast %struct.EdgeT* %eMaj to i32*
    store i32 %vMin.0, i32* %33, align 4, !tbaa !102
    %34 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %34, align 4, !tbaa !104
    %35 = bitcast %struct.EdgeT* %eTop to i32*
    store i32 %vMid.0, i32* %35, align 4, !tbaa !102
    %36 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %36, align 4, !tbaa !104
    %37 = bitcast %struct.EdgeT* %eBot to i32*
    store i32 %vMin.0, i32* %37, align 4, !tbaa !102
    %38 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %38, align 4, !tbaa !104
    %39 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMax.0, i32 0
    %40 = load float, float* %39, align 4, !tbaa !92
    %41 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMin.0, i32 0
    %42 = load float, float* %41, align 4, !tbaa !92
    %43 = fsub float %40, %42
    %44 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 2
    store float %43, float* %44, align 4, !tbaa !105
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMax.0, i32 1
    %46 = load float, float* %45, align 4, !tbaa !92
    %47 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMin.0, i32 1
    %48 = load float, float* %47, align 4, !tbaa !92
    %49 = fsub float %46, %48
    %50 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 3
    store float %49, float* %50, align 4, !tbaa !106
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMid.0, i32 0
    %52 = load float, float* %51, align 4, !tbaa !92
    %53 = fsub float %40, %52
    %54 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 2
    store float %53, float* %54, align 4, !tbaa !105
    %55 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMid.0, i32 1
    %56 = load float, float* %55, align 4, !tbaa !92
    %57 = fsub float %46, %56
    %58 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 3
    store float %57, float* %58, align 4, !tbaa !106
    %59 = fsub float %52, %42
    %60 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 2
    store float %59, float* %60, align 4, !tbaa !105
    %61 = fsub float %56, %48
    %62 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 3
    store float %61, float* %62, align 4, !tbaa !106
    %63 = fmul float %61, %43
    %64 = fmul float %59, %49
    %65 = fsub float %63, %64
    %66 = fcmp ogt float %65, 0xBFA99999A0000000
    %67 = fcmp olt float %65, 0x3FA99999A0000000
    %68 = fdiv float 1.000000e+00, %65
    %cond.demorgan = and i1 %66, %67
    br i1 %cond.demorgan, label %.loopexit46, label %69
  
  ; <label>:69                                      ; preds = %32
    %70 = fadd float %42, 5.000000e-01
    %71 = fmul float %70, 2.048000e+03
    %72 = fptosi float %71 to i32
    %73 = fadd float %48, -5.000000e-01
    %74 = fmul float %73, 2.048000e+03
    %75 = fptosi float %74 to i32
    %76 = fadd float %52, 5.000000e-01
    %77 = fmul float %76, 2.048000e+03
    %78 = fptosi float %77 to i32
    %79 = fadd float %56, -5.000000e-01
    %80 = fmul float %79, 2.048000e+03
    %81 = fptosi float %80 to i32
    %82 = fadd float %46, -5.000000e-01
    %83 = fmul float %82, 2.048000e+03
    %84 = fptosi float %83 to i32
    %85 = add nsw i32 %75, 2047
    %86 = and i32 %85, -2048
    %87 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 6
    store i32 %86, i32* %87, align 4, !tbaa !107
    %88 = add nsw i32 %84, 2047
    %89 = sub nsw i32 %88, %86
    %90 = ashr i32 %89, 11
    %91 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 8
    store i32 %90, i32* %91, align 4, !tbaa !108
    %92 = icmp sgt i32 %90, 0
    br i1 %92, label %93, label %.loopexit46
  
  ; <label>:93                                      ; preds = %69
    %94 = fdiv float %43, %49
    %95 = fmul float %94, 2.048000e+03
    %96 = fptosi float %95 to i32
    %97 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 4
    store i32 %96, i32* %97, align 4, !tbaa !109
    %98 = sub nsw i32 %86, %75
    %99 = sitofp i32 %98 to float
    %100 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 7
    store float %99, float* %100, align 4, !tbaa !110
    %101 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 9
    store i32 %72, i32* %101, align 4, !tbaa !111
    %102 = fmul float %94, %99
    %103 = fptosi float %102 to i32
    %104 = add nsw i32 %103, %72
    %105 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 5
    store i32 %104, i32* %105, align 4, !tbaa !112
    %106 = add nsw i32 %81, 2047
    %107 = and i32 %106, -2048
    %108 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 6
    store i32 %107, i32* %108, align 4, !tbaa !107
    %109 = sub nsw i32 %88, %107
    %110 = ashr i32 %109, 11
    %111 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 8
    store i32 %110, i32* %111, align 4, !tbaa !108
    %112 = icmp sgt i32 %110, 0
    br i1 %112, label %113, label %126
  
  ; <label>:113                                     ; preds = %93
    %114 = fdiv float %53, %57
    %115 = fmul float %114, 2.048000e+03
    %116 = fptosi float %115 to i32
    %117 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 4
    store i32 %116, i32* %117, align 4, !tbaa !109
    %118 = sub nsw i32 %107, %81
    %119 = sitofp i32 %118 to float
    %120 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 7
    store float %119, float* %120, align 4, !tbaa !110
    %121 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 9
    store i32 %78, i32* %121, align 4, !tbaa !111
    %122 = fmul float %114, %119
    %123 = fptosi float %122 to i32
    %124 = add nsw i32 %123, %78
    %125 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 5
    store i32 %124, i32* %125, align 4, !tbaa !112
    br label %126
  
  ; <label>:126                                     ; preds = %113, %93
    %127 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 6
    store i32 %86, i32* %127, align 4, !tbaa !107
    %128 = sub nsw i32 %106, %86
    %129 = ashr i32 %128, 11
    %130 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 8
    store i32 %129, i32* %130, align 4, !tbaa !108
    %131 = icmp sgt i32 %129, 0
    br i1 %131, label %132, label %143
  
  ; <label>:132                                     ; preds = %126
    %133 = fdiv float %59, %61
    %134 = fmul float %133, 2.048000e+03
    %135 = fptosi float %134 to i32
    %136 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 4
    store i32 %135, i32* %136, align 4, !tbaa !109
    %137 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 7
    store float %99, float* %137, align 4, !tbaa !110
    %138 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 9
    store i32 %72, i32* %138, align 4, !tbaa !111
    %139 = fmul float %133, %99
    %140 = fptosi float %139 to i32
    %141 = add nsw i32 %140, %72
    %142 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 5
    store i32 %141, i32* %142, align 4, !tbaa !112
    br label %143
  
  ; <label>:143                                     ; preds = %132, %126
    %144 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMax.0, i32 2
    %145 = load float, float* %144, align 4, !tbaa !92
    %146 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMin.0, i32 2
    %147 = load float, float* %146, align 4, !tbaa !92
    %148 = fsub float %145, %147
    %149 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %vMid.0, i32 2
    %150 = load float, float* %149, align 4, !tbaa !92
    %151 = fsub float %150, %147
    %152 = fmul float %148, %61
    %153 = fmul float %151, %49
    %154 = fsub float %152, %153
    %155 = fmul float %68, %154
    %156 = fcmp ogt float %155, 6.553500e+04
    %157 = fcmp olt float %155, -6.553500e+04
    %or.cond15 = or i1 %156, %157
    br i1 %or.cond15, label %163, label %158
  
  ; <label>:158                                     ; preds = %143
    %159 = fmul float %151, %43
    %160 = fmul float %148, %59
    %161 = fsub float %159, %160
    %162 = fmul float %68, %161
    br label %163
  
  ; <label>:163                                     ; preds = %158, %143
    %dzdy.0 = phi float [ %162, %158 ], [ 0.000000e+00, %143 ]
    %dzdx.0 = phi float [ %155, %158 ], [ 0.000000e+00, %143 ]
    %164 = fcmp olt float %68, 0.000000e+00
    %165 = fmul float %dzdx.0, 2.048000e+03
    %166 = fptosi float %165 to i32
    %167 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 7
    %168 = load [4 x i32]*, [4 x i32]** %167, align 4, !tbaa !94
    %169 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMax.0, i32 0
    %170 = load i32, i32* %169, align 4, !tbaa !87
    %171 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMin.0, i32 0
    %172 = load i32, i32* %171, align 4, !tbaa !87
    %173 = sub nsw i32 %170, %172
    %174 = sitofp i32 %173 to float
    %175 = fmul float %174, 0x3F40000000000000
    %176 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMid.0, i32 0
    %177 = load i32, i32* %176, align 4, !tbaa !87
    %178 = sub nsw i32 %177, %172
    %179 = sitofp i32 %178 to float
    %180 = fmul float %179, 0x3F40000000000000
    %181 = fmul float %61, %175
    %182 = fmul float %49, %180
    %183 = fsub float %181, %182
    %184 = fmul float %68, %183
    %185 = fmul float %184, 2.048000e+03
    %186 = fptosi float %185 to i32
    %187 = fmul float %43, %180
    %188 = fmul float %175, %59
    %189 = fsub float %187, %188
    %190 = fmul float %68, %189
    %191 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMax.0, i32 1
    %192 = load i32, i32* %191, align 4, !tbaa !87
    %193 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMin.0, i32 1
    %194 = load i32, i32* %193, align 4, !tbaa !87
    %195 = sub nsw i32 %192, %194
    %196 = sitofp i32 %195 to float
    %197 = fmul float %196, 0x3F40000000000000
    %198 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMid.0, i32 1
    %199 = load i32, i32* %198, align 4, !tbaa !87
    %200 = sub nsw i32 %199, %194
    %201 = sitofp i32 %200 to float
    %202 = fmul float %201, 0x3F40000000000000
    %203 = fmul float %61, %197
    %204 = fmul float %49, %202
    %205 = fsub float %203, %204
    %206 = fmul float %68, %205
    %207 = fmul float %206, 2.048000e+03
    %208 = fptosi float %207 to i32
    %209 = fmul float %43, %202
    %210 = fmul float %59, %197
    %211 = fsub float %209, %210
    %212 = fmul float %68, %211
    %213 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMax.0, i32 2
    %214 = load i32, i32* %213, align 4, !tbaa !87
    %215 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMin.0, i32 2
    %216 = load i32, i32* %215, align 4, !tbaa !87
    %217 = sub nsw i32 %214, %216
    %218 = sitofp i32 %217 to float
    %219 = fmul float %218, 0x3F40000000000000
    %220 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMid.0, i32 2
    %221 = load i32, i32* %220, align 4, !tbaa !87
    %222 = sub nsw i32 %221, %216
    %223 = sitofp i32 %222 to float
    %224 = fmul float %223, 0x3F40000000000000
    %225 = fmul float %61, %219
    %226 = fmul float %49, %224
    %227 = fsub float %225, %226
    %228 = fmul float %68, %227
    %229 = fmul float %228, 2.048000e+03
    %230 = fptosi float %229 to i32
    %231 = fmul float %43, %224
    %232 = fmul float %59, %219
    %233 = fsub float %231, %232
    %234 = fmul float %68, %233
    %235 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMax.0, i32 3
    %236 = load i32, i32* %235, align 4, !tbaa !87
    %237 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMin.0, i32 3
    %238 = load i32, i32* %237, align 4, !tbaa !87
    %239 = sub nsw i32 %236, %238
    %240 = sitofp i32 %239 to float
    %241 = fmul float %240, 0x3F40000000000000
    %242 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %vMid.0, i32 3
    %243 = load i32, i32* %242, align 4, !tbaa !87
    %244 = sub nsw i32 %243, %238
    %245 = sitofp i32 %244 to float
    %246 = fmul float %245, 0x3F40000000000000
    %247 = fmul float %61, %241
    %248 = fmul float %49, %246
    %249 = fsub float %247, %248
    %250 = fmul float %68, %249
    %251 = fmul float %250, 2.048000e+03
    %252 = fptosi float %251 to i32
    %253 = fmul float %43, %246
    %254 = fmul float %59, %241
    %255 = fsub float %253, %254
    %256 = fmul float %68, %255
    %eMaj.eBot = select i1 %164, %struct.EdgeT* %eMaj, %struct.EdgeT* %eBot
    %eBot.eMaj = select i1 %164, %struct.EdgeT* %eBot, %struct.EdgeT* %eMaj
    %.16 = zext i1 %164 to i32
    br label %257
  
  ; <label>:257                                     ; preds = %.loopexit, %163
    %subTriangle.095 = phi i32 [ 0, %163 ], [ %449, %.loopexit ]
    %fdaOuter.094 = phi i32 [ undef, %163 ], [ %fdaOuter.1, %.loopexit ]
    %fa.093 = phi i32 [ undef, %163 ], [ %fa.4.ph, %.loopexit ]
    %fxLeftEdge.092 = phi i32 [ undef, %163 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fdbOuter.091 = phi i32 [ undef, %163 ], [ %fdbOuter.1, %.loopexit ]
    %fb.090 = phi i32 [ undef, %163 ], [ %fb.4.ph, %.loopexit ]
    %fxRightEdge.089 = phi i32 [ undef, %163 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdgOuter.088 = phi i32 [ undef, %163 ], [ %fdgOuter.1, %.loopexit ]
    %fg.087 = phi i32 [ undef, %163 ], [ %fg.4.ph, %.loopexit ]
    %fdxLeftEdge.086 = phi i32 [ undef, %163 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdrOuter.085 = phi i32 [ undef, %163 ], [ %fdrOuter.1, %.loopexit ]
    %fr.084 = phi i32 [ undef, %163 ], [ %fr.4.ph, %.loopexit ]
    %fdxRightEdge.083 = phi i32 [ undef, %163 ], [ %fdxRightEdge.1, %.loopexit ]
    %fdzOuter.082 = phi i32 [ undef, %163 ], [ %fdzOuter.1, %.loopexit ]
    %fz.081 = phi i32 [ undef, %163 ], [ %fz.4.ph, %.loopexit ]
    %fError.080 = phi i32 [ undef, %163 ], [ %fError.4.ph, %.loopexit ]
    %dZRowOuter.079 = phi i32 [ undef, %163 ], [ %dZRowOuter.1, %.loopexit ]
    %zRow.078 = phi i16* [ undef, %163 ], [ %zRow.4.ph, %.loopexit ]
    %iy.077 = phi i32 [ undef, %163 ], [ %iy.3.ph, %.loopexit ]
    %fdError.076 = phi i32 [ undef, %163 ], [ %fdError.1, %.loopexit ]
    %258 = icmp eq i32 %subTriangle.095, 0
    br i1 %258, label %.thread, label %260
  
  .thread:                                          ; preds = %257
    %sunkaddr = ptrtoint %struct.EdgeT* %eBot to i32
    %sunkaddr2 = add i32 %sunkaddr, 32
    %sunkaddr3 = inttoptr i32 %sunkaddr2 to i32*
    %259 = load i32, i32* %sunkaddr3, align 4, !tbaa !108
    br label %265
  
  ; <label>:260                                     ; preds = %257
    %sunkaddr4 = ptrtoint %struct.EdgeT* %eTop to i32
    %sunkaddr5 = add i32 %sunkaddr4, 32
    %sunkaddr6 = inttoptr i32 %sunkaddr5 to i32*
    %261 = load i32, i32* %sunkaddr6, align 4, !tbaa !108
    %262 = icmp eq i32 %261, 0
    br i1 %262, label %.loopexit46, label %263
  
  ; <label>:263                                     ; preds = %260
    %264 = fcmp olt float %68, 0.000000e+00
    br i1 %264, label %374, label %265
  
  ; <label>:265                                     ; preds = %263, %.thread
    %lines.123 = phi i32 [ %259, %.thread ], [ %261, %263 ]
    %setupRight.121 = phi i32 [ 1, %.thread ], [ %.16, %263 ]
    %eRight.119 = phi %struct.EdgeT* [ %eBot.eMaj, %.thread ], [ %eMaj, %263 ]
    %eLeft.118 = phi %struct.EdgeT* [ %eMaj.eBot, %.thread ], [ %eTop, %263 ]
    %266 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 8
    %267 = load i32, i32* %266, align 4, !tbaa !108
    %268 = icmp sgt i32 %267, 0
    br i1 %268, label %269, label %374
  
  ; <label>:269                                     ; preds = %265
    %270 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 5
    %271 = load i32, i32* %270, align 4, !tbaa !112
    %272 = add nsw i32 %271, 2047
    %273 = and i32 %272, -2048
    %274 = sub i32 -2048, %271
    %275 = add i32 %274, %273
    %276 = add nsw i32 %271, -1
    %277 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 4
    %278 = load i32, i32* %277, align 4, !tbaa !109
    %279 = add nsw i32 %278, -1
    %280 = and i32 %279, -2048
    %281 = sub i32 2048, %278
    %282 = add i32 %281, %280
    %283 = ashr i32 %279, 11
    %284 = sitofp i32 %283 to float
    %285 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 6
    %286 = load i32, i32* %285, align 4, !tbaa !107
    %287 = ashr i32 %286, 11
    %288 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 9
    %289 = load i32, i32* %288, align 4, !tbaa !111
    %290 = sub nsw i32 %273, %289
    %291 = sitofp i32 %290 to float
    %292 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.118, i32 0, i32 7
    %293 = load float, float* %292, align 4, !tbaa !110
    %294 = bitcast %struct.EdgeT* %eLeft.118 to i32*
    %295 = load i32, i32* %294, align 4, !tbaa !102
    %296 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %13, i32 0, i32 3, i32 %295, i32 2
    %297 = load float, float* %296, align 4, !tbaa !92
    %sunkaddr7 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr7, 55768
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to float*
    %298 = load float, float* %sunkaddr9, align 4, !tbaa !113
    %299 = fadd float %297, %298
    %300 = fmul float %299, 2.048000e+03
    %301 = fmul float %dzdx.0, %291
    %302 = fadd float %301, %300
    %303 = fmul float %dzdy.0, %293
    %304 = fadd float %303, %302
    %305 = fptosi float %304 to i32
    %306 = add nsw i32 %305, 1024
    %307 = fmul float %dzdx.0, %284
    %308 = fadd float %dzdy.0, %307
    %309 = fmul float %308, 2.048000e+03
    %310 = fptosi float %309 to i32
    %sunkaddr10 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr11 = add i32 %sunkaddr10, 2024
    %sunkaddr12 = inttoptr i32 %sunkaddr11 to %struct.gl_frame_buffer**
    %311 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr12, align 4, !tbaa !96
    %312 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %311, i32 0, i32 3
    %313 = load i16*, i16** %312, align 4, !tbaa !100
    %314 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %311, i32 0, i32 1
    %315 = load i32, i32* %314, align 4, !tbaa !97
    %316 = mul nsw i32 %315, %287
    %317 = getelementptr inbounds i16, i16* %313, i32 %316
    %318 = ashr i32 %276, 11
    %319 = getelementptr inbounds i16, i16* %317, i32 %318
    %320 = add nsw i32 %315, %283
    %321 = shl i32 %320, 1
    %322 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %295, i32 0
    %323 = load i32, i32* %322, align 4, !tbaa !87
    %324 = sitofp i32 %323 to float
    %325 = fmul float %184, %291
    %326 = fadd float %325, %324
    %327 = fmul float %190, %293
    %328 = fadd float %327, %326
    %329 = fptosi float %328 to i32
    %330 = add nsw i32 %329, 1024
    %331 = fmul float %184, %284
    %332 = fadd float %190, %331
    %333 = fmul float %332, 2.048000e+03
    %334 = fptosi float %333 to i32
    %335 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %295, i32 1
    %336 = load i32, i32* %335, align 4, !tbaa !87
    %337 = sitofp i32 %336 to float
    %338 = fmul float %206, %291
    %339 = fadd float %338, %337
    %340 = fmul float %212, %293
    %341 = fadd float %340, %339
    %342 = fptosi float %341 to i32
    %343 = add nsw i32 %342, 1024
    %344 = fmul float %206, %284
    %345 = fadd float %212, %344
    %346 = fmul float %345, 2.048000e+03
    %347 = fptosi float %346 to i32
    %348 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %295, i32 2
    %349 = load i32, i32* %348, align 4, !tbaa !87
    %350 = sitofp i32 %349 to float
    %351 = fmul float %228, %291
    %352 = fadd float %351, %350
    %353 = fmul float %234, %293
    %354 = fadd float %353, %352
    %355 = fptosi float %354 to i32
    %356 = add nsw i32 %355, 1024
    %357 = fmul float %228, %284
    %358 = fadd float %234, %357
    %359 = fmul float %358, 2.048000e+03
    %360 = fptosi float %359 to i32
    %361 = getelementptr inbounds [4 x i32], [4 x i32]* %168, i32 %295, i32 3
    %362 = load i32, i32* %361, align 4, !tbaa !87
    %363 = sitofp i32 %362 to float
    %364 = fmul float %250, %291
    %365 = fadd float %364, %363
    %366 = fmul float %256, %293
    %367 = fadd float %366, %365
    %368 = fptosi float %367 to i32
    %369 = add nsw i32 %368, 1024
    %370 = fmul float %250, %284
    %371 = fadd float %256, %370
    %372 = fmul float %371, 2.048000e+03
    %373 = fptosi float %372 to i32
    br label %374
  
  ; <label>:374                                     ; preds = %269, %265, %263
    %lines.124 = phi i32 [ %lines.123, %269 ], [ %lines.123, %265 ], [ %261, %263 ]
    %setupRight.122 = phi i32 [ %setupRight.121, %269 ], [ %setupRight.121, %265 ], [ %.16, %263 ]
    %eRight.120 = phi %struct.EdgeT* [ %eRight.119, %269 ], [ %eRight.119, %265 ], [ %eTop, %263 ]
    %fdError.1 = phi i32 [ %282, %269 ], [ %fdError.076, %265 ], [ %fdError.076, %263 ]
    %iy.1 = phi i32 [ %287, %269 ], [ %iy.077, %265 ], [ %iy.077, %263 ]
    %zRow.1 = phi i16* [ %319, %269 ], [ %zRow.078, %265 ], [ %zRow.078, %263 ]
    %dZRowOuter.1 = phi i32 [ %321, %269 ], [ %dZRowOuter.079, %265 ], [ %dZRowOuter.079, %263 ]
    %fError.1 = phi i32 [ %275, %269 ], [ %fError.080, %265 ], [ %fError.080, %263 ]
    %fz.1 = phi i32 [ %306, %269 ], [ %fz.081, %265 ], [ %fz.081, %263 ]
    %fdzOuter.1 = phi i32 [ %310, %269 ], [ %fdzOuter.082, %265 ], [ %fdzOuter.082, %263 ]
    %fr.1 = phi i32 [ %330, %269 ], [ %fr.084, %265 ], [ %fr.084, %263 ]
    %fdrOuter.1 = phi i32 [ %334, %269 ], [ %fdrOuter.085, %265 ], [ %fdrOuter.085, %263 ]
    %fdxLeftEdge.1 = phi i32 [ %278, %269 ], [ %fdxLeftEdge.086, %265 ], [ %fdxLeftEdge.086, %263 ]
    %fg.1 = phi i32 [ %343, %269 ], [ %fg.087, %265 ], [ %fg.087, %263 ]
    %fdgOuter.1 = phi i32 [ %347, %269 ], [ %fdgOuter.088, %265 ], [ %fdgOuter.088, %263 ]
    %fb.1 = phi i32 [ %356, %269 ], [ %fb.090, %265 ], [ %fb.090, %263 ]
    %fdbOuter.1 = phi i32 [ %360, %269 ], [ %fdbOuter.091, %265 ], [ %fdbOuter.091, %263 ]
    %fxLeftEdge.1 = phi i32 [ %276, %269 ], [ %fxLeftEdge.092, %265 ], [ %fxLeftEdge.092, %263 ]
    %fa.1 = phi i32 [ %369, %269 ], [ %fa.093, %265 ], [ %fa.093, %263 ]
    %fdaOuter.1 = phi i32 [ %373, %269 ], [ %fdaOuter.094, %265 ], [ %fdaOuter.094, %263 ]
    %375 = icmp eq i32 %setupRight.122, 0
    br i1 %375, label %386, label %376
  
  ; <label>:376                                     ; preds = %374
    %377 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.120, i32 0, i32 8
    %378 = load i32, i32* %377, align 4, !tbaa !108
    %379 = icmp sgt i32 %378, 0
    br i1 %379, label %380, label %386
  
  ; <label>:380                                     ; preds = %376
    %381 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.120, i32 0, i32 5
    %382 = load i32, i32* %381, align 4, !tbaa !112
    %383 = add nsw i32 %382, -1
    %384 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.120, i32 0, i32 4
    %385 = load i32, i32* %384, align 4, !tbaa !109
    br label %386
  
  ; <label>:386                                     ; preds = %380, %376, %374
    %fdxRightEdge.1 = phi i32 [ %385, %380 ], [ %fdxRightEdge.083, %376 ], [ %fdxRightEdge.083, %374 ]
    %fxRightEdge.1 = phi i32 [ %383, %380 ], [ %fxRightEdge.089, %376 ], [ %fxRightEdge.089, %374 ]
    %387 = icmp eq i32 %lines.124, 0
    br i1 %387, label %.loopexit, label %388
  
  ; <label>:388                                     ; preds = %386
    %389 = add i32 %dZRowOuter.1, 2
    %390 = add nsw i32 %fdzOuter.1, %166
    %391 = add nsw i32 %fdrOuter.1, %186
    %392 = add nsw i32 %fdgOuter.1, %208
    %393 = add nsw i32 %fdbOuter.1, %230
    %394 = add nsw i32 %fdaOuter.1, %252
    %395 = icmp sgt i32 %lines.124, 0
    br i1 %395, label %.lr.ph66, label %.loopexit
  
  .lr.ph66:                                         ; preds = %388, %447
    %lines.264 = phi i32 [ %435, %447 ], [ %lines.124, %388 ]
    %fa.263 = phi i32 [ %fa.3, %447 ], [ %fa.1, %388 ]
    %fxLeftEdge.262 = phi i32 [ %436, %447 ], [ %fxLeftEdge.1, %388 ]
    %fb.261 = phi i32 [ %fb.3, %447 ], [ %fb.1, %388 ]
    %fxRightEdge.260 = phi i32 [ %437, %447 ], [ %fxRightEdge.1, %388 ]
    %fg.259 = phi i32 [ %fg.3, %447 ], [ %fg.1, %388 ]
    %fr.258 = phi i32 [ %fr.3, %447 ], [ %fr.1, %388 ]
    %fz.257 = phi i32 [ %fz.3, %447 ], [ %fz.1, %388 ]
    %fError.256 = phi i32 [ %fError.3, %447 ], [ %fError.1, %388 ]
    %zRow.255 = phi i16* [ %zRow.3, %447 ], [ %zRow.1, %388 ]
    %iy.254 = phi i32 [ %434, %447 ], [ %iy.1, %388 ]
    %396 = ashr i32 %fxLeftEdge.262, 11
    %397 = ashr i32 %fxRightEdge.260, 11
    %398 = sub nsw i32 %397, %396
    %399 = icmp sgt i32 %398, 0
    br i1 %399, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.lr.ph66
    %400 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %iy.254
    %401 = bitcast i8** %400 to i32**
    %402 = load i32*, i32** %401, align 4, !tbaa !22
    %403 = getelementptr inbounds i32, i32* %402, i32 %396
    %404 = icmp slt i32 %fa.263, 0
    %ffa.0 = select i1 %404, i32 0, i32 %fa.263
    %405 = icmp slt i32 %fb.261, 0
    %.fb.2 = select i1 %405, i32 0, i32 %fb.261
    %406 = icmp slt i32 %fg.259, 0
    %ffg.0 = select i1 %406, i32 0, i32 %fg.259
    %407 = icmp slt i32 %fr.258, 0
    %.fr.2 = select i1 %407, i32 0, i32 %fr.258
    %408 = sub i32 %397, %396
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %427, %.lr.ph.preheader
    %lsr.iv1 = phi i16* [ %scevgep, %427 ], [ %zRow.255, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %427 ], [ %408, %.lr.ph.preheader ]
    %img.053 = phi i32* [ %433, %427 ], [ %403, %.lr.ph.preheader ]
    %ffa.151 = phi i32 [ %431, %427 ], [ %ffa.0, %.lr.ph.preheader ]
    %ffb.150 = phi i32 [ %430, %427 ], [ %.fb.2, %.lr.ph.preheader ]
    %ffg.149 = phi i32 [ %429, %427 ], [ %ffg.0, %.lr.ph.preheader ]
    %ffr.148 = phi i32 [ %428, %427 ], [ %.fr.2, %.lr.ph.preheader ]
    %ffz.047 = phi i32 [ %432, %427 ], [ %fz.257, %.lr.ph.preheader ]
    %409 = lshr i32 %ffz.047, 11
    %410 = and i32 %409, 65535
    %411 = load i16, i16* %lsr.iv1, align 2, !tbaa !101
    %412 = zext i16 %411 to i32
    %413 = icmp ult i32 %410, %412
    br i1 %413, label %414, label %427
  
  ; <label>:414                                     ; preds = %.lr.ph
    %415 = trunc i32 %409 to i16
    %416 = ashr i32 %ffr.148, 11
    %417 = shl i32 %416, %5
    %418 = ashr i32 %ffg.149, 11
    %419 = shl i32 %418, %7
    %420 = or i32 %419, %417
    %421 = ashr i32 %ffb.150, 11
    %422 = shl i32 %421, %9
    %423 = or i32 %420, %422
    %424 = ashr i32 %ffa.151, 11
    %425 = shl i32 %424, %11
    %426 = or i32 %423, %425
    store i32 %426, i32* %img.053, align 4, !tbaa !87
    store i16 %415, i16* %lsr.iv1, align 2, !tbaa !101
    br label %427
  
  ; <label>:427                                     ; preds = %414, %.lr.ph
    %428 = add nsw i32 %ffr.148, %186
    %429 = add nsw i32 %ffg.149, %208
    %430 = add nsw i32 %ffb.150, %230
    %431 = add nsw i32 %ffa.151, %252
    %432 = add nsw i32 %ffz.047, %166
    %433 = getelementptr inbounds i32, i32* %img.053, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %427, %.lr.ph66
    %434 = add nsw i32 %iy.254, 1
    %435 = add nsw i32 %lines.264, -1
    %436 = add nsw i32 %fxLeftEdge.262, %fdxLeftEdge.1
    %437 = add nsw i32 %fxRightEdge.260, %fdxRightEdge.1
    %438 = add nsw i32 %fError.256, %fdError.1
    %439 = icmp sgt i32 %438, -1
    br i1 %439, label %440, label %444
  
  ; <label>:440                                     ; preds = %._crit_edge
    %441 = add nsw i32 %438, -2048
    %442 = bitcast i16* %zRow.255 to i8*
    %443 = getelementptr inbounds i8, i8* %442, i32 %dZRowOuter.1
    br label %447
  
  ; <label>:444                                     ; preds = %._crit_edge
    %445 = bitcast i16* %zRow.255 to i8*
    %446 = getelementptr inbounds i8, i8* %445, i32 %389
    br label %447
  
  ; <label>:447                                     ; preds = %444, %440
    %zRow.3.in = phi i8* [ %443, %440 ], [ %446, %444 ]
    %fError.3 = phi i32 [ %441, %440 ], [ %438, %444 ]
    %fdzOuter.1.pn = phi i32 [ %fdzOuter.1, %440 ], [ %390, %444 ]
    %fdrOuter.1.pn = phi i32 [ %fdrOuter.1, %440 ], [ %391, %444 ]
    %fdgOuter.1.pn = phi i32 [ %fdgOuter.1, %440 ], [ %392, %444 ]
    %fdbOuter.1.pn = phi i32 [ %fdbOuter.1, %440 ], [ %393, %444 ]
    %fdaOuter.1.pn = phi i32 [ %fdaOuter.1, %440 ], [ %394, %444 ]
    %fa.3 = add nsw i32 %fdaOuter.1.pn, %fa.263
    %fb.3 = add nsw i32 %fdbOuter.1.pn, %fb.261
    %fg.3 = add nsw i32 %fdgOuter.1.pn, %fg.259
    %fr.3 = add nsw i32 %fdrOuter.1.pn, %fr.258
    %fz.3 = add nsw i32 %fdzOuter.1.pn, %fz.257
    %zRow.3 = bitcast i8* %zRow.3.in to i16*
    %448 = icmp sgt i32 %lines.264, 1
    br i1 %448, label %.lr.ph66, label %.loopexit
  
  .loopexit:                                        ; preds = %447, %388, %386
    %iy.3.ph = phi i32 [ %iy.1, %386 ], [ %iy.1, %388 ], [ %434, %447 ]
    %zRow.4.ph = phi i16* [ %zRow.1, %386 ], [ %zRow.1, %388 ], [ %zRow.3, %447 ]
    %fError.4.ph = phi i32 [ %fError.1, %386 ], [ %fError.1, %388 ], [ %fError.3, %447 ]
    %fz.4.ph = phi i32 [ %fz.1, %386 ], [ %fz.1, %388 ], [ %fz.3, %447 ]
    %fr.4.ph = phi i32 [ %fr.1, %386 ], [ %fr.1, %388 ], [ %fr.3, %447 ]
    %fg.4.ph = phi i32 [ %fg.1, %386 ], [ %fg.1, %388 ], [ %fg.3, %447 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %386 ], [ %fxRightEdge.1, %388 ], [ %437, %447 ]
    %fb.4.ph = phi i32 [ %fb.1, %386 ], [ %fb.1, %388 ], [ %fb.3, %447 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %386 ], [ %fxLeftEdge.1, %388 ], [ %436, %447 ]
    %fa.4.ph = phi i32 [ %fa.1, %386 ], [ %fa.1, %388 ], [ %fa.3, %447 ]
    %449 = add nuw nsw i32 %subTriangle.095, 1
    %450 = icmp slt i32 %449, 2
    br i1 %450, label %257, label %.loopexit46
  
  .loopexit46:                                      ; preds = %260, %.loopexit, %69, %32
    %451 = bitcast %struct.EdgeT* %eBot to i8*
    %452 = bitcast %struct.EdgeT* %eTop to i8*
    %453 = bitcast %struct.EdgeT* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %451) #6
    call void @llvm.lifetime.end(i64 40, i8* %452) #6
    call void @llvm.lifetime.end(i64 40, i8* %453) #6
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define internal void @flat_color_z_triangle(%struct.gl_context* nocapture readonly %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #3 {
    %eMaj = alloca %struct.EdgeT.0, align 4
    %eTop = alloca %struct.EdgeT.0, align 4
    %eBot = alloca %struct.EdgeT.0, align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 7
    %2 = bitcast i8** %1 to %struct.osmesa_context**
    %3 = load %struct.osmesa_context*, %struct.osmesa_context** %2, align 4, !tbaa !57
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %5 = load %struct.vertex_buffer*, %struct.vertex_buffer** %4, align 4, !tbaa !91
    %6 = bitcast %struct.EdgeT.0* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %6) #6
    %7 = bitcast %struct.EdgeT.0* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %7) #6
    %8 = bitcast %struct.EdgeT.0* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %8) #6
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v0, i32 1
    %10 = load float, float* %9, align 4, !tbaa !92
    %11 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v1, i32 1
    %12 = load float, float* %11, align 4, !tbaa !92
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %v2, i32 1
    %14 = load float, float* %13, align 4, !tbaa !92
    %15 = fcmp ugt float %10, %12
    br i1 %15, label %20, label %16
  
  ; <label>:16                                      ; preds = %0
    %17 = fcmp ugt float %12, %14
    br i1 %17, label %18, label %24
  
  ; <label>:18                                      ; preds = %16
    %19 = fcmp ugt float %14, %10
    %v2.v0 = select i1 %19, i32 %v2, i32 %v0
    %v0.v2 = select i1 %19, i32 %v0, i32 %v2
    br label %24
  
  ; <label>:20                                      ; preds = %0
    %21 = fcmp ugt float %10, %14
    br i1 %21, label %22, label %24
  
  ; <label>:22                                      ; preds = %20
    %23 = fcmp ugt float %14, %12
    %v2.v1 = select i1 %23, i32 %v2, i32 %v1
    %v1.v2 = select i1 %23, i32 %v1, i32 %v2
    br label %24
  
  ; <label>:24                                      ; preds = %22, %20, %18, %16
    %vMax.0 = phi i32 [ %v2, %16 ], [ %v1, %18 ], [ %v2, %20 ], [ %v0, %22 ]
    %vMid.0 = phi i32 [ %v1, %16 ], [ %v2.v0, %18 ], [ %v0, %20 ], [ %v2.v1, %22 ]
    %vMin.0 = phi i32 [ %v0, %16 ], [ %v0.v2, %18 ], [ %v1, %20 ], [ %v1.v2, %22 ]
    %25 = bitcast %struct.EdgeT.0* %eMaj to i32*
    store i32 %vMin.0, i32* %25, align 4, !tbaa !102
    %26 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %26, align 4, !tbaa !104
    %27 = bitcast %struct.EdgeT.0* %eTop to i32*
    store i32 %vMid.0, i32* %27, align 4, !tbaa !102
    %28 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %28, align 4, !tbaa !104
    %29 = bitcast %struct.EdgeT.0* %eBot to i32*
    store i32 %vMin.0, i32* %29, align 4, !tbaa !102
    %30 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %30, align 4, !tbaa !104
    %31 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMax.0, i32 0
    %32 = load float, float* %31, align 4, !tbaa !92
    %33 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMin.0, i32 0
    %34 = load float, float* %33, align 4, !tbaa !92
    %35 = fsub float %32, %34
    %36 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 2
    store float %35, float* %36, align 4, !tbaa !105
    %37 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMax.0, i32 1
    %38 = load float, float* %37, align 4, !tbaa !92
    %39 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMin.0, i32 1
    %40 = load float, float* %39, align 4, !tbaa !92
    %41 = fsub float %38, %40
    %42 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 3
    store float %41, float* %42, align 4, !tbaa !106
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMid.0, i32 0
    %44 = load float, float* %43, align 4, !tbaa !92
    %45 = fsub float %32, %44
    %46 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 2
    store float %45, float* %46, align 4, !tbaa !105
    %47 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMid.0, i32 1
    %48 = load float, float* %47, align 4, !tbaa !92
    %49 = fsub float %38, %48
    %50 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 3
    store float %49, float* %50, align 4, !tbaa !106
    %51 = fsub float %44, %34
    %52 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 2
    store float %51, float* %52, align 4, !tbaa !105
    %53 = fsub float %48, %40
    %54 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 3
    store float %53, float* %54, align 4, !tbaa !106
    %55 = fmul float %53, %35
    %56 = fmul float %51, %41
    %57 = fsub float %55, %56
    %58 = fcmp ogt float %57, 0xBFA99999A0000000
    %59 = fcmp olt float %57, 0x3FA99999A0000000
    %60 = fdiv float 1.000000e+00, %57
    %cond.demorgan = and i1 %58, %59
    br i1 %cond.demorgan, label %.loopexit38, label %61
  
  ; <label>:61                                      ; preds = %24
    %62 = fadd float %34, 5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %40, -5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %44, 5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %48, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = fadd float %38, -5.000000e-01
    %75 = fmul float %74, 2.048000e+03
    %76 = fptosi float %75 to i32
    %77 = add nsw i32 %67, 2047
    %78 = and i32 %77, -2048
    %79 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 6
    store i32 %78, i32* %79, align 4, !tbaa !107
    %80 = add nsw i32 %76, 2047
    %81 = sub nsw i32 %80, %78
    %82 = ashr i32 %81, 11
    %83 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 8
    store i32 %82, i32* %83, align 4, !tbaa !108
    %84 = icmp sgt i32 %82, 0
    br i1 %84, label %85, label %.loopexit38
  
  ; <label>:85                                      ; preds = %61
    %86 = fdiv float %35, %41
    %87 = fmul float %86, 2.048000e+03
    %88 = fptosi float %87 to i32
    %89 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 4
    store i32 %88, i32* %89, align 4, !tbaa !109
    %90 = sub nsw i32 %78, %67
    %91 = sitofp i32 %90 to float
    %92 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 7
    store float %91, float* %92, align 4, !tbaa !110
    %93 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 9
    store i32 %64, i32* %93, align 4, !tbaa !111
    %94 = fmul float %86, %91
    %95 = fptosi float %94 to i32
    %96 = add nsw i32 %95, %64
    %97 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 5
    store i32 %96, i32* %97, align 4, !tbaa !112
    %98 = add nsw i32 %73, 2047
    %99 = and i32 %98, -2048
    %100 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 6
    store i32 %99, i32* %100, align 4, !tbaa !107
    %101 = sub nsw i32 %80, %99
    %102 = ashr i32 %101, 11
    %103 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 8
    store i32 %102, i32* %103, align 4, !tbaa !108
    %104 = icmp sgt i32 %102, 0
    br i1 %104, label %105, label %118
  
  ; <label>:105                                     ; preds = %85
    %106 = fdiv float %45, %49
    %107 = fmul float %106, 2.048000e+03
    %108 = fptosi float %107 to i32
    %109 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 4
    store i32 %108, i32* %109, align 4, !tbaa !109
    %110 = sub nsw i32 %99, %73
    %111 = sitofp i32 %110 to float
    %112 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 7
    store float %111, float* %112, align 4, !tbaa !110
    %113 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 9
    store i32 %70, i32* %113, align 4, !tbaa !111
    %114 = fmul float %106, %111
    %115 = fptosi float %114 to i32
    %116 = add nsw i32 %115, %70
    %117 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 5
    store i32 %116, i32* %117, align 4, !tbaa !112
    br label %118
  
  ; <label>:118                                     ; preds = %105, %85
    %119 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 6
    store i32 %78, i32* %119, align 4, !tbaa !107
    %120 = sub nsw i32 %98, %78
    %121 = ashr i32 %120, 11
    %122 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 8
    store i32 %121, i32* %122, align 4, !tbaa !108
    %123 = icmp sgt i32 %121, 0
    br i1 %123, label %124, label %135
  
  ; <label>:124                                     ; preds = %118
    %125 = fdiv float %51, %53
    %126 = fmul float %125, 2.048000e+03
    %127 = fptosi float %126 to i32
    %128 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 4
    store i32 %127, i32* %128, align 4, !tbaa !109
    %129 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 7
    store float %91, float* %129, align 4, !tbaa !110
    %130 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 9
    store i32 %64, i32* %130, align 4, !tbaa !111
    %131 = fmul float %125, %91
    %132 = fptosi float %131 to i32
    %133 = add nsw i32 %132, %64
    %134 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 5
    store i32 %133, i32* %134, align 4, !tbaa !112
    br label %135
  
  ; <label>:135                                     ; preds = %124, %118
    %136 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 7
    %137 = load [4 x i32]*, [4 x i32]** %136, align 4, !tbaa !94
    %138 = getelementptr inbounds [4 x i32], [4 x i32]* %137, i32 %pv, i32 0
    %139 = load i32, i32* %138, align 4, !tbaa !87
    %140 = getelementptr inbounds [4 x i32], [4 x i32]* %137, i32 %pv, i32 1
    %141 = load i32, i32* %140, align 4, !tbaa !87
    %142 = getelementptr inbounds [4 x i32], [4 x i32]* %137, i32 %pv, i32 2
    %143 = load i32, i32* %142, align 4, !tbaa !87
    %144 = getelementptr inbounds [4 x i32], [4 x i32]* %137, i32 %pv, i32 3
    %145 = load i32, i32* %144, align 4, !tbaa !87
    %146 = and i32 %139, 255
    %147 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 10
    %148 = load i32, i32* %147, align 4, !tbaa !11
    %149 = shl i32 %146, %148
    %150 = and i32 %141, 255
    %151 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 11
    %152 = load i32, i32* %151, align 4, !tbaa !12
    %153 = shl i32 %150, %152
    %154 = or i32 %153, %149
    %155 = and i32 %143, 255
    %156 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 12
    %157 = load i32, i32* %156, align 4, !tbaa !13
    %158 = shl i32 %155, %157
    %159 = or i32 %154, %158
    %160 = and i32 %145, 255
    %161 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 13
    %162 = load i32, i32* %161, align 4, !tbaa !14
    %163 = shl i32 %160, %162
    %164 = or i32 %159, %163
    %165 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMax.0, i32 2
    %166 = load float, float* %165, align 4, !tbaa !92
    %167 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMin.0, i32 2
    %168 = load float, float* %167, align 4, !tbaa !92
    %169 = fsub float %166, %168
    %170 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %vMid.0, i32 2
    %171 = load float, float* %170, align 4, !tbaa !92
    %172 = fsub float %171, %168
    %173 = fmul float %169, %53
    %174 = fmul float %172, %41
    %175 = fsub float %173, %174
    %176 = fmul float %60, %175
    %177 = fcmp ogt float %176, 6.553500e+04
    %178 = fcmp olt float %176, -6.553500e+04
    %or.cond15 = or i1 %177, %178
    br i1 %or.cond15, label %184, label %179
  
  ; <label>:179                                     ; preds = %135
    %180 = fmul float %172, %35
    %181 = fmul float %169, %51
    %182 = fsub float %180, %181
    %183 = fmul float %60, %182
    br label %184
  
  ; <label>:184                                     ; preds = %179, %135
    %dzdy.0 = phi float [ %183, %179 ], [ 0.000000e+00, %135 ]
    %dzdx.0 = phi float [ %176, %179 ], [ 0.000000e+00, %135 ]
    %185 = fcmp olt float %60, 0.000000e+00
    %186 = fmul float %dzdx.0, 2.048000e+03
    %187 = fptosi float %186 to i32
    %eMaj.eBot = select i1 %185, %struct.EdgeT.0* %eMaj, %struct.EdgeT.0* %eBot
    %eBot.eMaj = select i1 %185, %struct.EdgeT.0* %eBot, %struct.EdgeT.0* %eMaj
    %.16 = zext i1 %185 to i32
    br label %188
  
  ; <label>:188                                     ; preds = %.loopexit, %184
    %subTriangle.067 = phi i32 [ 0, %184 ], [ %301, %.loopexit ]
    %fdzOuter.066 = phi i32 [ undef, %184 ], [ %fdzOuter.1, %.loopexit ]
    %fz.065 = phi i32 [ undef, %184 ], [ %fz.4.ph, %.loopexit ]
    %fxLeftEdge.064 = phi i32 [ undef, %184 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %dZRowOuter.063 = phi i32 [ undef, %184 ], [ %dZRowOuter.1, %.loopexit ]
    %zRow.062 = phi i16* [ undef, %184 ], [ %zRow.4.ph, %.loopexit ]
    %iy.061 = phi i32 [ undef, %184 ], [ %iy.3.ph, %.loopexit ]
    %fxRightEdge.060 = phi i32 [ undef, %184 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.059 = phi i32 [ undef, %184 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdxRightEdge.058 = phi i32 [ undef, %184 ], [ %fdxRightEdge.1, %.loopexit ]
    %fdError.057 = phi i32 [ undef, %184 ], [ %fdError.1, %.loopexit ]
    %fError.056 = phi i32 [ undef, %184 ], [ %fError.4.ph, %.loopexit ]
    %189 = icmp eq i32 %subTriangle.067, 0
    br i1 %189, label %.thread, label %191
  
  .thread:                                          ; preds = %188
    %sunkaddr = ptrtoint %struct.EdgeT.0* %eBot to i32
    %sunkaddr2 = add i32 %sunkaddr, 32
    %sunkaddr3 = inttoptr i32 %sunkaddr2 to i32*
    %190 = load i32, i32* %sunkaddr3, align 4, !tbaa !108
    br label %196
  
  ; <label>:191                                     ; preds = %188
    %sunkaddr4 = ptrtoint %struct.EdgeT.0* %eTop to i32
    %sunkaddr5 = add i32 %sunkaddr4, 32
    %sunkaddr6 = inttoptr i32 %sunkaddr5 to i32*
    %192 = load i32, i32* %sunkaddr6, align 4, !tbaa !108
    %193 = icmp eq i32 %192, 0
    br i1 %193, label %.loopexit38, label %194
  
  ; <label>:194                                     ; preds = %191
    %195 = fcmp olt float %60, 0.000000e+00
    br i1 %195, label %253, label %196
  
  ; <label>:196                                     ; preds = %194, %.thread
    %lines.123 = phi i32 [ %190, %.thread ], [ %192, %194 ]
    %setupRight.121 = phi i32 [ 1, %.thread ], [ %.16, %194 ]
    %eRight.119 = phi %struct.EdgeT.0* [ %eBot.eMaj, %.thread ], [ %eMaj, %194 ]
    %eLeft.118 = phi %struct.EdgeT.0* [ %eMaj.eBot, %.thread ], [ %eTop, %194 ]
    %197 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 8
    %198 = load i32, i32* %197, align 4, !tbaa !108
    %199 = icmp sgt i32 %198, 0
    br i1 %199, label %200, label %253
  
  ; <label>:200                                     ; preds = %196
    %201 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 5
    %202 = load i32, i32* %201, align 4, !tbaa !112
    %203 = add nsw i32 %202, 2047
    %204 = and i32 %203, -2048
    %205 = sub i32 -2048, %202
    %206 = add i32 %205, %204
    %207 = add nsw i32 %202, -1
    %208 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 4
    %209 = load i32, i32* %208, align 4, !tbaa !109
    %210 = add nsw i32 %209, -1
    %211 = and i32 %210, -2048
    %212 = sub i32 2048, %209
    %213 = add i32 %212, %211
    %214 = ashr i32 %210, 11
    %215 = sitofp i32 %214 to float
    %216 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 6
    %217 = load i32, i32* %216, align 4, !tbaa !107
    %218 = ashr i32 %217, 11
    %219 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 9
    %220 = load i32, i32* %219, align 4, !tbaa !111
    %221 = sub nsw i32 %204, %220
    %222 = sitofp i32 %221 to float
    %223 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.118, i32 0, i32 7
    %224 = load float, float* %223, align 4, !tbaa !110
    %225 = bitcast %struct.EdgeT.0* %eLeft.118 to i32*
    %226 = load i32, i32* %225, align 4, !tbaa !102
    %227 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %5, i32 0, i32 3, i32 %226, i32 2
    %228 = load float, float* %227, align 4, !tbaa !92
    %sunkaddr7 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr8 = add i32 %sunkaddr7, 55768
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to float*
    %229 = load float, float* %sunkaddr9, align 4, !tbaa !113
    %230 = fadd float %228, %229
    %231 = fmul float %230, 2.048000e+03
    %232 = fmul float %dzdx.0, %222
    %233 = fadd float %232, %231
    %234 = fmul float %dzdy.0, %224
    %235 = fadd float %234, %233
    %236 = fptosi float %235 to i32
    %237 = add nsw i32 %236, 1024
    %238 = fmul float %dzdx.0, %215
    %239 = fadd float %dzdy.0, %238
    %240 = fmul float %239, 2.048000e+03
    %241 = fptosi float %240 to i32
    %sunkaddr10 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr11 = add i32 %sunkaddr10, 2024
    %sunkaddr12 = inttoptr i32 %sunkaddr11 to %struct.gl_frame_buffer**
    %242 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr12, align 4, !tbaa !96
    %243 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %242, i32 0, i32 3
    %244 = load i16*, i16** %243, align 4, !tbaa !100
    %245 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %242, i32 0, i32 1
    %246 = load i32, i32* %245, align 4, !tbaa !97
    %247 = mul nsw i32 %246, %218
    %248 = getelementptr inbounds i16, i16* %244, i32 %247
    %249 = ashr i32 %207, 11
    %250 = getelementptr inbounds i16, i16* %248, i32 %249
    %251 = add nsw i32 %246, %214
    %252 = shl i32 %251, 1
    br label %253
  
  ; <label>:253                                     ; preds = %200, %196, %194
    %lines.124 = phi i32 [ %lines.123, %200 ], [ %lines.123, %196 ], [ %192, %194 ]
    %setupRight.122 = phi i32 [ %setupRight.121, %200 ], [ %setupRight.121, %196 ], [ %.16, %194 ]
    %eRight.120 = phi %struct.EdgeT.0* [ %eRight.119, %200 ], [ %eRight.119, %196 ], [ %eTop, %194 ]
    %fError.1 = phi i32 [ %206, %200 ], [ %fError.056, %196 ], [ %fError.056, %194 ]
    %fdError.1 = phi i32 [ %213, %200 ], [ %fdError.057, %196 ], [ %fdError.057, %194 ]
    %fdxLeftEdge.1 = phi i32 [ %209, %200 ], [ %fdxLeftEdge.059, %196 ], [ %fdxLeftEdge.059, %194 ]
    %iy.1 = phi i32 [ %218, %200 ], [ %iy.061, %196 ], [ %iy.061, %194 ]
    %zRow.1 = phi i16* [ %250, %200 ], [ %zRow.062, %196 ], [ %zRow.062, %194 ]
    %dZRowOuter.1 = phi i32 [ %252, %200 ], [ %dZRowOuter.063, %196 ], [ %dZRowOuter.063, %194 ]
    %fxLeftEdge.1 = phi i32 [ %207, %200 ], [ %fxLeftEdge.064, %196 ], [ %fxLeftEdge.064, %194 ]
    %fz.1 = phi i32 [ %237, %200 ], [ %fz.065, %196 ], [ %fz.065, %194 ]
    %fdzOuter.1 = phi i32 [ %241, %200 ], [ %fdzOuter.066, %196 ], [ %fdzOuter.066, %194 ]
    %254 = icmp eq i32 %setupRight.122, 0
    br i1 %254, label %265, label %255
  
  ; <label>:255                                     ; preds = %253
    %256 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.120, i32 0, i32 8
    %257 = load i32, i32* %256, align 4, !tbaa !108
    %258 = icmp sgt i32 %257, 0
    br i1 %258, label %259, label %265
  
  ; <label>:259                                     ; preds = %255
    %260 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.120, i32 0, i32 5
    %261 = load i32, i32* %260, align 4, !tbaa !112
    %262 = add nsw i32 %261, -1
    %263 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.120, i32 0, i32 4
    %264 = load i32, i32* %263, align 4, !tbaa !109
    br label %265
  
  ; <label>:265                                     ; preds = %259, %255, %253
    %fdxRightEdge.1 = phi i32 [ %264, %259 ], [ %fdxRightEdge.058, %255 ], [ %fdxRightEdge.058, %253 ]
    %fxRightEdge.1 = phi i32 [ %262, %259 ], [ %fxRightEdge.060, %255 ], [ %fxRightEdge.060, %253 ]
    %266 = icmp eq i32 %lines.124, 0
    br i1 %266, label %.loopexit, label %267
  
  ; <label>:267                                     ; preds = %265
    %268 = add i32 %dZRowOuter.1, 2
    %269 = icmp sgt i32 %lines.124, 0
    br i1 %269, label %.lr.ph50, label %.loopexit
  
  .lr.ph50:                                         ; preds = %267, %._crit_edge
    %lines.248 = phi i32 [ %290, %._crit_edge ], [ %lines.124, %267 ]
    %fz.247 = phi i32 [ %fz.3, %._crit_edge ], [ %fz.1, %267 ]
    %fxLeftEdge.246 = phi i32 [ %291, %._crit_edge ], [ %fxLeftEdge.1, %267 ]
    %zRow.245 = phi i16* [ %zRow.3, %._crit_edge ], [ %zRow.1, %267 ]
    %iy.244 = phi i32 [ %289, %._crit_edge ], [ %iy.1, %267 ]
    %fxRightEdge.243 = phi i32 [ %292, %._crit_edge ], [ %fxRightEdge.1, %267 ]
    %fError.242 = phi i32 [ %fError.3, %._crit_edge ], [ %fError.1, %267 ]
    %270 = ashr i32 %fxLeftEdge.246, 11
    %271 = ashr i32 %fxRightEdge.243, 11
    %272 = sub nsw i32 %271, %270
    %273 = icmp sgt i32 %272, 0
    br i1 %273, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.lr.ph50
    %274 = getelementptr inbounds %struct.osmesa_context, %struct.osmesa_context* %3, i32 0, i32 17, i32 %iy.244
    %275 = bitcast i8** %274 to i32**
    %276 = load i32*, i32** %275, align 4, !tbaa !22
    %277 = getelementptr inbounds i32, i32* %276, i32 %270
    %278 = sub i32 %271, %270
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %286, %.lr.ph.preheader
    %lsr.iv1 = phi i16* [ %scevgep, %286 ], [ %zRow.245, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %286 ], [ %278, %.lr.ph.preheader ]
    %img.041 = phi i32* [ %288, %286 ], [ %277, %.lr.ph.preheader ]
    %ffz.039 = phi i32 [ %287, %286 ], [ %fz.247, %.lr.ph.preheader ]
    %279 = lshr i32 %ffz.039, 11
    %280 = and i32 %279, 65535
    %281 = load i16, i16* %lsr.iv1, align 2, !tbaa !101
    %282 = zext i16 %281 to i32
    %283 = icmp ult i32 %280, %282
    br i1 %283, label %284, label %286
  
  ; <label>:284                                     ; preds = %.lr.ph
    %285 = trunc i32 %279 to i16
    store i32 %164, i32* %img.041, align 4, !tbaa !87
    store i16 %285, i16* %lsr.iv1, align 2, !tbaa !101
    br label %286
  
  ; <label>:286                                     ; preds = %284, %.lr.ph
    %287 = add nsw i32 %ffz.039, %187
    %288 = getelementptr inbounds i32, i32* %img.041, i32 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i16, i16* %lsr.iv1, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %286, %.lr.ph50
    %289 = add nsw i32 %iy.244, 1
    %290 = add nsw i32 %lines.248, -1
    %291 = add nsw i32 %fxLeftEdge.246, %fdxLeftEdge.1
    %292 = add nsw i32 %fxRightEdge.243, %fdxRightEdge.1
    %293 = add nsw i32 %fError.242, %fdError.1
    %294 = icmp sgt i32 %293, -1
    %295 = add nsw i32 %293, -2048
    %296 = bitcast i16* %zRow.245 to i8*
    %297 = getelementptr inbounds i8, i8* %296, i32 %dZRowOuter.1
    %298 = getelementptr inbounds i8, i8* %296, i32 %268
    %fError.3 = select i1 %294, i32 %295, i32 %293
    %zRow.3.in = select i1 %294, i8* %297, i8* %298
    %299 = select i1 %294, i32 0, i32 %187
    %fdzOuter.1.pn = add nsw i32 %299, %fdzOuter.1
    %fz.3 = add nsw i32 %fdzOuter.1.pn, %fz.247
    %zRow.3 = bitcast i8* %zRow.3.in to i16*
    %300 = icmp sgt i32 %lines.248, 1
    br i1 %300, label %.lr.ph50, label %.loopexit
  
  .loopexit:                                        ; preds = %._crit_edge, %267, %265
    %fError.4.ph = phi i32 [ %fError.1, %265 ], [ %fError.1, %267 ], [ %fError.3, %._crit_edge ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %265 ], [ %fxRightEdge.1, %267 ], [ %292, %._crit_edge ]
    %iy.3.ph = phi i32 [ %iy.1, %265 ], [ %iy.1, %267 ], [ %289, %._crit_edge ]
    %zRow.4.ph = phi i16* [ %zRow.1, %265 ], [ %zRow.1, %267 ], [ %zRow.3, %._crit_edge ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %265 ], [ %fxLeftEdge.1, %267 ], [ %291, %._crit_edge ]
    %fz.4.ph = phi i32 [ %fz.1, %265 ], [ %fz.1, %267 ], [ %fz.3, %._crit_edge ]
    %301 = add nuw nsw i32 %subTriangle.067, 1
    %302 = icmp slt i32 %301, 2
    br i1 %302, label %188, label %.loopexit38
  
  .loopexit38:                                      ; preds = %191, %.loopexit, %61, %24
    %303 = bitcast %struct.EdgeT.0* %eBot to i8*
    %304 = bitcast %struct.EdgeT.0* %eTop to i8*
    %305 = bitcast %struct.EdgeT.0* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %303) #6
    call void @llvm.lifetime.end(i64 40, i8* %304) #6
    call void @llvm.lifetime.end(i64 40, i8* %305) #6
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { norecurse nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #5 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #6 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !3, i64 4}
  !2 = !{!"osmesa_context", !3, i64 0, !3, i64 4, !3, i64 8, !4, i64 12, !3, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !6, i64 32, !6, i64 36, !6, i64 40, !6, i64 44, !6, i64 48, !6, i64 52, !6, i64 56, !6, i64 60, !6, i64 64, !4, i64 68, !4, i64 4164}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"int", !4, i64 0}
  !7 = !{!2, !3, i64 0}
  !8 = !{!2, !3, i64 8}
  !9 = !{!2, !4, i64 12}
  !10 = !{!2, !4, i64 4164}
  !11 = !{!2, !6, i64 40}
  !12 = !{!2, !6, i64 44}
  !13 = !{!2, !6, i64 48}
  !14 = !{!2, !6, i64 52}
  !15 = !{!2, !6, i64 56}
  !16 = !{!2, !6, i64 60}
  !17 = !{!2, !6, i64 64}
  !18 = !{!2, !3, i64 16}
  !19 = !{!2, !6, i64 20}
  !20 = !{!2, !6, i64 24}
  !21 = !{!2, !6, i64 36}
  !22 = !{!3, !3, i64 0}
  !23 = !{!24, !6, i64 54664}
  !24 = !{!"gl_context", !3, i64 0, !25, i64 4, !25, i64 676, !25, i64 1348, !3, i64 2020, !3, i64 2024, !26, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !6, i64 2344, !4, i64 2348, !4, i64 4396, !6, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !6, i64 6580, !4, i64 6584, !6, i64 7224, !4, i64 7228, !4, i64 7229, !6, i64 7232, !4, i64 7236, !27, i64 7300, !28, i64 7316, !30, i64 7404, !31, i64 7512, !32, i64 7524, !33, i64 7580, !34, i64 7620, !35, i64 7640, !37, i64 43772, !39, i64 43784, !40, i64 43788, !41, i64 54132, !42, i64 54140, !4, i64 54180, !43, i64 54308, !44, i64 54328, !45, i64 54352, !46, i64 54548, !47, i64 54656, !6, i64 54704, !4, i64 54708, !48, i64 54772, !49, i64 54900, !49, i64 54928, !50, i64 54956, !53, i64 55424, !54, i64 55444, !4, i64 55732, !6, i64 55736, !4, i64 55740, !4, i64 55744, !6, i64 55748, !6, i64 55752, !6, i64 55756, !6, i64 55760, !4, i64 55764, !29, i64 55768, !29, i64 55772, !29, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !6, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !25 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !26 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !27 = !{!"gl_accum_attrib", !4, i64 0}
  !28 = !{!"gl_colorbuffer_attrib", !6, i64 0, !4, i64 4, !6, i64 20, !6, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !29, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !29 = !{!"float", !4, i64 0}
  !30 = !{!"gl_current_attrib", !4, i64 0, !6, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !29, i64 64, !4, i64 68, !6, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !31 = !{!"gl_depthbuffer_attrib", !4, i64 0, !29, i64 4, !4, i64 8, !4, i64 9}
  !32 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !6, i64 20, !29, i64 24, !29, i64 28, !6, i64 32, !6, i64 36, !29, i64 40, !29, i64 44, !29, i64 48, !29, i64 52}
  !33 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !29, i64 20, !29, i64 24, !29, i64 28, !29, i64 32, !4, i64 36}
  !34 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !35 = !{!"gl_light_attrib", !4, i64 0, !36, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !6, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !36 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !37 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !38, i64 2, !6, i64 4, !29, i64 8}
  !38 = !{!"short", !4, i64 0}
  !39 = !{!"gl_list_attrib", !6, i64 0}
  !40 = !{!"gl_pixel_attrib", !4, i64 0, !29, i64 4, !29, i64 8, !29, i64 12, !29, i64 16, !29, i64 20, !29, i64 24, !29, i64 28, !29, i64 32, !29, i64 36, !29, i64 40, !6, i64 44, !6, i64 48, !4, i64 52, !4, i64 53, !29, i64 56, !29, i64 60, !6, i64 64, !6, i64 68, !6, i64 72, !6, i64 76, !6, i64 80, !6, i64 84, !6, i64 88, !6, i64 92, !6, i64 96, !6, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !41 = !{!"gl_point_attrib", !4, i64 0, !29, i64 4}
  !42 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !6, i64 20, !4, i64 24, !4, i64 25, !29, i64 28, !29, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !43 = !{!"gl_scissor_attrib", !4, i64 0, !6, i64 4, !6, i64 8, !6, i64 12, !6, i64 16}
  !44 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !45 = !{!"gl_texture_attrib", !6, i64 0, !4, i64 4, !4, i64 8, !6, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !46 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !47 = !{!"gl_viewport_attrib", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12, !29, i64 16, !29, i64 20, !29, i64 24, !29, i64 28, !29, i64 32, !29, i64 36, !29, i64 40, !29, i64 44}
  !48 = !{!"gl_array_attrib", !6, i64 0, !4, i64 4, !6, i64 8, !6, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !6, i64 28, !6, i64 32, !3, i64 36, !4, i64 40, !6, i64 44, !4, i64 48, !6, i64 52, !6, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !6, i64 72, !6, i64 76, !3, i64 80, !4, i64 84, !6, i64 88, !4, i64 92, !6, i64 96, !6, i64 100, !3, i64 104, !4, i64 108, !6, i64 112, !6, i64 116, !3, i64 120, !4, i64 124}
  !49 = !{!"gl_pixelstore_attrib", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12, !6, i64 16, !6, i64 20, !4, i64 24, !4, i64 25}
  !50 = !{!"gl_evaluators", !51, i64 0, !51, i64 20, !51, i64 40, !51, i64 60, !51, i64 80, !51, i64 100, !51, i64 120, !51, i64 140, !51, i64 160, !52, i64 180, !52, i64 212, !52, i64 244, !52, i64 276, !52, i64 308, !52, i64 340, !52, i64 372, !52, i64 404, !52, i64 436}
  !51 = !{!"gl_1d_map", !6, i64 0, !29, i64 4, !29, i64 8, !3, i64 12, !4, i64 16}
  !52 = !{!"gl_2d_map", !6, i64 0, !6, i64 4, !29, i64 8, !29, i64 12, !29, i64 16, !29, i64 20, !3, i64 24, !4, i64 28}
  !53 = !{!"gl_feedback", !4, i64 0, !6, i64 4, !3, i64 8, !6, i64 12, !6, i64 16}
  !54 = !{!"gl_selection", !3, i64 0, !6, i64 4, !6, i64 8, !6, i64 12, !6, i64 16, !4, i64 20, !4, i64 276, !29, i64 280, !29, i64 284}
  !55 = !{!24, !6, i64 54320}
  !56 = !{!24, !6, i64 54324}
  !57 = !{!24, !3, i64 2208}
  !58 = !{!24, !3, i64 2028}
  !59 = !{!24, !3, i64 2052}
  !60 = !{!24, !3, i64 2048}
  !61 = !{!24, !3, i64 2044}
  !62 = !{!24, !3, i64 2032}
  !63 = !{!24, !3, i64 2036}
  !64 = !{!24, !3, i64 2040}
  !65 = !{!24, !3, i64 2056}
  !66 = !{!24, !3, i64 2160}
  !67 = !{!24, !6, i64 54352}
  !68 = !{!24, !4, i64 43728}
  !69 = !{!24, !6, i64 55756}
  !70 = !{!24, !4, i64 7512}
  !71 = !{!24, !4, i64 7521}
  !72 = !{!24, !29, i64 43780}
  !73 = !{!24, !3, i64 2164}
  !74 = !{!24, !3, i64 2168}
  !75 = !{!24, !3, i64 2060}
  !76 = !{!24, !3, i64 2068}
  !77 = !{!24, !3, i64 2076}
  !78 = !{!24, !3, i64 2064}
  !79 = !{!24, !3, i64 2080}
  !80 = !{!24, !3, i64 2084}
  !81 = !{!24, !3, i64 2072}
  !82 = !{!24, !3, i64 2088}
  !83 = !{!24, !3, i64 2096}
  !84 = !{!24, !3, i64 2092}
  !85 = !{!24, !3, i64 2104}
  !86 = !{!24, !3, i64 2100}
  !87 = !{!6, !6, i64 0}
  !88 = !{!2, !6, i64 28}
  !89 = !{!2, !6, i64 32}
  !90 = !{!4, !4, i64 0}
  !91 = !{!24, !3, i64 55808}
  !92 = !{!29, !29, i64 0}
  !93 = !{!24, !29, i64 55772}
  !94 = !{!95, !3, i64 52416}
  !95 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !6, i64 65532, !6, i64 65536, !6, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !96 = !{!24, !3, i64 2024}
  !97 = !{!98, !6, i64 4}
  !98 = !{!"gl_frame_buffer", !3, i64 0, !6, i64 4, !6, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !6, i64 36, !6, i64 40, !6, i64 44, !6, i64 48}
  !99 = !{!98, !6, i64 8}
  !100 = !{!98, !3, i64 12}
  !101 = !{!38, !38, i64 0}
  !102 = !{!103, !6, i64 0}
  !103 = !{!"", !6, i64 0, !6, i64 4, !29, i64 8, !29, i64 12, !6, i64 16, !6, i64 20, !6, i64 24, !29, i64 28, !6, i64 32, !6, i64 36}
  !104 = !{!103, !6, i64 4}
  !105 = !{!103, !29, i64 8}
  !106 = !{!103, !29, i64 12}
  !107 = !{!103, !6, i64 24}
  !108 = !{!103, !6, i64 32}
  !109 = !{!103, !6, i64 16}
  !110 = !{!103, !29, i64 28}
  !111 = !{!103, !6, i64 36}
  !112 = !{!103, !6, i64 20}
  !113 = !{!24, !29, i64 55768}

...
---
name:            flat_color_z_line
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%a3' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 108):
    successors: %bb.4(37), %bb.1(62)
    liveins: %a0, %a1, %a2, %a3, %s0
  
    %sp = ADDiu %sp, -8
    CFI_INSTRUCTION .cfi_def_cfa_offset 8
    SW killed %s0, %sp, 4 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %s0_64, -4
    %at = SLL %a2, 2
    %v0 = SLL killed %a2, 3
    %v1 = SLL %a1, 2
    %a1 = SLL killed %a1, 3
    %v1 = ADDu killed %a1, killed %v1
    %at = ADDu killed %v0, killed %at
    %v0 = ORi %zero, 55808
    %v0 = ADDu %a0, killed %v0
    %a1 = LW killed %v0, 0 :: (load 4 from %ir.4, !tbaa !91)
    %a2 = ADDiu %a1, 24192
    %f0 = LWXC1 %a2, %at :: (load 4 from %ir.9, !tbaa !92)
    %v0 = LW %a0, 2208 :: (load 4 from %ir.2, !tbaa !57)
    %t0 = LW %a0, 2024 :: (load 4 from %ir.47, !tbaa !96)
    %f2 = LWXC1 %a2, %v1 :: (load 4 from %ir.6, !tbaa !92)
    %v1 = ADDu %a2, killed %v1
    %t3 = ORi %zero, 55772
    %t1 = LW %t0, 4 :: (load 4 from %ir.49, !tbaa !97)
    %t4 = ORi %zero, 52416
    %t2 = LW %v0, 40 :: (load 4 from %ir.32, !tbaa !11)
    %t6 = ADDiu %zero, 1
    %f5 = TRUNC_W_S killed %f0
    %at = ADDu killed %a2, killed %at
    %f3 = LWC1 %at, 4 :: (load 4 from %ir.15, !tbaa !92)
    %f4 = LWC1 %v1, 4 :: (load 4 from %ir.12, !tbaa !92)
    %f1 = LWC1 killed %v1, 8 :: (load 4 from %ir.18, !tbaa !92)
    %f0 = LWXC1 killed %a0, killed %t3 :: (load 4 from %ir.20, !tbaa !93)
    %f2 = TRUNC_W_S killed %f2
    %a0 = LW %v0, 44 :: (load 4 from %ir.37, !tbaa !12)
    %a2 = MFC1 killed %f5
    %v1 = ADDu killed %a1, killed %t4
    %v1 = LW killed %v1, 0 :: (load 4 from %ir.28, !tbaa !94)
    %a1 = SLL killed %a3, 4
    %t5 = ADDu killed %v1, killed %a1
    %a3 = LW %t5, 0 :: (load 4 from %ir.30, !tbaa !87)
    %v1 = MFC1 killed %f2
    %a1 = XOR %a2, %t1
    %f2 = LWC1 killed %at, 8 :: (load 4 from %ir.24, !tbaa !92)
    %t3 = LW %v0, 48 :: (load 4 from %ir.43, !tbaa !13)
    %t4 = LW %t5, 4 :: (load 4 from %ir.35, !tbaa !87)
    %a1 = SLTiu killed %a1, 1
    %at = XOR %v1, %t1
    %t7 = SLTiu killed %at, 1
    %t5 = LW killed %t5, 8 :: (load 4 from %ir.41, !tbaa !87)
    %at = OR %t7, %a1
    BNE %at, %t6, %bb.4, implicit-def %at {
      NOP
    }
  
  bb.1 (%ir-block.57, freq 67):
    successors: %bb.2(75), %bb.3(25)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    BNE %v1, %t1, %bb.3, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.57, freq 50):
    successors: %bb.22..loopexit(66), %bb.3(33)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    BEQ %a2, %t1, %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.61, freq 33):
    successors: %bb.4(100)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    %a2 = SUBu killed %a2, killed %a1
    %v1 = SUBu killed %v1, killed %t7
  
  bb.4 (%ir-block.64, freq 74):
    successors: %bb.8(37), %bb.5(62)
    liveins: %a0, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %v0, %v1
  
    %f4 = TRUNC_W_S killed %f4
    %f3 = TRUNC_W_S killed %f3
    %t7 = MFC1 killed %f3
    %a1 = MFC1 killed %f4
    %t9 = LW %t0, 8 :: (load 4 from %ir.65, !tbaa !99)
    %at = XOR %t7, %t9
    %t8 = SLTiu killed %at, 1
    %at = XOR %a1, %t9
    %gp = SLTiu killed %at, 1
    %at = OR %gp, %t8
    BNE %at, %t6, %bb.8, implicit-def %at {
      NOP
    }
  
  bb.5 (%ir-block.73, freq 46):
    successors: %bb.6(75), %bb.7(25)
    liveins: %gp, %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %t8, %t9, %v0, %v1
  
    BNE %a1, %t9, %bb.7, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.73, freq 34):
    successors: %bb.22..loopexit(66), %bb.7(33)
    liveins: %gp, %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %t8, %t9, %v0, %v1
  
    BEQ %t7, %t9, %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.7 (%ir-block.77, freq 23):
    successors: %bb.8(100)
    liveins: %gp, %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %t8, %v0, %v1
  
    %t7 = SUBu killed %t7, killed %t8
    %a1 = SUBu killed %a1, killed %gp
  
  bb.8 (%ir-block.80, freq 51):
    successors: %bb.9(75), %bb.10(25)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %v0, %v1
  
    BNE %v1, %a2, %bb.10, implicit-def %at {
      NOP
    }
  
  bb.9 (%ir-block.80, freq 38):
    successors: %bb.22..loopexit(66), %bb.10(33)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %v0, %v1
  
    BEQ %a1, %t7, %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.10 (%ir-block.83, freq 25):
    successors: %bb.11(50), %bb.17(50)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %t0, %t1, %t2, %t3, %t4, %t5, %t7, %v0, %v1
  
    %f1 = FADD_S killed %f1, %f0
    %at = SLLV killed %a3, killed %t2
    %a0 = SLLV killed %t4, killed %a0
    %at = OR killed %a0, killed %at
    %a0 = SLLV killed %t5, killed %t3
    %a0 = OR killed %at, killed %a0
    %f1 = TRUNC_W_S killed %f1
    %f0 = FADD_S killed %f0, killed %f2
    %f0 = TRUNC_W_S killed %f0
    %at = MFC1 killed %f0
    %a3 = MFC1 killed %f1
    %t6 = SUBu %a1, %t7
    %t2 = SUBu %t7, %a1
    %t9 = SUBu %v1, %a2
    %t4 = MUL %t1, %a1, implicit-def dead %hi0, implicit-def dead %lo0
    %t3 = SLT %a1, killed %t7
    %t5 = SUBu %a2, %v1
    %t7 = SLT %v1, killed %a2
    %t9 = MOVN_I_I killed %t5, %t7, killed %t9
    %t6 = MOVN_I_I killed %t2, %t3, killed %t6
    %t8 = SUBu killed %zero, %t1
    %a2 = SLL killed %a3, 7
    %at = SLL killed %at, 7
    %t2 = ADDiu %zero, -1
    %a3 = ADDiu %zero, 1
    %t8 = MOVN_I_I killed %t1, %t3, killed %t8
    %t1 = ADDiu %zero, -1
    %t1 = MOVN_I_I %a3, killed %t3, killed %t1
    %t2 = MOVN_I_I killed %a3, killed %t7, killed %t2
    %t3 = SUBu killed %at, %a2
    %at = LW killed %t0, 12 :: (load 4 from %ir.93, !tbaa !100)
    %t0 = SLT %t6, %t9
    %a3 = SLL %v1, 1
    %t4 = SLL killed %t4, 1
    %at = ADDu killed %at, killed %t4
    BEQ %t0, %zero, %bb.17, implicit-def %at {
      %a3 = ADDu killed %at, killed %a3
    }
  
  bb.11 (%ir-block.100, freq 12):
    successors: %bb.22..loopexit(37), %bb.12..lr.ph.preheader(62)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3, %t6, %t8, %t9, %v0, %v1
  
    %ac0 = PseudoSDIV killed %t3, %t9
    TEQ %t9, %zero, 7
    BLTZ %t9, %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.12..lr.ph.preheader (freq 8):
    successors: %bb.13..lr.ph(100)
    liveins: %a0, %a1, %a2, %a3, %ac0, %t1, %t2, %t6, %t8, %t9, %v0, %v1
  
    %t0 = MFLO implicit %ac0
    %t3 = SLL killed %t6, 1
    %t4 = SUBu %t3, %t9
    %t5 = SUBu %t4, %t9
    %t6 = ADDiu killed %t9, 1
    %t7 = SLL %t2, 2
    %v1 = SLL killed %v1, 2
    %t2 = SLL killed %t2, 1
    %t8 = SLL killed %t8, 1
  
  bb.13..lr.ph (freq 16):
    successors: %bb.14(50), %bb.15(50)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %t8, %v0, %v1
  
    %at = LHu %a3, 0 :: (load 2 from %ir.zptr.016, !tbaa !101)
    %t9 = EXT %a2, 7, 16
    %at = SLTu killed %t9, killed %at
    BEQ %at, %zero, %bb.15, implicit-def %at {
      NOP
    }
  
  bb.14 (%ir-block.114, freq 8):
    successors: %bb.15(100)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %t8, %v0, %v1
  
    %at = SRL %a2, 7
    %t9 = SLL %a1, 2
    %t9 = ADDu %v0, killed %t9
    %t9 = LW killed %t9, 68 :: (load 4 from %ir.117, !tbaa !22)
    %t9 = ADDu killed %t9, %v1
    SW %a0, killed %t9, 0 :: (store 4 into %ir.uglygep1, !tbaa !87)
    SH killed %at, %a3, 0 :: (store 2 into %ir.zptr.016, !tbaa !101)
  
  bb.15 (%ir-block.120, freq 16):
    successors: %bb.16(50), %bb.13..lr.ph(50)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %t8, %v0, %v1
  
    %at = SLTi %t4, 0
    %t9 = OR %t1, %zero
    %t9 = MOVN_I_I killed %zero, %at, killed %t9
    %gp = OR %t5, %zero
    %gp = MOVN_I_I %t3, %at, killed %gp
    %s0 = ADDu killed %a3, %t2
    %a3 = ADDu %s0, %t8
    %a3 = MOVN_I_I killed %s0, killed %at, killed %a3
    %t4 = ADDu killed %gp, killed %t4
    %a1 = ADDu killed %a1, killed %t9
    %v1 = ADDu killed %v1, %t7
    %t6 = ADDiu killed %t6, -1
    BNE %t6, %zero, %bb.13..lr.ph, implicit-def %at {
      %a2 = ADDu killed %a2, %t0
    }
  
  bb.16 (%ir-block.120, freq 8):
    successors: %bb.22..loopexit(100)
  
    B %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.17 (%ir-block.126, freq 12):
    successors: %bb.22..loopexit(37), %bb.18..lr.ph25.preheader(62)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3, %t6, %t8, %t9, %v0, %v1
  
    %ac0 = PseudoSDIV killed %t3, %t6
    TEQ %t6, %zero, 7
    BLTZ %t6, %bb.22..loopexit, implicit-def %at {
      NOP
    }
  
  bb.18..lr.ph25.preheader (freq 8):
    successors: %bb.19..lr.ph25(100)
    liveins: %a0, %a1, %a2, %a3, %ac0, %t1, %t2, %t6, %t8, %t9, %v0, %v1
  
    %t0 = MFLO implicit %ac0
    %t3 = SLL killed %t9, 1
    %t4 = SUBu %t3, %t6
    %t5 = SUBu %t4, %t6
    %at = SLL killed %a1, 2
    %at = ADDu killed %at, killed %v0
    %v0 = ADDiu killed %at, 68
    %a1 = ADDiu killed %t6, 1
    %t1 = SLL killed %t1, 2
    %t6 = SLL killed %t8, 1
    %t7 = SLL %t2, 1
  
  bb.19..lr.ph25 (freq 255):
    successors: %bb.20(50), %bb.21(50)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    %at = LHu %a3, 0 :: (load 2 from %ir.zptr.222, !tbaa !101)
    %t8 = EXT %a2, 7, 16
    %at = SLTu killed %t8, killed %at
    BEQ %at, %zero, %bb.21, implicit-def %at {
      NOP
    }
  
  bb.20 (%ir-block.142, freq 127):
    successors: %bb.21(100)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    %at = SRL %a2, 7
    %t8 = LW %v0, 0 :: (load 4 from %ir.143, !tbaa !22)
    %t9 = SLL %v1, 2
    %t8 = ADDu killed %t8, killed %t9
    SW %a0, killed %t8, 0 :: (store 4 into %ir.146, !tbaa !87)
    SH killed %at, %a3, 0 :: (store 2 into %ir.zptr.222, !tbaa !101)
  
  bb.21 (%ir-block.147, freq 255):
    successors: %bb.22..loopexit(3), %bb.19..lr.ph25(96)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    %at = SLTi %t4, 0
    %t8 = OR %t2, %zero
    %t8 = MOVN_I_I killed %zero, %at, killed %t8
    %t9 = OR %t5, %zero
    %t9 = MOVN_I_I %t3, %at, killed %t9
    %gp = ADDu killed %a3, %t6
    %a3 = ADDu %gp, %t7
    %a3 = MOVN_I_I killed %gp, killed %at, killed %a3
    %t4 = ADDu killed %t9, killed %t4
    %v1 = ADDu killed %v1, killed %t8
    %v0 = ADDu killed %v0, %t1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.19..lr.ph25, implicit-def %at {
      %a2 = ADDu killed %a2, %t0
    }
  
  bb.22..loopexit (freq 108):
    liveouts:
  
    %s0 = LW %sp, 4 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 8
    }

...
