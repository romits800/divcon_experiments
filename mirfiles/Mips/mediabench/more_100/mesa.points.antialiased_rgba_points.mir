--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.points.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, {}*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [12 x i8] c"glPointSize\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_PointSize(%struct.gl_context* %ctx, float %size) #0 {
    %1 = fcmp ugt float %size, 0.000000e+00
    br i1 %1, label %3, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* %ctx, i32 signext 1281, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:3                                       ; preds = %0
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %5 = load i32, i32* %4, align 4, !tbaa !1
    %6 = icmp eq i32 %5, 6656
    br i1 %6, label %8, label %7
  
  ; <label>:7                                       ; preds = %3
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:8                                       ; preds = %3
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    store float %size, float* %9, align 4, !tbaa !37
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %11 = load i32, i32* %10, align 4, !tbaa !38
    %12 = or i32 %11, 2
    store i32 %12, i32* %10, align 4, !tbaa !38
    br label %13
  
  ; <label>:13                                      ; preds = %8, %7, %2
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @size1_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 13
    %6 = load i32, i32* %5, align 4, !tbaa !41
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 2
    %9 = mul i32 %first, 12
    %10 = add i32 %9, 24192
    br label %11
  
  ; <label>:11                                      ; preds = %35, %.lr.ph
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %35 ], [ %10, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %35 ], [ %8, %.lr.ph ]
    %i.03 = phi i32 [ %first, %.lr.ph ], [ %36, %35 ]
    %pbcount.02 = phi i32 [ %6, %.lr.ph ], [ %pbcount.1, %35 ]
    %12 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep11 = getelementptr i8, i8* %12, i32 %lsr.iv3
    %uglygep2 = getelementptr i8, i8* %12, i32 %i.03
    %scevgep = getelementptr i8, i8* %uglygep2, i32 65024
    %13 = load i8, i8* %scevgep, align 1, !tbaa !43
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %35, label %15
  
  ; <label>:15                                      ; preds = %11
    %16 = bitcast i8* %uglygep11 to float*
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %18 = load float, float* %16, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %pbcount.02
    store i32 %19, i32* %20, align 4, !tbaa !45
    %uglygep8 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep89 = bitcast i8* %uglygep8 to float*
    %scevgep10 = getelementptr float, float* %uglygep89, i32 1
    %21 = load float, float* %scevgep10, align 4, !tbaa !44
    %22 = fptosi float %21 to i32
    %23 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %pbcount.02
    store i32 %22, i32* %23, align 4, !tbaa !45
    %uglygep5 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep56 = bitcast i8* %uglygep5 to float*
    %scevgep7 = getelementptr float, float* %uglygep56, i32 2
    %24 = load float, float* %scevgep7, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr, 55776
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to float*
    %25 = load float, float* %sunkaddr14, align 4, !tbaa !46
    %26 = fadd float %24, %25
    %27 = fptosi float %26 to i32
    %28 = trunc i32 %27 to i16
    %29 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %pbcount.02
    store i16 %28, i16* %29, align 2, !tbaa !47
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 56452
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32**
    %30 = load i32*, i32** %sunkaddr17, align 4, !tbaa !48
    %31 = bitcast i32* %30 to i8*
    %uglygep = getelementptr i8, i8* %31, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %32 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %33 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 7, i32 %pbcount.02
    store i32 %32, i32* %33, align 4, !tbaa !45
    %34 = add i32 %pbcount.02, 1
    br label %35
  
  ; <label>:35                                      ; preds = %15, %11
    %pbcount.1 = phi i32 [ %34, %15 ], [ %pbcount.02, %11 ]
    %36 = add i32 %i.03, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next4 = add i32 %lsr.iv3, 12
    %37 = icmp ugt i32 %36, %last
    br i1 %37, label %._crit_edge, label %11
  
  ._crit_edge:                                      ; preds = %35, %0
    %pbcount.0.lcssa = phi i32 [ %6, %0 ], [ %pbcount.1, %35 ]
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115220
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    store i32 %pbcount.0.lcssa, i32* %sunkaddr20, align 4, !tbaa !41
    %38 = icmp ugt i32 %pbcount.0.lcssa, 2559
    br i1 %38, label %39, label %40
  
  ; <label>:39                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %40
  
  ; <label>:40                                      ; preds = %39, %._crit_edge
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  declare void @gl_flush_pb(%struct.gl_context*) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_set_point_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !50
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !51
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !53
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %44
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !54
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @null_points, void (%struct.gl_context*, i32, i32)** %13, align 4, !tbaa !55
    br label %48
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    %16 = load void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32)** %15, align 4, !tbaa !56
    %17 = icmp eq void (%struct.gl_context*, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %16, void (%struct.gl_context*, i32, i32)** %19, align 4, !tbaa !55
    br label %48
  
  ; <label>:20                                      ; preds = %14
    %21 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 0
    %22 = load i8, i8* %21, align 4, !tbaa !57
    %23 = icmp eq i8 %22, 0
    %24 = icmp eq i8 %4, 0
    %or.cond = or i1 %24, %23
    br i1 %or.cond, label %27, label %25
  
  ; <label>:25                                      ; preds = %20
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @antialiased_rgba_points, void (%struct.gl_context*, i32, i32)** %26, align 4, !tbaa !55
    br label %48
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %32, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @textured_rgba_points, void (%struct.gl_context*, i32, i32)** %31, align 4, !tbaa !55
    br label %48
  
  ; <label>:32                                      ; preds = %27
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %34 = load float, float* %33, align 4, !tbaa !37
    %35 = fcmp oeq float %34, 1.000000e+00
    br i1 %35, label %36, label %40
  
  ; <label>:36                                      ; preds = %32
    %37 = icmp ne i8 %4, 0
    %38 = select i1 %37, void (%struct.gl_context*, i32, i32)* @size1_rgba_points, void (%struct.gl_context*, i32, i32)* @size1_ci_points
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %38, void (%struct.gl_context*, i32, i32)** %39, align 4, !tbaa !55
    br label %48
  
  ; <label>:40                                      ; preds = %32
    %41 = icmp ne i8 %4, 0
    %42 = select i1 %41, void (%struct.gl_context*, i32, i32)* @general_rgba_points, void (%struct.gl_context*, i32, i32)* @general_ci_points
    %43 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %42, void (%struct.gl_context*, i32, i32)** %43, align 4, !tbaa !55
    br label %48
  
  ; <label>:44                                      ; preds = %0
    %45 = icmp eq i32 %6, 7169
    br i1 %45, label %46, label %47
  
  ; <label>:46                                      ; preds = %44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55788
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @feedback_points, void (%struct.gl_context*, i32, i32)** %sunkaddr2, align 4, !tbaa !55
    br label %48
  
  ; <label>:47                                      ; preds = %44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55788
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @select_points, void (%struct.gl_context*, i32, i32)** %sunkaddr5, align 4, !tbaa !55
    br label %48
  
  ; <label>:48                                      ; preds = %47, %46, %40, %36, %30, %25, %18, %12
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_points(%struct.gl_context* nocapture %ctx, i32 signext %first, i32 signext %last) #3 {
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @antialiased_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fcmp olt float %8, 1.000000e+00
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = fcmp ogt float %8, 1.000000e+01
    br i1 %11, label %13, label %12
  
  ; <label>:12                                      ; preds = %10
    %phitmp16 = fmul float %8, 5.000000e-01
    br label %13
  
  ; <label>:13                                      ; preds = %12, %10, %0
    %14 = phi float [ 5.000000e-01, %0 ], [ %phitmp16, %12 ], [ 5.000000e+00, %10 ]
    %15 = fadd float %14, 0xBFE6A09020000000
    %16 = fadd float %14, 0x3FE6A09020000000
    %17 = fmul float %15, %15
    %18 = fmul float %16, %16
    %19 = fsub float %18, %17
    %20 = fdiv float 2.560000e+02, %19
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %.preheader17, label %.preheader19
  
  .preheader19:                                     ; preds = %13
    %23 = icmp ugt i32 %first, %last
    br i1 %23, label %.loopexit, label %.lr.ph36
  
  .lr.ph36:                                         ; preds = %.preheader19
    br label %25
  
  .preheader17:                                     ; preds = %13
    %24 = icmp ugt i32 %first, %last
    br i1 %24, label %.loopexit, label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.preheader17
    br label %134
  
  ; <label>:25                                      ; preds = %131, %.lr.ph36
    %i.033 = phi i32 [ %first, %.lr.ph36 ], [ %132, %131 ]
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.033
    %27 = load i8, i8* %26, align 1, !tbaa !43
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %131, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 0
    %31 = load float, float* %30, align 4, !tbaa !44
    %32 = fsub float %31, %14
    %33 = fptosi float %32 to i32
    %34 = fadd float %14, %31
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 1
    %37 = load float, float* %36, align 4, !tbaa !44
    %38 = fsub float %37, %14
    %39 = fptosi float %38 to i32
    %40 = fadd float %14, %37
    %41 = fptosi float %40 to i32
    %sunkaddr = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr1 = add i32 %sunkaddr, 52416
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to [4 x i32]**
    %42 = load [4 x i32]*, [4 x i32]** %sunkaddr2, align 4, !tbaa !59
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 0
    %44 = load float, float* %43, align 4, !tbaa !44
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 3
    %46 = load float, float* %45, align 4, !tbaa !44
    %47 = fdiv float %44, %46
    %48 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 1
    %49 = load float, float* %48, align 4, !tbaa !44
    %50 = fdiv float %49, %46
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 2
    %52 = load float, float* %51, align 4, !tbaa !44
    %53 = fdiv float %52, %46
    %54 = icmp sgt i32 %39, %41
    br i1 %54, label %._crit_edge32, label %.preheader18.lr.ph
  
  .preheader18.lr.ph:                               ; preds = %29
    %55 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !45
    %57 = ashr i32 %56, %6
    %58 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !45
    %60 = ashr i32 %59, %6
    %61 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 0
    %62 = load i32, i32* %61, align 4, !tbaa !45
    %63 = ashr i32 %62, %6
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 2
    %65 = load float, float* %64, align 4, !tbaa !44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55776
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %66 = load float, float* %sunkaddr5, align 4, !tbaa !46
    %67 = fadd float %65, %66
    %68 = fptosi float %67 to i32
    br label %.preheader18
  
  .preheader18:                                     ; preds = %._crit_edge30, %.preheader18.lr.ph
    %y.031 = phi i32 [ %39, %.preheader18.lr.ph ], [ %126, %._crit_edge30 ]
    %69 = icmp sgt i32 %33, %35
    br i1 %69, label %._crit_edge30, label %.lr.ph29
  
  .lr.ph29:                                         ; preds = %.preheader18
    %70 = sitofp i32 %y.031 to float
    br label %71
  
  ; <label>:71                                      ; preds = %122, %.lr.ph29
    %x.028 = phi i32 [ %33, %.lr.ph29 ], [ %123, %122 ]
    %72 = sitofp i32 %x.028 to float
    %73 = load float, float* %30, align 4, !tbaa !44
    %74 = fsub float %72, %73
    %75 = load float, float* %36, align 4, !tbaa !44
    %76 = fsub float %70, %75
    %77 = fmul float %74, %74
    %78 = fmul float %76, %76
    %79 = fadd float %77, %78
    %80 = fcmp olt float %79, %18
    br i1 %80, label %81, label %122
  
  ; <label>:81                                      ; preds = %71
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %82 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %83 = getelementptr inbounds [4 x i32], [4 x i32]* %82, i32 %i.033, i32 3
    %84 = load i32, i32* %83, align 4, !tbaa !45
    %85 = ashr i32 %84, %6
    %86 = fcmp ult float %79, %17
    br i1 %86, label %94, label %87
  
  ; <label>:87                                      ; preds = %81
    %88 = fsub float %79, %17
    %89 = fmul float %20, %88
    %90 = fsub float 2.560000e+02, %89
    %91 = fptosi float %90 to i32
    %92 = mul nsw i32 %85, %91
    %93 = ashr i32 %92, 8
    br label %94
  
  ; <label>:94                                      ; preds = %87, %81
    %alpha.0 = phi i32 [ %93, %87 ], [ %85, %81 ]
    %95 = trunc i32 %57 to i8
    %96 = trunc i32 %60 to i8
    %97 = trunc i32 %63 to i8
    %98 = trunc i32 %68 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %99 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %100 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %99
    store i32 %x.028, i32* %100, align 4, !tbaa !45
    %101 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %102 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %101
    store i32 %y.031, i32* %102, align 4, !tbaa !45
    %103 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %104 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %103
    store i16 %98, i16* %104, align 2, !tbaa !47
    %105 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %106 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %105
    store i8 %97, i8* %106, align 1, !tbaa !43
    %107 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %108 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %107
    store i8 %96, i8* %108, align 1, !tbaa !43
    %109 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %109
    store i8 %95, i8* %110, align 1, !tbaa !43
    %111 = trunc i32 %alpha.0 to i8
    %112 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %113 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %112
    store i8 %111, i8* %113, align 1, !tbaa !43
    %114 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %115 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %114
    store float %47, float* %115, align 4, !tbaa !44
    %116 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %117 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %116
    store float %50, float* %117, align 4, !tbaa !44
    %118 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %119 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %118
    store float %53, float* %119, align 4, !tbaa !44
    %120 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %121 = add i32 %120, 1
    store i32 %121, i32* %sunkaddr11, align 4, !tbaa !41
    br label %122
  
  ; <label>:122                                     ; preds = %94, %71
    %123 = add nsw i32 %x.028, 1
    %124 = add i32 %123, -1
    %125 = icmp slt i32 %124, %35
    br i1 %125, label %71, label %._crit_edge30
  
  ._crit_edge30:                                    ; preds = %122, %.preheader18
    %126 = add nsw i32 %y.031, 1
    %127 = icmp slt i32 %y.031, %41
    br i1 %127, label %.preheader18, label %._crit_edge32
  
  ._crit_edge32:                                    ; preds = %._crit_edge30, %29
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %128 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %129 = icmp ugt i32 %128, 2559
    br i1 %129, label %130, label %131
  
  ; <label>:130                                     ; preds = %._crit_edge32
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %131
  
  ; <label>:131                                     ; preds = %130, %._crit_edge32, %25
    %132 = add i32 %i.033, 1
    %133 = icmp ugt i32 %132, %last
    br i1 %133, label %.loopexit, label %25
  
  ; <label>:134                                     ; preds = %223, %.lr.ph27
    %i.124 = phi i32 [ %first, %.lr.ph27 ], [ %224, %223 ]
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.124
    %136 = load i8, i8* %135, align 1, !tbaa !43
    %137 = icmp eq i8 %136, 0
    br i1 %137, label %223, label %138
  
  ; <label>:138                                     ; preds = %134
    %139 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 0
    %140 = load float, float* %139, align 4, !tbaa !44
    %141 = fsub float %140, %14
    %142 = fptosi float %141 to i32
    %143 = fadd float %14, %140
    %144 = fptosi float %143 to i32
    %145 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 1
    %146 = load float, float* %145, align 4, !tbaa !44
    %147 = fsub float %146, %14
    %148 = fptosi float %147 to i32
    %149 = fadd float %14, %146
    %150 = fptosi float %149 to i32
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 52416
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to [4 x i32]**
    %151 = load [4 x i32]*, [4 x i32]** %sunkaddr17, align 4, !tbaa !59
    %152 = icmp sgt i32 %148, %150
    br i1 %152, label %._crit_edge23, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %138
    %153 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 2
    %154 = load i32, i32* %153, align 4, !tbaa !45
    %155 = ashr i32 %154, %6
    %156 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 1
    %157 = load i32, i32* %156, align 4, !tbaa !45
    %158 = ashr i32 %157, %6
    %159 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 0
    %160 = load i32, i32* %159, align 4, !tbaa !45
    %161 = ashr i32 %160, %6
    %162 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 2
    %163 = load float, float* %162, align 4, !tbaa !44
    %sunkaddr18 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr19 = add i32 %sunkaddr18, 55776
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    %164 = load float, float* %sunkaddr20, align 4, !tbaa !46
    %165 = fadd float %163, %164
    %166 = fptosi float %165 to i32
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %y6.022 = phi i32 [ %148, %.preheader.lr.ph ], [ %218, %._crit_edge ]
    %167 = icmp sgt i32 %142, %144
    br i1 %167, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader
    %168 = sitofp i32 %y6.022 to float
    br label %169
  
  ; <label>:169                                     ; preds = %214, %.lr.ph
    %x5.021 = phi i32 [ %142, %.lr.ph ], [ %215, %214 ]
    %170 = sitofp i32 %x5.021 to float
    %171 = load float, float* %139, align 4, !tbaa !44
    %172 = fsub float %170, %171
    %173 = load float, float* %145, align 4, !tbaa !44
    %174 = fsub float %168, %173
    %175 = fmul float %172, %172
    %176 = fmul float %174, %174
    %177 = fadd float %175, %176
    %178 = fcmp olt float %177, %18
    br i1 %178, label %179, label %214
  
  ; <label>:179                                     ; preds = %169
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %180 = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %181 = getelementptr inbounds [4 x i32], [4 x i32]* %180, i32 %i.124, i32 3
    %182 = load i32, i32* %181, align 4, !tbaa !45
    %183 = ashr i32 %182, %6
    %184 = fcmp ult float %177, %17
    br i1 %184, label %192, label %185
  
  ; <label>:185                                     ; preds = %179
    %186 = fsub float %177, %17
    %187 = fmul float %20, %186
    %188 = fsub float 2.560000e+02, %187
    %189 = fptosi float %188 to i32
    %190 = mul nsw i32 %183, %189
    %191 = ashr i32 %190, 8
    br label %192
  
  ; <label>:192                                     ; preds = %185, %179
    %alpha11.0 = phi i32 [ %191, %185 ], [ %183, %179 ]
    %193 = trunc i32 %155 to i8
    %194 = trunc i32 %158 to i8
    %195 = trunc i32 %161 to i8
    %196 = trunc i32 %166 to i16
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %197 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %198 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %197
    store i32 %x5.021, i32* %198, align 4, !tbaa !45
    %199 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %200 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %199
    store i32 %y6.022, i32* %200, align 4, !tbaa !45
    %201 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %202 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %201
    store i16 %196, i16* %202, align 2, !tbaa !47
    %203 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %204 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %203
    store i8 %195, i8* %204, align 1, !tbaa !43
    %205 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %206 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %205
    store i8 %194, i8* %206, align 1, !tbaa !43
    %207 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %208 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %207
    store i8 %193, i8* %208, align 1, !tbaa !43
    %209 = trunc i32 %alpha11.0 to i8
    %210 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %211 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %210
    store i8 %209, i8* %211, align 1, !tbaa !43
    %212 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %213 = add i32 %212, 1
    store i32 %213, i32* %sunkaddr26, align 4, !tbaa !41
    br label %214
  
  ; <label>:214                                     ; preds = %192, %169
    %215 = add nsw i32 %x5.021, 1
    %216 = add i32 %215, -1
    %217 = icmp slt i32 %216, %144
    br i1 %217, label %169, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %214, %.preheader
    %218 = add nsw i32 %y6.022, 1
    %219 = icmp slt i32 %y6.022, %150
    br i1 %219, label %.preheader, label %._crit_edge23
  
  ._crit_edge23:                                    ; preds = %._crit_edge, %138
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %220 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %221 = icmp ugt i32 %220, 2559
    br i1 %221, label %222, label %223
  
  ; <label>:222                                     ; preds = %._crit_edge23
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %223
  
  ; <label>:223                                     ; preds = %222, %._crit_edge23, %134
    %224 = add i32 %i.124, 1
    %225 = icmp ugt i32 %224, %last
    br i1 %225, label %.loopexit, label %134
  
  .loopexit:                                        ; preds = %131, %223, %.preheader17, %.preheader19
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #1
  
  ; Function Attrs: nounwind
  define internal void @textured_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %0
    br label %8
  
  ; <label>:8                                       ; preds = %118, %.lr.ph7
    %i.04 = phi i32 [ %first, %.lr.ph7 ], [ %119, %118 ]
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.04
    %10 = load i8, i8* %9, align 1, !tbaa !43
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %118, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 0
    %14 = load float, float* %13, align 4, !tbaa !44
    %15 = fptosi float %14 to i32
    %16 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 1
    %17 = load float, float* %16, align 4, !tbaa !44
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 2
    %20 = load float, float* %19, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %21 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %22 = fadd float %20, %21
    %23 = fptosi float %22 to i32
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54136
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %24 = load float, float* %sunkaddr5, align 4, !tbaa !37
    %25 = fpext float %24 to double
    %26 = fcmp olt float %24, 1.000000e+00
    br i1 %26, label %30, label %27
  
  ; <label>:27                                      ; preds = %12
    %28 = fcmp ogt float %24, 1.000000e+01
    br i1 %28, label %30, label %29
  
  ; <label>:29                                      ; preds = %27
    br label %30
  
  ; <label>:30                                      ; preds = %29, %27, %12
    %31 = phi double [ 1.000000e+00, %12 ], [ %25, %29 ], [ 1.000000e+01, %27 ]
    %32 = fadd double %31, 5.000000e-01
    %33 = fptosi double %32 to i32
    %34 = icmp slt i32 %33, 1
    %. = select i1 %34, i32 1, i32 %33
    %35 = and i32 %., 1
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %43, label %37
  
  ; <label>:37                                      ; preds = %30
    %38 = sdiv i32 %., 2
    %39 = sub nsw i32 %15, %38
    %40 = add nsw i32 %38, %15
    %41 = sub nsw i32 %18, %38
    %42 = add nsw i32 %38, %18
    br label %56
  
  ; <label>:43                                      ; preds = %30
    %44 = sitofp i32 %15 to float
    %45 = fadd float %44, 5.000000e-01
    %46 = fptosi float %45 to i32
    %47 = sdiv i32 %., 2
    %48 = sub nsw i32 %46, %47
    %49 = add i32 %., -1
    %50 = add i32 %49, %48
    %51 = sitofp i32 %18 to float
    %52 = fadd float %51, 5.000000e-01
    %53 = fptosi float %52 to i32
    %54 = sub nsw i32 %53, %47
    %55 = add i32 %49, %54
    br label %56
  
  ; <label>:56                                      ; preds = %43, %37
    %y1.0 = phi i32 [ %42, %37 ], [ %55, %43 ]
    %y0.0 = phi i32 [ %41, %37 ], [ %54, %43 ]
    %x1.0 = phi i32 [ %40, %37 ], [ %50, %43 ]
    %x0.0 = phi i32 [ %39, %37 ], [ %48, %43 ]
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %57 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %58 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 0
    %59 = load float, float* %58, align 4, !tbaa !44
    %60 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 3
    %61 = load float, float* %60, align 4, !tbaa !44
    %62 = fdiv float %59, %61
    %63 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 1
    %64 = load float, float* %63, align 4, !tbaa !44
    %65 = fdiv float %64, %61
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 2
    %67 = load float, float* %66, align 4, !tbaa !44
    %68 = fdiv float %67, %61
    %69 = icmp sgt i32 %y0.0, %y1.0
    br i1 %69, label %._crit_edge3, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %56
    %70 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 3
    %71 = load i32, i32* %70, align 4, !tbaa !45
    %72 = ashr i32 %71, %6
    %73 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 2
    %74 = load i32, i32* %73, align 4, !tbaa !45
    %75 = ashr i32 %74, %6
    %76 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 1
    %77 = load i32, i32* %76, align 4, !tbaa !45
    %78 = ashr i32 %77, %6
    %79 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 0
    %80 = load i32, i32* %79, align 4, !tbaa !45
    %81 = ashr i32 %80, %6
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.02 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %113, %._crit_edge ]
    %82 = icmp sgt i32 %x0.0, %x1.0
    br i1 %82, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.01 = phi i32 [ %110, %.lr.ph ], [ %x0.0, %.preheader ]
    %83 = trunc i32 %72 to i8
    %84 = trunc i32 %75 to i8
    %85 = trunc i32 %78 to i8
    %86 = trunc i32 %81 to i8
    %87 = trunc i32 %23 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %88 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %89 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %88
    store i32 %ix.01, i32* %89, align 4, !tbaa !45
    %90 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %91 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %90
    store i32 %iy.02, i32* %91, align 4, !tbaa !45
    %92 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %93 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %92
    store i16 %87, i16* %93, align 2, !tbaa !47
    %94 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %95 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %94
    store i8 %86, i8* %95, align 1, !tbaa !43
    %96 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %97 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %96
    store i8 %85, i8* %97, align 1, !tbaa !43
    %98 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %98
    store i8 %84, i8* %99, align 1, !tbaa !43
    %100 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %100
    store i8 %83, i8* %101, align 1, !tbaa !43
    %102 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %102
    store float %62, float* %103, align 4, !tbaa !44
    %104 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %105 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %104
    store float %65, float* %105, align 4, !tbaa !44
    %106 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %107 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %106
    store float %68, float* %107, align 4, !tbaa !44
    %108 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %109 = add i32 %108, 1
    store i32 %109, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = add nsw i32 %ix.01, 1
    %111 = add i32 %110, -1
    %112 = icmp slt i32 %111, %x1.0
    br i1 %112, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %113 = add nsw i32 %iy.02, 1
    %114 = icmp slt i32 %iy.02, %y1.0
    br i1 %114, label %.preheader, label %._crit_edge3
  
  ._crit_edge3:                                     ; preds = %._crit_edge, %56
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %115 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %116 = icmp ugt i32 %115, 2559
    br i1 %116, label %117, label %118
  
  ; <label>:117                                     ; preds = %._crit_edge3
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %118
  
  ; <label>:118                                     ; preds = %117, %._crit_edge3, %8
    %119 = add i32 %i.04, 1
    %120 = icmp ugt i32 %119, %last
    br i1 %120, label %._crit_edge8, label %8
  
  ._crit_edge8:                                     ; preds = %118, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @size1_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %.._crit_edge_crit_edge, label %.lr.ph
  
  .._crit_edge_crit_edge:                           ; preds = %0
    br label %._crit_edge
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 4
    %9 = add i32 %8, 8
    %10 = mul i32 %first, 12
    %11 = add i32 %10, 24192
    br label %12
  
  ; <label>:12                                      ; preds = %57, %.lr.ph
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %57 ], [ %11, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %57 ], [ %9, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %58, %57 ]
    %13 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep20 = getelementptr i8, i8* %13, i32 %i.01
    %scevgep21 = getelementptr i8, i8* %uglygep20, i32 65024
    %14 = load i8, i8* %scevgep21, align 1, !tbaa !43
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %57, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep18 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1819 = bitcast i8* %uglygep18 to float*
    %18 = load float, float* %uglygep1819, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %uglygep15 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 1
    %20 = load float, float* %scevgep17, align 4, !tbaa !44
    %21 = fptosi float %20 to i32
    %uglygep12 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1213 = bitcast i8* %uglygep12 to float*
    %scevgep14 = getelementptr float, float* %uglygep1213, i32 2
    %22 = load float, float* %scevgep14, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr, 55776
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %23 = load float, float* %sunkaddr23, align 4, !tbaa !46
    %24 = fadd float %22, %23
    %25 = fptosi float %24 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %26 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !59
    %27 = bitcast [4 x i32]* %26 to i8*
    %uglygep7 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    %scevgep9 = getelementptr i32, i32* %uglygep78, i32 -2
    %28 = load i32, i32* %scevgep9, align 4, !tbaa !45
    %29 = ashr i32 %28, %6
    %uglygep4 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i32*
    %scevgep6 = getelementptr i32, i32* %uglygep45, i32 -1
    %30 = load i32, i32* %scevgep6, align 4, !tbaa !45
    %31 = ashr i32 %30, %6
    %uglygep2 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to i32*
    %32 = load i32, i32* %uglygep23, align 4, !tbaa !45
    %33 = ashr i32 %32, %6
    %uglygep = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %scevgep = getelementptr i32, i32* %uglygep1, i32 1
    %34 = load i32, i32* %scevgep, align 4, !tbaa !45
    %35 = ashr i32 %34, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %36 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %37 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %36
    store i32 %19, i32* %37, align 4, !tbaa !45
    %38 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %39 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %38
    store i32 %21, i32* %39, align 4, !tbaa !45
    %40 = trunc i32 %25 to i16
    %41 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %42 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %41
    store i16 %40, i16* %42, align 2, !tbaa !47
    %43 = trunc i32 %29 to i8
    %44 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %45 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %44
    store i8 %43, i8* %45, align 1, !tbaa !43
    %46 = trunc i32 %31 to i8
    %47 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %48 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %47
    store i8 %46, i8* %48, align 1, !tbaa !43
    %49 = trunc i32 %33 to i8
    %50 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %51 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %50
    store i8 %49, i8* %51, align 1, !tbaa !43
    %52 = trunc i32 %35 to i8
    %53 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %54 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %53
    store i8 %52, i8* %54, align 1, !tbaa !43
    %55 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %56 = add i32 %55, 1
    store i32 %56, i32* %sunkaddr29, align 4, !tbaa !41
    br label %57
  
  ; <label>:57                                      ; preds = %16, %12
    %58 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 16
    %lsr.iv.next11 = add i32 %lsr.iv10, 12
    %59 = icmp ugt i32 %58, %last
    br i1 %59, label %._crit_edge, label %12
  
  ._crit_edge:                                      ; preds = %57, %.._crit_edge_crit_edge
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115220
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    %60 = load i32, i32* %sunkaddr32, align 4, !tbaa !41
    %61 = icmp ugt i32 %60, 2559
    br i1 %61, label %62, label %63
  
  ; <label>:62                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %63
  
  ; <label>:63                                      ; preds = %62, %._crit_edge
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fpext float %8 to double
    %10 = fcmp olt float %8, 1.000000e+00
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    %12 = fcmp ogt float %8, 1.000000e+01
    br i1 %12, label %14, label %13
  
  ; <label>:13                                      ; preds = %11
    %phitmp = fadd double %9, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %14
  
  ; <label>:14                                      ; preds = %13, %11, %0
    %15 = phi i32 [ 1, %0 ], [ %phitmp1, %13 ], [ 10, %11 ]
    %16 = icmp ugt i32 %first, %last
    br i1 %16, label %._crit_edge9, label %.lr.ph8
  
  .lr.ph8:                                          ; preds = %14
    %17 = and i32 %15, 1
    %18 = sdiv i32 %15, 2
    %19 = add i32 %15, -1
    br label %20
  
  ; <label>:20                                      ; preds = %114, %.lr.ph8
    %i.05 = phi i32 [ %first, %.lr.ph8 ], [ %115, %114 ]
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %22 = load i8, i8* %21, align 1, !tbaa !43
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %114, label %24
  
  ; <label>:24                                      ; preds = %20
    %25 = icmp eq i32 %17, 0
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %27 = load float, float* %26, align 4, !tbaa !44
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %30 = load float, float* %29, align 4, !tbaa !44
    %31 = fptosi float %30 to i32
    %32 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %33 = load float, float* %32, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %34 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %35 = fadd float %33, %34
    %36 = fptosi float %35 to i32
    br i1 %25, label %42, label %37
  
  ; <label>:37                                      ; preds = %24
    %38 = sub nsw i32 %28, %18
    %39 = add nsw i32 %28, %18
    %40 = sub nsw i32 %31, %18
    %41 = add nsw i32 %31, %18
    br label %53
  
  ; <label>:42                                      ; preds = %24
    %43 = sitofp i32 %28 to float
    %44 = fadd float %43, 5.000000e-01
    %45 = fptosi float %44 to i32
    %46 = sub nsw i32 %45, %18
    %47 = add i32 %19, %46
    %48 = sitofp i32 %31 to float
    %49 = fadd float %48, 5.000000e-01
    %50 = fptosi float %49 to i32
    %51 = sub nsw i32 %50, %18
    %52 = add i32 %19, %51
    br label %53
  
  ; <label>:53                                      ; preds = %42, %37
    %x0.0 = phi i32 [ %38, %37 ], [ %46, %42 ]
    %x1.0 = phi i32 [ %39, %37 ], [ %47, %42 ]
    %y0.0 = phi i32 [ %40, %37 ], [ %51, %42 ]
    %y1.0 = phi i32 [ %41, %37 ], [ %52, %42 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115200
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %54 = load i32, i32* %sunkaddr5, align 4, !tbaa !45
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %55 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 0
    %57 = load i32, i32* %56, align 4, !tbaa !45
    %58 = ashr i32 %57, %6
    %59 = icmp eq i32 %54, %58
    br i1 %59, label %60, label %81
  
  ; <label>:60                                      ; preds = %53
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115204
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %61 = load i32, i32* %sunkaddr11, align 4, !tbaa !45
    %62 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !45
    %64 = ashr i32 %63, %6
    %65 = icmp eq i32 %61, %64
    br i1 %65, label %66, label %81
  
  ; <label>:66                                      ; preds = %60
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115208
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %67 = load i32, i32* %sunkaddr14, align 4, !tbaa !45
    %68 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 2
    %69 = load i32, i32* %68, align 4, !tbaa !45
    %70 = ashr i32 %69, %6
    %71 = icmp eq i32 %67, %70
    br i1 %71, label %72, label %81
  
  ; <label>:72                                      ; preds = %66
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115212
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %73 = load i32, i32* %sunkaddr17, align 4, !tbaa !45
    %74 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 3
    %75 = load i32, i32* %74, align 4, !tbaa !45
    %76 = ashr i32 %75, %6
    %77 = icmp eq i32 %73, %76
    br i1 %77, label %78, label %81
  
  ; <label>:78                                      ; preds = %72
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    %79 = load i8, i8* %sunkaddr20, align 4, !tbaa !60
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %78, %72, %66, %60, %53
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %.pre = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %.pre, i32 %i.05, i32 0
    %.pre10 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %82
  
  ; <label>:82                                      ; preds = %81, %78
    %83 = phi i32 [ %57, %78 ], [ %.pre10, %81 ]
    %84 = phi [4 x i32]* [ %55, %78 ], [ %.pre, %81 ]
    %85 = ashr i32 %83, %6
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115200
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    store i32 %85, i32* %sunkaddr26, align 4, !tbaa !45
    %86 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 1
    %87 = load i32, i32* %86, align 4, !tbaa !45
    %88 = ashr i32 %87, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115204
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    store i32 %88, i32* %sunkaddr29, align 4, !tbaa !45
    %89 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 2
    %90 = load i32, i32* %89, align 4, !tbaa !45
    %91 = ashr i32 %90, %6
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115208
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    store i32 %91, i32* %sunkaddr32, align 4, !tbaa !45
    %92 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 3
    %93 = load i32, i32* %92, align 4, !tbaa !45
    %94 = ashr i32 %93, %6
    %sunkaddr33 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr34 = add i32 %sunkaddr33, 115212
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %94, i32* %sunkaddr35, align 4, !tbaa !45
    %sunkaddr36 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 115224
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i8*
    store i8 1, i8* %sunkaddr38, align 4, !tbaa !60
    %95 = icmp sgt i32 %y0.0, %y1.0
    br i1 %95, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %82
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %109, %._crit_edge ]
    %96 = icmp sgt i32 %x0.0, %x1.0
    br i1 %96, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %106, %.lr.ph ], [ %x0.0, %.preheader ]
    %97 = trunc i32 %36 to i16
    %sunkaddr39 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr40 = add i32 %sunkaddr39, 115220
    %sunkaddr41 = inttoptr i32 %sunkaddr40 to i32*
    %98 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %98
    store i32 %ix.02, i32* %99, align 4, !tbaa !45
    %100 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %100
    store i32 %iy.03, i32* %101, align 4, !tbaa !45
    %102 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %102
    store i16 %97, i16* %103, align 2, !tbaa !47
    %104 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %105 = add i32 %104, 1
    store i32 %105, i32* %sunkaddr41, align 4, !tbaa !41
    %106 = add nsw i32 %ix.02, 1
    %107 = add i32 %106, -1
    %108 = icmp slt i32 %107, %x1.0
    br i1 %108, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %109 = add nsw i32 %iy.03, 1
    %110 = icmp slt i32 %iy.03, %y1.0
    br i1 %110, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %82
    %sunkaddr42 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr43 = add i32 %sunkaddr42, 115220
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %111 = load i32, i32* %sunkaddr44, align 4, !tbaa !41
    %112 = icmp ugt i32 %111, 2559
    br i1 %112, label %113, label %114
  
  ; <label>:113                                     ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %114
  
  ; <label>:114                                     ; preds = %113, %._crit_edge4, %20
    %115 = add i32 %i.05, 1
    %116 = icmp ugt i32 %115, %last
    br i1 %116, label %._crit_edge9, label %20
  
  ._crit_edge9:                                     ; preds = %114, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %6 = load float, float* %5, align 4, !tbaa !37
    %7 = fpext float %6 to double
    %8 = fcmp olt float %6, 1.000000e+00
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %0
    %10 = fcmp ogt float %6, 1.000000e+01
    br i1 %10, label %12, label %11
  
  ; <label>:11                                      ; preds = %9
    %phitmp = fadd double %7, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %12
  
  ; <label>:12                                      ; preds = %11, %9, %0
    %13 = phi i32 [ 1, %0 ], [ %phitmp1, %11 ], [ 10, %9 ]
    %14 = icmp ugt i32 %first, %last
    br i1 %14, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %12
    %15 = and i32 %13, 1
    %16 = sdiv i32 %13, 2
    %17 = add i32 %13, -1
    br label %18
  
  ; <label>:18                                      ; preds = %82, %.lr.ph7
    %i.05 = phi i32 [ %first, %.lr.ph7 ], [ %83, %82 ]
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %20 = load i8, i8* %19, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %82, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = icmp eq i32 %15, 0
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %25 = load float, float* %24, align 4, !tbaa !44
    %26 = fptosi float %25 to i32
    %27 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %28 = load float, float* %27, align 4, !tbaa !44
    %29 = fptosi float %28 to i32
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %31 = load float, float* %30, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %32 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %33 = fadd float %31, %32
    %34 = fptosi float %33 to i32
    br i1 %23, label %40, label %35
  
  ; <label>:35                                      ; preds = %22
    %36 = sub nsw i32 %26, %16
    %37 = add nsw i32 %26, %16
    %38 = sub nsw i32 %29, %16
    %39 = add nsw i32 %29, %16
    br label %51
  
  ; <label>:40                                      ; preds = %22
    %41 = sitofp i32 %26 to float
    %42 = fadd float %41, 5.000000e-01
    %43 = fptosi float %42 to i32
    %44 = sub nsw i32 %43, %16
    %45 = add i32 %17, %44
    %46 = sitofp i32 %29 to float
    %47 = fadd float %46, 5.000000e-01
    %48 = fptosi float %47 to i32
    %49 = sub nsw i32 %48, %16
    %50 = add i32 %17, %49
    br label %51
  
  ; <label>:51                                      ; preds = %40, %35
    %x0.0 = phi i32 [ %36, %35 ], [ %44, %40 ]
    %x1.0 = phi i32 [ %37, %35 ], [ %45, %40 ]
    %y0.0 = phi i32 [ %38, %35 ], [ %49, %40 ]
    %y1.0 = phi i32 [ %39, %35 ], [ %50, %40 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115216
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %52 = load i32, i32* %sunkaddr5, align 4, !tbaa !61
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 56452
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32**
    %53 = load i32*, i32** %sunkaddr8, align 4, !tbaa !48
    %54 = getelementptr inbounds i32, i32* %53, i32 %i.05
    %55 = load i32, i32* %54, align 4, !tbaa !45
    %56 = icmp eq i32 %52, %55
    br i1 %56, label %57, label %60
  
  ; <label>:57                                      ; preds = %51
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115224
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i8*
    %58 = load i8, i8* %sunkaddr11, align 4, !tbaa !60
    %59 = icmp eq i8 %58, 0
    br i1 %59, label %60, label %61
  
  ; <label>:60                                      ; preds = %57, %51
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr12 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 56452
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32**
    %.pre = load i32*, i32** %sunkaddr14, align 4, !tbaa !48
    %.phi.trans.insert = getelementptr inbounds i32, i32* %.pre, i32 %i.05
    %.pre9 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %61
  
  ; <label>:61                                      ; preds = %60, %57
    %62 = phi i32 [ %52, %57 ], [ %.pre9, %60 ]
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115216
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    store i32 %62, i32* %sunkaddr17, align 4, !tbaa !61
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    store i8 1, i8* %sunkaddr20, align 4, !tbaa !60
    %63 = icmp sgt i32 %y0.0, %y1.0
    br i1 %63, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %61
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %77, %._crit_edge ]
    %64 = icmp sgt i32 %x0.0, %x1.0
    br i1 %64, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %74, %.lr.ph ], [ %x0.0, %.preheader ]
    %65 = trunc i32 %34 to i16
    %sunkaddr21 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 115220
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to i32*
    %66 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %67 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %66
    store i32 %ix.02, i32* %67, align 4, !tbaa !45
    %68 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %69 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %68
    store i32 %iy.03, i32* %69, align 4, !tbaa !45
    %70 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %71 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %70
    store i16 %65, i16* %71, align 2, !tbaa !47
    %72 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %73 = add i32 %72, 1
    store i32 %73, i32* %sunkaddr23, align 4, !tbaa !41
    %74 = add nsw i32 %ix.02, 1
    %75 = add i32 %74, -1
    %76 = icmp slt i32 %75, %x1.0
    br i1 %76, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %77 = add nsw i32 %iy.03, 1
    %78 = icmp slt i32 %iy.03, %y1.0
    br i1 %78, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %61
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %79 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %80 = icmp ugt i32 %79, 2559
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %82
  
  ; <label>:82                                      ; preds = %81, %._crit_edge4, %18
    %83 = add i32 %i.05, 1
    %84 = icmp ugt i32 %83, %last
    br i1 %84, label %._crit_edge8, label %18
  
  ._crit_edge8:                                     ; preds = %82, %12
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %color = alloca [4 x float], align 4
    %texcoord = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !50
    %5 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 7
    %6 = load float, float* %5, align 4, !tbaa !62
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 8
    %8 = load float, float* %7, align 4, !tbaa !63
    %9 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 9
    %10 = load float, float* %9, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 10
    %12 = load float, float* %11, align 4, !tbaa !65
    %13 = icmp ugt i32 %first, %last
    br i1 %13, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %14 = shl i32 %first, 2
    %15 = shl i32 %first, 4
    %16 = mul i32 %first, 12
    %17 = add i32 %16, 24200
    br label %18
  
  ; <label>:18                                      ; preds = %93, %.lr.ph
    %lsr.iv41 = phi i32 [ %lsr.iv.next42, %93 ], [ %17, %.lr.ph ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %93 ], [ %15, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %93 ], [ %14, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %94, %93 ]
    %19 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep52 = getelementptr i8, i8* %19, i32 %i.01
    %scevgep53 = getelementptr i8, i8* %uglygep52, i32 65024
    %20 = load i8, i8* %scevgep53, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %93, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = bitcast [4 x float]* %texcoord to i8*
    %24 = bitcast [4 x float]* %color to i8*
    %25 = bitcast %struct.vertex_buffer* %2 to i8*
    call void @llvm.lifetime.start(i64 16, i8* %24) #4
    call void @llvm.lifetime.start(i64 16, i8* %23) #4
    %uglygep49 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4950 = bitcast i8* %uglygep49 to float*
    %scevgep51 = getelementptr float, float* %uglygep4950, i32 -2
    %26 = load float, float* %scevgep51, align 4, !tbaa !44
    %uglygep46 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4647 = bitcast i8* %uglygep46 to float*
    %scevgep48 = getelementptr float, float* %uglygep4647, i32 -1
    %27 = load float, float* %scevgep48, align 4, !tbaa !44
    %uglygep43 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4344 = bitcast i8* %uglygep43 to float*
    %28 = load float, float* %uglygep4344, align 4, !tbaa !44
    %29 = fdiv float %28, 6.553500e+04
    %uglygep38 = getelementptr i8, i8* %25, i32 %lsr.iv2
    %uglygep3839 = bitcast i8* %uglygep38 to float*
    %scevgep40 = getelementptr float, float* %uglygep3839, i32 4035
    %30 = load float, float* %scevgep40, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr, 43728
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %31 = load i32, i32* %sunkaddr55, align 4, !tbaa !66
    %32 = icmp eq i32 %31, 7425
    %sunkaddr56 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr57 = add i32 %sunkaddr56, 52416
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to [4 x i32]**
    %33 = load [4 x i32]*, [4 x i32]** %sunkaddr58, align 4, !tbaa !59
    %34 = bitcast [4 x i32]* %33 to i8*
    %uglygep36 = getelementptr i8, i8* %34, i32 %lsr.iv2
    %uglygep3637 = bitcast i8* %uglygep36 to i32*
    %35 = load i32, i32* %uglygep3637, align 4, !tbaa !45
    %36 = sitofp i32 %35 to float
    br i1 %32, label %37, label %53
  
  ; <label>:37                                      ; preds = %22
    %38 = bitcast [4 x i32]* %33 to i8*
    %39 = bitcast [4 x float]* %color to float*
    %40 = fmul float %36, 0x3F40000000000000
    %41 = fmul float %6, %40
    store float %41, float* %39, align 4, !tbaa !44
    %uglygep33 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3334 = bitcast i8* %uglygep33 to i32*
    %scevgep35 = getelementptr i32, i32* %uglygep3334, i32 1
    %42 = load i32, i32* %scevgep35, align 4, !tbaa !45
    %43 = sitofp i32 %42 to float
    %44 = fmul float %43, 0x3F40000000000000
    %45 = fmul float %8, %44
    %sunkaddr59 = ptrtoint [4 x float]* %color to i32
    %sunkaddr60 = add i32 %sunkaddr59, 4
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to float*
    store float %45, float* %sunkaddr61, align 4, !tbaa !44
    %uglygep30 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3031 = bitcast i8* %uglygep30 to i32*
    %scevgep32 = getelementptr i32, i32* %uglygep3031, i32 2
    %46 = load i32, i32* %scevgep32, align 4, !tbaa !45
    %47 = sitofp i32 %46 to float
    %48 = fmul float %47, 0x3F40000000000000
    %49 = fmul float %10, %48
    %sunkaddr62 = ptrtoint [4 x float]* %color to i32
    %sunkaddr63 = add i32 %sunkaddr62, 8
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    store float %49, float* %sunkaddr64, align 4, !tbaa !44
    %uglygep27 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep2728 = bitcast i8* %uglygep27 to i32*
    %scevgep29 = getelementptr i32, i32* %uglygep2728, i32 3
    %50 = load i32, i32* %scevgep29, align 4, !tbaa !45
    %51 = sitofp i32 %50 to float
    %52 = fmul float %51, 0x3F40000000000000
    br label %65
  
  ; <label>:53                                      ; preds = %22
    %54 = bitcast [4 x i32]* %33 to i8*
    %55 = bitcast [4 x float]* %color to float*
    %56 = fmul float %6, %36
    store float %56, float* %55, align 4, !tbaa !44
    %uglygep24 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2425 = bitcast i8* %uglygep24 to i32*
    %scevgep26 = getelementptr i32, i32* %uglygep2425, i32 1
    %57 = load i32, i32* %scevgep26, align 4, !tbaa !45
    %58 = sitofp i32 %57 to float
    %59 = fmul float %8, %58
    %sunkaddr65 = ptrtoint [4 x float]* %color to i32
    %sunkaddr66 = add i32 %sunkaddr65, 4
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to float*
    store float %59, float* %sunkaddr67, align 4, !tbaa !44
    %uglygep21 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2122 = bitcast i8* %uglygep21 to i32*
    %scevgep23 = getelementptr i32, i32* %uglygep2122, i32 2
    %60 = load i32, i32* %scevgep23, align 4, !tbaa !45
    %61 = sitofp i32 %60 to float
    %62 = fmul float %10, %61
    %sunkaddr68 = ptrtoint [4 x float]* %color to i32
    %sunkaddr69 = add i32 %sunkaddr68, 8
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to float*
    store float %62, float* %sunkaddr70, align 4, !tbaa !44
    %uglygep18 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep1819 = bitcast i8* %uglygep18 to i32*
    %scevgep20 = getelementptr i32, i32* %uglygep1819, i32 3
    %63 = load i32, i32* %scevgep20, align 4, !tbaa !45
    %64 = sitofp i32 %63 to float
    br label %65
  
  ; <label>:65                                      ; preds = %53, %37
    %.pn = phi float [ %64, %53 ], [ %52, %37 ]
    %66 = bitcast [4 x float]* %texcoord to float*
    %67 = bitcast %struct.vertex_buffer* %2 to i8*
    %storemerge = fmul float %12, %.pn
    %sunkaddr71 = ptrtoint [4 x float]* %color to i32
    %sunkaddr72 = add i32 %sunkaddr71, 12
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to float*
    store float %storemerge, float* %sunkaddr73, align 4, !tbaa !44
    %uglygep15 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 14243
    %68 = load float, float* %scevgep17, align 4, !tbaa !44
    %69 = fdiv float 1.000000e+00, %68
    %uglygep9 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep910 = bitcast i8* %uglygep9 to float*
    %scevgep11 = getelementptr float, float* %uglygep910, i32 14240
    %70 = load float, float* %scevgep11, align 4, !tbaa !44
    %71 = fmul float %70, %69
    store float %71, float* %66, align 4, !tbaa !44
    %uglygep6 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep67 = bitcast i8* %uglygep6 to float*
    %scevgep8 = getelementptr float, float* %uglygep67, i32 14241
    %72 = load float, float* %scevgep8, align 4, !tbaa !44
    %73 = fmul float %69, %72
    %sunkaddr74 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr75 = add i32 %sunkaddr74, 4
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to float*
    store float %73, float* %sunkaddr76, align 4, !tbaa !44
    %uglygep4 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep45 = bitcast i8* %uglygep4 to float*
    %scevgep = getelementptr float, float* %uglygep45, i32 14242
    %74 = load float, float* %scevgep, align 4, !tbaa !44
    %75 = fmul float %69, %74
    %sunkaddr77 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr78 = add i32 %sunkaddr77, 8
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to float*
    store float %75, float* %sunkaddr79, align 4, !tbaa !44
    %uglygep12 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1213 = bitcast i8* %uglygep12 to i32*
    %scevgep14 = getelementptr i32, i32* %uglygep1213, i32 14243
    %76 = load i32, i32* %scevgep14, align 4, !tbaa !44
    %sunkaddr80 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr81 = add i32 %sunkaddr80, 12
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i32*
    store i32 %76, i32* %sunkaddr82, align 4, !tbaa !44
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 55440
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to i32*
    %77 = load i32, i32* %sunkaddr85, align 4, !tbaa !67
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 55436
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to i32*
    %78 = load i32, i32* %sunkaddr88, align 4, !tbaa !68
    %79 = icmp ult i32 %77, %78
    br i1 %79, label %80, label %83
  
  ; <label>:80                                      ; preds = %65
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 55432
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to float**
    %81 = load float*, float** %sunkaddr91, align 4, !tbaa !69
    %82 = getelementptr inbounds float, float* %81, i32 %77
    store float 1.793000e+03, float* %82, align 4, !tbaa !44
    br label %83
  
  ; <label>:83                                      ; preds = %80, %65
    %84 = bitcast [4 x float]* %texcoord to float*
    %85 = bitcast [4 x float]* %color to float*
    %86 = bitcast [4 x float]* %texcoord to i8*
    %87 = bitcast [4 x float]* %color to i8*
    %88 = add i32 %77, 1
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 55440
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to i32*
    store i32 %88, i32* %sunkaddr94, align 4, !tbaa !67
    %sunkaddr95 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr96 = add i32 %sunkaddr95, 56452
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to i32**
    %89 = load i32*, i32** %sunkaddr97, align 4, !tbaa !48
    %90 = bitcast i32* %89 to i8*
    %uglygep = getelementptr i8, i8* %90, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %91 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %92 = uitofp i32 %91 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %26, float %27, float %29, float %30, float* nonnull %85, float %92, float* nonnull %84) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %86) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %87) #4
    br label %93
  
  ; <label>:93                                      ; preds = %83, %18
    %94 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next3 = add i32 %lsr.iv2, 16
    %lsr.iv.next42 = add i32 %lsr.iv41, 12
    %95 = icmp ugt i32 %94, %last
    br i1 %95, label %._crit_edge, label %18
  
  ._crit_edge:                                      ; preds = %93, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = icmp ugt i32 %first, %last
    br i1 %3, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %4 = mul i32 %first, 3
    %5 = add i32 %4, 2
    %scevgep = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 0, i32 1512, i32 %5
    %scevgep1 = bitcast float* %scevgep to %struct.vertex_buffer*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi %struct.vertex_buffer* [ %15, %13 ], [ %scevgep1, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %14, %13 ], [ %first, %.lr.ph.preheader ]
    %6 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep = getelementptr i8, i8* %6, i32 %i.01
    %scevgep4 = getelementptr i8, i8* %uglygep, i32 65024
    %7 = load i8, i8* %scevgep4, align 1, !tbaa !43
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %13, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    %10 = bitcast %struct.vertex_buffer* %lsr.iv to float*
    %11 = load float, float* %10, align 4, !tbaa !44
    %12 = fdiv float %11, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %12) #4
    br label %13
  
  ; <label>:13                                      ; preds = %9, %.lr.ph
    %14 = add i32 %i.01, 1
    %scevgep2 = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %lsr.iv, i32 0, i32 0, i32 0, i32 3
    %15 = bitcast float* %scevgep2 to %struct.vertex_buffer*
    %16 = icmp ugt i32 %14, %last
    br i1 %16, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #1
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 54136}
  !38 = !{!2, !8, i64 55736}
  !39 = !{!2, !3, i64 55808}
  !40 = !{!2, !3, i64 55812}
  !41 = !{!42, !8, i64 115220}
  !42 = !{!"pixel_buffer", !4, i64 0, !4, i64 15360, !4, i64 30720, !4, i64 38400, !4, i64 42240, !4, i64 46080, !4, i64 49920, !4, i64 53760, !4, i64 69120, !4, i64 84480, !4, i64 99840, !4, i64 115200, !8, i64 115216, !8, i64 115220, !4, i64 115224, !4, i64 115228}
  !43 = !{!4, !4, i64 0}
  !44 = !{!11, !11, i64 0}
  !45 = !{!8, !8, i64 0}
  !46 = !{!2, !11, i64 55776}
  !47 = !{!20, !20, i64 0}
  !48 = !{!49, !3, i64 56452}
  !49 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !50 = !{!2, !3, i64 2020}
  !51 = !{!52, !4, i64 0}
  !52 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !53 = !{!2, !4, i64 55740}
  !54 = !{!2, !4, i64 55816}
  !55 = !{!2, !3, i64 55788}
  !56 = !{!2, !3, i64 2160}
  !57 = !{!2, !4, i64 54132}
  !58 = !{!2, !8, i64 55784}
  !59 = !{!49, !3, i64 52416}
  !60 = !{!42, !4, i64 115224}
  !61 = !{!42, !8, i64 115216}
  !62 = !{!52, !11, i64 24}
  !63 = !{!52, !11, i64 28}
  !64 = !{!52, !11, i64 32}
  !65 = !{!52, !11, i64 36}
  !66 = !{!2, !4, i64 43728}
  !67 = !{!2, !8, i64 55440}
  !68 = !{!2, !8, i64 55436}
  !69 = !{!2, !3, i64 55432}

...
---
name:            gl_PointSize
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 31):
    successors: %bb.2(50), %bb.1(50)
    liveins: %a0, %a1, %t9, %v0
  
    %4 = ADDu %v0, %t9
    %1 = COPY %a1
    %0 = COPY %a0
    %2 = MTC1 %1
    %3 = MTC1 %zero
    FCMP_S32 %2, killed %3, 22, implicit-def %fcc0
    BC1F %fcc0, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.2, freq 15):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %5 = LW %4, target-flags(<unknown>) @.str, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %6 = ADDiu killed %5, target-flags(<unknown>) @.str
    %7 = LW %4, target-flags(<unknown>) @gl_error, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %8 = ADDiu %zero, 1281
    %a0 = COPY %0
    %a1 = COPY %8
    %a2 = COPY %6
    %gp = COPY %4
    %t9 = COPY %7
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.5, implicit-def dead %at
  
  bb.2 (%ir-block.3, freq 15):
    successors: %bb.4(50), %bb.3(50)
  
    %9 = ORi %zero, 55744
    %10 = ADDu %0, killed %9
    %11 = LW killed %10, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.4, !tbaa !1)
    %12 = ADDiu %zero, 6656
    BEQ killed %11, killed %12, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.7, freq 8):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %13 = LW %4, target-flags(<unknown>) @.str, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %14 = ADDiu killed %13, target-flags(<unknown>) @.str
    %15 = LW %4, target-flags(<unknown>) @gl_error, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gl_error)
    %16 = ADDiu %zero, 1282
    %a0 = COPY %0
    %a1 = COPY %16
    %a2 = COPY %14
    %gp = COPY %4
    %t9 = COPY %15
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    B %bb.5, implicit-def dead %at
  
  bb.4 (%ir-block.8, freq 8):
    successors: %bb.5(100)
  
    %17 = ORi %zero, 54136
    SWXC1 %2, %0, killed %17, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.9, !tbaa !37)
    %18 = ORi %zero, 55736
    %19 = ADDu %0, killed %18
    %20 = LW %19, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.10, !tbaa !38)
    %21 = ORi killed %20, 2
    SW killed %21, %19, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.10, !tbaa !38)
  
  bb.5 (%ir-block.13, freq 31):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.points.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, {}*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [12 x i8] c"glPointSize\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_PointSize(%struct.gl_context* %ctx, float %size) #0 {
    %1 = fcmp ugt float %size, 0.000000e+00
    br i1 %1, label %3, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* %ctx, i32 signext 1281, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:3                                       ; preds = %0
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %5 = load i32, i32* %4, align 4, !tbaa !1
    %6 = icmp eq i32 %5, 6656
    br i1 %6, label %8, label %7
  
  ; <label>:7                                       ; preds = %3
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:8                                       ; preds = %3
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    store float %size, float* %9, align 4, !tbaa !37
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %11 = load i32, i32* %10, align 4, !tbaa !38
    %12 = or i32 %11, 2
    store i32 %12, i32* %10, align 4, !tbaa !38
    br label %13
  
  ; <label>:13                                      ; preds = %8, %7, %2
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @size1_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 13
    %6 = load i32, i32* %5, align 4, !tbaa !41
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 2
    %9 = mul i32 %first, 12
    %10 = add i32 %9, 24192
    br label %11
  
  ; <label>:11                                      ; preds = %35, %.lr.ph
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %35 ], [ %10, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %35 ], [ %8, %.lr.ph ]
    %i.03 = phi i32 [ %first, %.lr.ph ], [ %36, %35 ]
    %pbcount.02 = phi i32 [ %6, %.lr.ph ], [ %pbcount.1, %35 ]
    %12 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep11 = getelementptr i8, i8* %12, i32 %lsr.iv3
    %uglygep2 = getelementptr i8, i8* %12, i32 %i.03
    %scevgep = getelementptr i8, i8* %uglygep2, i32 65024
    %13 = load i8, i8* %scevgep, align 1, !tbaa !43
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %35, label %15
  
  ; <label>:15                                      ; preds = %11
    %16 = bitcast i8* %uglygep11 to float*
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %18 = load float, float* %16, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %pbcount.02
    store i32 %19, i32* %20, align 4, !tbaa !45
    %uglygep8 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep89 = bitcast i8* %uglygep8 to float*
    %scevgep10 = getelementptr float, float* %uglygep89, i32 1
    %21 = load float, float* %scevgep10, align 4, !tbaa !44
    %22 = fptosi float %21 to i32
    %23 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %pbcount.02
    store i32 %22, i32* %23, align 4, !tbaa !45
    %uglygep5 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep56 = bitcast i8* %uglygep5 to float*
    %scevgep7 = getelementptr float, float* %uglygep56, i32 2
    %24 = load float, float* %scevgep7, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr, 55776
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to float*
    %25 = load float, float* %sunkaddr14, align 4, !tbaa !46
    %26 = fadd float %24, %25
    %27 = fptosi float %26 to i32
    %28 = trunc i32 %27 to i16
    %29 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %pbcount.02
    store i16 %28, i16* %29, align 2, !tbaa !47
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 56452
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32**
    %30 = load i32*, i32** %sunkaddr17, align 4, !tbaa !48
    %31 = bitcast i32* %30 to i8*
    %uglygep = getelementptr i8, i8* %31, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %32 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %33 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 7, i32 %pbcount.02
    store i32 %32, i32* %33, align 4, !tbaa !45
    %34 = add i32 %pbcount.02, 1
    br label %35
  
  ; <label>:35                                      ; preds = %15, %11
    %pbcount.1 = phi i32 [ %34, %15 ], [ %pbcount.02, %11 ]
    %36 = add i32 %i.03, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next4 = add i32 %lsr.iv3, 12
    %37 = icmp ugt i32 %36, %last
    br i1 %37, label %._crit_edge, label %11
  
  ._crit_edge:                                      ; preds = %35, %0
    %pbcount.0.lcssa = phi i32 [ %6, %0 ], [ %pbcount.1, %35 ]
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115220
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    store i32 %pbcount.0.lcssa, i32* %sunkaddr20, align 4, !tbaa !41
    %38 = icmp ugt i32 %pbcount.0.lcssa, 2559
    br i1 %38, label %39, label %40
  
  ; <label>:39                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %40
  
  ; <label>:40                                      ; preds = %39, %._crit_edge
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  declare void @gl_flush_pb(%struct.gl_context*) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_set_point_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !50
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !51
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !53
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %44
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !54
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @null_points, void (%struct.gl_context*, i32, i32)** %13, align 4, !tbaa !55
    br label %48
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    %16 = load void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32)** %15, align 4, !tbaa !56
    %17 = icmp eq void (%struct.gl_context*, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %16, void (%struct.gl_context*, i32, i32)** %19, align 4, !tbaa !55
    br label %48
  
  ; <label>:20                                      ; preds = %14
    %21 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 0
    %22 = load i8, i8* %21, align 4, !tbaa !57
    %23 = icmp eq i8 %22, 0
    %24 = icmp eq i8 %4, 0
    %or.cond = or i1 %24, %23
    br i1 %or.cond, label %27, label %25
  
  ; <label>:25                                      ; preds = %20
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @antialiased_rgba_points, void (%struct.gl_context*, i32, i32)** %26, align 4, !tbaa !55
    br label %48
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %32, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @textured_rgba_points, void (%struct.gl_context*, i32, i32)** %31, align 4, !tbaa !55
    br label %48
  
  ; <label>:32                                      ; preds = %27
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %34 = load float, float* %33, align 4, !tbaa !37
    %35 = fcmp oeq float %34, 1.000000e+00
    br i1 %35, label %36, label %40
  
  ; <label>:36                                      ; preds = %32
    %37 = icmp ne i8 %4, 0
    %38 = select i1 %37, void (%struct.gl_context*, i32, i32)* @size1_rgba_points, void (%struct.gl_context*, i32, i32)* @size1_ci_points
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %38, void (%struct.gl_context*, i32, i32)** %39, align 4, !tbaa !55
    br label %48
  
  ; <label>:40                                      ; preds = %32
    %41 = icmp ne i8 %4, 0
    %42 = select i1 %41, void (%struct.gl_context*, i32, i32)* @general_rgba_points, void (%struct.gl_context*, i32, i32)* @general_ci_points
    %43 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %42, void (%struct.gl_context*, i32, i32)** %43, align 4, !tbaa !55
    br label %48
  
  ; <label>:44                                      ; preds = %0
    %45 = icmp eq i32 %6, 7169
    br i1 %45, label %46, label %47
  
  ; <label>:46                                      ; preds = %44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55788
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @feedback_points, void (%struct.gl_context*, i32, i32)** %sunkaddr2, align 4, !tbaa !55
    br label %48
  
  ; <label>:47                                      ; preds = %44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55788
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @select_points, void (%struct.gl_context*, i32, i32)** %sunkaddr5, align 4, !tbaa !55
    br label %48
  
  ; <label>:48                                      ; preds = %47, %46, %40, %36, %30, %25, %18, %12
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_points(%struct.gl_context* nocapture %ctx, i32 signext %first, i32 signext %last) #3 {
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @antialiased_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fcmp olt float %8, 1.000000e+00
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = fcmp ogt float %8, 1.000000e+01
    br i1 %11, label %13, label %12
  
  ; <label>:12                                      ; preds = %10
    %phitmp16 = fmul float %8, 5.000000e-01
    br label %13
  
  ; <label>:13                                      ; preds = %12, %10, %0
    %14 = phi float [ 5.000000e-01, %0 ], [ %phitmp16, %12 ], [ 5.000000e+00, %10 ]
    %15 = fadd float %14, 0xBFE6A09020000000
    %16 = fadd float %14, 0x3FE6A09020000000
    %17 = fmul float %15, %15
    %18 = fmul float %16, %16
    %19 = fsub float %18, %17
    %20 = fdiv float 2.560000e+02, %19
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %.preheader17, label %.preheader19
  
  .preheader19:                                     ; preds = %13
    %23 = icmp ugt i32 %first, %last
    br i1 %23, label %.loopexit, label %.lr.ph36
  
  .lr.ph36:                                         ; preds = %.preheader19
    br label %25
  
  .preheader17:                                     ; preds = %13
    %24 = icmp ugt i32 %first, %last
    br i1 %24, label %.loopexit, label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.preheader17
    br label %134
  
  ; <label>:25                                      ; preds = %131, %.lr.ph36
    %i.033 = phi i32 [ %first, %.lr.ph36 ], [ %132, %131 ]
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.033
    %27 = load i8, i8* %26, align 1, !tbaa !43
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %131, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 0
    %31 = load float, float* %30, align 4, !tbaa !44
    %32 = fsub float %31, %14
    %33 = fptosi float %32 to i32
    %34 = fadd float %14, %31
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 1
    %37 = load float, float* %36, align 4, !tbaa !44
    %38 = fsub float %37, %14
    %39 = fptosi float %38 to i32
    %40 = fadd float %14, %37
    %41 = fptosi float %40 to i32
    %sunkaddr = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr1 = add i32 %sunkaddr, 52416
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to [4 x i32]**
    %42 = load [4 x i32]*, [4 x i32]** %sunkaddr2, align 4, !tbaa !59
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 0
    %44 = load float, float* %43, align 4, !tbaa !44
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 3
    %46 = load float, float* %45, align 4, !tbaa !44
    %47 = fdiv float %44, %46
    %48 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 1
    %49 = load float, float* %48, align 4, !tbaa !44
    %50 = fdiv float %49, %46
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 2
    %52 = load float, float* %51, align 4, !tbaa !44
    %53 = fdiv float %52, %46
    %54 = icmp sgt i32 %39, %41
    br i1 %54, label %._crit_edge32, label %.preheader18.lr.ph
  
  .preheader18.lr.ph:                               ; preds = %29
    %55 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !45
    %57 = ashr i32 %56, %6
    %58 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !45
    %60 = ashr i32 %59, %6
    %61 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 0
    %62 = load i32, i32* %61, align 4, !tbaa !45
    %63 = ashr i32 %62, %6
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 2
    %65 = load float, float* %64, align 4, !tbaa !44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55776
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %66 = load float, float* %sunkaddr5, align 4, !tbaa !46
    %67 = fadd float %65, %66
    %68 = fptosi float %67 to i32
    br label %.preheader18
  
  .preheader18:                                     ; preds = %._crit_edge30, %.preheader18.lr.ph
    %y.031 = phi i32 [ %39, %.preheader18.lr.ph ], [ %126, %._crit_edge30 ]
    %69 = icmp sgt i32 %33, %35
    br i1 %69, label %._crit_edge30, label %.lr.ph29
  
  .lr.ph29:                                         ; preds = %.preheader18
    %70 = sitofp i32 %y.031 to float
    br label %71
  
  ; <label>:71                                      ; preds = %122, %.lr.ph29
    %x.028 = phi i32 [ %33, %.lr.ph29 ], [ %123, %122 ]
    %72 = sitofp i32 %x.028 to float
    %73 = load float, float* %30, align 4, !tbaa !44
    %74 = fsub float %72, %73
    %75 = load float, float* %36, align 4, !tbaa !44
    %76 = fsub float %70, %75
    %77 = fmul float %74, %74
    %78 = fmul float %76, %76
    %79 = fadd float %77, %78
    %80 = fcmp olt float %79, %18
    br i1 %80, label %81, label %122
  
  ; <label>:81                                      ; preds = %71
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %82 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %83 = getelementptr inbounds [4 x i32], [4 x i32]* %82, i32 %i.033, i32 3
    %84 = load i32, i32* %83, align 4, !tbaa !45
    %85 = ashr i32 %84, %6
    %86 = fcmp ult float %79, %17
    br i1 %86, label %94, label %87
  
  ; <label>:87                                      ; preds = %81
    %88 = fsub float %79, %17
    %89 = fmul float %20, %88
    %90 = fsub float 2.560000e+02, %89
    %91 = fptosi float %90 to i32
    %92 = mul nsw i32 %85, %91
    %93 = ashr i32 %92, 8
    br label %94
  
  ; <label>:94                                      ; preds = %87, %81
    %alpha.0 = phi i32 [ %93, %87 ], [ %85, %81 ]
    %95 = trunc i32 %57 to i8
    %96 = trunc i32 %60 to i8
    %97 = trunc i32 %63 to i8
    %98 = trunc i32 %68 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %99 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %100 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %99
    store i32 %x.028, i32* %100, align 4, !tbaa !45
    %101 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %102 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %101
    store i32 %y.031, i32* %102, align 4, !tbaa !45
    %103 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %104 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %103
    store i16 %98, i16* %104, align 2, !tbaa !47
    %105 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %106 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %105
    store i8 %97, i8* %106, align 1, !tbaa !43
    %107 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %108 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %107
    store i8 %96, i8* %108, align 1, !tbaa !43
    %109 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %109
    store i8 %95, i8* %110, align 1, !tbaa !43
    %111 = trunc i32 %alpha.0 to i8
    %112 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %113 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %112
    store i8 %111, i8* %113, align 1, !tbaa !43
    %114 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %115 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %114
    store float %47, float* %115, align 4, !tbaa !44
    %116 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %117 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %116
    store float %50, float* %117, align 4, !tbaa !44
    %118 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %119 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %118
    store float %53, float* %119, align 4, !tbaa !44
    %120 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %121 = add i32 %120, 1
    store i32 %121, i32* %sunkaddr11, align 4, !tbaa !41
    br label %122
  
  ; <label>:122                                     ; preds = %94, %71
    %123 = add nsw i32 %x.028, 1
    %124 = add i32 %123, -1
    %125 = icmp slt i32 %124, %35
    br i1 %125, label %71, label %._crit_edge30
  
  ._crit_edge30:                                    ; preds = %122, %.preheader18
    %126 = add nsw i32 %y.031, 1
    %127 = icmp slt i32 %y.031, %41
    br i1 %127, label %.preheader18, label %._crit_edge32
  
  ._crit_edge32:                                    ; preds = %._crit_edge30, %29
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %128 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %129 = icmp ugt i32 %128, 2559
    br i1 %129, label %130, label %131
  
  ; <label>:130                                     ; preds = %._crit_edge32
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %131
  
  ; <label>:131                                     ; preds = %130, %._crit_edge32, %25
    %132 = add i32 %i.033, 1
    %133 = icmp ugt i32 %132, %last
    br i1 %133, label %.loopexit, label %25
  
  ; <label>:134                                     ; preds = %223, %.lr.ph27
    %i.124 = phi i32 [ %first, %.lr.ph27 ], [ %224, %223 ]
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.124
    %136 = load i8, i8* %135, align 1, !tbaa !43
    %137 = icmp eq i8 %136, 0
    br i1 %137, label %223, label %138
  
  ; <label>:138                                     ; preds = %134
    %139 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 0
    %140 = load float, float* %139, align 4, !tbaa !44
    %141 = fsub float %140, %14
    %142 = fptosi float %141 to i32
    %143 = fadd float %14, %140
    %144 = fptosi float %143 to i32
    %145 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 1
    %146 = load float, float* %145, align 4, !tbaa !44
    %147 = fsub float %146, %14
    %148 = fptosi float %147 to i32
    %149 = fadd float %14, %146
    %150 = fptosi float %149 to i32
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 52416
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to [4 x i32]**
    %151 = load [4 x i32]*, [4 x i32]** %sunkaddr17, align 4, !tbaa !59
    %152 = icmp sgt i32 %148, %150
    br i1 %152, label %._crit_edge23, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %138
    %153 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 2
    %154 = load i32, i32* %153, align 4, !tbaa !45
    %155 = ashr i32 %154, %6
    %156 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 1
    %157 = load i32, i32* %156, align 4, !tbaa !45
    %158 = ashr i32 %157, %6
    %159 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 0
    %160 = load i32, i32* %159, align 4, !tbaa !45
    %161 = ashr i32 %160, %6
    %162 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 2
    %163 = load float, float* %162, align 4, !tbaa !44
    %sunkaddr18 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr19 = add i32 %sunkaddr18, 55776
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    %164 = load float, float* %sunkaddr20, align 4, !tbaa !46
    %165 = fadd float %163, %164
    %166 = fptosi float %165 to i32
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %y6.022 = phi i32 [ %148, %.preheader.lr.ph ], [ %218, %._crit_edge ]
    %167 = icmp sgt i32 %142, %144
    br i1 %167, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader
    %168 = sitofp i32 %y6.022 to float
    br label %169
  
  ; <label>:169                                     ; preds = %214, %.lr.ph
    %x5.021 = phi i32 [ %142, %.lr.ph ], [ %215, %214 ]
    %170 = sitofp i32 %x5.021 to float
    %171 = load float, float* %139, align 4, !tbaa !44
    %172 = fsub float %170, %171
    %173 = load float, float* %145, align 4, !tbaa !44
    %174 = fsub float %168, %173
    %175 = fmul float %172, %172
    %176 = fmul float %174, %174
    %177 = fadd float %175, %176
    %178 = fcmp olt float %177, %18
    br i1 %178, label %179, label %214
  
  ; <label>:179                                     ; preds = %169
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %180 = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %181 = getelementptr inbounds [4 x i32], [4 x i32]* %180, i32 %i.124, i32 3
    %182 = load i32, i32* %181, align 4, !tbaa !45
    %183 = ashr i32 %182, %6
    %184 = fcmp ult float %177, %17
    br i1 %184, label %192, label %185
  
  ; <label>:185                                     ; preds = %179
    %186 = fsub float %177, %17
    %187 = fmul float %20, %186
    %188 = fsub float 2.560000e+02, %187
    %189 = fptosi float %188 to i32
    %190 = mul nsw i32 %183, %189
    %191 = ashr i32 %190, 8
    br label %192
  
  ; <label>:192                                     ; preds = %185, %179
    %alpha11.0 = phi i32 [ %191, %185 ], [ %183, %179 ]
    %193 = trunc i32 %155 to i8
    %194 = trunc i32 %158 to i8
    %195 = trunc i32 %161 to i8
    %196 = trunc i32 %166 to i16
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %197 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %198 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %197
    store i32 %x5.021, i32* %198, align 4, !tbaa !45
    %199 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %200 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %199
    store i32 %y6.022, i32* %200, align 4, !tbaa !45
    %201 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %202 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %201
    store i16 %196, i16* %202, align 2, !tbaa !47
    %203 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %204 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %203
    store i8 %195, i8* %204, align 1, !tbaa !43
    %205 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %206 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %205
    store i8 %194, i8* %206, align 1, !tbaa !43
    %207 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %208 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %207
    store i8 %193, i8* %208, align 1, !tbaa !43
    %209 = trunc i32 %alpha11.0 to i8
    %210 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %211 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %210
    store i8 %209, i8* %211, align 1, !tbaa !43
    %212 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %213 = add i32 %212, 1
    store i32 %213, i32* %sunkaddr26, align 4, !tbaa !41
    br label %214
  
  ; <label>:214                                     ; preds = %192, %169
    %215 = add nsw i32 %x5.021, 1
    %216 = add i32 %215, -1
    %217 = icmp slt i32 %216, %144
    br i1 %217, label %169, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %214, %.preheader
    %218 = add nsw i32 %y6.022, 1
    %219 = icmp slt i32 %y6.022, %150
    br i1 %219, label %.preheader, label %._crit_edge23
  
  ._crit_edge23:                                    ; preds = %._crit_edge, %138
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %220 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %221 = icmp ugt i32 %220, 2559
    br i1 %221, label %222, label %223
  
  ; <label>:222                                     ; preds = %._crit_edge23
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %223
  
  ; <label>:223                                     ; preds = %222, %._crit_edge23, %134
    %224 = add i32 %i.124, 1
    %225 = icmp ugt i32 %224, %last
    br i1 %225, label %.loopexit, label %134
  
  .loopexit:                                        ; preds = %131, %223, %.preheader17, %.preheader19
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #1
  
  ; Function Attrs: nounwind
  define internal void @textured_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %0
    br label %8
  
  ; <label>:8                                       ; preds = %118, %.lr.ph7
    %i.04 = phi i32 [ %first, %.lr.ph7 ], [ %119, %118 ]
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.04
    %10 = load i8, i8* %9, align 1, !tbaa !43
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %118, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 0
    %14 = load float, float* %13, align 4, !tbaa !44
    %15 = fptosi float %14 to i32
    %16 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 1
    %17 = load float, float* %16, align 4, !tbaa !44
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 2
    %20 = load float, float* %19, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %21 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %22 = fadd float %20, %21
    %23 = fptosi float %22 to i32
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54136
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %24 = load float, float* %sunkaddr5, align 4, !tbaa !37
    %25 = fpext float %24 to double
    %26 = fcmp olt float %24, 1.000000e+00
    br i1 %26, label %30, label %27
  
  ; <label>:27                                      ; preds = %12
    %28 = fcmp ogt float %24, 1.000000e+01
    br i1 %28, label %30, label %29
  
  ; <label>:29                                      ; preds = %27
    br label %30
  
  ; <label>:30                                      ; preds = %29, %27, %12
    %31 = phi double [ 1.000000e+00, %12 ], [ %25, %29 ], [ 1.000000e+01, %27 ]
    %32 = fadd double %31, 5.000000e-01
    %33 = fptosi double %32 to i32
    %34 = icmp slt i32 %33, 1
    %. = select i1 %34, i32 1, i32 %33
    %35 = and i32 %., 1
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %43, label %37
  
  ; <label>:37                                      ; preds = %30
    %38 = sdiv i32 %., 2
    %39 = sub nsw i32 %15, %38
    %40 = add nsw i32 %38, %15
    %41 = sub nsw i32 %18, %38
    %42 = add nsw i32 %38, %18
    br label %56
  
  ; <label>:43                                      ; preds = %30
    %44 = sitofp i32 %15 to float
    %45 = fadd float %44, 5.000000e-01
    %46 = fptosi float %45 to i32
    %47 = sdiv i32 %., 2
    %48 = sub nsw i32 %46, %47
    %49 = add i32 %., -1
    %50 = add i32 %49, %48
    %51 = sitofp i32 %18 to float
    %52 = fadd float %51, 5.000000e-01
    %53 = fptosi float %52 to i32
    %54 = sub nsw i32 %53, %47
    %55 = add i32 %49, %54
    br label %56
  
  ; <label>:56                                      ; preds = %43, %37
    %y1.0 = phi i32 [ %42, %37 ], [ %55, %43 ]
    %y0.0 = phi i32 [ %41, %37 ], [ %54, %43 ]
    %x1.0 = phi i32 [ %40, %37 ], [ %50, %43 ]
    %x0.0 = phi i32 [ %39, %37 ], [ %48, %43 ]
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %57 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %58 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 0
    %59 = load float, float* %58, align 4, !tbaa !44
    %60 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 3
    %61 = load float, float* %60, align 4, !tbaa !44
    %62 = fdiv float %59, %61
    %63 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 1
    %64 = load float, float* %63, align 4, !tbaa !44
    %65 = fdiv float %64, %61
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 2
    %67 = load float, float* %66, align 4, !tbaa !44
    %68 = fdiv float %67, %61
    %69 = icmp sgt i32 %y0.0, %y1.0
    br i1 %69, label %._crit_edge3, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %56
    %70 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 3
    %71 = load i32, i32* %70, align 4, !tbaa !45
    %72 = ashr i32 %71, %6
    %73 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 2
    %74 = load i32, i32* %73, align 4, !tbaa !45
    %75 = ashr i32 %74, %6
    %76 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 1
    %77 = load i32, i32* %76, align 4, !tbaa !45
    %78 = ashr i32 %77, %6
    %79 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 0
    %80 = load i32, i32* %79, align 4, !tbaa !45
    %81 = ashr i32 %80, %6
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.02 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %113, %._crit_edge ]
    %82 = icmp sgt i32 %x0.0, %x1.0
    br i1 %82, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.01 = phi i32 [ %110, %.lr.ph ], [ %x0.0, %.preheader ]
    %83 = trunc i32 %72 to i8
    %84 = trunc i32 %75 to i8
    %85 = trunc i32 %78 to i8
    %86 = trunc i32 %81 to i8
    %87 = trunc i32 %23 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %88 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %89 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %88
    store i32 %ix.01, i32* %89, align 4, !tbaa !45
    %90 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %91 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %90
    store i32 %iy.02, i32* %91, align 4, !tbaa !45
    %92 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %93 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %92
    store i16 %87, i16* %93, align 2, !tbaa !47
    %94 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %95 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %94
    store i8 %86, i8* %95, align 1, !tbaa !43
    %96 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %97 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %96
    store i8 %85, i8* %97, align 1, !tbaa !43
    %98 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %98
    store i8 %84, i8* %99, align 1, !tbaa !43
    %100 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %100
    store i8 %83, i8* %101, align 1, !tbaa !43
    %102 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %102
    store float %62, float* %103, align 4, !tbaa !44
    %104 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %105 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %104
    store float %65, float* %105, align 4, !tbaa !44
    %106 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %107 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %106
    store float %68, float* %107, align 4, !tbaa !44
    %108 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %109 = add i32 %108, 1
    store i32 %109, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = add nsw i32 %ix.01, 1
    %111 = add i32 %110, -1
    %112 = icmp slt i32 %111, %x1.0
    br i1 %112, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %113 = add nsw i32 %iy.02, 1
    %114 = icmp slt i32 %iy.02, %y1.0
    br i1 %114, label %.preheader, label %._crit_edge3
  
  ._crit_edge3:                                     ; preds = %._crit_edge, %56
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %115 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %116 = icmp ugt i32 %115, 2559
    br i1 %116, label %117, label %118
  
  ; <label>:117                                     ; preds = %._crit_edge3
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %118
  
  ; <label>:118                                     ; preds = %117, %._crit_edge3, %8
    %119 = add i32 %i.04, 1
    %120 = icmp ugt i32 %119, %last
    br i1 %120, label %._crit_edge8, label %8
  
  ._crit_edge8:                                     ; preds = %118, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @size1_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %.._crit_edge_crit_edge, label %.lr.ph
  
  .._crit_edge_crit_edge:                           ; preds = %0
    br label %._crit_edge
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 4
    %9 = add i32 %8, 8
    %10 = mul i32 %first, 12
    %11 = add i32 %10, 24192
    br label %12
  
  ; <label>:12                                      ; preds = %57, %.lr.ph
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %57 ], [ %11, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %57 ], [ %9, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %58, %57 ]
    %13 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep20 = getelementptr i8, i8* %13, i32 %i.01
    %scevgep21 = getelementptr i8, i8* %uglygep20, i32 65024
    %14 = load i8, i8* %scevgep21, align 1, !tbaa !43
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %57, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep18 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1819 = bitcast i8* %uglygep18 to float*
    %18 = load float, float* %uglygep1819, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %uglygep15 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 1
    %20 = load float, float* %scevgep17, align 4, !tbaa !44
    %21 = fptosi float %20 to i32
    %uglygep12 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1213 = bitcast i8* %uglygep12 to float*
    %scevgep14 = getelementptr float, float* %uglygep1213, i32 2
    %22 = load float, float* %scevgep14, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr, 55776
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %23 = load float, float* %sunkaddr23, align 4, !tbaa !46
    %24 = fadd float %22, %23
    %25 = fptosi float %24 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %26 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !59
    %27 = bitcast [4 x i32]* %26 to i8*
    %uglygep7 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    %scevgep9 = getelementptr i32, i32* %uglygep78, i32 -2
    %28 = load i32, i32* %scevgep9, align 4, !tbaa !45
    %29 = ashr i32 %28, %6
    %uglygep4 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i32*
    %scevgep6 = getelementptr i32, i32* %uglygep45, i32 -1
    %30 = load i32, i32* %scevgep6, align 4, !tbaa !45
    %31 = ashr i32 %30, %6
    %uglygep2 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to i32*
    %32 = load i32, i32* %uglygep23, align 4, !tbaa !45
    %33 = ashr i32 %32, %6
    %uglygep = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %scevgep = getelementptr i32, i32* %uglygep1, i32 1
    %34 = load i32, i32* %scevgep, align 4, !tbaa !45
    %35 = ashr i32 %34, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %36 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %37 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %36
    store i32 %19, i32* %37, align 4, !tbaa !45
    %38 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %39 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %38
    store i32 %21, i32* %39, align 4, !tbaa !45
    %40 = trunc i32 %25 to i16
    %41 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %42 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %41
    store i16 %40, i16* %42, align 2, !tbaa !47
    %43 = trunc i32 %29 to i8
    %44 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %45 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %44
    store i8 %43, i8* %45, align 1, !tbaa !43
    %46 = trunc i32 %31 to i8
    %47 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %48 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %47
    store i8 %46, i8* %48, align 1, !tbaa !43
    %49 = trunc i32 %33 to i8
    %50 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %51 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %50
    store i8 %49, i8* %51, align 1, !tbaa !43
    %52 = trunc i32 %35 to i8
    %53 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %54 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %53
    store i8 %52, i8* %54, align 1, !tbaa !43
    %55 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %56 = add i32 %55, 1
    store i32 %56, i32* %sunkaddr29, align 4, !tbaa !41
    br label %57
  
  ; <label>:57                                      ; preds = %16, %12
    %58 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 16
    %lsr.iv.next11 = add i32 %lsr.iv10, 12
    %59 = icmp ugt i32 %58, %last
    br i1 %59, label %._crit_edge, label %12
  
  ._crit_edge:                                      ; preds = %57, %.._crit_edge_crit_edge
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115220
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    %60 = load i32, i32* %sunkaddr32, align 4, !tbaa !41
    %61 = icmp ugt i32 %60, 2559
    br i1 %61, label %62, label %63
  
  ; <label>:62                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %63
  
  ; <label>:63                                      ; preds = %62, %._crit_edge
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fpext float %8 to double
    %10 = fcmp olt float %8, 1.000000e+00
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    %12 = fcmp ogt float %8, 1.000000e+01
    br i1 %12, label %14, label %13
  
  ; <label>:13                                      ; preds = %11
    %phitmp = fadd double %9, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %14
  
  ; <label>:14                                      ; preds = %13, %11, %0
    %15 = phi i32 [ 1, %0 ], [ %phitmp1, %13 ], [ 10, %11 ]
    %16 = icmp ugt i32 %first, %last
    br i1 %16, label %._crit_edge9, label %.lr.ph8
  
  .lr.ph8:                                          ; preds = %14
    %17 = and i32 %15, 1
    %18 = sdiv i32 %15, 2
    %19 = add i32 %15, -1
    br label %20
  
  ; <label>:20                                      ; preds = %114, %.lr.ph8
    %i.05 = phi i32 [ %first, %.lr.ph8 ], [ %115, %114 ]
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %22 = load i8, i8* %21, align 1, !tbaa !43
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %114, label %24
  
  ; <label>:24                                      ; preds = %20
    %25 = icmp eq i32 %17, 0
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %27 = load float, float* %26, align 4, !tbaa !44
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %30 = load float, float* %29, align 4, !tbaa !44
    %31 = fptosi float %30 to i32
    %32 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %33 = load float, float* %32, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %34 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %35 = fadd float %33, %34
    %36 = fptosi float %35 to i32
    br i1 %25, label %42, label %37
  
  ; <label>:37                                      ; preds = %24
    %38 = sub nsw i32 %28, %18
    %39 = add nsw i32 %28, %18
    %40 = sub nsw i32 %31, %18
    %41 = add nsw i32 %31, %18
    br label %53
  
  ; <label>:42                                      ; preds = %24
    %43 = sitofp i32 %28 to float
    %44 = fadd float %43, 5.000000e-01
    %45 = fptosi float %44 to i32
    %46 = sub nsw i32 %45, %18
    %47 = add i32 %19, %46
    %48 = sitofp i32 %31 to float
    %49 = fadd float %48, 5.000000e-01
    %50 = fptosi float %49 to i32
    %51 = sub nsw i32 %50, %18
    %52 = add i32 %19, %51
    br label %53
  
  ; <label>:53                                      ; preds = %42, %37
    %x0.0 = phi i32 [ %38, %37 ], [ %46, %42 ]
    %x1.0 = phi i32 [ %39, %37 ], [ %47, %42 ]
    %y0.0 = phi i32 [ %40, %37 ], [ %51, %42 ]
    %y1.0 = phi i32 [ %41, %37 ], [ %52, %42 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115200
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %54 = load i32, i32* %sunkaddr5, align 4, !tbaa !45
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %55 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 0
    %57 = load i32, i32* %56, align 4, !tbaa !45
    %58 = ashr i32 %57, %6
    %59 = icmp eq i32 %54, %58
    br i1 %59, label %60, label %81
  
  ; <label>:60                                      ; preds = %53
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115204
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %61 = load i32, i32* %sunkaddr11, align 4, !tbaa !45
    %62 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !45
    %64 = ashr i32 %63, %6
    %65 = icmp eq i32 %61, %64
    br i1 %65, label %66, label %81
  
  ; <label>:66                                      ; preds = %60
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115208
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %67 = load i32, i32* %sunkaddr14, align 4, !tbaa !45
    %68 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 2
    %69 = load i32, i32* %68, align 4, !tbaa !45
    %70 = ashr i32 %69, %6
    %71 = icmp eq i32 %67, %70
    br i1 %71, label %72, label %81
  
  ; <label>:72                                      ; preds = %66
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115212
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %73 = load i32, i32* %sunkaddr17, align 4, !tbaa !45
    %74 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 3
    %75 = load i32, i32* %74, align 4, !tbaa !45
    %76 = ashr i32 %75, %6
    %77 = icmp eq i32 %73, %76
    br i1 %77, label %78, label %81
  
  ; <label>:78                                      ; preds = %72
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    %79 = load i8, i8* %sunkaddr20, align 4, !tbaa !60
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %78, %72, %66, %60, %53
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %.pre = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %.pre, i32 %i.05, i32 0
    %.pre10 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %82
  
  ; <label>:82                                      ; preds = %81, %78
    %83 = phi i32 [ %57, %78 ], [ %.pre10, %81 ]
    %84 = phi [4 x i32]* [ %55, %78 ], [ %.pre, %81 ]
    %85 = ashr i32 %83, %6
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115200
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    store i32 %85, i32* %sunkaddr26, align 4, !tbaa !45
    %86 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 1
    %87 = load i32, i32* %86, align 4, !tbaa !45
    %88 = ashr i32 %87, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115204
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    store i32 %88, i32* %sunkaddr29, align 4, !tbaa !45
    %89 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 2
    %90 = load i32, i32* %89, align 4, !tbaa !45
    %91 = ashr i32 %90, %6
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115208
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    store i32 %91, i32* %sunkaddr32, align 4, !tbaa !45
    %92 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 3
    %93 = load i32, i32* %92, align 4, !tbaa !45
    %94 = ashr i32 %93, %6
    %sunkaddr33 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr34 = add i32 %sunkaddr33, 115212
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %94, i32* %sunkaddr35, align 4, !tbaa !45
    %sunkaddr36 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 115224
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i8*
    store i8 1, i8* %sunkaddr38, align 4, !tbaa !60
    %95 = icmp sgt i32 %y0.0, %y1.0
    br i1 %95, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %82
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %109, %._crit_edge ]
    %96 = icmp sgt i32 %x0.0, %x1.0
    br i1 %96, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %106, %.lr.ph ], [ %x0.0, %.preheader ]
    %97 = trunc i32 %36 to i16
    %sunkaddr39 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr40 = add i32 %sunkaddr39, 115220
    %sunkaddr41 = inttoptr i32 %sunkaddr40 to i32*
    %98 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %98
    store i32 %ix.02, i32* %99, align 4, !tbaa !45
    %100 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %100
    store i32 %iy.03, i32* %101, align 4, !tbaa !45
    %102 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %102
    store i16 %97, i16* %103, align 2, !tbaa !47
    %104 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %105 = add i32 %104, 1
    store i32 %105, i32* %sunkaddr41, align 4, !tbaa !41
    %106 = add nsw i32 %ix.02, 1
    %107 = add i32 %106, -1
    %108 = icmp slt i32 %107, %x1.0
    br i1 %108, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %109 = add nsw i32 %iy.03, 1
    %110 = icmp slt i32 %iy.03, %y1.0
    br i1 %110, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %82
    %sunkaddr42 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr43 = add i32 %sunkaddr42, 115220
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %111 = load i32, i32* %sunkaddr44, align 4, !tbaa !41
    %112 = icmp ugt i32 %111, 2559
    br i1 %112, label %113, label %114
  
  ; <label>:113                                     ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %114
  
  ; <label>:114                                     ; preds = %113, %._crit_edge4, %20
    %115 = add i32 %i.05, 1
    %116 = icmp ugt i32 %115, %last
    br i1 %116, label %._crit_edge9, label %20
  
  ._crit_edge9:                                     ; preds = %114, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %6 = load float, float* %5, align 4, !tbaa !37
    %7 = fpext float %6 to double
    %8 = fcmp olt float %6, 1.000000e+00
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %0
    %10 = fcmp ogt float %6, 1.000000e+01
    br i1 %10, label %12, label %11
  
  ; <label>:11                                      ; preds = %9
    %phitmp = fadd double %7, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %12
  
  ; <label>:12                                      ; preds = %11, %9, %0
    %13 = phi i32 [ 1, %0 ], [ %phitmp1, %11 ], [ 10, %9 ]
    %14 = icmp ugt i32 %first, %last
    br i1 %14, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %12
    %15 = and i32 %13, 1
    %16 = sdiv i32 %13, 2
    %17 = add i32 %13, -1
    br label %18
  
  ; <label>:18                                      ; preds = %82, %.lr.ph7
    %i.05 = phi i32 [ %first, %.lr.ph7 ], [ %83, %82 ]
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %20 = load i8, i8* %19, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %82, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = icmp eq i32 %15, 0
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %25 = load float, float* %24, align 4, !tbaa !44
    %26 = fptosi float %25 to i32
    %27 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %28 = load float, float* %27, align 4, !tbaa !44
    %29 = fptosi float %28 to i32
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %31 = load float, float* %30, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %32 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %33 = fadd float %31, %32
    %34 = fptosi float %33 to i32
    br i1 %23, label %40, label %35
  
  ; <label>:35                                      ; preds = %22
    %36 = sub nsw i32 %26, %16
    %37 = add nsw i32 %26, %16
    %38 = sub nsw i32 %29, %16
    %39 = add nsw i32 %29, %16
    br label %51
  
  ; <label>:40                                      ; preds = %22
    %41 = sitofp i32 %26 to float
    %42 = fadd float %41, 5.000000e-01
    %43 = fptosi float %42 to i32
    %44 = sub nsw i32 %43, %16
    %45 = add i32 %17, %44
    %46 = sitofp i32 %29 to float
    %47 = fadd float %46, 5.000000e-01
    %48 = fptosi float %47 to i32
    %49 = sub nsw i32 %48, %16
    %50 = add i32 %17, %49
    br label %51
  
  ; <label>:51                                      ; preds = %40, %35
    %x0.0 = phi i32 [ %36, %35 ], [ %44, %40 ]
    %x1.0 = phi i32 [ %37, %35 ], [ %45, %40 ]
    %y0.0 = phi i32 [ %38, %35 ], [ %49, %40 ]
    %y1.0 = phi i32 [ %39, %35 ], [ %50, %40 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115216
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %52 = load i32, i32* %sunkaddr5, align 4, !tbaa !61
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 56452
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32**
    %53 = load i32*, i32** %sunkaddr8, align 4, !tbaa !48
    %54 = getelementptr inbounds i32, i32* %53, i32 %i.05
    %55 = load i32, i32* %54, align 4, !tbaa !45
    %56 = icmp eq i32 %52, %55
    br i1 %56, label %57, label %60
  
  ; <label>:57                                      ; preds = %51
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115224
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i8*
    %58 = load i8, i8* %sunkaddr11, align 4, !tbaa !60
    %59 = icmp eq i8 %58, 0
    br i1 %59, label %60, label %61
  
  ; <label>:60                                      ; preds = %57, %51
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr12 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 56452
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32**
    %.pre = load i32*, i32** %sunkaddr14, align 4, !tbaa !48
    %.phi.trans.insert = getelementptr inbounds i32, i32* %.pre, i32 %i.05
    %.pre9 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %61
  
  ; <label>:61                                      ; preds = %60, %57
    %62 = phi i32 [ %52, %57 ], [ %.pre9, %60 ]
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115216
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    store i32 %62, i32* %sunkaddr17, align 4, !tbaa !61
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    store i8 1, i8* %sunkaddr20, align 4, !tbaa !60
    %63 = icmp sgt i32 %y0.0, %y1.0
    br i1 %63, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %61
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %77, %._crit_edge ]
    %64 = icmp sgt i32 %x0.0, %x1.0
    br i1 %64, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %74, %.lr.ph ], [ %x0.0, %.preheader ]
    %65 = trunc i32 %34 to i16
    %sunkaddr21 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 115220
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to i32*
    %66 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %67 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %66
    store i32 %ix.02, i32* %67, align 4, !tbaa !45
    %68 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %69 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %68
    store i32 %iy.03, i32* %69, align 4, !tbaa !45
    %70 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %71 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %70
    store i16 %65, i16* %71, align 2, !tbaa !47
    %72 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %73 = add i32 %72, 1
    store i32 %73, i32* %sunkaddr23, align 4, !tbaa !41
    %74 = add nsw i32 %ix.02, 1
    %75 = add i32 %74, -1
    %76 = icmp slt i32 %75, %x1.0
    br i1 %76, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %77 = add nsw i32 %iy.03, 1
    %78 = icmp slt i32 %iy.03, %y1.0
    br i1 %78, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %61
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %79 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %80 = icmp ugt i32 %79, 2559
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %82
  
  ; <label>:82                                      ; preds = %81, %._crit_edge4, %18
    %83 = add i32 %i.05, 1
    %84 = icmp ugt i32 %83, %last
    br i1 %84, label %._crit_edge8, label %18
  
  ._crit_edge8:                                     ; preds = %82, %12
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %color = alloca [4 x float], align 4
    %texcoord = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !50
    %5 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 7
    %6 = load float, float* %5, align 4, !tbaa !62
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 8
    %8 = load float, float* %7, align 4, !tbaa !63
    %9 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 9
    %10 = load float, float* %9, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 10
    %12 = load float, float* %11, align 4, !tbaa !65
    %13 = icmp ugt i32 %first, %last
    br i1 %13, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %14 = shl i32 %first, 2
    %15 = shl i32 %first, 4
    %16 = mul i32 %first, 12
    %17 = add i32 %16, 24200
    br label %18
  
  ; <label>:18                                      ; preds = %93, %.lr.ph
    %lsr.iv41 = phi i32 [ %lsr.iv.next42, %93 ], [ %17, %.lr.ph ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %93 ], [ %15, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %93 ], [ %14, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %94, %93 ]
    %19 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep52 = getelementptr i8, i8* %19, i32 %i.01
    %scevgep53 = getelementptr i8, i8* %uglygep52, i32 65024
    %20 = load i8, i8* %scevgep53, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %93, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = bitcast [4 x float]* %texcoord to i8*
    %24 = bitcast [4 x float]* %color to i8*
    %25 = bitcast %struct.vertex_buffer* %2 to i8*
    call void @llvm.lifetime.start(i64 16, i8* %24) #4
    call void @llvm.lifetime.start(i64 16, i8* %23) #4
    %uglygep49 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4950 = bitcast i8* %uglygep49 to float*
    %scevgep51 = getelementptr float, float* %uglygep4950, i32 -2
    %26 = load float, float* %scevgep51, align 4, !tbaa !44
    %uglygep46 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4647 = bitcast i8* %uglygep46 to float*
    %scevgep48 = getelementptr float, float* %uglygep4647, i32 -1
    %27 = load float, float* %scevgep48, align 4, !tbaa !44
    %uglygep43 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4344 = bitcast i8* %uglygep43 to float*
    %28 = load float, float* %uglygep4344, align 4, !tbaa !44
    %29 = fdiv float %28, 6.553500e+04
    %uglygep38 = getelementptr i8, i8* %25, i32 %lsr.iv2
    %uglygep3839 = bitcast i8* %uglygep38 to float*
    %scevgep40 = getelementptr float, float* %uglygep3839, i32 4035
    %30 = load float, float* %scevgep40, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr, 43728
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %31 = load i32, i32* %sunkaddr55, align 4, !tbaa !66
    %32 = icmp eq i32 %31, 7425
    %sunkaddr56 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr57 = add i32 %sunkaddr56, 52416
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to [4 x i32]**
    %33 = load [4 x i32]*, [4 x i32]** %sunkaddr58, align 4, !tbaa !59
    %34 = bitcast [4 x i32]* %33 to i8*
    %uglygep36 = getelementptr i8, i8* %34, i32 %lsr.iv2
    %uglygep3637 = bitcast i8* %uglygep36 to i32*
    %35 = load i32, i32* %uglygep3637, align 4, !tbaa !45
    %36 = sitofp i32 %35 to float
    br i1 %32, label %37, label %53
  
  ; <label>:37                                      ; preds = %22
    %38 = bitcast [4 x i32]* %33 to i8*
    %39 = bitcast [4 x float]* %color to float*
    %40 = fmul float %36, 0x3F40000000000000
    %41 = fmul float %6, %40
    store float %41, float* %39, align 4, !tbaa !44
    %uglygep33 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3334 = bitcast i8* %uglygep33 to i32*
    %scevgep35 = getelementptr i32, i32* %uglygep3334, i32 1
    %42 = load i32, i32* %scevgep35, align 4, !tbaa !45
    %43 = sitofp i32 %42 to float
    %44 = fmul float %43, 0x3F40000000000000
    %45 = fmul float %8, %44
    %sunkaddr59 = ptrtoint [4 x float]* %color to i32
    %sunkaddr60 = add i32 %sunkaddr59, 4
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to float*
    store float %45, float* %sunkaddr61, align 4, !tbaa !44
    %uglygep30 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3031 = bitcast i8* %uglygep30 to i32*
    %scevgep32 = getelementptr i32, i32* %uglygep3031, i32 2
    %46 = load i32, i32* %scevgep32, align 4, !tbaa !45
    %47 = sitofp i32 %46 to float
    %48 = fmul float %47, 0x3F40000000000000
    %49 = fmul float %10, %48
    %sunkaddr62 = ptrtoint [4 x float]* %color to i32
    %sunkaddr63 = add i32 %sunkaddr62, 8
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    store float %49, float* %sunkaddr64, align 4, !tbaa !44
    %uglygep27 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep2728 = bitcast i8* %uglygep27 to i32*
    %scevgep29 = getelementptr i32, i32* %uglygep2728, i32 3
    %50 = load i32, i32* %scevgep29, align 4, !tbaa !45
    %51 = sitofp i32 %50 to float
    %52 = fmul float %51, 0x3F40000000000000
    br label %65
  
  ; <label>:53                                      ; preds = %22
    %54 = bitcast [4 x i32]* %33 to i8*
    %55 = bitcast [4 x float]* %color to float*
    %56 = fmul float %6, %36
    store float %56, float* %55, align 4, !tbaa !44
    %uglygep24 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2425 = bitcast i8* %uglygep24 to i32*
    %scevgep26 = getelementptr i32, i32* %uglygep2425, i32 1
    %57 = load i32, i32* %scevgep26, align 4, !tbaa !45
    %58 = sitofp i32 %57 to float
    %59 = fmul float %8, %58
    %sunkaddr65 = ptrtoint [4 x float]* %color to i32
    %sunkaddr66 = add i32 %sunkaddr65, 4
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to float*
    store float %59, float* %sunkaddr67, align 4, !tbaa !44
    %uglygep21 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2122 = bitcast i8* %uglygep21 to i32*
    %scevgep23 = getelementptr i32, i32* %uglygep2122, i32 2
    %60 = load i32, i32* %scevgep23, align 4, !tbaa !45
    %61 = sitofp i32 %60 to float
    %62 = fmul float %10, %61
    %sunkaddr68 = ptrtoint [4 x float]* %color to i32
    %sunkaddr69 = add i32 %sunkaddr68, 8
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to float*
    store float %62, float* %sunkaddr70, align 4, !tbaa !44
    %uglygep18 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep1819 = bitcast i8* %uglygep18 to i32*
    %scevgep20 = getelementptr i32, i32* %uglygep1819, i32 3
    %63 = load i32, i32* %scevgep20, align 4, !tbaa !45
    %64 = sitofp i32 %63 to float
    br label %65
  
  ; <label>:65                                      ; preds = %53, %37
    %.pn = phi float [ %64, %53 ], [ %52, %37 ]
    %66 = bitcast [4 x float]* %texcoord to float*
    %67 = bitcast %struct.vertex_buffer* %2 to i8*
    %storemerge = fmul float %12, %.pn
    %sunkaddr71 = ptrtoint [4 x float]* %color to i32
    %sunkaddr72 = add i32 %sunkaddr71, 12
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to float*
    store float %storemerge, float* %sunkaddr73, align 4, !tbaa !44
    %uglygep15 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 14243
    %68 = load float, float* %scevgep17, align 4, !tbaa !44
    %69 = fdiv float 1.000000e+00, %68
    %uglygep9 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep910 = bitcast i8* %uglygep9 to float*
    %scevgep11 = getelementptr float, float* %uglygep910, i32 14240
    %70 = load float, float* %scevgep11, align 4, !tbaa !44
    %71 = fmul float %70, %69
    store float %71, float* %66, align 4, !tbaa !44
    %uglygep6 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep67 = bitcast i8* %uglygep6 to float*
    %scevgep8 = getelementptr float, float* %uglygep67, i32 14241
    %72 = load float, float* %scevgep8, align 4, !tbaa !44
    %73 = fmul float %69, %72
    %sunkaddr74 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr75 = add i32 %sunkaddr74, 4
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to float*
    store float %73, float* %sunkaddr76, align 4, !tbaa !44
    %uglygep4 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep45 = bitcast i8* %uglygep4 to float*
    %scevgep = getelementptr float, float* %uglygep45, i32 14242
    %74 = load float, float* %scevgep, align 4, !tbaa !44
    %75 = fmul float %69, %74
    %sunkaddr77 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr78 = add i32 %sunkaddr77, 8
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to float*
    store float %75, float* %sunkaddr79, align 4, !tbaa !44
    %uglygep12 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1213 = bitcast i8* %uglygep12 to i32*
    %scevgep14 = getelementptr i32, i32* %uglygep1213, i32 14243
    %76 = load i32, i32* %scevgep14, align 4, !tbaa !44
    %sunkaddr80 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr81 = add i32 %sunkaddr80, 12
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i32*
    store i32 %76, i32* %sunkaddr82, align 4, !tbaa !44
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 55440
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to i32*
    %77 = load i32, i32* %sunkaddr85, align 4, !tbaa !67
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 55436
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to i32*
    %78 = load i32, i32* %sunkaddr88, align 4, !tbaa !68
    %79 = icmp ult i32 %77, %78
    br i1 %79, label %80, label %83
  
  ; <label>:80                                      ; preds = %65
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 55432
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to float**
    %81 = load float*, float** %sunkaddr91, align 4, !tbaa !69
    %82 = getelementptr inbounds float, float* %81, i32 %77
    store float 1.793000e+03, float* %82, align 4, !tbaa !44
    br label %83
  
  ; <label>:83                                      ; preds = %80, %65
    %84 = bitcast [4 x float]* %texcoord to float*
    %85 = bitcast [4 x float]* %color to float*
    %86 = bitcast [4 x float]* %texcoord to i8*
    %87 = bitcast [4 x float]* %color to i8*
    %88 = add i32 %77, 1
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 55440
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to i32*
    store i32 %88, i32* %sunkaddr94, align 4, !tbaa !67
    %sunkaddr95 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr96 = add i32 %sunkaddr95, 56452
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to i32**
    %89 = load i32*, i32** %sunkaddr97, align 4, !tbaa !48
    %90 = bitcast i32* %89 to i8*
    %uglygep = getelementptr i8, i8* %90, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %91 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %92 = uitofp i32 %91 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %26, float %27, float %29, float %30, float* nonnull %85, float %92, float* nonnull %84) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %86) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %87) #4
    br label %93
  
  ; <label>:93                                      ; preds = %83, %18
    %94 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next3 = add i32 %lsr.iv2, 16
    %lsr.iv.next42 = add i32 %lsr.iv41, 12
    %95 = icmp ugt i32 %94, %last
    br i1 %95, label %._crit_edge, label %18
  
  ._crit_edge:                                      ; preds = %93, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = icmp ugt i32 %first, %last
    br i1 %3, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %4 = mul i32 %first, 3
    %5 = add i32 %4, 2
    %scevgep = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 0, i32 1512, i32 %5
    %scevgep1 = bitcast float* %scevgep to %struct.vertex_buffer*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi %struct.vertex_buffer* [ %15, %13 ], [ %scevgep1, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %14, %13 ], [ %first, %.lr.ph.preheader ]
    %6 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep = getelementptr i8, i8* %6, i32 %i.01
    %scevgep4 = getelementptr i8, i8* %uglygep, i32 65024
    %7 = load i8, i8* %scevgep4, align 1, !tbaa !43
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %13, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    %10 = bitcast %struct.vertex_buffer* %lsr.iv to float*
    %11 = load float, float* %10, align 4, !tbaa !44
    %12 = fdiv float %11, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %12) #4
    br label %13
  
  ; <label>:13                                      ; preds = %9, %.lr.ph
    %14 = add i32 %i.01, 1
    %scevgep2 = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %lsr.iv, i32 0, i32 0, i32 0, i32 3
    %15 = bitcast float* %scevgep2 to %struct.vertex_buffer*
    %16 = icmp ugt i32 %14, %last
    br i1 %16, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #1
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 54136}
  !38 = !{!2, !8, i64 55736}
  !39 = !{!2, !3, i64 55808}
  !40 = !{!2, !3, i64 55812}
  !41 = !{!42, !8, i64 115220}
  !42 = !{!"pixel_buffer", !4, i64 0, !4, i64 15360, !4, i64 30720, !4, i64 38400, !4, i64 42240, !4, i64 46080, !4, i64 49920, !4, i64 53760, !4, i64 69120, !4, i64 84480, !4, i64 99840, !4, i64 115200, !8, i64 115216, !8, i64 115220, !4, i64 115224, !4, i64 115228}
  !43 = !{!4, !4, i64 0}
  !44 = !{!11, !11, i64 0}
  !45 = !{!8, !8, i64 0}
  !46 = !{!2, !11, i64 55776}
  !47 = !{!20, !20, i64 0}
  !48 = !{!49, !3, i64 56452}
  !49 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !50 = !{!2, !3, i64 2020}
  !51 = !{!52, !4, i64 0}
  !52 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !53 = !{!2, !4, i64 55740}
  !54 = !{!2, !4, i64 55816}
  !55 = !{!2, !3, i64 55788}
  !56 = !{!2, !3, i64 2160}
  !57 = !{!2, !4, i64 54132}
  !58 = !{!2, !8, i64 55784}
  !59 = !{!49, !3, i64 52416}
  !60 = !{!42, !4, i64 115224}
  !61 = !{!42, !8, i64 115216}
  !62 = !{!52, !11, i64 24}
  !63 = !{!52, !11, i64 28}
  !64 = !{!52, !11, i64 32}
  !65 = !{!52, !11, i64 36}
  !66 = !{!2, !4, i64 43728}
  !67 = !{!2, !8, i64 55440}
  !68 = !{!2, !8, i64 55436}
  !69 = !{!2, !3, i64 55432}

...
---
name:            size1_ci_points
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: fgr32 }
  - { id: 35, class: fgr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: fgr32 }
  - { id: 49, class: fgr32 }
  - { id: 50, class: fgr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: gpr32 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: gpr32 }
  - { id: 56, class: gpr32 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: gpr32 }
  - { id: 61, class: gpr32 }
  - { id: 62, class: gpr32 }
  - { id: 63, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%16' }
  - { reg: '%a1', virtual-reg: '%17' }
  - { reg: '%a2', virtual-reg: '%18' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 16):
    successors: %bb.5.._crit_edge(50), %bb.1..lr.ph(50)
    liveins: %a0, %a1, %a2, %t9, %v0
  
    %60 = ADDu %v0, %t9
    %18 = COPY %a2
    %17 = COPY %a1
    %16 = COPY %a0
    %21 = SLTu %18, %17
    %22 = ORi %zero, 55812
    %23 = ADDu %16, killed %22
    %1 = LW killed %23, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3, !tbaa !40)
    %24 = LUi 1
    %25 = ORi %24, 49684
    %26 = ADDu %1, %25
    %2 = LW %26, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.5, !tbaa !41)
    BNE killed %21, %zero, %bb.5.._crit_edge, implicit-def dead %at
    B %bb.1..lr.ph, implicit-def dead %at
  
  bb.1..lr.ph (freq 8):
    successors: %bb.2(100)
  
    %19 = ORi %zero, 55808
    %20 = ADDu %16, %19
    %0 = LW %20, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !39)
    %3 = SLL %17, 2
    %27 = SLL %17, 3
    %28 = ADDu killed %27, %3
    %4 = ADDiu killed %28, 24192
    %30 = ORi %zero, 65024
    %40 = ORi %zero, 55776
    %41 = ORi %zero, 53760
    %42 = ORi %zero, 56452
    %43 = ADDu %0, %42
  
  bb.2 (%ir-block.11, freq 255):
    successors: %bb.4(37), %bb.3(62)
  
    %5 = PHI %4, %bb.1..lr.ph, %14, %bb.4
    %6 = PHI %3, %bb.1..lr.ph, %13, %bb.4
    %7 = PHI %17, %bb.1..lr.ph, %12, %bb.4
    %8 = PHI %2, %bb.1..lr.ph, %11, %bb.4
    %29 = ADDu %0, %7
    %31 = ADDu killed %29, %30
    %32 = LBu killed %31, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.scevgep, !tbaa !43)
    BEQ killed %32, %zero, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.15, freq 159):
    successors: %bb.4(100)
  
    %9 = ADDu %0, %5
    %33 = SLL %8, 2
    %34 = LWC1 %9, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.16, !tbaa !44)
    %35 = TRUNC_W_S killed %34
    SWXC1 killed %35, %1, %33, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.20)
    %37 = LWC1 %9, 4, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep10, !tbaa !44)
    %38 = ADDu %1, %33
    %10 = ADDiu %8, 1
    %39 = SLL %8, 1
    %44 = ADDu %1, killed %39
    %45 = ADDu %38, %41
    %46 = TRUNC_W_S killed %37
    SWC1 killed %46, %38, 15360, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.23)
    %47 = LWXC1 %16, %40, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr14, !tbaa !46)
    %48 = LWC1 %9, 8, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep7, !tbaa !44)
    %49 = FADD_S killed %48, killed %47
    %50 = TRUNC_W_S killed %49
    %51 = MFC1 killed %50
    SH killed %51, killed %44, 30720, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.29, !tbaa !47)
    %52 = LW %43, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr17, !tbaa !48)
    %53 = ADDu killed %52, %6
    %54 = LW killed %53, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.uglygep1, !tbaa !45)
    SW killed %54, killed %45, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.33, !tbaa !45)
  
  bb.4 (%ir-block.35, freq 255):
    successors: %bb.5.._crit_edge(3), %bb.2(96)
  
    %11 = PHI %8, %bb.2, %10, %bb.3
    %12 = ADDiu %7, 1
    %55 = SLTu %18, %12
    %14 = ADDiu %5, 12
    %13 = ADDiu %6, 4
    BEQ killed %55, %zero, %bb.2, implicit-def dead %at
    B %bb.5.._crit_edge, implicit-def dead %at
  
  bb.5.._crit_edge (freq 16):
    successors: %bb.6(50), %bb.7(50)
  
    %15 = PHI %2, %bb.0, %11, %bb.4
    SW %15, %26, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr20, !tbaa !41)
    %59 = SLTiu %15, 2560
    BNE killed %59, %zero, %bb.7, implicit-def dead %at
    B %bb.6, implicit-def dead %at
  
  bb.6 (%ir-block.39, freq 8):
    successors: %bb.7(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %61 = LW %60, target-flags(<unknown>) @gl_flush_pb, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gl_flush_pb)
    %a0 = COPY %16
    %gp = COPY %60
    %t9 = COPY %61
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.7 (%ir-block.40, freq 16):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.points.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, {}*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [12 x i8] c"glPointSize\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_PointSize(%struct.gl_context* %ctx, float %size) #0 {
    %1 = fcmp ugt float %size, 0.000000e+00
    br i1 %1, label %3, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* %ctx, i32 signext 1281, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:3                                       ; preds = %0
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %5 = load i32, i32* %4, align 4, !tbaa !1
    %6 = icmp eq i32 %5, 6656
    br i1 %6, label %8, label %7
  
  ; <label>:7                                       ; preds = %3
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:8                                       ; preds = %3
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    store float %size, float* %9, align 4, !tbaa !37
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %11 = load i32, i32* %10, align 4, !tbaa !38
    %12 = or i32 %11, 2
    store i32 %12, i32* %10, align 4, !tbaa !38
    br label %13
  
  ; <label>:13                                      ; preds = %8, %7, %2
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @size1_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 13
    %6 = load i32, i32* %5, align 4, !tbaa !41
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 2
    %9 = mul i32 %first, 12
    %10 = add i32 %9, 24192
    br label %11
  
  ; <label>:11                                      ; preds = %35, %.lr.ph
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %35 ], [ %10, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %35 ], [ %8, %.lr.ph ]
    %i.03 = phi i32 [ %first, %.lr.ph ], [ %36, %35 ]
    %pbcount.02 = phi i32 [ %6, %.lr.ph ], [ %pbcount.1, %35 ]
    %12 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep11 = getelementptr i8, i8* %12, i32 %lsr.iv3
    %uglygep2 = getelementptr i8, i8* %12, i32 %i.03
    %scevgep = getelementptr i8, i8* %uglygep2, i32 65024
    %13 = load i8, i8* %scevgep, align 1, !tbaa !43
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %35, label %15
  
  ; <label>:15                                      ; preds = %11
    %16 = bitcast i8* %uglygep11 to float*
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %18 = load float, float* %16, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %pbcount.02
    store i32 %19, i32* %20, align 4, !tbaa !45
    %uglygep8 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep89 = bitcast i8* %uglygep8 to float*
    %scevgep10 = getelementptr float, float* %uglygep89, i32 1
    %21 = load float, float* %scevgep10, align 4, !tbaa !44
    %22 = fptosi float %21 to i32
    %23 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %pbcount.02
    store i32 %22, i32* %23, align 4, !tbaa !45
    %uglygep5 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep56 = bitcast i8* %uglygep5 to float*
    %scevgep7 = getelementptr float, float* %uglygep56, i32 2
    %24 = load float, float* %scevgep7, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr, 55776
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to float*
    %25 = load float, float* %sunkaddr14, align 4, !tbaa !46
    %26 = fadd float %24, %25
    %27 = fptosi float %26 to i32
    %28 = trunc i32 %27 to i16
    %29 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %pbcount.02
    store i16 %28, i16* %29, align 2, !tbaa !47
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 56452
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32**
    %30 = load i32*, i32** %sunkaddr17, align 4, !tbaa !48
    %31 = bitcast i32* %30 to i8*
    %uglygep = getelementptr i8, i8* %31, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %32 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %33 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 7, i32 %pbcount.02
    store i32 %32, i32* %33, align 4, !tbaa !45
    %34 = add i32 %pbcount.02, 1
    br label %35
  
  ; <label>:35                                      ; preds = %15, %11
    %pbcount.1 = phi i32 [ %34, %15 ], [ %pbcount.02, %11 ]
    %36 = add i32 %i.03, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next4 = add i32 %lsr.iv3, 12
    %37 = icmp ugt i32 %36, %last
    br i1 %37, label %._crit_edge, label %11
  
  ._crit_edge:                                      ; preds = %35, %0
    %pbcount.0.lcssa = phi i32 [ %6, %0 ], [ %pbcount.1, %35 ]
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115220
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    store i32 %pbcount.0.lcssa, i32* %sunkaddr20, align 4, !tbaa !41
    %38 = icmp ugt i32 %pbcount.0.lcssa, 2559
    br i1 %38, label %39, label %40
  
  ; <label>:39                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %40
  
  ; <label>:40                                      ; preds = %39, %._crit_edge
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  declare void @gl_flush_pb(%struct.gl_context*) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_set_point_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !50
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !51
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !53
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %44
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !54
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @null_points, void (%struct.gl_context*, i32, i32)** %13, align 4, !tbaa !55
    br label %48
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    %16 = load void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32)** %15, align 4, !tbaa !56
    %17 = icmp eq void (%struct.gl_context*, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %16, void (%struct.gl_context*, i32, i32)** %19, align 4, !tbaa !55
    br label %48
  
  ; <label>:20                                      ; preds = %14
    %21 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 0
    %22 = load i8, i8* %21, align 4, !tbaa !57
    %23 = icmp eq i8 %22, 0
    %24 = icmp eq i8 %4, 0
    %or.cond = or i1 %24, %23
    br i1 %or.cond, label %27, label %25
  
  ; <label>:25                                      ; preds = %20
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @antialiased_rgba_points, void (%struct.gl_context*, i32, i32)** %26, align 4, !tbaa !55
    br label %48
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %32, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @textured_rgba_points, void (%struct.gl_context*, i32, i32)** %31, align 4, !tbaa !55
    br label %48
  
  ; <label>:32                                      ; preds = %27
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %34 = load float, float* %33, align 4, !tbaa !37
    %35 = fcmp oeq float %34, 1.000000e+00
    br i1 %35, label %36, label %40
  
  ; <label>:36                                      ; preds = %32
    %37 = icmp ne i8 %4, 0
    %38 = select i1 %37, void (%struct.gl_context*, i32, i32)* @size1_rgba_points, void (%struct.gl_context*, i32, i32)* @size1_ci_points
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %38, void (%struct.gl_context*, i32, i32)** %39, align 4, !tbaa !55
    br label %48
  
  ; <label>:40                                      ; preds = %32
    %41 = icmp ne i8 %4, 0
    %42 = select i1 %41, void (%struct.gl_context*, i32, i32)* @general_rgba_points, void (%struct.gl_context*, i32, i32)* @general_ci_points
    %43 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %42, void (%struct.gl_context*, i32, i32)** %43, align 4, !tbaa !55
    br label %48
  
  ; <label>:44                                      ; preds = %0
    %45 = icmp eq i32 %6, 7169
    br i1 %45, label %46, label %47
  
  ; <label>:46                                      ; preds = %44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55788
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @feedback_points, void (%struct.gl_context*, i32, i32)** %sunkaddr2, align 4, !tbaa !55
    br label %48
  
  ; <label>:47                                      ; preds = %44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55788
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @select_points, void (%struct.gl_context*, i32, i32)** %sunkaddr5, align 4, !tbaa !55
    br label %48
  
  ; <label>:48                                      ; preds = %47, %46, %40, %36, %30, %25, %18, %12
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_points(%struct.gl_context* nocapture %ctx, i32 signext %first, i32 signext %last) #3 {
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @antialiased_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fcmp olt float %8, 1.000000e+00
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = fcmp ogt float %8, 1.000000e+01
    br i1 %11, label %13, label %12
  
  ; <label>:12                                      ; preds = %10
    %phitmp16 = fmul float %8, 5.000000e-01
    br label %13
  
  ; <label>:13                                      ; preds = %12, %10, %0
    %14 = phi float [ 5.000000e-01, %0 ], [ %phitmp16, %12 ], [ 5.000000e+00, %10 ]
    %15 = fadd float %14, 0xBFE6A09020000000
    %16 = fadd float %14, 0x3FE6A09020000000
    %17 = fmul float %15, %15
    %18 = fmul float %16, %16
    %19 = fsub float %18, %17
    %20 = fdiv float 2.560000e+02, %19
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %.preheader17, label %.preheader19
  
  .preheader19:                                     ; preds = %13
    %23 = icmp ugt i32 %first, %last
    br i1 %23, label %.loopexit, label %.lr.ph36
  
  .lr.ph36:                                         ; preds = %.preheader19
    br label %25
  
  .preheader17:                                     ; preds = %13
    %24 = icmp ugt i32 %first, %last
    br i1 %24, label %.loopexit, label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.preheader17
    br label %134
  
  ; <label>:25                                      ; preds = %131, %.lr.ph36
    %i.033 = phi i32 [ %first, %.lr.ph36 ], [ %132, %131 ]
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.033
    %27 = load i8, i8* %26, align 1, !tbaa !43
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %131, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 0
    %31 = load float, float* %30, align 4, !tbaa !44
    %32 = fsub float %31, %14
    %33 = fptosi float %32 to i32
    %34 = fadd float %14, %31
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 1
    %37 = load float, float* %36, align 4, !tbaa !44
    %38 = fsub float %37, %14
    %39 = fptosi float %38 to i32
    %40 = fadd float %14, %37
    %41 = fptosi float %40 to i32
    %sunkaddr = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr1 = add i32 %sunkaddr, 52416
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to [4 x i32]**
    %42 = load [4 x i32]*, [4 x i32]** %sunkaddr2, align 4, !tbaa !59
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 0
    %44 = load float, float* %43, align 4, !tbaa !44
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 3
    %46 = load float, float* %45, align 4, !tbaa !44
    %47 = fdiv float %44, %46
    %48 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 1
    %49 = load float, float* %48, align 4, !tbaa !44
    %50 = fdiv float %49, %46
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 2
    %52 = load float, float* %51, align 4, !tbaa !44
    %53 = fdiv float %52, %46
    %54 = icmp sgt i32 %39, %41
    br i1 %54, label %._crit_edge32, label %.preheader18.lr.ph
  
  .preheader18.lr.ph:                               ; preds = %29
    %55 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !45
    %57 = ashr i32 %56, %6
    %58 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !45
    %60 = ashr i32 %59, %6
    %61 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 0
    %62 = load i32, i32* %61, align 4, !tbaa !45
    %63 = ashr i32 %62, %6
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 2
    %65 = load float, float* %64, align 4, !tbaa !44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55776
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %66 = load float, float* %sunkaddr5, align 4, !tbaa !46
    %67 = fadd float %65, %66
    %68 = fptosi float %67 to i32
    br label %.preheader18
  
  .preheader18:                                     ; preds = %._crit_edge30, %.preheader18.lr.ph
    %y.031 = phi i32 [ %39, %.preheader18.lr.ph ], [ %126, %._crit_edge30 ]
    %69 = icmp sgt i32 %33, %35
    br i1 %69, label %._crit_edge30, label %.lr.ph29
  
  .lr.ph29:                                         ; preds = %.preheader18
    %70 = sitofp i32 %y.031 to float
    br label %71
  
  ; <label>:71                                      ; preds = %122, %.lr.ph29
    %x.028 = phi i32 [ %33, %.lr.ph29 ], [ %123, %122 ]
    %72 = sitofp i32 %x.028 to float
    %73 = load float, float* %30, align 4, !tbaa !44
    %74 = fsub float %72, %73
    %75 = load float, float* %36, align 4, !tbaa !44
    %76 = fsub float %70, %75
    %77 = fmul float %74, %74
    %78 = fmul float %76, %76
    %79 = fadd float %77, %78
    %80 = fcmp olt float %79, %18
    br i1 %80, label %81, label %122
  
  ; <label>:81                                      ; preds = %71
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %82 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %83 = getelementptr inbounds [4 x i32], [4 x i32]* %82, i32 %i.033, i32 3
    %84 = load i32, i32* %83, align 4, !tbaa !45
    %85 = ashr i32 %84, %6
    %86 = fcmp ult float %79, %17
    br i1 %86, label %94, label %87
  
  ; <label>:87                                      ; preds = %81
    %88 = fsub float %79, %17
    %89 = fmul float %20, %88
    %90 = fsub float 2.560000e+02, %89
    %91 = fptosi float %90 to i32
    %92 = mul nsw i32 %85, %91
    %93 = ashr i32 %92, 8
    br label %94
  
  ; <label>:94                                      ; preds = %87, %81
    %alpha.0 = phi i32 [ %93, %87 ], [ %85, %81 ]
    %95 = trunc i32 %57 to i8
    %96 = trunc i32 %60 to i8
    %97 = trunc i32 %63 to i8
    %98 = trunc i32 %68 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %99 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %100 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %99
    store i32 %x.028, i32* %100, align 4, !tbaa !45
    %101 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %102 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %101
    store i32 %y.031, i32* %102, align 4, !tbaa !45
    %103 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %104 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %103
    store i16 %98, i16* %104, align 2, !tbaa !47
    %105 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %106 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %105
    store i8 %97, i8* %106, align 1, !tbaa !43
    %107 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %108 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %107
    store i8 %96, i8* %108, align 1, !tbaa !43
    %109 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %109
    store i8 %95, i8* %110, align 1, !tbaa !43
    %111 = trunc i32 %alpha.0 to i8
    %112 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %113 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %112
    store i8 %111, i8* %113, align 1, !tbaa !43
    %114 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %115 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %114
    store float %47, float* %115, align 4, !tbaa !44
    %116 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %117 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %116
    store float %50, float* %117, align 4, !tbaa !44
    %118 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %119 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %118
    store float %53, float* %119, align 4, !tbaa !44
    %120 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %121 = add i32 %120, 1
    store i32 %121, i32* %sunkaddr11, align 4, !tbaa !41
    br label %122
  
  ; <label>:122                                     ; preds = %94, %71
    %123 = add nsw i32 %x.028, 1
    %124 = add i32 %123, -1
    %125 = icmp slt i32 %124, %35
    br i1 %125, label %71, label %._crit_edge30
  
  ._crit_edge30:                                    ; preds = %122, %.preheader18
    %126 = add nsw i32 %y.031, 1
    %127 = icmp slt i32 %y.031, %41
    br i1 %127, label %.preheader18, label %._crit_edge32
  
  ._crit_edge32:                                    ; preds = %._crit_edge30, %29
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %128 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %129 = icmp ugt i32 %128, 2559
    br i1 %129, label %130, label %131
  
  ; <label>:130                                     ; preds = %._crit_edge32
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %131
  
  ; <label>:131                                     ; preds = %130, %._crit_edge32, %25
    %132 = add i32 %i.033, 1
    %133 = icmp ugt i32 %132, %last
    br i1 %133, label %.loopexit, label %25
  
  ; <label>:134                                     ; preds = %223, %.lr.ph27
    %i.124 = phi i32 [ %first, %.lr.ph27 ], [ %224, %223 ]
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.124
    %136 = load i8, i8* %135, align 1, !tbaa !43
    %137 = icmp eq i8 %136, 0
    br i1 %137, label %223, label %138
  
  ; <label>:138                                     ; preds = %134
    %139 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 0
    %140 = load float, float* %139, align 4, !tbaa !44
    %141 = fsub float %140, %14
    %142 = fptosi float %141 to i32
    %143 = fadd float %14, %140
    %144 = fptosi float %143 to i32
    %145 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 1
    %146 = load float, float* %145, align 4, !tbaa !44
    %147 = fsub float %146, %14
    %148 = fptosi float %147 to i32
    %149 = fadd float %14, %146
    %150 = fptosi float %149 to i32
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 52416
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to [4 x i32]**
    %151 = load [4 x i32]*, [4 x i32]** %sunkaddr17, align 4, !tbaa !59
    %152 = icmp sgt i32 %148, %150
    br i1 %152, label %._crit_edge23, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %138
    %153 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 2
    %154 = load i32, i32* %153, align 4, !tbaa !45
    %155 = ashr i32 %154, %6
    %156 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 1
    %157 = load i32, i32* %156, align 4, !tbaa !45
    %158 = ashr i32 %157, %6
    %159 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 0
    %160 = load i32, i32* %159, align 4, !tbaa !45
    %161 = ashr i32 %160, %6
    %162 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 2
    %163 = load float, float* %162, align 4, !tbaa !44
    %sunkaddr18 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr19 = add i32 %sunkaddr18, 55776
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    %164 = load float, float* %sunkaddr20, align 4, !tbaa !46
    %165 = fadd float %163, %164
    %166 = fptosi float %165 to i32
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %y6.022 = phi i32 [ %148, %.preheader.lr.ph ], [ %218, %._crit_edge ]
    %167 = icmp sgt i32 %142, %144
    br i1 %167, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader
    %168 = sitofp i32 %y6.022 to float
    br label %169
  
  ; <label>:169                                     ; preds = %214, %.lr.ph
    %x5.021 = phi i32 [ %142, %.lr.ph ], [ %215, %214 ]
    %170 = sitofp i32 %x5.021 to float
    %171 = load float, float* %139, align 4, !tbaa !44
    %172 = fsub float %170, %171
    %173 = load float, float* %145, align 4, !tbaa !44
    %174 = fsub float %168, %173
    %175 = fmul float %172, %172
    %176 = fmul float %174, %174
    %177 = fadd float %175, %176
    %178 = fcmp olt float %177, %18
    br i1 %178, label %179, label %214
  
  ; <label>:179                                     ; preds = %169
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %180 = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %181 = getelementptr inbounds [4 x i32], [4 x i32]* %180, i32 %i.124, i32 3
    %182 = load i32, i32* %181, align 4, !tbaa !45
    %183 = ashr i32 %182, %6
    %184 = fcmp ult float %177, %17
    br i1 %184, label %192, label %185
  
  ; <label>:185                                     ; preds = %179
    %186 = fsub float %177, %17
    %187 = fmul float %20, %186
    %188 = fsub float 2.560000e+02, %187
    %189 = fptosi float %188 to i32
    %190 = mul nsw i32 %183, %189
    %191 = ashr i32 %190, 8
    br label %192
  
  ; <label>:192                                     ; preds = %185, %179
    %alpha11.0 = phi i32 [ %191, %185 ], [ %183, %179 ]
    %193 = trunc i32 %155 to i8
    %194 = trunc i32 %158 to i8
    %195 = trunc i32 %161 to i8
    %196 = trunc i32 %166 to i16
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %197 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %198 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %197
    store i32 %x5.021, i32* %198, align 4, !tbaa !45
    %199 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %200 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %199
    store i32 %y6.022, i32* %200, align 4, !tbaa !45
    %201 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %202 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %201
    store i16 %196, i16* %202, align 2, !tbaa !47
    %203 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %204 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %203
    store i8 %195, i8* %204, align 1, !tbaa !43
    %205 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %206 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %205
    store i8 %194, i8* %206, align 1, !tbaa !43
    %207 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %208 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %207
    store i8 %193, i8* %208, align 1, !tbaa !43
    %209 = trunc i32 %alpha11.0 to i8
    %210 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %211 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %210
    store i8 %209, i8* %211, align 1, !tbaa !43
    %212 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %213 = add i32 %212, 1
    store i32 %213, i32* %sunkaddr26, align 4, !tbaa !41
    br label %214
  
  ; <label>:214                                     ; preds = %192, %169
    %215 = add nsw i32 %x5.021, 1
    %216 = add i32 %215, -1
    %217 = icmp slt i32 %216, %144
    br i1 %217, label %169, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %214, %.preheader
    %218 = add nsw i32 %y6.022, 1
    %219 = icmp slt i32 %y6.022, %150
    br i1 %219, label %.preheader, label %._crit_edge23
  
  ._crit_edge23:                                    ; preds = %._crit_edge, %138
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %220 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %221 = icmp ugt i32 %220, 2559
    br i1 %221, label %222, label %223
  
  ; <label>:222                                     ; preds = %._crit_edge23
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %223
  
  ; <label>:223                                     ; preds = %222, %._crit_edge23, %134
    %224 = add i32 %i.124, 1
    %225 = icmp ugt i32 %224, %last
    br i1 %225, label %.loopexit, label %134
  
  .loopexit:                                        ; preds = %131, %223, %.preheader17, %.preheader19
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #1
  
  ; Function Attrs: nounwind
  define internal void @textured_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %0
    br label %8
  
  ; <label>:8                                       ; preds = %118, %.lr.ph7
    %i.04 = phi i32 [ %first, %.lr.ph7 ], [ %119, %118 ]
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.04
    %10 = load i8, i8* %9, align 1, !tbaa !43
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %118, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 0
    %14 = load float, float* %13, align 4, !tbaa !44
    %15 = fptosi float %14 to i32
    %16 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 1
    %17 = load float, float* %16, align 4, !tbaa !44
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 2
    %20 = load float, float* %19, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %21 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %22 = fadd float %20, %21
    %23 = fptosi float %22 to i32
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54136
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %24 = load float, float* %sunkaddr5, align 4, !tbaa !37
    %25 = fpext float %24 to double
    %26 = fcmp olt float %24, 1.000000e+00
    br i1 %26, label %30, label %27
  
  ; <label>:27                                      ; preds = %12
    %28 = fcmp ogt float %24, 1.000000e+01
    br i1 %28, label %30, label %29
  
  ; <label>:29                                      ; preds = %27
    br label %30
  
  ; <label>:30                                      ; preds = %29, %27, %12
    %31 = phi double [ 1.000000e+00, %12 ], [ %25, %29 ], [ 1.000000e+01, %27 ]
    %32 = fadd double %31, 5.000000e-01
    %33 = fptosi double %32 to i32
    %34 = icmp slt i32 %33, 1
    %. = select i1 %34, i32 1, i32 %33
    %35 = and i32 %., 1
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %43, label %37
  
  ; <label>:37                                      ; preds = %30
    %38 = sdiv i32 %., 2
    %39 = sub nsw i32 %15, %38
    %40 = add nsw i32 %38, %15
    %41 = sub nsw i32 %18, %38
    %42 = add nsw i32 %38, %18
    br label %56
  
  ; <label>:43                                      ; preds = %30
    %44 = sitofp i32 %15 to float
    %45 = fadd float %44, 5.000000e-01
    %46 = fptosi float %45 to i32
    %47 = sdiv i32 %., 2
    %48 = sub nsw i32 %46, %47
    %49 = add i32 %., -1
    %50 = add i32 %49, %48
    %51 = sitofp i32 %18 to float
    %52 = fadd float %51, 5.000000e-01
    %53 = fptosi float %52 to i32
    %54 = sub nsw i32 %53, %47
    %55 = add i32 %49, %54
    br label %56
  
  ; <label>:56                                      ; preds = %43, %37
    %y1.0 = phi i32 [ %42, %37 ], [ %55, %43 ]
    %y0.0 = phi i32 [ %41, %37 ], [ %54, %43 ]
    %x1.0 = phi i32 [ %40, %37 ], [ %50, %43 ]
    %x0.0 = phi i32 [ %39, %37 ], [ %48, %43 ]
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %57 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %58 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 0
    %59 = load float, float* %58, align 4, !tbaa !44
    %60 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 3
    %61 = load float, float* %60, align 4, !tbaa !44
    %62 = fdiv float %59, %61
    %63 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 1
    %64 = load float, float* %63, align 4, !tbaa !44
    %65 = fdiv float %64, %61
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 2
    %67 = load float, float* %66, align 4, !tbaa !44
    %68 = fdiv float %67, %61
    %69 = icmp sgt i32 %y0.0, %y1.0
    br i1 %69, label %._crit_edge3, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %56
    %70 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 3
    %71 = load i32, i32* %70, align 4, !tbaa !45
    %72 = ashr i32 %71, %6
    %73 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 2
    %74 = load i32, i32* %73, align 4, !tbaa !45
    %75 = ashr i32 %74, %6
    %76 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 1
    %77 = load i32, i32* %76, align 4, !tbaa !45
    %78 = ashr i32 %77, %6
    %79 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 0
    %80 = load i32, i32* %79, align 4, !tbaa !45
    %81 = ashr i32 %80, %6
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.02 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %113, %._crit_edge ]
    %82 = icmp sgt i32 %x0.0, %x1.0
    br i1 %82, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.01 = phi i32 [ %110, %.lr.ph ], [ %x0.0, %.preheader ]
    %83 = trunc i32 %72 to i8
    %84 = trunc i32 %75 to i8
    %85 = trunc i32 %78 to i8
    %86 = trunc i32 %81 to i8
    %87 = trunc i32 %23 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %88 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %89 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %88
    store i32 %ix.01, i32* %89, align 4, !tbaa !45
    %90 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %91 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %90
    store i32 %iy.02, i32* %91, align 4, !tbaa !45
    %92 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %93 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %92
    store i16 %87, i16* %93, align 2, !tbaa !47
    %94 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %95 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %94
    store i8 %86, i8* %95, align 1, !tbaa !43
    %96 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %97 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %96
    store i8 %85, i8* %97, align 1, !tbaa !43
    %98 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %98
    store i8 %84, i8* %99, align 1, !tbaa !43
    %100 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %100
    store i8 %83, i8* %101, align 1, !tbaa !43
    %102 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %102
    store float %62, float* %103, align 4, !tbaa !44
    %104 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %105 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %104
    store float %65, float* %105, align 4, !tbaa !44
    %106 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %107 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %106
    store float %68, float* %107, align 4, !tbaa !44
    %108 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %109 = add i32 %108, 1
    store i32 %109, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = add nsw i32 %ix.01, 1
    %111 = add i32 %110, -1
    %112 = icmp slt i32 %111, %x1.0
    br i1 %112, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %113 = add nsw i32 %iy.02, 1
    %114 = icmp slt i32 %iy.02, %y1.0
    br i1 %114, label %.preheader, label %._crit_edge3
  
  ._crit_edge3:                                     ; preds = %._crit_edge, %56
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %115 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %116 = icmp ugt i32 %115, 2559
    br i1 %116, label %117, label %118
  
  ; <label>:117                                     ; preds = %._crit_edge3
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %118
  
  ; <label>:118                                     ; preds = %117, %._crit_edge3, %8
    %119 = add i32 %i.04, 1
    %120 = icmp ugt i32 %119, %last
    br i1 %120, label %._crit_edge8, label %8
  
  ._crit_edge8:                                     ; preds = %118, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @size1_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %.._crit_edge_crit_edge, label %.lr.ph
  
  .._crit_edge_crit_edge:                           ; preds = %0
    br label %._crit_edge
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 4
    %9 = add i32 %8, 8
    %10 = mul i32 %first, 12
    %11 = add i32 %10, 24192
    br label %12
  
  ; <label>:12                                      ; preds = %57, %.lr.ph
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %57 ], [ %11, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %57 ], [ %9, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %58, %57 ]
    %13 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep20 = getelementptr i8, i8* %13, i32 %i.01
    %scevgep21 = getelementptr i8, i8* %uglygep20, i32 65024
    %14 = load i8, i8* %scevgep21, align 1, !tbaa !43
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %57, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep18 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1819 = bitcast i8* %uglygep18 to float*
    %18 = load float, float* %uglygep1819, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %uglygep15 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 1
    %20 = load float, float* %scevgep17, align 4, !tbaa !44
    %21 = fptosi float %20 to i32
    %uglygep12 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1213 = bitcast i8* %uglygep12 to float*
    %scevgep14 = getelementptr float, float* %uglygep1213, i32 2
    %22 = load float, float* %scevgep14, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr, 55776
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %23 = load float, float* %sunkaddr23, align 4, !tbaa !46
    %24 = fadd float %22, %23
    %25 = fptosi float %24 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %26 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !59
    %27 = bitcast [4 x i32]* %26 to i8*
    %uglygep7 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    %scevgep9 = getelementptr i32, i32* %uglygep78, i32 -2
    %28 = load i32, i32* %scevgep9, align 4, !tbaa !45
    %29 = ashr i32 %28, %6
    %uglygep4 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i32*
    %scevgep6 = getelementptr i32, i32* %uglygep45, i32 -1
    %30 = load i32, i32* %scevgep6, align 4, !tbaa !45
    %31 = ashr i32 %30, %6
    %uglygep2 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to i32*
    %32 = load i32, i32* %uglygep23, align 4, !tbaa !45
    %33 = ashr i32 %32, %6
    %uglygep = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %scevgep = getelementptr i32, i32* %uglygep1, i32 1
    %34 = load i32, i32* %scevgep, align 4, !tbaa !45
    %35 = ashr i32 %34, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %36 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %37 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %36
    store i32 %19, i32* %37, align 4, !tbaa !45
    %38 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %39 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %38
    store i32 %21, i32* %39, align 4, !tbaa !45
    %40 = trunc i32 %25 to i16
    %41 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %42 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %41
    store i16 %40, i16* %42, align 2, !tbaa !47
    %43 = trunc i32 %29 to i8
    %44 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %45 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %44
    store i8 %43, i8* %45, align 1, !tbaa !43
    %46 = trunc i32 %31 to i8
    %47 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %48 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %47
    store i8 %46, i8* %48, align 1, !tbaa !43
    %49 = trunc i32 %33 to i8
    %50 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %51 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %50
    store i8 %49, i8* %51, align 1, !tbaa !43
    %52 = trunc i32 %35 to i8
    %53 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %54 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %53
    store i8 %52, i8* %54, align 1, !tbaa !43
    %55 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %56 = add i32 %55, 1
    store i32 %56, i32* %sunkaddr29, align 4, !tbaa !41
    br label %57
  
  ; <label>:57                                      ; preds = %16, %12
    %58 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 16
    %lsr.iv.next11 = add i32 %lsr.iv10, 12
    %59 = icmp ugt i32 %58, %last
    br i1 %59, label %._crit_edge, label %12
  
  ._crit_edge:                                      ; preds = %57, %.._crit_edge_crit_edge
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115220
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    %60 = load i32, i32* %sunkaddr32, align 4, !tbaa !41
    %61 = icmp ugt i32 %60, 2559
    br i1 %61, label %62, label %63
  
  ; <label>:62                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %63
  
  ; <label>:63                                      ; preds = %62, %._crit_edge
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fpext float %8 to double
    %10 = fcmp olt float %8, 1.000000e+00
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    %12 = fcmp ogt float %8, 1.000000e+01
    br i1 %12, label %14, label %13
  
  ; <label>:13                                      ; preds = %11
    %phitmp = fadd double %9, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %14
  
  ; <label>:14                                      ; preds = %13, %11, %0
    %15 = phi i32 [ 1, %0 ], [ %phitmp1, %13 ], [ 10, %11 ]
    %16 = icmp ugt i32 %first, %last
    br i1 %16, label %._crit_edge9, label %.lr.ph8
  
  .lr.ph8:                                          ; preds = %14
    %17 = and i32 %15, 1
    %18 = sdiv i32 %15, 2
    %19 = add i32 %15, -1
    br label %20
  
  ; <label>:20                                      ; preds = %114, %.lr.ph8
    %i.05 = phi i32 [ %first, %.lr.ph8 ], [ %115, %114 ]
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %22 = load i8, i8* %21, align 1, !tbaa !43
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %114, label %24
  
  ; <label>:24                                      ; preds = %20
    %25 = icmp eq i32 %17, 0
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %27 = load float, float* %26, align 4, !tbaa !44
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %30 = load float, float* %29, align 4, !tbaa !44
    %31 = fptosi float %30 to i32
    %32 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %33 = load float, float* %32, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %34 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %35 = fadd float %33, %34
    %36 = fptosi float %35 to i32
    br i1 %25, label %42, label %37
  
  ; <label>:37                                      ; preds = %24
    %38 = sub nsw i32 %28, %18
    %39 = add nsw i32 %28, %18
    %40 = sub nsw i32 %31, %18
    %41 = add nsw i32 %31, %18
    br label %53
  
  ; <label>:42                                      ; preds = %24
    %43 = sitofp i32 %28 to float
    %44 = fadd float %43, 5.000000e-01
    %45 = fptosi float %44 to i32
    %46 = sub nsw i32 %45, %18
    %47 = add i32 %19, %46
    %48 = sitofp i32 %31 to float
    %49 = fadd float %48, 5.000000e-01
    %50 = fptosi float %49 to i32
    %51 = sub nsw i32 %50, %18
    %52 = add i32 %19, %51
    br label %53
  
  ; <label>:53                                      ; preds = %42, %37
    %x0.0 = phi i32 [ %38, %37 ], [ %46, %42 ]
    %x1.0 = phi i32 [ %39, %37 ], [ %47, %42 ]
    %y0.0 = phi i32 [ %40, %37 ], [ %51, %42 ]
    %y1.0 = phi i32 [ %41, %37 ], [ %52, %42 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115200
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %54 = load i32, i32* %sunkaddr5, align 4, !tbaa !45
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %55 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 0
    %57 = load i32, i32* %56, align 4, !tbaa !45
    %58 = ashr i32 %57, %6
    %59 = icmp eq i32 %54, %58
    br i1 %59, label %60, label %81
  
  ; <label>:60                                      ; preds = %53
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115204
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %61 = load i32, i32* %sunkaddr11, align 4, !tbaa !45
    %62 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !45
    %64 = ashr i32 %63, %6
    %65 = icmp eq i32 %61, %64
    br i1 %65, label %66, label %81
  
  ; <label>:66                                      ; preds = %60
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115208
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %67 = load i32, i32* %sunkaddr14, align 4, !tbaa !45
    %68 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 2
    %69 = load i32, i32* %68, align 4, !tbaa !45
    %70 = ashr i32 %69, %6
    %71 = icmp eq i32 %67, %70
    br i1 %71, label %72, label %81
  
  ; <label>:72                                      ; preds = %66
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115212
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %73 = load i32, i32* %sunkaddr17, align 4, !tbaa !45
    %74 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 3
    %75 = load i32, i32* %74, align 4, !tbaa !45
    %76 = ashr i32 %75, %6
    %77 = icmp eq i32 %73, %76
    br i1 %77, label %78, label %81
  
  ; <label>:78                                      ; preds = %72
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    %79 = load i8, i8* %sunkaddr20, align 4, !tbaa !60
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %78, %72, %66, %60, %53
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %.pre = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %.pre, i32 %i.05, i32 0
    %.pre10 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %82
  
  ; <label>:82                                      ; preds = %81, %78
    %83 = phi i32 [ %57, %78 ], [ %.pre10, %81 ]
    %84 = phi [4 x i32]* [ %55, %78 ], [ %.pre, %81 ]
    %85 = ashr i32 %83, %6
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115200
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    store i32 %85, i32* %sunkaddr26, align 4, !tbaa !45
    %86 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 1
    %87 = load i32, i32* %86, align 4, !tbaa !45
    %88 = ashr i32 %87, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115204
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    store i32 %88, i32* %sunkaddr29, align 4, !tbaa !45
    %89 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 2
    %90 = load i32, i32* %89, align 4, !tbaa !45
    %91 = ashr i32 %90, %6
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115208
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    store i32 %91, i32* %sunkaddr32, align 4, !tbaa !45
    %92 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 3
    %93 = load i32, i32* %92, align 4, !tbaa !45
    %94 = ashr i32 %93, %6
    %sunkaddr33 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr34 = add i32 %sunkaddr33, 115212
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %94, i32* %sunkaddr35, align 4, !tbaa !45
    %sunkaddr36 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 115224
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i8*
    store i8 1, i8* %sunkaddr38, align 4, !tbaa !60
    %95 = icmp sgt i32 %y0.0, %y1.0
    br i1 %95, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %82
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %109, %._crit_edge ]
    %96 = icmp sgt i32 %x0.0, %x1.0
    br i1 %96, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %106, %.lr.ph ], [ %x0.0, %.preheader ]
    %97 = trunc i32 %36 to i16
    %sunkaddr39 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr40 = add i32 %sunkaddr39, 115220
    %sunkaddr41 = inttoptr i32 %sunkaddr40 to i32*
    %98 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %98
    store i32 %ix.02, i32* %99, align 4, !tbaa !45
    %100 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %100
    store i32 %iy.03, i32* %101, align 4, !tbaa !45
    %102 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %102
    store i16 %97, i16* %103, align 2, !tbaa !47
    %104 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %105 = add i32 %104, 1
    store i32 %105, i32* %sunkaddr41, align 4, !tbaa !41
    %106 = add nsw i32 %ix.02, 1
    %107 = add i32 %106, -1
    %108 = icmp slt i32 %107, %x1.0
    br i1 %108, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %109 = add nsw i32 %iy.03, 1
    %110 = icmp slt i32 %iy.03, %y1.0
    br i1 %110, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %82
    %sunkaddr42 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr43 = add i32 %sunkaddr42, 115220
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %111 = load i32, i32* %sunkaddr44, align 4, !tbaa !41
    %112 = icmp ugt i32 %111, 2559
    br i1 %112, label %113, label %114
  
  ; <label>:113                                     ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %114
  
  ; <label>:114                                     ; preds = %113, %._crit_edge4, %20
    %115 = add i32 %i.05, 1
    %116 = icmp ugt i32 %115, %last
    br i1 %116, label %._crit_edge9, label %20
  
  ._crit_edge9:                                     ; preds = %114, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %6 = load float, float* %5, align 4, !tbaa !37
    %7 = fpext float %6 to double
    %8 = fcmp olt float %6, 1.000000e+00
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %0
    %10 = fcmp ogt float %6, 1.000000e+01
    br i1 %10, label %12, label %11
  
  ; <label>:11                                      ; preds = %9
    %phitmp = fadd double %7, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %12
  
  ; <label>:12                                      ; preds = %11, %9, %0
    %13 = phi i32 [ 1, %0 ], [ %phitmp1, %11 ], [ 10, %9 ]
    %14 = icmp ugt i32 %first, %last
    br i1 %14, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %12
    %15 = and i32 %13, 1
    %16 = sdiv i32 %13, 2
    %17 = add i32 %13, -1
    br label %18
  
  ; <label>:18                                      ; preds = %82, %.lr.ph7
    %i.05 = phi i32 [ %first, %.lr.ph7 ], [ %83, %82 ]
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %20 = load i8, i8* %19, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %82, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = icmp eq i32 %15, 0
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %25 = load float, float* %24, align 4, !tbaa !44
    %26 = fptosi float %25 to i32
    %27 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %28 = load float, float* %27, align 4, !tbaa !44
    %29 = fptosi float %28 to i32
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %31 = load float, float* %30, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %32 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %33 = fadd float %31, %32
    %34 = fptosi float %33 to i32
    br i1 %23, label %40, label %35
  
  ; <label>:35                                      ; preds = %22
    %36 = sub nsw i32 %26, %16
    %37 = add nsw i32 %26, %16
    %38 = sub nsw i32 %29, %16
    %39 = add nsw i32 %29, %16
    br label %51
  
  ; <label>:40                                      ; preds = %22
    %41 = sitofp i32 %26 to float
    %42 = fadd float %41, 5.000000e-01
    %43 = fptosi float %42 to i32
    %44 = sub nsw i32 %43, %16
    %45 = add i32 %17, %44
    %46 = sitofp i32 %29 to float
    %47 = fadd float %46, 5.000000e-01
    %48 = fptosi float %47 to i32
    %49 = sub nsw i32 %48, %16
    %50 = add i32 %17, %49
    br label %51
  
  ; <label>:51                                      ; preds = %40, %35
    %x0.0 = phi i32 [ %36, %35 ], [ %44, %40 ]
    %x1.0 = phi i32 [ %37, %35 ], [ %45, %40 ]
    %y0.0 = phi i32 [ %38, %35 ], [ %49, %40 ]
    %y1.0 = phi i32 [ %39, %35 ], [ %50, %40 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115216
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %52 = load i32, i32* %sunkaddr5, align 4, !tbaa !61
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 56452
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32**
    %53 = load i32*, i32** %sunkaddr8, align 4, !tbaa !48
    %54 = getelementptr inbounds i32, i32* %53, i32 %i.05
    %55 = load i32, i32* %54, align 4, !tbaa !45
    %56 = icmp eq i32 %52, %55
    br i1 %56, label %57, label %60
  
  ; <label>:57                                      ; preds = %51
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115224
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i8*
    %58 = load i8, i8* %sunkaddr11, align 4, !tbaa !60
    %59 = icmp eq i8 %58, 0
    br i1 %59, label %60, label %61
  
  ; <label>:60                                      ; preds = %57, %51
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr12 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 56452
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32**
    %.pre = load i32*, i32** %sunkaddr14, align 4, !tbaa !48
    %.phi.trans.insert = getelementptr inbounds i32, i32* %.pre, i32 %i.05
    %.pre9 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %61
  
  ; <label>:61                                      ; preds = %60, %57
    %62 = phi i32 [ %52, %57 ], [ %.pre9, %60 ]
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115216
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    store i32 %62, i32* %sunkaddr17, align 4, !tbaa !61
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    store i8 1, i8* %sunkaddr20, align 4, !tbaa !60
    %63 = icmp sgt i32 %y0.0, %y1.0
    br i1 %63, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %61
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %77, %._crit_edge ]
    %64 = icmp sgt i32 %x0.0, %x1.0
    br i1 %64, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %74, %.lr.ph ], [ %x0.0, %.preheader ]
    %65 = trunc i32 %34 to i16
    %sunkaddr21 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 115220
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to i32*
    %66 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %67 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %66
    store i32 %ix.02, i32* %67, align 4, !tbaa !45
    %68 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %69 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %68
    store i32 %iy.03, i32* %69, align 4, !tbaa !45
    %70 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %71 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %70
    store i16 %65, i16* %71, align 2, !tbaa !47
    %72 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %73 = add i32 %72, 1
    store i32 %73, i32* %sunkaddr23, align 4, !tbaa !41
    %74 = add nsw i32 %ix.02, 1
    %75 = add i32 %74, -1
    %76 = icmp slt i32 %75, %x1.0
    br i1 %76, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %77 = add nsw i32 %iy.03, 1
    %78 = icmp slt i32 %iy.03, %y1.0
    br i1 %78, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %61
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %79 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %80 = icmp ugt i32 %79, 2559
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %82
  
  ; <label>:82                                      ; preds = %81, %._crit_edge4, %18
    %83 = add i32 %i.05, 1
    %84 = icmp ugt i32 %83, %last
    br i1 %84, label %._crit_edge8, label %18
  
  ._crit_edge8:                                     ; preds = %82, %12
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %color = alloca [4 x float], align 4
    %texcoord = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !50
    %5 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 7
    %6 = load float, float* %5, align 4, !tbaa !62
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 8
    %8 = load float, float* %7, align 4, !tbaa !63
    %9 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 9
    %10 = load float, float* %9, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 10
    %12 = load float, float* %11, align 4, !tbaa !65
    %13 = icmp ugt i32 %first, %last
    br i1 %13, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %14 = shl i32 %first, 2
    %15 = shl i32 %first, 4
    %16 = mul i32 %first, 12
    %17 = add i32 %16, 24200
    br label %18
  
  ; <label>:18                                      ; preds = %93, %.lr.ph
    %lsr.iv41 = phi i32 [ %lsr.iv.next42, %93 ], [ %17, %.lr.ph ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %93 ], [ %15, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %93 ], [ %14, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %94, %93 ]
    %19 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep52 = getelementptr i8, i8* %19, i32 %i.01
    %scevgep53 = getelementptr i8, i8* %uglygep52, i32 65024
    %20 = load i8, i8* %scevgep53, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %93, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = bitcast [4 x float]* %texcoord to i8*
    %24 = bitcast [4 x float]* %color to i8*
    %25 = bitcast %struct.vertex_buffer* %2 to i8*
    call void @llvm.lifetime.start(i64 16, i8* %24) #4
    call void @llvm.lifetime.start(i64 16, i8* %23) #4
    %uglygep49 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4950 = bitcast i8* %uglygep49 to float*
    %scevgep51 = getelementptr float, float* %uglygep4950, i32 -2
    %26 = load float, float* %scevgep51, align 4, !tbaa !44
    %uglygep46 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4647 = bitcast i8* %uglygep46 to float*
    %scevgep48 = getelementptr float, float* %uglygep4647, i32 -1
    %27 = load float, float* %scevgep48, align 4, !tbaa !44
    %uglygep43 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4344 = bitcast i8* %uglygep43 to float*
    %28 = load float, float* %uglygep4344, align 4, !tbaa !44
    %29 = fdiv float %28, 6.553500e+04
    %uglygep38 = getelementptr i8, i8* %25, i32 %lsr.iv2
    %uglygep3839 = bitcast i8* %uglygep38 to float*
    %scevgep40 = getelementptr float, float* %uglygep3839, i32 4035
    %30 = load float, float* %scevgep40, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr, 43728
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %31 = load i32, i32* %sunkaddr55, align 4, !tbaa !66
    %32 = icmp eq i32 %31, 7425
    %sunkaddr56 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr57 = add i32 %sunkaddr56, 52416
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to [4 x i32]**
    %33 = load [4 x i32]*, [4 x i32]** %sunkaddr58, align 4, !tbaa !59
    %34 = bitcast [4 x i32]* %33 to i8*
    %uglygep36 = getelementptr i8, i8* %34, i32 %lsr.iv2
    %uglygep3637 = bitcast i8* %uglygep36 to i32*
    %35 = load i32, i32* %uglygep3637, align 4, !tbaa !45
    %36 = sitofp i32 %35 to float
    br i1 %32, label %37, label %53
  
  ; <label>:37                                      ; preds = %22
    %38 = bitcast [4 x i32]* %33 to i8*
    %39 = bitcast [4 x float]* %color to float*
    %40 = fmul float %36, 0x3F40000000000000
    %41 = fmul float %6, %40
    store float %41, float* %39, align 4, !tbaa !44
    %uglygep33 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3334 = bitcast i8* %uglygep33 to i32*
    %scevgep35 = getelementptr i32, i32* %uglygep3334, i32 1
    %42 = load i32, i32* %scevgep35, align 4, !tbaa !45
    %43 = sitofp i32 %42 to float
    %44 = fmul float %43, 0x3F40000000000000
    %45 = fmul float %8, %44
    %sunkaddr59 = ptrtoint [4 x float]* %color to i32
    %sunkaddr60 = add i32 %sunkaddr59, 4
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to float*
    store float %45, float* %sunkaddr61, align 4, !tbaa !44
    %uglygep30 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3031 = bitcast i8* %uglygep30 to i32*
    %scevgep32 = getelementptr i32, i32* %uglygep3031, i32 2
    %46 = load i32, i32* %scevgep32, align 4, !tbaa !45
    %47 = sitofp i32 %46 to float
    %48 = fmul float %47, 0x3F40000000000000
    %49 = fmul float %10, %48
    %sunkaddr62 = ptrtoint [4 x float]* %color to i32
    %sunkaddr63 = add i32 %sunkaddr62, 8
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    store float %49, float* %sunkaddr64, align 4, !tbaa !44
    %uglygep27 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep2728 = bitcast i8* %uglygep27 to i32*
    %scevgep29 = getelementptr i32, i32* %uglygep2728, i32 3
    %50 = load i32, i32* %scevgep29, align 4, !tbaa !45
    %51 = sitofp i32 %50 to float
    %52 = fmul float %51, 0x3F40000000000000
    br label %65
  
  ; <label>:53                                      ; preds = %22
    %54 = bitcast [4 x i32]* %33 to i8*
    %55 = bitcast [4 x float]* %color to float*
    %56 = fmul float %6, %36
    store float %56, float* %55, align 4, !tbaa !44
    %uglygep24 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2425 = bitcast i8* %uglygep24 to i32*
    %scevgep26 = getelementptr i32, i32* %uglygep2425, i32 1
    %57 = load i32, i32* %scevgep26, align 4, !tbaa !45
    %58 = sitofp i32 %57 to float
    %59 = fmul float %8, %58
    %sunkaddr65 = ptrtoint [4 x float]* %color to i32
    %sunkaddr66 = add i32 %sunkaddr65, 4
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to float*
    store float %59, float* %sunkaddr67, align 4, !tbaa !44
    %uglygep21 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2122 = bitcast i8* %uglygep21 to i32*
    %scevgep23 = getelementptr i32, i32* %uglygep2122, i32 2
    %60 = load i32, i32* %scevgep23, align 4, !tbaa !45
    %61 = sitofp i32 %60 to float
    %62 = fmul float %10, %61
    %sunkaddr68 = ptrtoint [4 x float]* %color to i32
    %sunkaddr69 = add i32 %sunkaddr68, 8
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to float*
    store float %62, float* %sunkaddr70, align 4, !tbaa !44
    %uglygep18 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep1819 = bitcast i8* %uglygep18 to i32*
    %scevgep20 = getelementptr i32, i32* %uglygep1819, i32 3
    %63 = load i32, i32* %scevgep20, align 4, !tbaa !45
    %64 = sitofp i32 %63 to float
    br label %65
  
  ; <label>:65                                      ; preds = %53, %37
    %.pn = phi float [ %64, %53 ], [ %52, %37 ]
    %66 = bitcast [4 x float]* %texcoord to float*
    %67 = bitcast %struct.vertex_buffer* %2 to i8*
    %storemerge = fmul float %12, %.pn
    %sunkaddr71 = ptrtoint [4 x float]* %color to i32
    %sunkaddr72 = add i32 %sunkaddr71, 12
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to float*
    store float %storemerge, float* %sunkaddr73, align 4, !tbaa !44
    %uglygep15 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 14243
    %68 = load float, float* %scevgep17, align 4, !tbaa !44
    %69 = fdiv float 1.000000e+00, %68
    %uglygep9 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep910 = bitcast i8* %uglygep9 to float*
    %scevgep11 = getelementptr float, float* %uglygep910, i32 14240
    %70 = load float, float* %scevgep11, align 4, !tbaa !44
    %71 = fmul float %70, %69
    store float %71, float* %66, align 4, !tbaa !44
    %uglygep6 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep67 = bitcast i8* %uglygep6 to float*
    %scevgep8 = getelementptr float, float* %uglygep67, i32 14241
    %72 = load float, float* %scevgep8, align 4, !tbaa !44
    %73 = fmul float %69, %72
    %sunkaddr74 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr75 = add i32 %sunkaddr74, 4
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to float*
    store float %73, float* %sunkaddr76, align 4, !tbaa !44
    %uglygep4 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep45 = bitcast i8* %uglygep4 to float*
    %scevgep = getelementptr float, float* %uglygep45, i32 14242
    %74 = load float, float* %scevgep, align 4, !tbaa !44
    %75 = fmul float %69, %74
    %sunkaddr77 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr78 = add i32 %sunkaddr77, 8
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to float*
    store float %75, float* %sunkaddr79, align 4, !tbaa !44
    %uglygep12 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1213 = bitcast i8* %uglygep12 to i32*
    %scevgep14 = getelementptr i32, i32* %uglygep1213, i32 14243
    %76 = load i32, i32* %scevgep14, align 4, !tbaa !44
    %sunkaddr80 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr81 = add i32 %sunkaddr80, 12
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i32*
    store i32 %76, i32* %sunkaddr82, align 4, !tbaa !44
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 55440
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to i32*
    %77 = load i32, i32* %sunkaddr85, align 4, !tbaa !67
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 55436
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to i32*
    %78 = load i32, i32* %sunkaddr88, align 4, !tbaa !68
    %79 = icmp ult i32 %77, %78
    br i1 %79, label %80, label %83
  
  ; <label>:80                                      ; preds = %65
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 55432
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to float**
    %81 = load float*, float** %sunkaddr91, align 4, !tbaa !69
    %82 = getelementptr inbounds float, float* %81, i32 %77
    store float 1.793000e+03, float* %82, align 4, !tbaa !44
    br label %83
  
  ; <label>:83                                      ; preds = %80, %65
    %84 = bitcast [4 x float]* %texcoord to float*
    %85 = bitcast [4 x float]* %color to float*
    %86 = bitcast [4 x float]* %texcoord to i8*
    %87 = bitcast [4 x float]* %color to i8*
    %88 = add i32 %77, 1
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 55440
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to i32*
    store i32 %88, i32* %sunkaddr94, align 4, !tbaa !67
    %sunkaddr95 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr96 = add i32 %sunkaddr95, 56452
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to i32**
    %89 = load i32*, i32** %sunkaddr97, align 4, !tbaa !48
    %90 = bitcast i32* %89 to i8*
    %uglygep = getelementptr i8, i8* %90, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %91 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %92 = uitofp i32 %91 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %26, float %27, float %29, float %30, float* nonnull %85, float %92, float* nonnull %84) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %86) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %87) #4
    br label %93
  
  ; <label>:93                                      ; preds = %83, %18
    %94 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next3 = add i32 %lsr.iv2, 16
    %lsr.iv.next42 = add i32 %lsr.iv41, 12
    %95 = icmp ugt i32 %94, %last
    br i1 %95, label %._crit_edge, label %18
  
  ._crit_edge:                                      ; preds = %93, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = icmp ugt i32 %first, %last
    br i1 %3, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %4 = mul i32 %first, 3
    %5 = add i32 %4, 2
    %scevgep = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 0, i32 1512, i32 %5
    %scevgep1 = bitcast float* %scevgep to %struct.vertex_buffer*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi %struct.vertex_buffer* [ %15, %13 ], [ %scevgep1, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %14, %13 ], [ %first, %.lr.ph.preheader ]
    %6 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep = getelementptr i8, i8* %6, i32 %i.01
    %scevgep4 = getelementptr i8, i8* %uglygep, i32 65024
    %7 = load i8, i8* %scevgep4, align 1, !tbaa !43
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %13, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    %10 = bitcast %struct.vertex_buffer* %lsr.iv to float*
    %11 = load float, float* %10, align 4, !tbaa !44
    %12 = fdiv float %11, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %12) #4
    br label %13
  
  ; <label>:13                                      ; preds = %9, %.lr.ph
    %14 = add i32 %i.01, 1
    %scevgep2 = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %lsr.iv, i32 0, i32 0, i32 0, i32 3
    %15 = bitcast float* %scevgep2 to %struct.vertex_buffer*
    %16 = icmp ugt i32 %14, %last
    br i1 %16, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #1
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 54136}
  !38 = !{!2, !8, i64 55736}
  !39 = !{!2, !3, i64 55808}
  !40 = !{!2, !3, i64 55812}
  !41 = !{!42, !8, i64 115220}
  !42 = !{!"pixel_buffer", !4, i64 0, !4, i64 15360, !4, i64 30720, !4, i64 38400, !4, i64 42240, !4, i64 46080, !4, i64 49920, !4, i64 53760, !4, i64 69120, !4, i64 84480, !4, i64 99840, !4, i64 115200, !8, i64 115216, !8, i64 115220, !4, i64 115224, !4, i64 115228}
  !43 = !{!4, !4, i64 0}
  !44 = !{!11, !11, i64 0}
  !45 = !{!8, !8, i64 0}
  !46 = !{!2, !11, i64 55776}
  !47 = !{!20, !20, i64 0}
  !48 = !{!49, !3, i64 56452}
  !49 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !50 = !{!2, !3, i64 2020}
  !51 = !{!52, !4, i64 0}
  !52 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !53 = !{!2, !4, i64 55740}
  !54 = !{!2, !4, i64 55816}
  !55 = !{!2, !3, i64 55788}
  !56 = !{!2, !3, i64 2160}
  !57 = !{!2, !4, i64 54132}
  !58 = !{!2, !8, i64 55784}
  !59 = !{!49, !3, i64 52416}
  !60 = !{!42, !4, i64 115224}
  !61 = !{!42, !8, i64 115216}
  !62 = !{!52, !11, i64 24}
  !63 = !{!52, !11, i64 28}
  !64 = !{!52, !11, i64 32}
  !65 = !{!52, !11, i64 36}
  !66 = !{!2, !4, i64 43728}
  !67 = !{!2, !8, i64 55440}
  !68 = !{!2, !8, i64 55436}
  !69 = !{!2, !3, i64 55432}

...
---
name:            gl_set_point_function
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: fgr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: gpr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: gpr32 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: gpr32 }
  - { id: 56, class: gpr32 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: gpr32 }
  - { id: 61, class: gpr32 }
  - { id: 62, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%3' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 1618):
    successors: %bb.1(50), %bb.12(50)
    liveins: %a0, %t9, %v0
  
    %9 = ADDu %v0, %t9
    %3 = COPY %a0
    %4 = ORi %zero, 55740
    %5 = ADDu %3, killed %4
    %1 = LW killed %5, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5, !tbaa !53)
    %7 = ADDiu %zero, 7168
    BNE %1, killed %7, %bb.12, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.8, freq 809):
    successors: %bb.3(37), %bb.2(62)
  
    %18 = ORi %zero, 55816
    %19 = ADDu %3, killed %18
    %20 = LBu killed %19, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.9, align 4, !tbaa !54)
    BEQ killed %20, %zero, %bb.3, implicit-def dead %at
    B %bb.2, implicit-def dead %at
  
  bb.2 (%ir-block.12, freq 505):
    successors: %bb.15(100)
  
    %21 = ORi %zero, 55788
    %22 = ADDu %3, killed %21
    %23 = LW %9, target-flags(<unknown>) @null_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %24 = ADDiu killed %23, target-flags(<unknown>) @null_points
    SW killed %24, killed %22, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.13, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.3 (%ir-block.14, freq 303):
    successors: %bb.5(37), %bb.4(62)
  
    %2 = LW %3, 2160, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.15, !tbaa !56)
    BEQ %2, %zero, %bb.5, implicit-def dead %at
    B %bb.4, implicit-def dead %at
  
  bb.4 (%ir-block.18, freq 189):
    successors: %bb.15(100)
  
    %25 = ORi %zero, 55788
    %26 = ADDu %3, killed %25
    SW %2, killed %26, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.19, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.5 (%ir-block.20, freq 113):
    successors: %bb.7(25), %bb.16(75)
  
    %6 = LW %3, 2020, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1, !tbaa !50)
    %0 = LBu %6, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 1 from %ir.3, align 4, !tbaa !51)
    %30 = ANDi %0, 255
    BEQ %30, %zero, %bb.7, implicit-def dead %at
    B %bb.16, implicit-def dead %at
  
  bb.16 (%ir-block.20, freq 85):
    successors: %bb.7(33), %bb.6(66)
  
    %28 = ORi %zero, 54132
    %29 = ADDu %3, %28
    %27 = LBu %29, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.21, align 4, !tbaa !57)
    %31 = ANDi %27, 255
    BEQ killed %31, %zero, %bb.7, implicit-def dead %at
    B %bb.6, implicit-def dead %at
  
  bb.6 (%ir-block.25, freq 56):
    successors: %bb.15(100)
  
    %32 = ORi %zero, 55788
    %33 = ADDu %3, killed %32
    %34 = LW %9, target-flags(<unknown>) @antialiased_rgba_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %35 = ADDiu killed %34, target-flags(<unknown>) @antialiased_rgba_points
    SW killed %35, killed %33, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.26, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.7 (%ir-block.27, freq 56):
    successors: %bb.9(37), %bb.8(62)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %36 = LW %9, target-flags(<unknown>) @gl_texturing_enabled, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gl_texturing_enabled)
    %a0 = COPY %3
    %gp = COPY %9
    %t9 = COPY %36
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %37 = COPY %v0
    BEQ %37, %zero, %bb.9, implicit-def dead %at
    B %bb.8, implicit-def dead %at
  
  bb.8 (%ir-block.30, freq 35):
    successors: %bb.15(100)
  
    %38 = ORi %zero, 55788
    %39 = ADDu %3, killed %38
    %40 = LW %9, target-flags(<unknown>) @textured_rgba_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %41 = ADDiu killed %40, target-flags(<unknown>) @textured_rgba_points
    SW killed %41, killed %39, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.31, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.9 (%ir-block.32, freq 21):
    successors: %bb.10(62), %bb.11(37)
  
    %42 = ORi %zero, 54136
    %43 = LWXC1 %3, killed %42, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.33, !tbaa !37)
    %44 = LW %9, target-flags(<unknown>) %const.0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %45 = LWC1 killed %44, target-flags(<unknown>) %const.0, <0x422cde0> = !{!"unison-memory-partition", i32 2} :: (load 4 from constant-pool)
    FCMP_S32 killed %43, killed %45, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.11, implicit-def dead %at
    B %bb.10, implicit-def dead %at
  
  bb.10 (%ir-block.36, freq 13):
    successors: %bb.15(100)
  
    %55 = LW %9, target-flags(<unknown>) @size1_rgba_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %56 = ADDiu killed %55, target-flags(<unknown>) @size1_rgba_points
    %57 = LW %9, target-flags(<unknown>) @size1_ci_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %58 = MOVN_I_I killed %56, %30, %57
    %59 = ORi %zero, 55788
    %60 = ADDu %3, killed %59
    SW killed %58, killed %60, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.39, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.11 (%ir-block.40, freq 8):
    successors: %bb.15(100)
  
    %46 = LW %9, target-flags(<unknown>) @general_ci_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %48 = ADDiu killed %46, target-flags(<unknown>) @general_ci_points
    %49 = LW %9, target-flags(<unknown>) @general_rgba_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %50 = ADDiu killed %49, target-flags(<unknown>) @general_rgba_points
    %51 = MOVN_I_I killed %50, %30, %48
    %52 = ORi %zero, 55788
    %53 = ADDu %3, killed %52
    SW killed %51, killed %53, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.43, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.12 (%ir-block.44, freq 809):
    successors: %bb.13(50), %bb.14(50)
  
    %8 = ADDiu %zero, 7169
    BNE %1, killed %8, %bb.14, implicit-def dead %at
    B %bb.13, implicit-def dead %at
  
  bb.13 (%ir-block.46, freq 404):
    successors: %bb.15(100)
  
    %14 = ORi %zero, 55788
    %15 = ADDu %3, killed %14
    %16 = LW %9, target-flags(<unknown>) @feedback_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %17 = ADDiu killed %16, target-flags(<unknown>) @feedback_points
    SW killed %17, killed %15, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr2, !tbaa !55)
    B %bb.15, implicit-def dead %at
  
  bb.14 (%ir-block.47, freq 404):
    successors: %bb.15(100)
  
    %10 = ORi %zero, 55788
    %11 = ADDu %3, killed %10
    %12 = LW %9, target-flags(<unknown>) @select_points, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %13 = ADDiu killed %12, target-flags(<unknown>) @select_points
    SW killed %13, killed %11, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr5, !tbaa !55)
  
  bb.15 (%ir-block.48, freq 1618):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.points.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, {}*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [12 x i8] c"glPointSize\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_PointSize(%struct.gl_context* %ctx, float %size) #0 {
    %1 = fcmp ugt float %size, 0.000000e+00
    br i1 %1, label %3, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* %ctx, i32 signext 1281, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:3                                       ; preds = %0
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %5 = load i32, i32* %4, align 4, !tbaa !1
    %6 = icmp eq i32 %5, 6656
    br i1 %6, label %8, label %7
  
  ; <label>:7                                       ; preds = %3
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:8                                       ; preds = %3
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    store float %size, float* %9, align 4, !tbaa !37
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %11 = load i32, i32* %10, align 4, !tbaa !38
    %12 = or i32 %11, 2
    store i32 %12, i32* %10, align 4, !tbaa !38
    br label %13
  
  ; <label>:13                                      ; preds = %8, %7, %2
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @size1_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 13
    %6 = load i32, i32* %5, align 4, !tbaa !41
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 2
    %9 = mul i32 %first, 12
    %10 = add i32 %9, 24192
    br label %11
  
  ; <label>:11                                      ; preds = %35, %.lr.ph
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %35 ], [ %10, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %35 ], [ %8, %.lr.ph ]
    %i.03 = phi i32 [ %first, %.lr.ph ], [ %36, %35 ]
    %pbcount.02 = phi i32 [ %6, %.lr.ph ], [ %pbcount.1, %35 ]
    %12 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep11 = getelementptr i8, i8* %12, i32 %lsr.iv3
    %uglygep2 = getelementptr i8, i8* %12, i32 %i.03
    %scevgep = getelementptr i8, i8* %uglygep2, i32 65024
    %13 = load i8, i8* %scevgep, align 1, !tbaa !43
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %35, label %15
  
  ; <label>:15                                      ; preds = %11
    %16 = bitcast i8* %uglygep11 to float*
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %18 = load float, float* %16, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %pbcount.02
    store i32 %19, i32* %20, align 4, !tbaa !45
    %uglygep8 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep89 = bitcast i8* %uglygep8 to float*
    %scevgep10 = getelementptr float, float* %uglygep89, i32 1
    %21 = load float, float* %scevgep10, align 4, !tbaa !44
    %22 = fptosi float %21 to i32
    %23 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %pbcount.02
    store i32 %22, i32* %23, align 4, !tbaa !45
    %uglygep5 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep56 = bitcast i8* %uglygep5 to float*
    %scevgep7 = getelementptr float, float* %uglygep56, i32 2
    %24 = load float, float* %scevgep7, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr, 55776
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to float*
    %25 = load float, float* %sunkaddr14, align 4, !tbaa !46
    %26 = fadd float %24, %25
    %27 = fptosi float %26 to i32
    %28 = trunc i32 %27 to i16
    %29 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %pbcount.02
    store i16 %28, i16* %29, align 2, !tbaa !47
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 56452
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32**
    %30 = load i32*, i32** %sunkaddr17, align 4, !tbaa !48
    %31 = bitcast i32* %30 to i8*
    %uglygep = getelementptr i8, i8* %31, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %32 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %33 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 7, i32 %pbcount.02
    store i32 %32, i32* %33, align 4, !tbaa !45
    %34 = add i32 %pbcount.02, 1
    br label %35
  
  ; <label>:35                                      ; preds = %15, %11
    %pbcount.1 = phi i32 [ %34, %15 ], [ %pbcount.02, %11 ]
    %36 = add i32 %i.03, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next4 = add i32 %lsr.iv3, 12
    %37 = icmp ugt i32 %36, %last
    br i1 %37, label %._crit_edge, label %11
  
  ._crit_edge:                                      ; preds = %35, %0
    %pbcount.0.lcssa = phi i32 [ %6, %0 ], [ %pbcount.1, %35 ]
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115220
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    store i32 %pbcount.0.lcssa, i32* %sunkaddr20, align 4, !tbaa !41
    %38 = icmp ugt i32 %pbcount.0.lcssa, 2559
    br i1 %38, label %39, label %40
  
  ; <label>:39                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %40
  
  ; <label>:40                                      ; preds = %39, %._crit_edge
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  declare void @gl_flush_pb(%struct.gl_context*) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_set_point_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !50
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !51
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !53
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %44
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !54
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @null_points, void (%struct.gl_context*, i32, i32)** %13, align 4, !tbaa !55
    br label %48
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    %16 = load void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32)** %15, align 4, !tbaa !56
    %17 = icmp eq void (%struct.gl_context*, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %16, void (%struct.gl_context*, i32, i32)** %19, align 4, !tbaa !55
    br label %48
  
  ; <label>:20                                      ; preds = %14
    %21 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 0
    %22 = load i8, i8* %21, align 4, !tbaa !57
    %23 = icmp eq i8 %22, 0
    %24 = icmp eq i8 %4, 0
    %or.cond = or i1 %24, %23
    br i1 %or.cond, label %27, label %25
  
  ; <label>:25                                      ; preds = %20
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @antialiased_rgba_points, void (%struct.gl_context*, i32, i32)** %26, align 4, !tbaa !55
    br label %48
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %32, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @textured_rgba_points, void (%struct.gl_context*, i32, i32)** %31, align 4, !tbaa !55
    br label %48
  
  ; <label>:32                                      ; preds = %27
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %34 = load float, float* %33, align 4, !tbaa !37
    %35 = fcmp oeq float %34, 1.000000e+00
    br i1 %35, label %36, label %40
  
  ; <label>:36                                      ; preds = %32
    %37 = icmp ne i8 %4, 0
    %38 = select i1 %37, void (%struct.gl_context*, i32, i32)* @size1_rgba_points, void (%struct.gl_context*, i32, i32)* @size1_ci_points
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %38, void (%struct.gl_context*, i32, i32)** %39, align 4, !tbaa !55
    br label %48
  
  ; <label>:40                                      ; preds = %32
    %41 = icmp ne i8 %4, 0
    %42 = select i1 %41, void (%struct.gl_context*, i32, i32)* @general_rgba_points, void (%struct.gl_context*, i32, i32)* @general_ci_points
    %43 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %42, void (%struct.gl_context*, i32, i32)** %43, align 4, !tbaa !55
    br label %48
  
  ; <label>:44                                      ; preds = %0
    %45 = icmp eq i32 %6, 7169
    br i1 %45, label %46, label %47
  
  ; <label>:46                                      ; preds = %44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55788
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @feedback_points, void (%struct.gl_context*, i32, i32)** %sunkaddr2, align 4, !tbaa !55
    br label %48
  
  ; <label>:47                                      ; preds = %44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55788
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @select_points, void (%struct.gl_context*, i32, i32)** %sunkaddr5, align 4, !tbaa !55
    br label %48
  
  ; <label>:48                                      ; preds = %47, %46, %40, %36, %30, %25, %18, %12
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_points(%struct.gl_context* nocapture %ctx, i32 signext %first, i32 signext %last) #3 {
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @antialiased_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fcmp olt float %8, 1.000000e+00
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = fcmp ogt float %8, 1.000000e+01
    br i1 %11, label %13, label %12
  
  ; <label>:12                                      ; preds = %10
    %phitmp16 = fmul float %8, 5.000000e-01
    br label %13
  
  ; <label>:13                                      ; preds = %12, %10, %0
    %14 = phi float [ 5.000000e-01, %0 ], [ %phitmp16, %12 ], [ 5.000000e+00, %10 ]
    %15 = fadd float %14, 0xBFE6A09020000000
    %16 = fadd float %14, 0x3FE6A09020000000
    %17 = fmul float %15, %15
    %18 = fmul float %16, %16
    %19 = fsub float %18, %17
    %20 = fdiv float 2.560000e+02, %19
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %.preheader17, label %.preheader19
  
  .preheader19:                                     ; preds = %13
    %23 = icmp ugt i32 %first, %last
    br i1 %23, label %.loopexit, label %.lr.ph36
  
  .lr.ph36:                                         ; preds = %.preheader19
    br label %25
  
  .preheader17:                                     ; preds = %13
    %24 = icmp ugt i32 %first, %last
    br i1 %24, label %.loopexit, label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.preheader17
    br label %134
  
  ; <label>:25                                      ; preds = %131, %.lr.ph36
    %i.033 = phi i32 [ %first, %.lr.ph36 ], [ %132, %131 ]
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.033
    %27 = load i8, i8* %26, align 1, !tbaa !43
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %131, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 0
    %31 = load float, float* %30, align 4, !tbaa !44
    %32 = fsub float %31, %14
    %33 = fptosi float %32 to i32
    %34 = fadd float %14, %31
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 1
    %37 = load float, float* %36, align 4, !tbaa !44
    %38 = fsub float %37, %14
    %39 = fptosi float %38 to i32
    %40 = fadd float %14, %37
    %41 = fptosi float %40 to i32
    %sunkaddr = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr1 = add i32 %sunkaddr, 52416
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to [4 x i32]**
    %42 = load [4 x i32]*, [4 x i32]** %sunkaddr2, align 4, !tbaa !59
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 0
    %44 = load float, float* %43, align 4, !tbaa !44
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 3
    %46 = load float, float* %45, align 4, !tbaa !44
    %47 = fdiv float %44, %46
    %48 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 1
    %49 = load float, float* %48, align 4, !tbaa !44
    %50 = fdiv float %49, %46
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 2
    %52 = load float, float* %51, align 4, !tbaa !44
    %53 = fdiv float %52, %46
    %54 = icmp sgt i32 %39, %41
    br i1 %54, label %._crit_edge32, label %.preheader18.lr.ph
  
  .preheader18.lr.ph:                               ; preds = %29
    %55 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !45
    %57 = ashr i32 %56, %6
    %58 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !45
    %60 = ashr i32 %59, %6
    %61 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 0
    %62 = load i32, i32* %61, align 4, !tbaa !45
    %63 = ashr i32 %62, %6
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 2
    %65 = load float, float* %64, align 4, !tbaa !44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55776
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %66 = load float, float* %sunkaddr5, align 4, !tbaa !46
    %67 = fadd float %65, %66
    %68 = fptosi float %67 to i32
    br label %.preheader18
  
  .preheader18:                                     ; preds = %._crit_edge30, %.preheader18.lr.ph
    %y.031 = phi i32 [ %39, %.preheader18.lr.ph ], [ %126, %._crit_edge30 ]
    %69 = icmp sgt i32 %33, %35
    br i1 %69, label %._crit_edge30, label %.lr.ph29
  
  .lr.ph29:                                         ; preds = %.preheader18
    %70 = sitofp i32 %y.031 to float
    br label %71
  
  ; <label>:71                                      ; preds = %122, %.lr.ph29
    %x.028 = phi i32 [ %33, %.lr.ph29 ], [ %123, %122 ]
    %72 = sitofp i32 %x.028 to float
    %73 = load float, float* %30, align 4, !tbaa !44
    %74 = fsub float %72, %73
    %75 = load float, float* %36, align 4, !tbaa !44
    %76 = fsub float %70, %75
    %77 = fmul float %74, %74
    %78 = fmul float %76, %76
    %79 = fadd float %77, %78
    %80 = fcmp olt float %79, %18
    br i1 %80, label %81, label %122
  
  ; <label>:81                                      ; preds = %71
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %82 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %83 = getelementptr inbounds [4 x i32], [4 x i32]* %82, i32 %i.033, i32 3
    %84 = load i32, i32* %83, align 4, !tbaa !45
    %85 = ashr i32 %84, %6
    %86 = fcmp ult float %79, %17
    br i1 %86, label %94, label %87
  
  ; <label>:87                                      ; preds = %81
    %88 = fsub float %79, %17
    %89 = fmul float %20, %88
    %90 = fsub float 2.560000e+02, %89
    %91 = fptosi float %90 to i32
    %92 = mul nsw i32 %85, %91
    %93 = ashr i32 %92, 8
    br label %94
  
  ; <label>:94                                      ; preds = %87, %81
    %alpha.0 = phi i32 [ %93, %87 ], [ %85, %81 ]
    %95 = trunc i32 %57 to i8
    %96 = trunc i32 %60 to i8
    %97 = trunc i32 %63 to i8
    %98 = trunc i32 %68 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %99 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %100 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %99
    store i32 %x.028, i32* %100, align 4, !tbaa !45
    %101 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %102 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %101
    store i32 %y.031, i32* %102, align 4, !tbaa !45
    %103 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %104 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %103
    store i16 %98, i16* %104, align 2, !tbaa !47
    %105 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %106 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %105
    store i8 %97, i8* %106, align 1, !tbaa !43
    %107 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %108 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %107
    store i8 %96, i8* %108, align 1, !tbaa !43
    %109 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %109
    store i8 %95, i8* %110, align 1, !tbaa !43
    %111 = trunc i32 %alpha.0 to i8
    %112 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %113 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %112
    store i8 %111, i8* %113, align 1, !tbaa !43
    %114 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %115 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %114
    store float %47, float* %115, align 4, !tbaa !44
    %116 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %117 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %116
    store float %50, float* %117, align 4, !tbaa !44
    %118 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %119 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %118
    store float %53, float* %119, align 4, !tbaa !44
    %120 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %121 = add i32 %120, 1
    store i32 %121, i32* %sunkaddr11, align 4, !tbaa !41
    br label %122
  
  ; <label>:122                                     ; preds = %94, %71
    %123 = add nsw i32 %x.028, 1
    %124 = add i32 %123, -1
    %125 = icmp slt i32 %124, %35
    br i1 %125, label %71, label %._crit_edge30
  
  ._crit_edge30:                                    ; preds = %122, %.preheader18
    %126 = add nsw i32 %y.031, 1
    %127 = icmp slt i32 %y.031, %41
    br i1 %127, label %.preheader18, label %._crit_edge32
  
  ._crit_edge32:                                    ; preds = %._crit_edge30, %29
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %128 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %129 = icmp ugt i32 %128, 2559
    br i1 %129, label %130, label %131
  
  ; <label>:130                                     ; preds = %._crit_edge32
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %131
  
  ; <label>:131                                     ; preds = %130, %._crit_edge32, %25
    %132 = add i32 %i.033, 1
    %133 = icmp ugt i32 %132, %last
    br i1 %133, label %.loopexit, label %25
  
  ; <label>:134                                     ; preds = %223, %.lr.ph27
    %i.124 = phi i32 [ %first, %.lr.ph27 ], [ %224, %223 ]
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.124
    %136 = load i8, i8* %135, align 1, !tbaa !43
    %137 = icmp eq i8 %136, 0
    br i1 %137, label %223, label %138
  
  ; <label>:138                                     ; preds = %134
    %139 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 0
    %140 = load float, float* %139, align 4, !tbaa !44
    %141 = fsub float %140, %14
    %142 = fptosi float %141 to i32
    %143 = fadd float %14, %140
    %144 = fptosi float %143 to i32
    %145 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 1
    %146 = load float, float* %145, align 4, !tbaa !44
    %147 = fsub float %146, %14
    %148 = fptosi float %147 to i32
    %149 = fadd float %14, %146
    %150 = fptosi float %149 to i32
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 52416
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to [4 x i32]**
    %151 = load [4 x i32]*, [4 x i32]** %sunkaddr17, align 4, !tbaa !59
    %152 = icmp sgt i32 %148, %150
    br i1 %152, label %._crit_edge23, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %138
    %153 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 2
    %154 = load i32, i32* %153, align 4, !tbaa !45
    %155 = ashr i32 %154, %6
    %156 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 1
    %157 = load i32, i32* %156, align 4, !tbaa !45
    %158 = ashr i32 %157, %6
    %159 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 0
    %160 = load i32, i32* %159, align 4, !tbaa !45
    %161 = ashr i32 %160, %6
    %162 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 2
    %163 = load float, float* %162, align 4, !tbaa !44
    %sunkaddr18 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr19 = add i32 %sunkaddr18, 55776
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    %164 = load float, float* %sunkaddr20, align 4, !tbaa !46
    %165 = fadd float %163, %164
    %166 = fptosi float %165 to i32
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %y6.022 = phi i32 [ %148, %.preheader.lr.ph ], [ %218, %._crit_edge ]
    %167 = icmp sgt i32 %142, %144
    br i1 %167, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader
    %168 = sitofp i32 %y6.022 to float
    br label %169
  
  ; <label>:169                                     ; preds = %214, %.lr.ph
    %x5.021 = phi i32 [ %142, %.lr.ph ], [ %215, %214 ]
    %170 = sitofp i32 %x5.021 to float
    %171 = load float, float* %139, align 4, !tbaa !44
    %172 = fsub float %170, %171
    %173 = load float, float* %145, align 4, !tbaa !44
    %174 = fsub float %168, %173
    %175 = fmul float %172, %172
    %176 = fmul float %174, %174
    %177 = fadd float %175, %176
    %178 = fcmp olt float %177, %18
    br i1 %178, label %179, label %214
  
  ; <label>:179                                     ; preds = %169
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %180 = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %181 = getelementptr inbounds [4 x i32], [4 x i32]* %180, i32 %i.124, i32 3
    %182 = load i32, i32* %181, align 4, !tbaa !45
    %183 = ashr i32 %182, %6
    %184 = fcmp ult float %177, %17
    br i1 %184, label %192, label %185
  
  ; <label>:185                                     ; preds = %179
    %186 = fsub float %177, %17
    %187 = fmul float %20, %186
    %188 = fsub float 2.560000e+02, %187
    %189 = fptosi float %188 to i32
    %190 = mul nsw i32 %183, %189
    %191 = ashr i32 %190, 8
    br label %192
  
  ; <label>:192                                     ; preds = %185, %179
    %alpha11.0 = phi i32 [ %191, %185 ], [ %183, %179 ]
    %193 = trunc i32 %155 to i8
    %194 = trunc i32 %158 to i8
    %195 = trunc i32 %161 to i8
    %196 = trunc i32 %166 to i16
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %197 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %198 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %197
    store i32 %x5.021, i32* %198, align 4, !tbaa !45
    %199 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %200 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %199
    store i32 %y6.022, i32* %200, align 4, !tbaa !45
    %201 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %202 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %201
    store i16 %196, i16* %202, align 2, !tbaa !47
    %203 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %204 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %203
    store i8 %195, i8* %204, align 1, !tbaa !43
    %205 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %206 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %205
    store i8 %194, i8* %206, align 1, !tbaa !43
    %207 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %208 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %207
    store i8 %193, i8* %208, align 1, !tbaa !43
    %209 = trunc i32 %alpha11.0 to i8
    %210 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %211 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %210
    store i8 %209, i8* %211, align 1, !tbaa !43
    %212 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %213 = add i32 %212, 1
    store i32 %213, i32* %sunkaddr26, align 4, !tbaa !41
    br label %214
  
  ; <label>:214                                     ; preds = %192, %169
    %215 = add nsw i32 %x5.021, 1
    %216 = add i32 %215, -1
    %217 = icmp slt i32 %216, %144
    br i1 %217, label %169, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %214, %.preheader
    %218 = add nsw i32 %y6.022, 1
    %219 = icmp slt i32 %y6.022, %150
    br i1 %219, label %.preheader, label %._crit_edge23
  
  ._crit_edge23:                                    ; preds = %._crit_edge, %138
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %220 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %221 = icmp ugt i32 %220, 2559
    br i1 %221, label %222, label %223
  
  ; <label>:222                                     ; preds = %._crit_edge23
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %223
  
  ; <label>:223                                     ; preds = %222, %._crit_edge23, %134
    %224 = add i32 %i.124, 1
    %225 = icmp ugt i32 %224, %last
    br i1 %225, label %.loopexit, label %134
  
  .loopexit:                                        ; preds = %131, %223, %.preheader17, %.preheader19
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #1
  
  ; Function Attrs: nounwind
  define internal void @textured_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %0
    br label %8
  
  ; <label>:8                                       ; preds = %118, %.lr.ph7
    %i.04 = phi i32 [ %first, %.lr.ph7 ], [ %119, %118 ]
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.04
    %10 = load i8, i8* %9, align 1, !tbaa !43
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %118, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 0
    %14 = load float, float* %13, align 4, !tbaa !44
    %15 = fptosi float %14 to i32
    %16 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 1
    %17 = load float, float* %16, align 4, !tbaa !44
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 2
    %20 = load float, float* %19, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %21 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %22 = fadd float %20, %21
    %23 = fptosi float %22 to i32
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54136
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %24 = load float, float* %sunkaddr5, align 4, !tbaa !37
    %25 = fpext float %24 to double
    %26 = fcmp olt float %24, 1.000000e+00
    br i1 %26, label %30, label %27
  
  ; <label>:27                                      ; preds = %12
    %28 = fcmp ogt float %24, 1.000000e+01
    br i1 %28, label %30, label %29
  
  ; <label>:29                                      ; preds = %27
    br label %30
  
  ; <label>:30                                      ; preds = %29, %27, %12
    %31 = phi double [ 1.000000e+00, %12 ], [ %25, %29 ], [ 1.000000e+01, %27 ]
    %32 = fadd double %31, 5.000000e-01
    %33 = fptosi double %32 to i32
    %34 = icmp slt i32 %33, 1
    %. = select i1 %34, i32 1, i32 %33
    %35 = and i32 %., 1
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %43, label %37
  
  ; <label>:37                                      ; preds = %30
    %38 = sdiv i32 %., 2
    %39 = sub nsw i32 %15, %38
    %40 = add nsw i32 %38, %15
    %41 = sub nsw i32 %18, %38
    %42 = add nsw i32 %38, %18
    br label %56
  
  ; <label>:43                                      ; preds = %30
    %44 = sitofp i32 %15 to float
    %45 = fadd float %44, 5.000000e-01
    %46 = fptosi float %45 to i32
    %47 = sdiv i32 %., 2
    %48 = sub nsw i32 %46, %47
    %49 = add i32 %., -1
    %50 = add i32 %49, %48
    %51 = sitofp i32 %18 to float
    %52 = fadd float %51, 5.000000e-01
    %53 = fptosi float %52 to i32
    %54 = sub nsw i32 %53, %47
    %55 = add i32 %49, %54
    br label %56
  
  ; <label>:56                                      ; preds = %43, %37
    %y1.0 = phi i32 [ %42, %37 ], [ %55, %43 ]
    %y0.0 = phi i32 [ %41, %37 ], [ %54, %43 ]
    %x1.0 = phi i32 [ %40, %37 ], [ %50, %43 ]
    %x0.0 = phi i32 [ %39, %37 ], [ %48, %43 ]
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %57 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %58 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 0
    %59 = load float, float* %58, align 4, !tbaa !44
    %60 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 3
    %61 = load float, float* %60, align 4, !tbaa !44
    %62 = fdiv float %59, %61
    %63 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 1
    %64 = load float, float* %63, align 4, !tbaa !44
    %65 = fdiv float %64, %61
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 2
    %67 = load float, float* %66, align 4, !tbaa !44
    %68 = fdiv float %67, %61
    %69 = icmp sgt i32 %y0.0, %y1.0
    br i1 %69, label %._crit_edge3, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %56
    %70 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 3
    %71 = load i32, i32* %70, align 4, !tbaa !45
    %72 = ashr i32 %71, %6
    %73 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 2
    %74 = load i32, i32* %73, align 4, !tbaa !45
    %75 = ashr i32 %74, %6
    %76 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 1
    %77 = load i32, i32* %76, align 4, !tbaa !45
    %78 = ashr i32 %77, %6
    %79 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 0
    %80 = load i32, i32* %79, align 4, !tbaa !45
    %81 = ashr i32 %80, %6
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.02 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %113, %._crit_edge ]
    %82 = icmp sgt i32 %x0.0, %x1.0
    br i1 %82, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.01 = phi i32 [ %110, %.lr.ph ], [ %x0.0, %.preheader ]
    %83 = trunc i32 %72 to i8
    %84 = trunc i32 %75 to i8
    %85 = trunc i32 %78 to i8
    %86 = trunc i32 %81 to i8
    %87 = trunc i32 %23 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %88 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %89 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %88
    store i32 %ix.01, i32* %89, align 4, !tbaa !45
    %90 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %91 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %90
    store i32 %iy.02, i32* %91, align 4, !tbaa !45
    %92 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %93 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %92
    store i16 %87, i16* %93, align 2, !tbaa !47
    %94 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %95 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %94
    store i8 %86, i8* %95, align 1, !tbaa !43
    %96 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %97 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %96
    store i8 %85, i8* %97, align 1, !tbaa !43
    %98 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %98
    store i8 %84, i8* %99, align 1, !tbaa !43
    %100 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %100
    store i8 %83, i8* %101, align 1, !tbaa !43
    %102 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %102
    store float %62, float* %103, align 4, !tbaa !44
    %104 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %105 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %104
    store float %65, float* %105, align 4, !tbaa !44
    %106 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %107 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %106
    store float %68, float* %107, align 4, !tbaa !44
    %108 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %109 = add i32 %108, 1
    store i32 %109, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = add nsw i32 %ix.01, 1
    %111 = add i32 %110, -1
    %112 = icmp slt i32 %111, %x1.0
    br i1 %112, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %113 = add nsw i32 %iy.02, 1
    %114 = icmp slt i32 %iy.02, %y1.0
    br i1 %114, label %.preheader, label %._crit_edge3
  
  ._crit_edge3:                                     ; preds = %._crit_edge, %56
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %115 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %116 = icmp ugt i32 %115, 2559
    br i1 %116, label %117, label %118
  
  ; <label>:117                                     ; preds = %._crit_edge3
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %118
  
  ; <label>:118                                     ; preds = %117, %._crit_edge3, %8
    %119 = add i32 %i.04, 1
    %120 = icmp ugt i32 %119, %last
    br i1 %120, label %._crit_edge8, label %8
  
  ._crit_edge8:                                     ; preds = %118, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @size1_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %.._crit_edge_crit_edge, label %.lr.ph
  
  .._crit_edge_crit_edge:                           ; preds = %0
    br label %._crit_edge
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 4
    %9 = add i32 %8, 8
    %10 = mul i32 %first, 12
    %11 = add i32 %10, 24192
    br label %12
  
  ; <label>:12                                      ; preds = %57, %.lr.ph
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %57 ], [ %11, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %57 ], [ %9, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %58, %57 ]
    %13 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep20 = getelementptr i8, i8* %13, i32 %i.01
    %scevgep21 = getelementptr i8, i8* %uglygep20, i32 65024
    %14 = load i8, i8* %scevgep21, align 1, !tbaa !43
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %57, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep18 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1819 = bitcast i8* %uglygep18 to float*
    %18 = load float, float* %uglygep1819, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %uglygep15 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 1
    %20 = load float, float* %scevgep17, align 4, !tbaa !44
    %21 = fptosi float %20 to i32
    %uglygep12 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1213 = bitcast i8* %uglygep12 to float*
    %scevgep14 = getelementptr float, float* %uglygep1213, i32 2
    %22 = load float, float* %scevgep14, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr, 55776
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %23 = load float, float* %sunkaddr23, align 4, !tbaa !46
    %24 = fadd float %22, %23
    %25 = fptosi float %24 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %26 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !59
    %27 = bitcast [4 x i32]* %26 to i8*
    %uglygep7 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    %scevgep9 = getelementptr i32, i32* %uglygep78, i32 -2
    %28 = load i32, i32* %scevgep9, align 4, !tbaa !45
    %29 = ashr i32 %28, %6
    %uglygep4 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i32*
    %scevgep6 = getelementptr i32, i32* %uglygep45, i32 -1
    %30 = load i32, i32* %scevgep6, align 4, !tbaa !45
    %31 = ashr i32 %30, %6
    %uglygep2 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to i32*
    %32 = load i32, i32* %uglygep23, align 4, !tbaa !45
    %33 = ashr i32 %32, %6
    %uglygep = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %scevgep = getelementptr i32, i32* %uglygep1, i32 1
    %34 = load i32, i32* %scevgep, align 4, !tbaa !45
    %35 = ashr i32 %34, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %36 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %37 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %36
    store i32 %19, i32* %37, align 4, !tbaa !45
    %38 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %39 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %38
    store i32 %21, i32* %39, align 4, !tbaa !45
    %40 = trunc i32 %25 to i16
    %41 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %42 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %41
    store i16 %40, i16* %42, align 2, !tbaa !47
    %43 = trunc i32 %29 to i8
    %44 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %45 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %44
    store i8 %43, i8* %45, align 1, !tbaa !43
    %46 = trunc i32 %31 to i8
    %47 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %48 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %47
    store i8 %46, i8* %48, align 1, !tbaa !43
    %49 = trunc i32 %33 to i8
    %50 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %51 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %50
    store i8 %49, i8* %51, align 1, !tbaa !43
    %52 = trunc i32 %35 to i8
    %53 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %54 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %53
    store i8 %52, i8* %54, align 1, !tbaa !43
    %55 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %56 = add i32 %55, 1
    store i32 %56, i32* %sunkaddr29, align 4, !tbaa !41
    br label %57
  
  ; <label>:57                                      ; preds = %16, %12
    %58 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 16
    %lsr.iv.next11 = add i32 %lsr.iv10, 12
    %59 = icmp ugt i32 %58, %last
    br i1 %59, label %._crit_edge, label %12
  
  ._crit_edge:                                      ; preds = %57, %.._crit_edge_crit_edge
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115220
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    %60 = load i32, i32* %sunkaddr32, align 4, !tbaa !41
    %61 = icmp ugt i32 %60, 2559
    br i1 %61, label %62, label %63
  
  ; <label>:62                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %63
  
  ; <label>:63                                      ; preds = %62, %._crit_edge
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fpext float %8 to double
    %10 = fcmp olt float %8, 1.000000e+00
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    %12 = fcmp ogt float %8, 1.000000e+01
    br i1 %12, label %14, label %13
  
  ; <label>:13                                      ; preds = %11
    %phitmp = fadd double %9, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %14
  
  ; <label>:14                                      ; preds = %13, %11, %0
    %15 = phi i32 [ 1, %0 ], [ %phitmp1, %13 ], [ 10, %11 ]
    %16 = icmp ugt i32 %first, %last
    br i1 %16, label %._crit_edge9, label %.lr.ph8
  
  .lr.ph8:                                          ; preds = %14
    %17 = and i32 %15, 1
    %18 = sdiv i32 %15, 2
    %19 = add i32 %15, -1
    br label %20
  
  ; <label>:20                                      ; preds = %114, %.lr.ph8
    %i.05 = phi i32 [ %first, %.lr.ph8 ], [ %115, %114 ]
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %22 = load i8, i8* %21, align 1, !tbaa !43
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %114, label %24
  
  ; <label>:24                                      ; preds = %20
    %25 = icmp eq i32 %17, 0
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %27 = load float, float* %26, align 4, !tbaa !44
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %30 = load float, float* %29, align 4, !tbaa !44
    %31 = fptosi float %30 to i32
    %32 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %33 = load float, float* %32, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %34 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %35 = fadd float %33, %34
    %36 = fptosi float %35 to i32
    br i1 %25, label %42, label %37
  
  ; <label>:37                                      ; preds = %24
    %38 = sub nsw i32 %28, %18
    %39 = add nsw i32 %28, %18
    %40 = sub nsw i32 %31, %18
    %41 = add nsw i32 %31, %18
    br label %53
  
  ; <label>:42                                      ; preds = %24
    %43 = sitofp i32 %28 to float
    %44 = fadd float %43, 5.000000e-01
    %45 = fptosi float %44 to i32
    %46 = sub nsw i32 %45, %18
    %47 = add i32 %19, %46
    %48 = sitofp i32 %31 to float
    %49 = fadd float %48, 5.000000e-01
    %50 = fptosi float %49 to i32
    %51 = sub nsw i32 %50, %18
    %52 = add i32 %19, %51
    br label %53
  
  ; <label>:53                                      ; preds = %42, %37
    %x0.0 = phi i32 [ %38, %37 ], [ %46, %42 ]
    %x1.0 = phi i32 [ %39, %37 ], [ %47, %42 ]
    %y0.0 = phi i32 [ %40, %37 ], [ %51, %42 ]
    %y1.0 = phi i32 [ %41, %37 ], [ %52, %42 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115200
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %54 = load i32, i32* %sunkaddr5, align 4, !tbaa !45
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %55 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 0
    %57 = load i32, i32* %56, align 4, !tbaa !45
    %58 = ashr i32 %57, %6
    %59 = icmp eq i32 %54, %58
    br i1 %59, label %60, label %81
  
  ; <label>:60                                      ; preds = %53
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115204
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %61 = load i32, i32* %sunkaddr11, align 4, !tbaa !45
    %62 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !45
    %64 = ashr i32 %63, %6
    %65 = icmp eq i32 %61, %64
    br i1 %65, label %66, label %81
  
  ; <label>:66                                      ; preds = %60
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115208
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %67 = load i32, i32* %sunkaddr14, align 4, !tbaa !45
    %68 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 2
    %69 = load i32, i32* %68, align 4, !tbaa !45
    %70 = ashr i32 %69, %6
    %71 = icmp eq i32 %67, %70
    br i1 %71, label %72, label %81
  
  ; <label>:72                                      ; preds = %66
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115212
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %73 = load i32, i32* %sunkaddr17, align 4, !tbaa !45
    %74 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 3
    %75 = load i32, i32* %74, align 4, !tbaa !45
    %76 = ashr i32 %75, %6
    %77 = icmp eq i32 %73, %76
    br i1 %77, label %78, label %81
  
  ; <label>:78                                      ; preds = %72
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    %79 = load i8, i8* %sunkaddr20, align 4, !tbaa !60
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %78, %72, %66, %60, %53
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %.pre = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %.pre, i32 %i.05, i32 0
    %.pre10 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %82
  
  ; <label>:82                                      ; preds = %81, %78
    %83 = phi i32 [ %57, %78 ], [ %.pre10, %81 ]
    %84 = phi [4 x i32]* [ %55, %78 ], [ %.pre, %81 ]
    %85 = ashr i32 %83, %6
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115200
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    store i32 %85, i32* %sunkaddr26, align 4, !tbaa !45
    %86 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 1
    %87 = load i32, i32* %86, align 4, !tbaa !45
    %88 = ashr i32 %87, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115204
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    store i32 %88, i32* %sunkaddr29, align 4, !tbaa !45
    %89 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 2
    %90 = load i32, i32* %89, align 4, !tbaa !45
    %91 = ashr i32 %90, %6
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115208
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    store i32 %91, i32* %sunkaddr32, align 4, !tbaa !45
    %92 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 3
    %93 = load i32, i32* %92, align 4, !tbaa !45
    %94 = ashr i32 %93, %6
    %sunkaddr33 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr34 = add i32 %sunkaddr33, 115212
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %94, i32* %sunkaddr35, align 4, !tbaa !45
    %sunkaddr36 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 115224
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i8*
    store i8 1, i8* %sunkaddr38, align 4, !tbaa !60
    %95 = icmp sgt i32 %y0.0, %y1.0
    br i1 %95, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %82
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %109, %._crit_edge ]
    %96 = icmp sgt i32 %x0.0, %x1.0
    br i1 %96, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %106, %.lr.ph ], [ %x0.0, %.preheader ]
    %97 = trunc i32 %36 to i16
    %sunkaddr39 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr40 = add i32 %sunkaddr39, 115220
    %sunkaddr41 = inttoptr i32 %sunkaddr40 to i32*
    %98 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %98
    store i32 %ix.02, i32* %99, align 4, !tbaa !45
    %100 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %100
    store i32 %iy.03, i32* %101, align 4, !tbaa !45
    %102 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %102
    store i16 %97, i16* %103, align 2, !tbaa !47
    %104 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %105 = add i32 %104, 1
    store i32 %105, i32* %sunkaddr41, align 4, !tbaa !41
    %106 = add nsw i32 %ix.02, 1
    %107 = add i32 %106, -1
    %108 = icmp slt i32 %107, %x1.0
    br i1 %108, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %109 = add nsw i32 %iy.03, 1
    %110 = icmp slt i32 %iy.03, %y1.0
    br i1 %110, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %82
    %sunkaddr42 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr43 = add i32 %sunkaddr42, 115220
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %111 = load i32, i32* %sunkaddr44, align 4, !tbaa !41
    %112 = icmp ugt i32 %111, 2559
    br i1 %112, label %113, label %114
  
  ; <label>:113                                     ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %114
  
  ; <label>:114                                     ; preds = %113, %._crit_edge4, %20
    %115 = add i32 %i.05, 1
    %116 = icmp ugt i32 %115, %last
    br i1 %116, label %._crit_edge9, label %20
  
  ._crit_edge9:                                     ; preds = %114, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %6 = load float, float* %5, align 4, !tbaa !37
    %7 = fpext float %6 to double
    %8 = fcmp olt float %6, 1.000000e+00
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %0
    %10 = fcmp ogt float %6, 1.000000e+01
    br i1 %10, label %12, label %11
  
  ; <label>:11                                      ; preds = %9
    %phitmp = fadd double %7, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %12
  
  ; <label>:12                                      ; preds = %11, %9, %0
    %13 = phi i32 [ 1, %0 ], [ %phitmp1, %11 ], [ 10, %9 ]
    %14 = icmp ugt i32 %first, %last
    br i1 %14, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %12
    %15 = and i32 %13, 1
    %16 = sdiv i32 %13, 2
    %17 = add i32 %13, -1
    br label %18
  
  ; <label>:18                                      ; preds = %82, %.lr.ph7
    %i.05 = phi i32 [ %first, %.lr.ph7 ], [ %83, %82 ]
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %20 = load i8, i8* %19, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %82, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = icmp eq i32 %15, 0
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %25 = load float, float* %24, align 4, !tbaa !44
    %26 = fptosi float %25 to i32
    %27 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %28 = load float, float* %27, align 4, !tbaa !44
    %29 = fptosi float %28 to i32
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %31 = load float, float* %30, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %32 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %33 = fadd float %31, %32
    %34 = fptosi float %33 to i32
    br i1 %23, label %40, label %35
  
  ; <label>:35                                      ; preds = %22
    %36 = sub nsw i32 %26, %16
    %37 = add nsw i32 %26, %16
    %38 = sub nsw i32 %29, %16
    %39 = add nsw i32 %29, %16
    br label %51
  
  ; <label>:40                                      ; preds = %22
    %41 = sitofp i32 %26 to float
    %42 = fadd float %41, 5.000000e-01
    %43 = fptosi float %42 to i32
    %44 = sub nsw i32 %43, %16
    %45 = add i32 %17, %44
    %46 = sitofp i32 %29 to float
    %47 = fadd float %46, 5.000000e-01
    %48 = fptosi float %47 to i32
    %49 = sub nsw i32 %48, %16
    %50 = add i32 %17, %49
    br label %51
  
  ; <label>:51                                      ; preds = %40, %35
    %x0.0 = phi i32 [ %36, %35 ], [ %44, %40 ]
    %x1.0 = phi i32 [ %37, %35 ], [ %45, %40 ]
    %y0.0 = phi i32 [ %38, %35 ], [ %49, %40 ]
    %y1.0 = phi i32 [ %39, %35 ], [ %50, %40 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115216
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %52 = load i32, i32* %sunkaddr5, align 4, !tbaa !61
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 56452
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32**
    %53 = load i32*, i32** %sunkaddr8, align 4, !tbaa !48
    %54 = getelementptr inbounds i32, i32* %53, i32 %i.05
    %55 = load i32, i32* %54, align 4, !tbaa !45
    %56 = icmp eq i32 %52, %55
    br i1 %56, label %57, label %60
  
  ; <label>:57                                      ; preds = %51
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115224
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i8*
    %58 = load i8, i8* %sunkaddr11, align 4, !tbaa !60
    %59 = icmp eq i8 %58, 0
    br i1 %59, label %60, label %61
  
  ; <label>:60                                      ; preds = %57, %51
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr12 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 56452
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32**
    %.pre = load i32*, i32** %sunkaddr14, align 4, !tbaa !48
    %.phi.trans.insert = getelementptr inbounds i32, i32* %.pre, i32 %i.05
    %.pre9 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %61
  
  ; <label>:61                                      ; preds = %60, %57
    %62 = phi i32 [ %52, %57 ], [ %.pre9, %60 ]
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115216
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    store i32 %62, i32* %sunkaddr17, align 4, !tbaa !61
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    store i8 1, i8* %sunkaddr20, align 4, !tbaa !60
    %63 = icmp sgt i32 %y0.0, %y1.0
    br i1 %63, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %61
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %77, %._crit_edge ]
    %64 = icmp sgt i32 %x0.0, %x1.0
    br i1 %64, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %74, %.lr.ph ], [ %x0.0, %.preheader ]
    %65 = trunc i32 %34 to i16
    %sunkaddr21 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 115220
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to i32*
    %66 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %67 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %66
    store i32 %ix.02, i32* %67, align 4, !tbaa !45
    %68 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %69 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %68
    store i32 %iy.03, i32* %69, align 4, !tbaa !45
    %70 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %71 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %70
    store i16 %65, i16* %71, align 2, !tbaa !47
    %72 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %73 = add i32 %72, 1
    store i32 %73, i32* %sunkaddr23, align 4, !tbaa !41
    %74 = add nsw i32 %ix.02, 1
    %75 = add i32 %74, -1
    %76 = icmp slt i32 %75, %x1.0
    br i1 %76, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %77 = add nsw i32 %iy.03, 1
    %78 = icmp slt i32 %iy.03, %y1.0
    br i1 %78, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %61
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %79 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %80 = icmp ugt i32 %79, 2559
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %82
  
  ; <label>:82                                      ; preds = %81, %._crit_edge4, %18
    %83 = add i32 %i.05, 1
    %84 = icmp ugt i32 %83, %last
    br i1 %84, label %._crit_edge8, label %18
  
  ._crit_edge8:                                     ; preds = %82, %12
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %color = alloca [4 x float], align 4
    %texcoord = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !50
    %5 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 7
    %6 = load float, float* %5, align 4, !tbaa !62
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 8
    %8 = load float, float* %7, align 4, !tbaa !63
    %9 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 9
    %10 = load float, float* %9, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 10
    %12 = load float, float* %11, align 4, !tbaa !65
    %13 = icmp ugt i32 %first, %last
    br i1 %13, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %14 = shl i32 %first, 2
    %15 = shl i32 %first, 4
    %16 = mul i32 %first, 12
    %17 = add i32 %16, 24200
    br label %18
  
  ; <label>:18                                      ; preds = %93, %.lr.ph
    %lsr.iv41 = phi i32 [ %lsr.iv.next42, %93 ], [ %17, %.lr.ph ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %93 ], [ %15, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %93 ], [ %14, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %94, %93 ]
    %19 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep52 = getelementptr i8, i8* %19, i32 %i.01
    %scevgep53 = getelementptr i8, i8* %uglygep52, i32 65024
    %20 = load i8, i8* %scevgep53, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %93, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = bitcast [4 x float]* %texcoord to i8*
    %24 = bitcast [4 x float]* %color to i8*
    %25 = bitcast %struct.vertex_buffer* %2 to i8*
    call void @llvm.lifetime.start(i64 16, i8* %24) #4
    call void @llvm.lifetime.start(i64 16, i8* %23) #4
    %uglygep49 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4950 = bitcast i8* %uglygep49 to float*
    %scevgep51 = getelementptr float, float* %uglygep4950, i32 -2
    %26 = load float, float* %scevgep51, align 4, !tbaa !44
    %uglygep46 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4647 = bitcast i8* %uglygep46 to float*
    %scevgep48 = getelementptr float, float* %uglygep4647, i32 -1
    %27 = load float, float* %scevgep48, align 4, !tbaa !44
    %uglygep43 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4344 = bitcast i8* %uglygep43 to float*
    %28 = load float, float* %uglygep4344, align 4, !tbaa !44
    %29 = fdiv float %28, 6.553500e+04
    %uglygep38 = getelementptr i8, i8* %25, i32 %lsr.iv2
    %uglygep3839 = bitcast i8* %uglygep38 to float*
    %scevgep40 = getelementptr float, float* %uglygep3839, i32 4035
    %30 = load float, float* %scevgep40, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr, 43728
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %31 = load i32, i32* %sunkaddr55, align 4, !tbaa !66
    %32 = icmp eq i32 %31, 7425
    %sunkaddr56 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr57 = add i32 %sunkaddr56, 52416
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to [4 x i32]**
    %33 = load [4 x i32]*, [4 x i32]** %sunkaddr58, align 4, !tbaa !59
    %34 = bitcast [4 x i32]* %33 to i8*
    %uglygep36 = getelementptr i8, i8* %34, i32 %lsr.iv2
    %uglygep3637 = bitcast i8* %uglygep36 to i32*
    %35 = load i32, i32* %uglygep3637, align 4, !tbaa !45
    %36 = sitofp i32 %35 to float
    br i1 %32, label %37, label %53
  
  ; <label>:37                                      ; preds = %22
    %38 = bitcast [4 x i32]* %33 to i8*
    %39 = bitcast [4 x float]* %color to float*
    %40 = fmul float %36, 0x3F40000000000000
    %41 = fmul float %6, %40
    store float %41, float* %39, align 4, !tbaa !44
    %uglygep33 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3334 = bitcast i8* %uglygep33 to i32*
    %scevgep35 = getelementptr i32, i32* %uglygep3334, i32 1
    %42 = load i32, i32* %scevgep35, align 4, !tbaa !45
    %43 = sitofp i32 %42 to float
    %44 = fmul float %43, 0x3F40000000000000
    %45 = fmul float %8, %44
    %sunkaddr59 = ptrtoint [4 x float]* %color to i32
    %sunkaddr60 = add i32 %sunkaddr59, 4
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to float*
    store float %45, float* %sunkaddr61, align 4, !tbaa !44
    %uglygep30 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3031 = bitcast i8* %uglygep30 to i32*
    %scevgep32 = getelementptr i32, i32* %uglygep3031, i32 2
    %46 = load i32, i32* %scevgep32, align 4, !tbaa !45
    %47 = sitofp i32 %46 to float
    %48 = fmul float %47, 0x3F40000000000000
    %49 = fmul float %10, %48
    %sunkaddr62 = ptrtoint [4 x float]* %color to i32
    %sunkaddr63 = add i32 %sunkaddr62, 8
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    store float %49, float* %sunkaddr64, align 4, !tbaa !44
    %uglygep27 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep2728 = bitcast i8* %uglygep27 to i32*
    %scevgep29 = getelementptr i32, i32* %uglygep2728, i32 3
    %50 = load i32, i32* %scevgep29, align 4, !tbaa !45
    %51 = sitofp i32 %50 to float
    %52 = fmul float %51, 0x3F40000000000000
    br label %65
  
  ; <label>:53                                      ; preds = %22
    %54 = bitcast [4 x i32]* %33 to i8*
    %55 = bitcast [4 x float]* %color to float*
    %56 = fmul float %6, %36
    store float %56, float* %55, align 4, !tbaa !44
    %uglygep24 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2425 = bitcast i8* %uglygep24 to i32*
    %scevgep26 = getelementptr i32, i32* %uglygep2425, i32 1
    %57 = load i32, i32* %scevgep26, align 4, !tbaa !45
    %58 = sitofp i32 %57 to float
    %59 = fmul float %8, %58
    %sunkaddr65 = ptrtoint [4 x float]* %color to i32
    %sunkaddr66 = add i32 %sunkaddr65, 4
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to float*
    store float %59, float* %sunkaddr67, align 4, !tbaa !44
    %uglygep21 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2122 = bitcast i8* %uglygep21 to i32*
    %scevgep23 = getelementptr i32, i32* %uglygep2122, i32 2
    %60 = load i32, i32* %scevgep23, align 4, !tbaa !45
    %61 = sitofp i32 %60 to float
    %62 = fmul float %10, %61
    %sunkaddr68 = ptrtoint [4 x float]* %color to i32
    %sunkaddr69 = add i32 %sunkaddr68, 8
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to float*
    store float %62, float* %sunkaddr70, align 4, !tbaa !44
    %uglygep18 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep1819 = bitcast i8* %uglygep18 to i32*
    %scevgep20 = getelementptr i32, i32* %uglygep1819, i32 3
    %63 = load i32, i32* %scevgep20, align 4, !tbaa !45
    %64 = sitofp i32 %63 to float
    br label %65
  
  ; <label>:65                                      ; preds = %53, %37
    %.pn = phi float [ %64, %53 ], [ %52, %37 ]
    %66 = bitcast [4 x float]* %texcoord to float*
    %67 = bitcast %struct.vertex_buffer* %2 to i8*
    %storemerge = fmul float %12, %.pn
    %sunkaddr71 = ptrtoint [4 x float]* %color to i32
    %sunkaddr72 = add i32 %sunkaddr71, 12
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to float*
    store float %storemerge, float* %sunkaddr73, align 4, !tbaa !44
    %uglygep15 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 14243
    %68 = load float, float* %scevgep17, align 4, !tbaa !44
    %69 = fdiv float 1.000000e+00, %68
    %uglygep9 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep910 = bitcast i8* %uglygep9 to float*
    %scevgep11 = getelementptr float, float* %uglygep910, i32 14240
    %70 = load float, float* %scevgep11, align 4, !tbaa !44
    %71 = fmul float %70, %69
    store float %71, float* %66, align 4, !tbaa !44
    %uglygep6 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep67 = bitcast i8* %uglygep6 to float*
    %scevgep8 = getelementptr float, float* %uglygep67, i32 14241
    %72 = load float, float* %scevgep8, align 4, !tbaa !44
    %73 = fmul float %69, %72
    %sunkaddr74 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr75 = add i32 %sunkaddr74, 4
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to float*
    store float %73, float* %sunkaddr76, align 4, !tbaa !44
    %uglygep4 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep45 = bitcast i8* %uglygep4 to float*
    %scevgep = getelementptr float, float* %uglygep45, i32 14242
    %74 = load float, float* %scevgep, align 4, !tbaa !44
    %75 = fmul float %69, %74
    %sunkaddr77 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr78 = add i32 %sunkaddr77, 8
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to float*
    store float %75, float* %sunkaddr79, align 4, !tbaa !44
    %uglygep12 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1213 = bitcast i8* %uglygep12 to i32*
    %scevgep14 = getelementptr i32, i32* %uglygep1213, i32 14243
    %76 = load i32, i32* %scevgep14, align 4, !tbaa !44
    %sunkaddr80 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr81 = add i32 %sunkaddr80, 12
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i32*
    store i32 %76, i32* %sunkaddr82, align 4, !tbaa !44
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 55440
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to i32*
    %77 = load i32, i32* %sunkaddr85, align 4, !tbaa !67
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 55436
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to i32*
    %78 = load i32, i32* %sunkaddr88, align 4, !tbaa !68
    %79 = icmp ult i32 %77, %78
    br i1 %79, label %80, label %83
  
  ; <label>:80                                      ; preds = %65
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 55432
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to float**
    %81 = load float*, float** %sunkaddr91, align 4, !tbaa !69
    %82 = getelementptr inbounds float, float* %81, i32 %77
    store float 1.793000e+03, float* %82, align 4, !tbaa !44
    br label %83
  
  ; <label>:83                                      ; preds = %80, %65
    %84 = bitcast [4 x float]* %texcoord to float*
    %85 = bitcast [4 x float]* %color to float*
    %86 = bitcast [4 x float]* %texcoord to i8*
    %87 = bitcast [4 x float]* %color to i8*
    %88 = add i32 %77, 1
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 55440
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to i32*
    store i32 %88, i32* %sunkaddr94, align 4, !tbaa !67
    %sunkaddr95 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr96 = add i32 %sunkaddr95, 56452
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to i32**
    %89 = load i32*, i32** %sunkaddr97, align 4, !tbaa !48
    %90 = bitcast i32* %89 to i8*
    %uglygep = getelementptr i8, i8* %90, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %91 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %92 = uitofp i32 %91 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %26, float %27, float %29, float %30, float* nonnull %85, float %92, float* nonnull %84) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %86) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %87) #4
    br label %93
  
  ; <label>:93                                      ; preds = %83, %18
    %94 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next3 = add i32 %lsr.iv2, 16
    %lsr.iv.next42 = add i32 %lsr.iv41, 12
    %95 = icmp ugt i32 %94, %last
    br i1 %95, label %._crit_edge, label %18
  
  ._crit_edge:                                      ; preds = %93, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = icmp ugt i32 %first, %last
    br i1 %3, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %4 = mul i32 %first, 3
    %5 = add i32 %4, 2
    %scevgep = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 0, i32 1512, i32 %5
    %scevgep1 = bitcast float* %scevgep to %struct.vertex_buffer*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi %struct.vertex_buffer* [ %15, %13 ], [ %scevgep1, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %14, %13 ], [ %first, %.lr.ph.preheader ]
    %6 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep = getelementptr i8, i8* %6, i32 %i.01
    %scevgep4 = getelementptr i8, i8* %uglygep, i32 65024
    %7 = load i8, i8* %scevgep4, align 1, !tbaa !43
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %13, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    %10 = bitcast %struct.vertex_buffer* %lsr.iv to float*
    %11 = load float, float* %10, align 4, !tbaa !44
    %12 = fdiv float %11, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %12) #4
    br label %13
  
  ; <label>:13                                      ; preds = %9, %.lr.ph
    %14 = add i32 %i.01, 1
    %scevgep2 = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %lsr.iv, i32 0, i32 0, i32 0, i32 3
    %15 = bitcast float* %scevgep2 to %struct.vertex_buffer*
    %16 = icmp ugt i32 %14, %last
    br i1 %16, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #1
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 54136}
  !38 = !{!2, !8, i64 55736}
  !39 = !{!2, !3, i64 55808}
  !40 = !{!2, !3, i64 55812}
  !41 = !{!42, !8, i64 115220}
  !42 = !{!"pixel_buffer", !4, i64 0, !4, i64 15360, !4, i64 30720, !4, i64 38400, !4, i64 42240, !4, i64 46080, !4, i64 49920, !4, i64 53760, !4, i64 69120, !4, i64 84480, !4, i64 99840, !4, i64 115200, !8, i64 115216, !8, i64 115220, !4, i64 115224, !4, i64 115228}
  !43 = !{!4, !4, i64 0}
  !44 = !{!11, !11, i64 0}
  !45 = !{!8, !8, i64 0}
  !46 = !{!2, !11, i64 55776}
  !47 = !{!20, !20, i64 0}
  !48 = !{!49, !3, i64 56452}
  !49 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !50 = !{!2, !3, i64 2020}
  !51 = !{!52, !4, i64 0}
  !52 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !53 = !{!2, !4, i64 55740}
  !54 = !{!2, !4, i64 55816}
  !55 = !{!2, !3, i64 55788}
  !56 = !{!2, !3, i64 2160}
  !57 = !{!2, !4, i64 54132}
  !58 = !{!2, !8, i64 55784}
  !59 = !{!49, !3, i64 52416}
  !60 = !{!42, !4, i64 115224}
  !61 = !{!42, !8, i64 115216}
  !62 = !{!52, !11, i64 24}
  !63 = !{!52, !11, i64 28}
  !64 = !{!52, !11, i64 32}
  !65 = !{!52, !11, i64 36}
  !66 = !{!2, !4, i64 43728}
  !67 = !{!2, !8, i64 55440}
  !68 = !{!2, !8, i64 55436}
  !69 = !{!2, !3, i64 55432}

...
---
name:            null_points
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.points.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, {}*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [12 x i8] c"glPointSize\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_PointSize(%struct.gl_context* %ctx, float %size) #0 {
    %1 = fcmp ugt float %size, 0.000000e+00
    br i1 %1, label %3, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* %ctx, i32 signext 1281, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:3                                       ; preds = %0
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %5 = load i32, i32* %4, align 4, !tbaa !1
    %6 = icmp eq i32 %5, 6656
    br i1 %6, label %8, label %7
  
  ; <label>:7                                       ; preds = %3
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)) #4
    br label %13
  
  ; <label>:8                                       ; preds = %3
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    store float %size, float* %9, align 4, !tbaa !37
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 53
    %11 = load i32, i32* %10, align 4, !tbaa !38
    %12 = or i32 %11, 2
    store i32 %12, i32* %10, align 4, !tbaa !38
    br label %13
  
  ; <label>:13                                      ; preds = %8, %7, %2
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @size1_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 13
    %6 = load i32, i32* %5, align 4, !tbaa !41
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 2
    %9 = mul i32 %first, 12
    %10 = add i32 %9, 24192
    br label %11
  
  ; <label>:11                                      ; preds = %35, %.lr.ph
    %lsr.iv3 = phi i32 [ %lsr.iv.next4, %35 ], [ %10, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %35 ], [ %8, %.lr.ph ]
    %i.03 = phi i32 [ %first, %.lr.ph ], [ %36, %35 ]
    %pbcount.02 = phi i32 [ %6, %.lr.ph ], [ %pbcount.1, %35 ]
    %12 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep11 = getelementptr i8, i8* %12, i32 %lsr.iv3
    %uglygep2 = getelementptr i8, i8* %12, i32 %i.03
    %scevgep = getelementptr i8, i8* %uglygep2, i32 65024
    %13 = load i8, i8* %scevgep, align 1, !tbaa !43
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %35, label %15
  
  ; <label>:15                                      ; preds = %11
    %16 = bitcast i8* %uglygep11 to float*
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %18 = load float, float* %16, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %20 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %pbcount.02
    store i32 %19, i32* %20, align 4, !tbaa !45
    %uglygep8 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep89 = bitcast i8* %uglygep8 to float*
    %scevgep10 = getelementptr float, float* %uglygep89, i32 1
    %21 = load float, float* %scevgep10, align 4, !tbaa !44
    %22 = fptosi float %21 to i32
    %23 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %pbcount.02
    store i32 %22, i32* %23, align 4, !tbaa !45
    %uglygep5 = getelementptr i8, i8* %17, i32 %lsr.iv3
    %uglygep56 = bitcast i8* %uglygep5 to float*
    %scevgep7 = getelementptr float, float* %uglygep56, i32 2
    %24 = load float, float* %scevgep7, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr, 55776
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to float*
    %25 = load float, float* %sunkaddr14, align 4, !tbaa !46
    %26 = fadd float %24, %25
    %27 = fptosi float %26 to i32
    %28 = trunc i32 %27 to i16
    %29 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %pbcount.02
    store i16 %28, i16* %29, align 2, !tbaa !47
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 56452
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32**
    %30 = load i32*, i32** %sunkaddr17, align 4, !tbaa !48
    %31 = bitcast i32* %30 to i8*
    %uglygep = getelementptr i8, i8* %31, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %32 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %33 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 7, i32 %pbcount.02
    store i32 %32, i32* %33, align 4, !tbaa !45
    %34 = add i32 %pbcount.02, 1
    br label %35
  
  ; <label>:35                                      ; preds = %15, %11
    %pbcount.1 = phi i32 [ %34, %15 ], [ %pbcount.02, %11 ]
    %36 = add i32 %i.03, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next4 = add i32 %lsr.iv3, 12
    %37 = icmp ugt i32 %36, %last
    br i1 %37, label %._crit_edge, label %11
  
  ._crit_edge:                                      ; preds = %35, %0
    %pbcount.0.lcssa = phi i32 [ %6, %0 ], [ %pbcount.1, %35 ]
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115220
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    store i32 %pbcount.0.lcssa, i32* %sunkaddr20, align 4, !tbaa !41
    %38 = icmp ugt i32 %pbcount.0.lcssa, 2559
    br i1 %38, label %39, label %40
  
  ; <label>:39                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %40
  
  ; <label>:40                                      ; preds = %39, %._crit_edge
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  declare void @gl_flush_pb(%struct.gl_context*) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_set_point_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !50
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !51
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !53
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %44
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !54
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @null_points, void (%struct.gl_context*, i32, i32)** %13, align 4, !tbaa !55
    br label %48
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 33
    %16 = load void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32)** %15, align 4, !tbaa !56
    %17 = icmp eq void (%struct.gl_context*, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %16, void (%struct.gl_context*, i32, i32)** %19, align 4, !tbaa !55
    br label %48
  
  ; <label>:20                                      ; preds = %14
    %21 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 0
    %22 = load i8, i8* %21, align 4, !tbaa !57
    %23 = icmp eq i8 %22, 0
    %24 = icmp eq i8 %4, 0
    %or.cond = or i1 %24, %23
    br i1 %or.cond, label %27, label %25
  
  ; <label>:25                                      ; preds = %20
    %26 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @antialiased_rgba_points, void (%struct.gl_context*, i32, i32)** %26, align 4, !tbaa !55
    br label %48
  
  ; <label>:27                                      ; preds = %20
    %28 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %32, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* @textured_rgba_points, void (%struct.gl_context*, i32, i32)** %31, align 4, !tbaa !55
    br label %48
  
  ; <label>:32                                      ; preds = %27
    %33 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %34 = load float, float* %33, align 4, !tbaa !37
    %35 = fcmp oeq float %34, 1.000000e+00
    br i1 %35, label %36, label %40
  
  ; <label>:36                                      ; preds = %32
    %37 = icmp ne i8 %4, 0
    %38 = select i1 %37, void (%struct.gl_context*, i32, i32)* @size1_rgba_points, void (%struct.gl_context*, i32, i32)* @size1_ci_points
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %38, void (%struct.gl_context*, i32, i32)** %39, align 4, !tbaa !55
    br label %48
  
  ; <label>:40                                      ; preds = %32
    %41 = icmp ne i8 %4, 0
    %42 = select i1 %41, void (%struct.gl_context*, i32, i32)* @general_rgba_points, void (%struct.gl_context*, i32, i32)* @general_ci_points
    %43 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 69
    store void (%struct.gl_context*, i32, i32)* %42, void (%struct.gl_context*, i32, i32)** %43, align 4, !tbaa !55
    br label %48
  
  ; <label>:44                                      ; preds = %0
    %45 = icmp eq i32 %6, 7169
    br i1 %45, label %46, label %47
  
  ; <label>:46                                      ; preds = %44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55788
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @feedback_points, void (%struct.gl_context*, i32, i32)** %sunkaddr2, align 4, !tbaa !55
    br label %48
  
  ; <label>:47                                      ; preds = %44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55788
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32)**
    store void (%struct.gl_context*, i32, i32)* @select_points, void (%struct.gl_context*, i32, i32)** %sunkaddr5, align 4, !tbaa !55
    br label %48
  
  ; <label>:48                                      ; preds = %47, %46, %40, %36, %30, %25, %18, %12
    ret void
  }
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_points(%struct.gl_context* nocapture %ctx, i32 signext %first, i32 signext %last) #3 {
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @antialiased_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fcmp olt float %8, 1.000000e+00
    br i1 %9, label %13, label %10
  
  ; <label>:10                                      ; preds = %0
    %11 = fcmp ogt float %8, 1.000000e+01
    br i1 %11, label %13, label %12
  
  ; <label>:12                                      ; preds = %10
    %phitmp16 = fmul float %8, 5.000000e-01
    br label %13
  
  ; <label>:13                                      ; preds = %12, %10, %0
    %14 = phi float [ 5.000000e-01, %0 ], [ %phitmp16, %12 ], [ 5.000000e+00, %10 ]
    %15 = fadd float %14, 0xBFE6A09020000000
    %16 = fadd float %14, 0x3FE6A09020000000
    %17 = fmul float %15, %15
    %18 = fmul float %16, %16
    %19 = fsub float %18, %17
    %20 = fdiv float 2.560000e+02, %19
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %.preheader17, label %.preheader19
  
  .preheader19:                                     ; preds = %13
    %23 = icmp ugt i32 %first, %last
    br i1 %23, label %.loopexit, label %.lr.ph36
  
  .lr.ph36:                                         ; preds = %.preheader19
    br label %25
  
  .preheader17:                                     ; preds = %13
    %24 = icmp ugt i32 %first, %last
    br i1 %24, label %.loopexit, label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %.preheader17
    br label %134
  
  ; <label>:25                                      ; preds = %131, %.lr.ph36
    %i.033 = phi i32 [ %first, %.lr.ph36 ], [ %132, %131 ]
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.033
    %27 = load i8, i8* %26, align 1, !tbaa !43
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %131, label %29
  
  ; <label>:29                                      ; preds = %25
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 0
    %31 = load float, float* %30, align 4, !tbaa !44
    %32 = fsub float %31, %14
    %33 = fptosi float %32 to i32
    %34 = fadd float %14, %31
    %35 = fptosi float %34 to i32
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 1
    %37 = load float, float* %36, align 4, !tbaa !44
    %38 = fsub float %37, %14
    %39 = fptosi float %38 to i32
    %40 = fadd float %14, %37
    %41 = fptosi float %40 to i32
    %sunkaddr = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr1 = add i32 %sunkaddr, 52416
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to [4 x i32]**
    %42 = load [4 x i32]*, [4 x i32]** %sunkaddr2, align 4, !tbaa !59
    %43 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 0
    %44 = load float, float* %43, align 4, !tbaa !44
    %45 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 3
    %46 = load float, float* %45, align 4, !tbaa !44
    %47 = fdiv float %44, %46
    %48 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 1
    %49 = load float, float* %48, align 4, !tbaa !44
    %50 = fdiv float %49, %46
    %51 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.033, i32 2
    %52 = load float, float* %51, align 4, !tbaa !44
    %53 = fdiv float %52, %46
    %54 = icmp sgt i32 %39, %41
    br i1 %54, label %._crit_edge32, label %.preheader18.lr.ph
  
  .preheader18.lr.ph:                               ; preds = %29
    %55 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 2
    %56 = load i32, i32* %55, align 4, !tbaa !45
    %57 = ashr i32 %56, %6
    %58 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !45
    %60 = ashr i32 %59, %6
    %61 = getelementptr inbounds [4 x i32], [4 x i32]* %42, i32 %i.033, i32 0
    %62 = load i32, i32* %61, align 4, !tbaa !45
    %63 = ashr i32 %62, %6
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.033, i32 2
    %65 = load float, float* %64, align 4, !tbaa !44
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55776
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %66 = load float, float* %sunkaddr5, align 4, !tbaa !46
    %67 = fadd float %65, %66
    %68 = fptosi float %67 to i32
    br label %.preheader18
  
  .preheader18:                                     ; preds = %._crit_edge30, %.preheader18.lr.ph
    %y.031 = phi i32 [ %39, %.preheader18.lr.ph ], [ %126, %._crit_edge30 ]
    %69 = icmp sgt i32 %33, %35
    br i1 %69, label %._crit_edge30, label %.lr.ph29
  
  .lr.ph29:                                         ; preds = %.preheader18
    %70 = sitofp i32 %y.031 to float
    br label %71
  
  ; <label>:71                                      ; preds = %122, %.lr.ph29
    %x.028 = phi i32 [ %33, %.lr.ph29 ], [ %123, %122 ]
    %72 = sitofp i32 %x.028 to float
    %73 = load float, float* %30, align 4, !tbaa !44
    %74 = fsub float %72, %73
    %75 = load float, float* %36, align 4, !tbaa !44
    %76 = fsub float %70, %75
    %77 = fmul float %74, %74
    %78 = fmul float %76, %76
    %79 = fadd float %77, %78
    %80 = fcmp olt float %79, %18
    br i1 %80, label %81, label %122
  
  ; <label>:81                                      ; preds = %71
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %82 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %83 = getelementptr inbounds [4 x i32], [4 x i32]* %82, i32 %i.033, i32 3
    %84 = load i32, i32* %83, align 4, !tbaa !45
    %85 = ashr i32 %84, %6
    %86 = fcmp ult float %79, %17
    br i1 %86, label %94, label %87
  
  ; <label>:87                                      ; preds = %81
    %88 = fsub float %79, %17
    %89 = fmul float %20, %88
    %90 = fsub float 2.560000e+02, %89
    %91 = fptosi float %90 to i32
    %92 = mul nsw i32 %85, %91
    %93 = ashr i32 %92, 8
    br label %94
  
  ; <label>:94                                      ; preds = %87, %81
    %alpha.0 = phi i32 [ %93, %87 ], [ %85, %81 ]
    %95 = trunc i32 %57 to i8
    %96 = trunc i32 %60 to i8
    %97 = trunc i32 %63 to i8
    %98 = trunc i32 %68 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %99 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %100 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %99
    store i32 %x.028, i32* %100, align 4, !tbaa !45
    %101 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %102 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %101
    store i32 %y.031, i32* %102, align 4, !tbaa !45
    %103 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %104 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %103
    store i16 %98, i16* %104, align 2, !tbaa !47
    %105 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %106 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %105
    store i8 %97, i8* %106, align 1, !tbaa !43
    %107 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %108 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %107
    store i8 %96, i8* %108, align 1, !tbaa !43
    %109 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %109
    store i8 %95, i8* %110, align 1, !tbaa !43
    %111 = trunc i32 %alpha.0 to i8
    %112 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %113 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %112
    store i8 %111, i8* %113, align 1, !tbaa !43
    %114 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %115 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %114
    store float %47, float* %115, align 4, !tbaa !44
    %116 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %117 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %116
    store float %50, float* %117, align 4, !tbaa !44
    %118 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %119 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %118
    store float %53, float* %119, align 4, !tbaa !44
    %120 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %121 = add i32 %120, 1
    store i32 %121, i32* %sunkaddr11, align 4, !tbaa !41
    br label %122
  
  ; <label>:122                                     ; preds = %94, %71
    %123 = add nsw i32 %x.028, 1
    %124 = add i32 %123, -1
    %125 = icmp slt i32 %124, %35
    br i1 %125, label %71, label %._crit_edge30
  
  ._crit_edge30:                                    ; preds = %122, %.preheader18
    %126 = add nsw i32 %y.031, 1
    %127 = icmp slt i32 %y.031, %41
    br i1 %127, label %.preheader18, label %._crit_edge32
  
  ._crit_edge32:                                    ; preds = %._crit_edge30, %29
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %128 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %129 = icmp ugt i32 %128, 2559
    br i1 %129, label %130, label %131
  
  ; <label>:130                                     ; preds = %._crit_edge32
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %131
  
  ; <label>:131                                     ; preds = %130, %._crit_edge32, %25
    %132 = add i32 %i.033, 1
    %133 = icmp ugt i32 %132, %last
    br i1 %133, label %.loopexit, label %25
  
  ; <label>:134                                     ; preds = %223, %.lr.ph27
    %i.124 = phi i32 [ %first, %.lr.ph27 ], [ %224, %223 ]
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.124
    %136 = load i8, i8* %135, align 1, !tbaa !43
    %137 = icmp eq i8 %136, 0
    br i1 %137, label %223, label %138
  
  ; <label>:138                                     ; preds = %134
    %139 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 0
    %140 = load float, float* %139, align 4, !tbaa !44
    %141 = fsub float %140, %14
    %142 = fptosi float %141 to i32
    %143 = fadd float %14, %140
    %144 = fptosi float %143 to i32
    %145 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 1
    %146 = load float, float* %145, align 4, !tbaa !44
    %147 = fsub float %146, %14
    %148 = fptosi float %147 to i32
    %149 = fadd float %14, %146
    %150 = fptosi float %149 to i32
    %sunkaddr15 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 52416
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to [4 x i32]**
    %151 = load [4 x i32]*, [4 x i32]** %sunkaddr17, align 4, !tbaa !59
    %152 = icmp sgt i32 %148, %150
    br i1 %152, label %._crit_edge23, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %138
    %153 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 2
    %154 = load i32, i32* %153, align 4, !tbaa !45
    %155 = ashr i32 %154, %6
    %156 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 1
    %157 = load i32, i32* %156, align 4, !tbaa !45
    %158 = ashr i32 %157, %6
    %159 = getelementptr inbounds [4 x i32], [4 x i32]* %151, i32 %i.124, i32 0
    %160 = load i32, i32* %159, align 4, !tbaa !45
    %161 = ashr i32 %160, %6
    %162 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.124, i32 2
    %163 = load float, float* %162, align 4, !tbaa !44
    %sunkaddr18 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr19 = add i32 %sunkaddr18, 55776
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    %164 = load float, float* %sunkaddr20, align 4, !tbaa !46
    %165 = fadd float %163, %164
    %166 = fptosi float %165 to i32
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %y6.022 = phi i32 [ %148, %.preheader.lr.ph ], [ %218, %._crit_edge ]
    %167 = icmp sgt i32 %142, %144
    br i1 %167, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader
    %168 = sitofp i32 %y6.022 to float
    br label %169
  
  ; <label>:169                                     ; preds = %214, %.lr.ph
    %x5.021 = phi i32 [ %142, %.lr.ph ], [ %215, %214 ]
    %170 = sitofp i32 %x5.021 to float
    %171 = load float, float* %139, align 4, !tbaa !44
    %172 = fsub float %170, %171
    %173 = load float, float* %145, align 4, !tbaa !44
    %174 = fsub float %168, %173
    %175 = fmul float %172, %172
    %176 = fmul float %174, %174
    %177 = fadd float %175, %176
    %178 = fcmp olt float %177, %18
    br i1 %178, label %179, label %214
  
  ; <label>:179                                     ; preds = %169
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %180 = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %181 = getelementptr inbounds [4 x i32], [4 x i32]* %180, i32 %i.124, i32 3
    %182 = load i32, i32* %181, align 4, !tbaa !45
    %183 = ashr i32 %182, %6
    %184 = fcmp ult float %177, %17
    br i1 %184, label %192, label %185
  
  ; <label>:185                                     ; preds = %179
    %186 = fsub float %177, %17
    %187 = fmul float %20, %186
    %188 = fsub float 2.560000e+02, %187
    %189 = fptosi float %188 to i32
    %190 = mul nsw i32 %183, %189
    %191 = ashr i32 %190, 8
    br label %192
  
  ; <label>:192                                     ; preds = %185, %179
    %alpha11.0 = phi i32 [ %191, %185 ], [ %183, %179 ]
    %193 = trunc i32 %155 to i8
    %194 = trunc i32 %158 to i8
    %195 = trunc i32 %161 to i8
    %196 = trunc i32 %166 to i16
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %197 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %198 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %197
    store i32 %x5.021, i32* %198, align 4, !tbaa !45
    %199 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %200 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %199
    store i32 %y6.022, i32* %200, align 4, !tbaa !45
    %201 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %202 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %201
    store i16 %196, i16* %202, align 2, !tbaa !47
    %203 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %204 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %203
    store i8 %195, i8* %204, align 1, !tbaa !43
    %205 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %206 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %205
    store i8 %194, i8* %206, align 1, !tbaa !43
    %207 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %208 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %207
    store i8 %193, i8* %208, align 1, !tbaa !43
    %209 = trunc i32 %alpha11.0 to i8
    %210 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %211 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %210
    store i8 %209, i8* %211, align 1, !tbaa !43
    %212 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %213 = add i32 %212, 1
    store i32 %213, i32* %sunkaddr26, align 4, !tbaa !41
    br label %214
  
  ; <label>:214                                     ; preds = %192, %169
    %215 = add nsw i32 %x5.021, 1
    %216 = add i32 %215, -1
    %217 = icmp slt i32 %216, %144
    br i1 %217, label %169, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %214, %.preheader
    %218 = add nsw i32 %y6.022, 1
    %219 = icmp slt i32 %y6.022, %150
    br i1 %219, label %.preheader, label %._crit_edge23
  
  ._crit_edge23:                                    ; preds = %._crit_edge, %138
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %220 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %221 = icmp ugt i32 %220, 2559
    br i1 %221, label %222, label %223
  
  ; <label>:222                                     ; preds = %._crit_edge23
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %223
  
  ; <label>:223                                     ; preds = %222, %._crit_edge23, %134
    %224 = add i32 %i.124, 1
    %225 = icmp ugt i32 %224, %last
    br i1 %225, label %.loopexit, label %134
  
  .loopexit:                                        ; preds = %131, %223, %.preheader17, %.preheader19
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #1
  
  ; Function Attrs: nounwind
  define internal void @textured_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %0
    br label %8
  
  ; <label>:8                                       ; preds = %118, %.lr.ph7
    %i.04 = phi i32 [ %first, %.lr.ph7 ], [ %119, %118 ]
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.04
    %10 = load i8, i8* %9, align 1, !tbaa !43
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %118, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 0
    %14 = load float, float* %13, align 4, !tbaa !44
    %15 = fptosi float %14 to i32
    %16 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 1
    %17 = load float, float* %16, align 4, !tbaa !44
    %18 = fptosi float %17 to i32
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.04, i32 2
    %20 = load float, float* %19, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %21 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %22 = fadd float %20, %21
    %23 = fptosi float %22 to i32
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54136
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to float*
    %24 = load float, float* %sunkaddr5, align 4, !tbaa !37
    %25 = fpext float %24 to double
    %26 = fcmp olt float %24, 1.000000e+00
    br i1 %26, label %30, label %27
  
  ; <label>:27                                      ; preds = %12
    %28 = fcmp ogt float %24, 1.000000e+01
    br i1 %28, label %30, label %29
  
  ; <label>:29                                      ; preds = %27
    br label %30
  
  ; <label>:30                                      ; preds = %29, %27, %12
    %31 = phi double [ 1.000000e+00, %12 ], [ %25, %29 ], [ 1.000000e+01, %27 ]
    %32 = fadd double %31, 5.000000e-01
    %33 = fptosi double %32 to i32
    %34 = icmp slt i32 %33, 1
    %. = select i1 %34, i32 1, i32 %33
    %35 = and i32 %., 1
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %43, label %37
  
  ; <label>:37                                      ; preds = %30
    %38 = sdiv i32 %., 2
    %39 = sub nsw i32 %15, %38
    %40 = add nsw i32 %38, %15
    %41 = sub nsw i32 %18, %38
    %42 = add nsw i32 %38, %18
    br label %56
  
  ; <label>:43                                      ; preds = %30
    %44 = sitofp i32 %15 to float
    %45 = fadd float %44, 5.000000e-01
    %46 = fptosi float %45 to i32
    %47 = sdiv i32 %., 2
    %48 = sub nsw i32 %46, %47
    %49 = add i32 %., -1
    %50 = add i32 %49, %48
    %51 = sitofp i32 %18 to float
    %52 = fadd float %51, 5.000000e-01
    %53 = fptosi float %52 to i32
    %54 = sub nsw i32 %53, %47
    %55 = add i32 %49, %54
    br label %56
  
  ; <label>:56                                      ; preds = %43, %37
    %y1.0 = phi i32 [ %42, %37 ], [ %55, %43 ]
    %y0.0 = phi i32 [ %41, %37 ], [ %54, %43 ]
    %x1.0 = phi i32 [ %40, %37 ], [ %50, %43 ]
    %x0.0 = phi i32 [ %39, %37 ], [ %48, %43 ]
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %57 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %58 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 0
    %59 = load float, float* %58, align 4, !tbaa !44
    %60 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 3
    %61 = load float, float* %60, align 4, !tbaa !44
    %62 = fdiv float %59, %61
    %63 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 1
    %64 = load float, float* %63, align 4, !tbaa !44
    %65 = fdiv float %64, %61
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %i.04, i32 2
    %67 = load float, float* %66, align 4, !tbaa !44
    %68 = fdiv float %67, %61
    %69 = icmp sgt i32 %y0.0, %y1.0
    br i1 %69, label %._crit_edge3, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %56
    %70 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 3
    %71 = load i32, i32* %70, align 4, !tbaa !45
    %72 = ashr i32 %71, %6
    %73 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 2
    %74 = load i32, i32* %73, align 4, !tbaa !45
    %75 = ashr i32 %74, %6
    %76 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 1
    %77 = load i32, i32* %76, align 4, !tbaa !45
    %78 = ashr i32 %77, %6
    %79 = getelementptr inbounds [4 x i32], [4 x i32]* %57, i32 %i.04, i32 0
    %80 = load i32, i32* %79, align 4, !tbaa !45
    %81 = ashr i32 %80, %6
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.02 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %113, %._crit_edge ]
    %82 = icmp sgt i32 %x0.0, %x1.0
    br i1 %82, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.01 = phi i32 [ %110, %.lr.ph ], [ %x0.0, %.preheader ]
    %83 = trunc i32 %72 to i8
    %84 = trunc i32 %75 to i8
    %85 = trunc i32 %78 to i8
    %86 = trunc i32 %81 to i8
    %87 = trunc i32 %23 to i16
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115220
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %88 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %89 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %88
    store i32 %ix.01, i32* %89, align 4, !tbaa !45
    %90 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %91 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %90
    store i32 %iy.02, i32* %91, align 4, !tbaa !45
    %92 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %93 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %92
    store i16 %87, i16* %93, align 2, !tbaa !47
    %94 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %95 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %94
    store i8 %86, i8* %95, align 1, !tbaa !43
    %96 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %97 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %96
    store i8 %85, i8* %97, align 1, !tbaa !43
    %98 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %98
    store i8 %84, i8* %99, align 1, !tbaa !43
    %100 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %100
    store i8 %83, i8* %101, align 1, !tbaa !43
    %102 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 8, i32 %102
    store float %62, float* %103, align 4, !tbaa !44
    %104 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %105 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 9, i32 %104
    store float %65, float* %105, align 4, !tbaa !44
    %106 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %107 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 10, i32 %106
    store float %68, float* %107, align 4, !tbaa !44
    %108 = load i32, i32* %sunkaddr11, align 4, !tbaa !41
    %109 = add i32 %108, 1
    store i32 %109, i32* %sunkaddr11, align 4, !tbaa !41
    %110 = add nsw i32 %ix.01, 1
    %111 = add i32 %110, -1
    %112 = icmp slt i32 %111, %x1.0
    br i1 %112, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %113 = add nsw i32 %iy.02, 1
    %114 = icmp slt i32 %iy.02, %y1.0
    br i1 %114, label %.preheader, label %._crit_edge3
  
  ._crit_edge3:                                     ; preds = %._crit_edge, %56
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115220
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %115 = load i32, i32* %sunkaddr14, align 4, !tbaa !41
    %116 = icmp ugt i32 %115, 2559
    br i1 %116, label %117, label %118
  
  ; <label>:117                                     ; preds = %._crit_edge3
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %118
  
  ; <label>:118                                     ; preds = %117, %._crit_edge3, %8
    %119 = add i32 %i.04, 1
    %120 = icmp ugt i32 %119, %last
    br i1 %120, label %._crit_edge8, label %8
  
  ._crit_edge8:                                     ; preds = %118, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @size1_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = icmp ugt i32 %first, %last
    br i1 %7, label %.._crit_edge_crit_edge, label %.lr.ph
  
  .._crit_edge_crit_edge:                           ; preds = %0
    br label %._crit_edge
  
  .lr.ph:                                           ; preds = %0
    %8 = shl i32 %first, 4
    %9 = add i32 %8, 8
    %10 = mul i32 %first, 12
    %11 = add i32 %10, 24192
    br label %12
  
  ; <label>:12                                      ; preds = %57, %.lr.ph
    %lsr.iv10 = phi i32 [ %lsr.iv.next11, %57 ], [ %11, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %57 ], [ %9, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %58, %57 ]
    %13 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep20 = getelementptr i8, i8* %13, i32 %i.01
    %scevgep21 = getelementptr i8, i8* %uglygep20, i32 65024
    %14 = load i8, i8* %scevgep21, align 1, !tbaa !43
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %57, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep18 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1819 = bitcast i8* %uglygep18 to float*
    %18 = load float, float* %uglygep1819, align 4, !tbaa !44
    %19 = fptosi float %18 to i32
    %uglygep15 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 1
    %20 = load float, float* %scevgep17, align 4, !tbaa !44
    %21 = fptosi float %20 to i32
    %uglygep12 = getelementptr i8, i8* %17, i32 %lsr.iv10
    %uglygep1213 = bitcast i8* %uglygep12 to float*
    %scevgep14 = getelementptr float, float* %uglygep1213, i32 2
    %22 = load float, float* %scevgep14, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr, 55776
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %23 = load float, float* %sunkaddr23, align 4, !tbaa !46
    %24 = fadd float %22, %23
    %25 = fptosi float %24 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %26 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !59
    %27 = bitcast [4 x i32]* %26 to i8*
    %uglygep7 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    %scevgep9 = getelementptr i32, i32* %uglygep78, i32 -2
    %28 = load i32, i32* %scevgep9, align 4, !tbaa !45
    %29 = ashr i32 %28, %6
    %uglygep4 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep45 = bitcast i8* %uglygep4 to i32*
    %scevgep6 = getelementptr i32, i32* %uglygep45, i32 -1
    %30 = load i32, i32* %scevgep6, align 4, !tbaa !45
    %31 = ashr i32 %30, %6
    %uglygep2 = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep23 = bitcast i8* %uglygep2 to i32*
    %32 = load i32, i32* %uglygep23, align 4, !tbaa !45
    %33 = ashr i32 %32, %6
    %uglygep = getelementptr i8, i8* %27, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %scevgep = getelementptr i32, i32* %uglygep1, i32 1
    %34 = load i32, i32* %scevgep, align 4, !tbaa !45
    %35 = ashr i32 %34, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115220
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    %36 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %37 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %36
    store i32 %19, i32* %37, align 4, !tbaa !45
    %38 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %39 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %38
    store i32 %21, i32* %39, align 4, !tbaa !45
    %40 = trunc i32 %25 to i16
    %41 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %42 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %41
    store i16 %40, i16* %42, align 2, !tbaa !47
    %43 = trunc i32 %29 to i8
    %44 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %45 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 3, i32 %44
    store i8 %43, i8* %45, align 1, !tbaa !43
    %46 = trunc i32 %31 to i8
    %47 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %48 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 4, i32 %47
    store i8 %46, i8* %48, align 1, !tbaa !43
    %49 = trunc i32 %33 to i8
    %50 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %51 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 5, i32 %50
    store i8 %49, i8* %51, align 1, !tbaa !43
    %52 = trunc i32 %35 to i8
    %53 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %54 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 6, i32 %53
    store i8 %52, i8* %54, align 1, !tbaa !43
    %55 = load i32, i32* %sunkaddr29, align 4, !tbaa !41
    %56 = add i32 %55, 1
    store i32 %56, i32* %sunkaddr29, align 4, !tbaa !41
    br label %57
  
  ; <label>:57                                      ; preds = %16, %12
    %58 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 16
    %lsr.iv.next11 = add i32 %lsr.iv10, 12
    %59 = icmp ugt i32 %58, %last
    br i1 %59, label %._crit_edge, label %12
  
  ._crit_edge:                                      ; preds = %57, %.._crit_edge_crit_edge
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115220
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    %60 = load i32, i32* %sunkaddr32, align 4, !tbaa !41
    %61 = icmp ugt i32 %60, 2559
    br i1 %61, label %62, label %63
  
  ; <label>:62                                      ; preds = %._crit_edge
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %63
  
  ; <label>:63                                      ; preds = %62, %._crit_edge
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_rgba_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 68
    %6 = load i32, i32* %5, align 4, !tbaa !58
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %8 = load float, float* %7, align 4, !tbaa !37
    %9 = fpext float %8 to double
    %10 = fcmp olt float %8, 1.000000e+00
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    %12 = fcmp ogt float %8, 1.000000e+01
    br i1 %12, label %14, label %13
  
  ; <label>:13                                      ; preds = %11
    %phitmp = fadd double %9, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %14
  
  ; <label>:14                                      ; preds = %13, %11, %0
    %15 = phi i32 [ 1, %0 ], [ %phitmp1, %13 ], [ 10, %11 ]
    %16 = icmp ugt i32 %first, %last
    br i1 %16, label %._crit_edge9, label %.lr.ph8
  
  .lr.ph8:                                          ; preds = %14
    %17 = and i32 %15, 1
    %18 = sdiv i32 %15, 2
    %19 = add i32 %15, -1
    br label %20
  
  ; <label>:20                                      ; preds = %114, %.lr.ph8
    %i.05 = phi i32 [ %first, %.lr.ph8 ], [ %115, %114 ]
    %21 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %22 = load i8, i8* %21, align 1, !tbaa !43
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %114, label %24
  
  ; <label>:24                                      ; preds = %20
    %25 = icmp eq i32 %17, 0
    %26 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %27 = load float, float* %26, align 4, !tbaa !44
    %28 = fptosi float %27 to i32
    %29 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %30 = load float, float* %29, align 4, !tbaa !44
    %31 = fptosi float %30 to i32
    %32 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %33 = load float, float* %32, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %34 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %35 = fadd float %33, %34
    %36 = fptosi float %35 to i32
    br i1 %25, label %42, label %37
  
  ; <label>:37                                      ; preds = %24
    %38 = sub nsw i32 %28, %18
    %39 = add nsw i32 %28, %18
    %40 = sub nsw i32 %31, %18
    %41 = add nsw i32 %31, %18
    br label %53
  
  ; <label>:42                                      ; preds = %24
    %43 = sitofp i32 %28 to float
    %44 = fadd float %43, 5.000000e-01
    %45 = fptosi float %44 to i32
    %46 = sub nsw i32 %45, %18
    %47 = add i32 %19, %46
    %48 = sitofp i32 %31 to float
    %49 = fadd float %48, 5.000000e-01
    %50 = fptosi float %49 to i32
    %51 = sub nsw i32 %50, %18
    %52 = add i32 %19, %51
    br label %53
  
  ; <label>:53                                      ; preds = %42, %37
    %x0.0 = phi i32 [ %38, %37 ], [ %46, %42 ]
    %x1.0 = phi i32 [ %39, %37 ], [ %47, %42 ]
    %y0.0 = phi i32 [ %40, %37 ], [ %51, %42 ]
    %y1.0 = phi i32 [ %41, %37 ], [ %52, %42 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115200
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %54 = load i32, i32* %sunkaddr5, align 4, !tbaa !45
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 52416
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to [4 x i32]**
    %55 = load [4 x i32]*, [4 x i32]** %sunkaddr8, align 4, !tbaa !59
    %56 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 0
    %57 = load i32, i32* %56, align 4, !tbaa !45
    %58 = ashr i32 %57, %6
    %59 = icmp eq i32 %54, %58
    br i1 %59, label %60, label %81
  
  ; <label>:60                                      ; preds = %53
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115204
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    %61 = load i32, i32* %sunkaddr11, align 4, !tbaa !45
    %62 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !45
    %64 = ashr i32 %63, %6
    %65 = icmp eq i32 %61, %64
    br i1 %65, label %66, label %81
  
  ; <label>:66                                      ; preds = %60
    %sunkaddr12 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 115208
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %67 = load i32, i32* %sunkaddr14, align 4, !tbaa !45
    %68 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 2
    %69 = load i32, i32* %68, align 4, !tbaa !45
    %70 = ashr i32 %69, %6
    %71 = icmp eq i32 %67, %70
    br i1 %71, label %72, label %81
  
  ; <label>:72                                      ; preds = %66
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115212
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %73 = load i32, i32* %sunkaddr17, align 4, !tbaa !45
    %74 = getelementptr inbounds [4 x i32], [4 x i32]* %55, i32 %i.05, i32 3
    %75 = load i32, i32* %74, align 4, !tbaa !45
    %76 = ashr i32 %75, %6
    %77 = icmp eq i32 %73, %76
    br i1 %77, label %78, label %81
  
  ; <label>:78                                      ; preds = %72
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    %79 = load i8, i8* %sunkaddr20, align 4, !tbaa !60
    %80 = icmp eq i8 %79, 0
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %78, %72, %66, %60, %53
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr21 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 52416
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to [4 x i32]**
    %.pre = load [4 x i32]*, [4 x i32]** %sunkaddr23, align 4, !tbaa !59
    %.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %.pre, i32 %i.05, i32 0
    %.pre10 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %82
  
  ; <label>:82                                      ; preds = %81, %78
    %83 = phi i32 [ %57, %78 ], [ %.pre10, %81 ]
    %84 = phi [4 x i32]* [ %55, %78 ], [ %.pre, %81 ]
    %85 = ashr i32 %83, %6
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115200
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    store i32 %85, i32* %sunkaddr26, align 4, !tbaa !45
    %86 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 1
    %87 = load i32, i32* %86, align 4, !tbaa !45
    %88 = ashr i32 %87, %6
    %sunkaddr27 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr28 = add i32 %sunkaddr27, 115204
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to i32*
    store i32 %88, i32* %sunkaddr29, align 4, !tbaa !45
    %89 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 2
    %90 = load i32, i32* %89, align 4, !tbaa !45
    %91 = ashr i32 %90, %6
    %sunkaddr30 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr31 = add i32 %sunkaddr30, 115208
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to i32*
    store i32 %91, i32* %sunkaddr32, align 4, !tbaa !45
    %92 = getelementptr inbounds [4 x i32], [4 x i32]* %84, i32 %i.05, i32 3
    %93 = load i32, i32* %92, align 4, !tbaa !45
    %94 = ashr i32 %93, %6
    %sunkaddr33 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr34 = add i32 %sunkaddr33, 115212
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %94, i32* %sunkaddr35, align 4, !tbaa !45
    %sunkaddr36 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 115224
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i8*
    store i8 1, i8* %sunkaddr38, align 4, !tbaa !60
    %95 = icmp sgt i32 %y0.0, %y1.0
    br i1 %95, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %82
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %109, %._crit_edge ]
    %96 = icmp sgt i32 %x0.0, %x1.0
    br i1 %96, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %106, %.lr.ph ], [ %x0.0, %.preheader ]
    %97 = trunc i32 %36 to i16
    %sunkaddr39 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr40 = add i32 %sunkaddr39, 115220
    %sunkaddr41 = inttoptr i32 %sunkaddr40 to i32*
    %98 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %99 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %98
    store i32 %ix.02, i32* %99, align 4, !tbaa !45
    %100 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %101 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %100
    store i32 %iy.03, i32* %101, align 4, !tbaa !45
    %102 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %103 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %102
    store i16 %97, i16* %103, align 2, !tbaa !47
    %104 = load i32, i32* %sunkaddr41, align 4, !tbaa !41
    %105 = add i32 %104, 1
    store i32 %105, i32* %sunkaddr41, align 4, !tbaa !41
    %106 = add nsw i32 %ix.02, 1
    %107 = add i32 %106, -1
    %108 = icmp slt i32 %107, %x1.0
    br i1 %108, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %109 = add nsw i32 %iy.03, 1
    %110 = icmp slt i32 %iy.03, %y1.0
    br i1 %110, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %82
    %sunkaddr42 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr43 = add i32 %sunkaddr42, 115220
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %111 = load i32, i32* %sunkaddr44, align 4, !tbaa !41
    %112 = icmp ugt i32 %111, 2559
    br i1 %112, label %113, label %114
  
  ; <label>:113                                     ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %114
  
  ; <label>:114                                     ; preds = %113, %._crit_edge4, %20
    %115 = add i32 %i.05, 1
    %116 = icmp ugt i32 %115, %last
    br i1 %116, label %._crit_edge9, label %20
  
  ._crit_edge9:                                     ; preds = %114, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_ci_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 75
    %4 = load %struct.pixel_buffer*, %struct.pixel_buffer** %3, align 4, !tbaa !40
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 36, i32 1
    %6 = load float, float* %5, align 4, !tbaa !37
    %7 = fpext float %6 to double
    %8 = fcmp olt float %6, 1.000000e+00
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %0
    %10 = fcmp ogt float %6, 1.000000e+01
    br i1 %10, label %12, label %11
  
  ; <label>:11                                      ; preds = %9
    %phitmp = fadd double %7, 5.000000e-01
    %phitmp1 = fptosi double %phitmp to i32
    br label %12
  
  ; <label>:12                                      ; preds = %11, %9, %0
    %13 = phi i32 [ 1, %0 ], [ %phitmp1, %11 ], [ 10, %9 ]
    %14 = icmp ugt i32 %first, %last
    br i1 %14, label %._crit_edge8, label %.lr.ph7
  
  .lr.ph7:                                          ; preds = %12
    %15 = and i32 %13, 1
    %16 = sdiv i32 %13, 2
    %17 = add i32 %13, -1
    br label %18
  
  ; <label>:18                                      ; preds = %82, %.lr.ph7
    %i.05 = phi i32 [ %first, %.lr.ph7 ], [ %83, %82 ]
    %19 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 13, i32 %i.05
    %20 = load i8, i8* %19, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %82, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = icmp eq i32 %15, 0
    %24 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 0
    %25 = load float, float* %24, align 4, !tbaa !44
    %26 = fptosi float %25 to i32
    %27 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 1
    %28 = load float, float* %27, align 4, !tbaa !44
    %29 = fptosi float %28 to i32
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %i.05, i32 2
    %31 = load float, float* %30, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55776
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to float*
    %32 = load float, float* %sunkaddr2, align 4, !tbaa !46
    %33 = fadd float %31, %32
    %34 = fptosi float %33 to i32
    br i1 %23, label %40, label %35
  
  ; <label>:35                                      ; preds = %22
    %36 = sub nsw i32 %26, %16
    %37 = add nsw i32 %26, %16
    %38 = sub nsw i32 %29, %16
    %39 = add nsw i32 %29, %16
    br label %51
  
  ; <label>:40                                      ; preds = %22
    %41 = sitofp i32 %26 to float
    %42 = fadd float %41, 5.000000e-01
    %43 = fptosi float %42 to i32
    %44 = sub nsw i32 %43, %16
    %45 = add i32 %17, %44
    %46 = sitofp i32 %29 to float
    %47 = fadd float %46, 5.000000e-01
    %48 = fptosi float %47 to i32
    %49 = sub nsw i32 %48, %16
    %50 = add i32 %17, %49
    br label %51
  
  ; <label>:51                                      ; preds = %40, %35
    %x0.0 = phi i32 [ %36, %35 ], [ %44, %40 ]
    %x1.0 = phi i32 [ %37, %35 ], [ %45, %40 ]
    %y0.0 = phi i32 [ %38, %35 ], [ %49, %40 ]
    %y1.0 = phi i32 [ %39, %35 ], [ %50, %40 ]
    %sunkaddr3 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr4 = add i32 %sunkaddr3, 115216
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    %52 = load i32, i32* %sunkaddr5, align 4, !tbaa !61
    %sunkaddr6 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 56452
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to i32**
    %53 = load i32*, i32** %sunkaddr8, align 4, !tbaa !48
    %54 = getelementptr inbounds i32, i32* %53, i32 %i.05
    %55 = load i32, i32* %54, align 4, !tbaa !45
    %56 = icmp eq i32 %52, %55
    br i1 %56, label %57, label %60
  
  ; <label>:57                                      ; preds = %51
    %sunkaddr9 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr10 = add i32 %sunkaddr9, 115224
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i8*
    %58 = load i8, i8* %sunkaddr11, align 4, !tbaa !60
    %59 = icmp eq i8 %58, 0
    br i1 %59, label %60, label %61
  
  ; <label>:60                                      ; preds = %57, %51
    tail call void @gl_flush_pb(%struct.gl_context* nonnull %ctx) #4
    %sunkaddr12 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr13 = add i32 %sunkaddr12, 56452
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32**
    %.pre = load i32*, i32** %sunkaddr14, align 4, !tbaa !48
    %.phi.trans.insert = getelementptr inbounds i32, i32* %.pre, i32 %i.05
    %.pre9 = load i32, i32* %.phi.trans.insert, align 4, !tbaa !45
    br label %61
  
  ; <label>:61                                      ; preds = %60, %57
    %62 = phi i32 [ %52, %57 ], [ %.pre9, %60 ]
    %sunkaddr15 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr16 = add i32 %sunkaddr15, 115216
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    store i32 %62, i32* %sunkaddr17, align 4, !tbaa !61
    %sunkaddr18 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr19 = add i32 %sunkaddr18, 115224
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i8*
    store i8 1, i8* %sunkaddr20, align 4, !tbaa !60
    %63 = icmp sgt i32 %y0.0, %y1.0
    br i1 %63, label %._crit_edge4, label %.preheader.lr.ph
  
  .preheader.lr.ph:                                 ; preds = %61
    br label %.preheader
  
  .preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
    %iy.03 = phi i32 [ %y0.0, %.preheader.lr.ph ], [ %77, %._crit_edge ]
    %64 = icmp sgt i32 %x0.0, %x1.0
    br i1 %64, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %.lr.ph
    %ix.02 = phi i32 [ %74, %.lr.ph ], [ %x0.0, %.preheader ]
    %65 = trunc i32 %34 to i16
    %sunkaddr21 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr22 = add i32 %sunkaddr21, 115220
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to i32*
    %66 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %67 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 0, i32 %66
    store i32 %ix.02, i32* %67, align 4, !tbaa !45
    %68 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %69 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 1, i32 %68
    store i32 %iy.03, i32* %69, align 4, !tbaa !45
    %70 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %71 = getelementptr inbounds %struct.pixel_buffer, %struct.pixel_buffer* %4, i32 0, i32 2, i32 %70
    store i16 %65, i16* %71, align 2, !tbaa !47
    %72 = load i32, i32* %sunkaddr23, align 4, !tbaa !41
    %73 = add i32 %72, 1
    store i32 %73, i32* %sunkaddr23, align 4, !tbaa !41
    %74 = add nsw i32 %ix.02, 1
    %75 = add i32 %74, -1
    %76 = icmp slt i32 %75, %x1.0
    br i1 %76, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %.lr.ph, %.preheader
    %77 = add nsw i32 %iy.03, 1
    %78 = icmp slt i32 %iy.03, %y1.0
    br i1 %78, label %.preheader, label %._crit_edge4
  
  ._crit_edge4:                                     ; preds = %._crit_edge, %61
    %sunkaddr24 = ptrtoint %struct.pixel_buffer* %4 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 115220
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to i32*
    %79 = load i32, i32* %sunkaddr26, align 4, !tbaa !41
    %80 = icmp ugt i32 %79, 2559
    br i1 %80, label %81, label %82
  
  ; <label>:81                                      ; preds = %._crit_edge4
    tail call void @gl_flush_pb(%struct.gl_context* %ctx) #4
    br label %82
  
  ; <label>:82                                      ; preds = %81, %._crit_edge4, %18
    %83 = add i32 %i.05, 1
    %84 = icmp ugt i32 %83, %last
    br i1 %84, label %._crit_edge8, label %18
  
  ._crit_edge8:                                     ; preds = %82, %12
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %color = alloca [4 x float], align 4
    %texcoord = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %4 = load %struct.gl_visual*, %struct.gl_visual** %3, align 4, !tbaa !50
    %5 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 7
    %6 = load float, float* %5, align 4, !tbaa !62
    %7 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 8
    %8 = load float, float* %7, align 4, !tbaa !63
    %9 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 9
    %10 = load float, float* %9, align 4, !tbaa !64
    %11 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %4, i32 0, i32 10
    %12 = load float, float* %11, align 4, !tbaa !65
    %13 = icmp ugt i32 %first, %last
    br i1 %13, label %._crit_edge, label %.lr.ph
  
  .lr.ph:                                           ; preds = %0
    %14 = shl i32 %first, 2
    %15 = shl i32 %first, 4
    %16 = mul i32 %first, 12
    %17 = add i32 %16, 24200
    br label %18
  
  ; <label>:18                                      ; preds = %93, %.lr.ph
    %lsr.iv41 = phi i32 [ %lsr.iv.next42, %93 ], [ %17, %.lr.ph ]
    %lsr.iv2 = phi i32 [ %lsr.iv.next3, %93 ], [ %15, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %93 ], [ %14, %.lr.ph ]
    %i.01 = phi i32 [ %first, %.lr.ph ], [ %94, %93 ]
    %19 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep52 = getelementptr i8, i8* %19, i32 %i.01
    %scevgep53 = getelementptr i8, i8* %uglygep52, i32 65024
    %20 = load i8, i8* %scevgep53, align 1, !tbaa !43
    %21 = icmp eq i8 %20, 0
    br i1 %21, label %93, label %22
  
  ; <label>:22                                      ; preds = %18
    %23 = bitcast [4 x float]* %texcoord to i8*
    %24 = bitcast [4 x float]* %color to i8*
    %25 = bitcast %struct.vertex_buffer* %2 to i8*
    call void @llvm.lifetime.start(i64 16, i8* %24) #4
    call void @llvm.lifetime.start(i64 16, i8* %23) #4
    %uglygep49 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4950 = bitcast i8* %uglygep49 to float*
    %scevgep51 = getelementptr float, float* %uglygep4950, i32 -2
    %26 = load float, float* %scevgep51, align 4, !tbaa !44
    %uglygep46 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4647 = bitcast i8* %uglygep46 to float*
    %scevgep48 = getelementptr float, float* %uglygep4647, i32 -1
    %27 = load float, float* %scevgep48, align 4, !tbaa !44
    %uglygep43 = getelementptr i8, i8* %25, i32 %lsr.iv41
    %uglygep4344 = bitcast i8* %uglygep43 to float*
    %28 = load float, float* %uglygep4344, align 4, !tbaa !44
    %29 = fdiv float %28, 6.553500e+04
    %uglygep38 = getelementptr i8, i8* %25, i32 %lsr.iv2
    %uglygep3839 = bitcast i8* %uglygep38 to float*
    %scevgep40 = getelementptr float, float* %uglygep3839, i32 4035
    %30 = load float, float* %scevgep40, align 4, !tbaa !44
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr54 = add i32 %sunkaddr, 43728
    %sunkaddr55 = inttoptr i32 %sunkaddr54 to i32*
    %31 = load i32, i32* %sunkaddr55, align 4, !tbaa !66
    %32 = icmp eq i32 %31, 7425
    %sunkaddr56 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr57 = add i32 %sunkaddr56, 52416
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to [4 x i32]**
    %33 = load [4 x i32]*, [4 x i32]** %sunkaddr58, align 4, !tbaa !59
    %34 = bitcast [4 x i32]* %33 to i8*
    %uglygep36 = getelementptr i8, i8* %34, i32 %lsr.iv2
    %uglygep3637 = bitcast i8* %uglygep36 to i32*
    %35 = load i32, i32* %uglygep3637, align 4, !tbaa !45
    %36 = sitofp i32 %35 to float
    br i1 %32, label %37, label %53
  
  ; <label>:37                                      ; preds = %22
    %38 = bitcast [4 x i32]* %33 to i8*
    %39 = bitcast [4 x float]* %color to float*
    %40 = fmul float %36, 0x3F40000000000000
    %41 = fmul float %6, %40
    store float %41, float* %39, align 4, !tbaa !44
    %uglygep33 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3334 = bitcast i8* %uglygep33 to i32*
    %scevgep35 = getelementptr i32, i32* %uglygep3334, i32 1
    %42 = load i32, i32* %scevgep35, align 4, !tbaa !45
    %43 = sitofp i32 %42 to float
    %44 = fmul float %43, 0x3F40000000000000
    %45 = fmul float %8, %44
    %sunkaddr59 = ptrtoint [4 x float]* %color to i32
    %sunkaddr60 = add i32 %sunkaddr59, 4
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to float*
    store float %45, float* %sunkaddr61, align 4, !tbaa !44
    %uglygep30 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep3031 = bitcast i8* %uglygep30 to i32*
    %scevgep32 = getelementptr i32, i32* %uglygep3031, i32 2
    %46 = load i32, i32* %scevgep32, align 4, !tbaa !45
    %47 = sitofp i32 %46 to float
    %48 = fmul float %47, 0x3F40000000000000
    %49 = fmul float %10, %48
    %sunkaddr62 = ptrtoint [4 x float]* %color to i32
    %sunkaddr63 = add i32 %sunkaddr62, 8
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    store float %49, float* %sunkaddr64, align 4, !tbaa !44
    %uglygep27 = getelementptr i8, i8* %38, i32 %lsr.iv2
    %uglygep2728 = bitcast i8* %uglygep27 to i32*
    %scevgep29 = getelementptr i32, i32* %uglygep2728, i32 3
    %50 = load i32, i32* %scevgep29, align 4, !tbaa !45
    %51 = sitofp i32 %50 to float
    %52 = fmul float %51, 0x3F40000000000000
    br label %65
  
  ; <label>:53                                      ; preds = %22
    %54 = bitcast [4 x i32]* %33 to i8*
    %55 = bitcast [4 x float]* %color to float*
    %56 = fmul float %6, %36
    store float %56, float* %55, align 4, !tbaa !44
    %uglygep24 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2425 = bitcast i8* %uglygep24 to i32*
    %scevgep26 = getelementptr i32, i32* %uglygep2425, i32 1
    %57 = load i32, i32* %scevgep26, align 4, !tbaa !45
    %58 = sitofp i32 %57 to float
    %59 = fmul float %8, %58
    %sunkaddr65 = ptrtoint [4 x float]* %color to i32
    %sunkaddr66 = add i32 %sunkaddr65, 4
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to float*
    store float %59, float* %sunkaddr67, align 4, !tbaa !44
    %uglygep21 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep2122 = bitcast i8* %uglygep21 to i32*
    %scevgep23 = getelementptr i32, i32* %uglygep2122, i32 2
    %60 = load i32, i32* %scevgep23, align 4, !tbaa !45
    %61 = sitofp i32 %60 to float
    %62 = fmul float %10, %61
    %sunkaddr68 = ptrtoint [4 x float]* %color to i32
    %sunkaddr69 = add i32 %sunkaddr68, 8
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to float*
    store float %62, float* %sunkaddr70, align 4, !tbaa !44
    %uglygep18 = getelementptr i8, i8* %54, i32 %lsr.iv2
    %uglygep1819 = bitcast i8* %uglygep18 to i32*
    %scevgep20 = getelementptr i32, i32* %uglygep1819, i32 3
    %63 = load i32, i32* %scevgep20, align 4, !tbaa !45
    %64 = sitofp i32 %63 to float
    br label %65
  
  ; <label>:65                                      ; preds = %53, %37
    %.pn = phi float [ %64, %53 ], [ %52, %37 ]
    %66 = bitcast [4 x float]* %texcoord to float*
    %67 = bitcast %struct.vertex_buffer* %2 to i8*
    %storemerge = fmul float %12, %.pn
    %sunkaddr71 = ptrtoint [4 x float]* %color to i32
    %sunkaddr72 = add i32 %sunkaddr71, 12
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to float*
    store float %storemerge, float* %sunkaddr73, align 4, !tbaa !44
    %uglygep15 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1516 = bitcast i8* %uglygep15 to float*
    %scevgep17 = getelementptr float, float* %uglygep1516, i32 14243
    %68 = load float, float* %scevgep17, align 4, !tbaa !44
    %69 = fdiv float 1.000000e+00, %68
    %uglygep9 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep910 = bitcast i8* %uglygep9 to float*
    %scevgep11 = getelementptr float, float* %uglygep910, i32 14240
    %70 = load float, float* %scevgep11, align 4, !tbaa !44
    %71 = fmul float %70, %69
    store float %71, float* %66, align 4, !tbaa !44
    %uglygep6 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep67 = bitcast i8* %uglygep6 to float*
    %scevgep8 = getelementptr float, float* %uglygep67, i32 14241
    %72 = load float, float* %scevgep8, align 4, !tbaa !44
    %73 = fmul float %69, %72
    %sunkaddr74 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr75 = add i32 %sunkaddr74, 4
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to float*
    store float %73, float* %sunkaddr76, align 4, !tbaa !44
    %uglygep4 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep45 = bitcast i8* %uglygep4 to float*
    %scevgep = getelementptr float, float* %uglygep45, i32 14242
    %74 = load float, float* %scevgep, align 4, !tbaa !44
    %75 = fmul float %69, %74
    %sunkaddr77 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr78 = add i32 %sunkaddr77, 8
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to float*
    store float %75, float* %sunkaddr79, align 4, !tbaa !44
    %uglygep12 = getelementptr i8, i8* %67, i32 %lsr.iv2
    %uglygep1213 = bitcast i8* %uglygep12 to i32*
    %scevgep14 = getelementptr i32, i32* %uglygep1213, i32 14243
    %76 = load i32, i32* %scevgep14, align 4, !tbaa !44
    %sunkaddr80 = ptrtoint [4 x float]* %texcoord to i32
    %sunkaddr81 = add i32 %sunkaddr80, 12
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i32*
    store i32 %76, i32* %sunkaddr82, align 4, !tbaa !44
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 55440
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to i32*
    %77 = load i32, i32* %sunkaddr85, align 4, !tbaa !67
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 55436
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to i32*
    %78 = load i32, i32* %sunkaddr88, align 4, !tbaa !68
    %79 = icmp ult i32 %77, %78
    br i1 %79, label %80, label %83
  
  ; <label>:80                                      ; preds = %65
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 55432
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to float**
    %81 = load float*, float** %sunkaddr91, align 4, !tbaa !69
    %82 = getelementptr inbounds float, float* %81, i32 %77
    store float 1.793000e+03, float* %82, align 4, !tbaa !44
    br label %83
  
  ; <label>:83                                      ; preds = %80, %65
    %84 = bitcast [4 x float]* %texcoord to float*
    %85 = bitcast [4 x float]* %color to float*
    %86 = bitcast [4 x float]* %texcoord to i8*
    %87 = bitcast [4 x float]* %color to i8*
    %88 = add i32 %77, 1
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 55440
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to i32*
    store i32 %88, i32* %sunkaddr94, align 4, !tbaa !67
    %sunkaddr95 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr96 = add i32 %sunkaddr95, 56452
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to i32**
    %89 = load i32*, i32** %sunkaddr97, align 4, !tbaa !48
    %90 = bitcast i32* %89 to i8*
    %uglygep = getelementptr i8, i8* %90, i32 %lsr.iv
    %uglygep1 = bitcast i8* %uglygep to i32*
    %91 = load i32, i32* %uglygep1, align 4, !tbaa !45
    %92 = uitofp i32 %91 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %26, float %27, float %29, float %30, float* nonnull %85, float %92, float* nonnull %84) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %86) #4
    call void @llvm.lifetime.end(i64 16, i8* nonnull %87) #4
    br label %93
  
  ; <label>:93                                      ; preds = %83, %18
    %94 = add i32 %i.01, 1
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next3 = add i32 %lsr.iv2, 16
    %lsr.iv.next42 = add i32 %lsr.iv41, 12
    %95 = icmp ugt i32 %94, %last
    br i1 %95, label %._crit_edge, label %18
  
  ._crit_edge:                                      ; preds = %93, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_points(%struct.gl_context* %ctx, i32 signext %first, i32 signext %last) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !39
    %3 = icmp ugt i32 %first, %last
    br i1 %3, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %4 = mul i32 %first, 3
    %5 = add i32 %4, 2
    %scevgep = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 0, i32 1512, i32 %5
    %scevgep1 = bitcast float* %scevgep to %struct.vertex_buffer*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi %struct.vertex_buffer* [ %15, %13 ], [ %scevgep1, %.lr.ph.preheader ]
    %i.01 = phi i32 [ %14, %13 ], [ %first, %.lr.ph.preheader ]
    %6 = bitcast %struct.vertex_buffer* %2 to i8*
    %uglygep = getelementptr i8, i8* %6, i32 %i.01
    %scevgep4 = getelementptr i8, i8* %uglygep, i32 65024
    %7 = load i8, i8* %scevgep4, align 1, !tbaa !43
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %13, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    %10 = bitcast %struct.vertex_buffer* %lsr.iv to float*
    %11 = load float, float* %10, align 4, !tbaa !44
    %12 = fdiv float %11, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %12) #4
    br label %13
  
  ; <label>:13                                      ; preds = %9, %.lr.ph
    %14 = add i32 %i.01, 1
    %scevgep2 = getelementptr %struct.vertex_buffer, %struct.vertex_buffer* %lsr.iv, i32 0, i32 0, i32 0, i32 3
    %15 = bitcast float* %scevgep2 to %struct.vertex_buffer*
    %16 = icmp ugt i32 %14, %last
    br i1 %16, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %13, %0
    ret void
  }
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #1
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !11, i64 54136}
  !38 = !{!2, !8, i64 55736}
  !39 = !{!2, !3, i64 55808}
  !40 = !{!2, !3, i64 55812}
  !41 = !{!42, !8, i64 115220}
  !42 = !{!"pixel_buffer", !4, i64 0, !4, i64 15360, !4, i64 30720, !4, i64 38400, !4, i64 42240, !4, i64 46080, !4, i64 49920, !4, i64 53760, !4, i64 69120, !4, i64 84480, !4, i64 99840, !4, i64 115200, !8, i64 115216, !8, i64 115220, !4, i64 115224, !4, i64 115228}
  !43 = !{!4, !4, i64 0}
  !44 = !{!11, !11, i64 0}
  !45 = !{!8, !8, i64 0}
  !46 = !{!2, !11, i64 55776}
  !47 = !{!20, !20, i64 0}
  !48 = !{!49, !3, i64 56452}
  !49 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !50 = !{!2, !3, i64 2020}
  !51 = !{!52, !4, i64 0}
  !52 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !53 = !{!2, !4, i64 55740}
  !54 = !{!2, !4, i64 55816}
  !55 = !{!2, !3, i64 55788}
  !56 = !{!2, !3, i64 2160}
  !57 = !{!2, !4, i64 54132}
  !58 = !{!2, !8, i64 55784}
  !59 = !{!49, !3, i64 52416}
  !60 = !{!42, !4, i64 115224}
  !61 = !{!42, !8, i64 115216}
  !62 = !{!52, !11, i64 24}
  !63 = !{!52, !11, i64 28}
  !64 = !{!52, !11, i64 32}
  !65 = !{!52, !11, i64 36}
  !66 = !{!2, !4, i64 43728}
  !67 = !{!2, !8, i64 55440}
  !68 = !{!2, !8, i64 55436}
  !69 = !{!2, !3, i64 55432}

...
---
name:            antialiased_rgba_points
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: fgr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: fgr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: fgr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: gpr32 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: gpr32 }
  - { id: 56, class: gpr32 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: fgr32 }
  - { id: 60, class: gpr32 }
  - { id: 61, class: gpr32 }
  - { id: 62, class: gpr32 }
  - { id: 63, class: gpr32 }
  - { id: 64, class: gpr32 }
  - { id: 65, class: gpr32 }
  - { id: 66, class: gpr32 }
  - { id: 67, class: gpr32 }
  - { id: 68, class: gpr32 }
  - { id: 69, class: gpr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: gpr32 }
  - { id: 73, class: gpr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: gpr32 }
  - { id: 76, class: fgr32 }
  - { id: 77, class: gpr32 }
  - { id: 78, class: fgr32 }
  - { id: 79, class: gpr32 }
  - { id: 80, class: fgr32 }
  - { id: 81, class: fgr32 }
  - { id: 82, class: fgr32 }
  - { id: 83, class: gpr32 }
  - { id: 84, class: fgr32 }
  - { id: 85, class: gpr32 }
  - { id: 86, class: fgr32 }
  - { id: 87, class: gpr32 }
  - { id: 88, class: gpr32 }
  - { id: 89, class: gpr32 }
  - { id: 90, class: gpr32 }
  - { id: 91, class: gpr32 }
  - { id: 92, class: gpr32 }
  - { id: 93, class: gpr32 }
  - { id: 94, class: gpr32 }
  - { id: 95, class: gpr32 }
  - { id: 96, class: gpr32 }
  - { id: 97, class: gpr32 }
  - { id: 98, class: gpr32 }
  - { id: 99, class: gpr32 }
  - { id: 100, class: gpr32 }
  - { id: 101, class: fgr32 }
  - { id: 102, class: fgr32 }
  - { id: 103, class: fgr32 }
  - { id: 104, class: gpr32 }
  - { id: 105, class: fgr32 }
  - { id: 106, class: gpr32 }
  - { id: 107, class: fgr32 }
  - { id: 108, class: fgr32 }
  - { id: 109, class: fgr32 }
  - { id: 110, class: fgr32 }
  - { id: 111, class: fgr32 }
  - { id: 112, class: gpr32 }
  - { id: 113, class: gpr32 }
  - { id: 114, class: fgr32 }
  - { id: 115, class: fgr32 }
  - { id: 116, class: fgr32 }
  - { id: 117, class: fgr32 }
  - { id: 118, class: fgr32 }
  - { id: 119, class: gpr32 }
  - { id: 120, class: gpr32 }
  - { id: 121, class: fgr32 }
  - { id: 122, class: gpr32 }
  - { id: 123, class: gpr32 }
  - { id: 124, class: gpr32 }
  - { id: 125, class: gpr32 }
  - { id: 126, class: fgr32 }
  - { id: 127, class: fgr32 }
  - { id: 128, class: gpr32 }
  - { id: 129, class: gpr32 }
  - { id: 130, class: gpr32 }
  - { id: 131, class: gpr32 }
  - { id: 132, class: fgr32 }
  - { id: 133, class: gpr32 }
  - { id: 134, class: gpr32 }
  - { id: 135, class: fgr32 }
  - { id: 136, class: fgr32 }
  - { id: 137, class: fgr32 }
  - { id: 138, class: fgr32 }
  - { id: 139, class: fgr32 }
  - { id: 140, class: fgr32 }
  - { id: 141, class: gpr32 }
  - { id: 142, class: gpr32 }
  - { id: 143, class: gpr32 }
  - { id: 144, class: gpr32 }
  - { id: 145, class: gpr32 }
  - { id: 146, class: gpr32 }
  - { id: 147, class: fgr32 }
  - { id: 148, class: fgr32 }
  - { id: 149, class: gpr32 }
  - { id: 150, class: fgr32 }
  - { id: 151, class: fgr32 }
  - { id: 152, class: fgr32 }
  - { id: 153, class: gpr32 }
  - { id: 154, class: gpr32 }
  - { id: 155, class: gpr32 }
  - { id: 156, class: gpr32 }
  - { id: 157, class: gpr32 }
  - { id: 158, class: gpr32 }
  - { id: 159, class: gpr32 }
  - { id: 160, class: gpr32 }
  - { id: 161, class: gpr32 }
  - { id: 162, class: gpr32 }
  - { id: 163, class: gpr32 }
  - { id: 164, class: gpr32 }
  - { id: 165, class: gpr32 }
  - { id: 166, class: gpr32 }
  - { id: 167, class: gpr32 }
  - { id: 168, class: gpr32 }
  - { id: 169, class: gpr32 }
  - { id: 170, class: gpr32 }
  - { id: 171, class: gpr32 }
  - { id: 172, class: gpr32 }
  - { id: 173, class: gpr32 }
  - { id: 174, class: gpr32 }
  - { id: 175, class: gpr32 }
  - { id: 176, class: gpr32 }
  - { id: 177, class: gpr32 }
  - { id: 178, class: gpr32 }
  - { id: 179, class: gpr32 }
  - { id: 180, class: gpr32 }
  - { id: 181, class: gpr32 }
  - { id: 182, class: gpr32 }
  - { id: 183, class: gpr32 }
  - { id: 184, class: gpr32 }
  - { id: 185, class: gpr32 }
  - { id: 186, class: gpr32 }
  - { id: 187, class: gpr32 }
  - { id: 188, class: gpr32 }
  - { id: 189, class: gpr32 }
  - { id: 190, class: gpr32 }
  - { id: 191, class: gpr32 }
  - { id: 192, class: gpr32 }
  - { id: 193, class: gpr32 }
  - { id: 194, class: gpr32 }
  - { id: 195, class: gpr32 }
  - { id: 196, class: gpr32 }
  - { id: 197, class: gpr32 }
  - { id: 198, class: gpr32 }
  - { id: 199, class: gpr32 }
  - { id: 200, class: gpr32 }
  - { id: 201, class: gpr32 }
  - { id: 202, class: gpr32 }
  - { id: 203, class: gpr32 }
  - { id: 204, class: gpr32 }
  - { id: 205, class: gpr32 }
  - { id: 206, class: gpr32 }
  - { id: 207, class: gpr32 }
  - { id: 208, class: gpr32 }
  - { id: 209, class: gpr32 }
  - { id: 210, class: gpr32 }
  - { id: 211, class: gpr32 }
  - { id: 212, class: gpr32 }
  - { id: 213, class: gpr32 }
  - { id: 214, class: gpr32 }
  - { id: 215, class: fgr32 }
  - { id: 216, class: fgr32 }
  - { id: 217, class: fgr32 }
  - { id: 218, class: gpr32 }
  - { id: 219, class: gpr32 }
  - { id: 220, class: fgr32 }
  - { id: 221, class: fgr32 }
  - { id: 222, class: fgr32 }
  - { id: 223, class: fgr32 }
  - { id: 224, class: fgr32 }
  - { id: 225, class: gpr32 }
  - { id: 226, class: fgr32 }
  - { id: 227, class: fgr32 }
  - { id: 228, class: gpr32 }
  - { id: 229, class: fgr32 }
  - { id: 230, class: gpr32 }
  - { id: 231, class: gpr32 }
  - { id: 232, class: gpr32 }
  - { id: 233, class: gpr32 }
  - { id: 234, class: fgr32 }
  - { id: 235, class: fgr32 }
  - { id: 236, class: gpr32 }
  - { id: 237, class: gpr32 }
  - { id: 238, class: gpr32 }
  - { id: 239, class: gpr32 }
  - { id: 240, class: fgr32 }
  - { id: 241, class: gpr32 }
  - { id: 242, class: gpr32 }
  - { id: 243, class: fgr32 }
  - { id: 244, class: fgr32 }
  - { id: 245, class: fgr32 }
  - { id: 246, class: fgr32 }
  - { id: 247, class: fgr32 }
  - { id: 248, class: fgr32 }
  - { id: 249, class: gpr32 }
  - { id: 250, class: gpr32 }
  - { id: 251, class: gpr32 }
  - { id: 252, class: gpr32 }
  - { id: 253, class: gpr32 }
  - { id: 254, class: gpr32 }
  - { id: 255, class: fgr32 }
  - { id: 256, class: fgr32 }
  - { id: 257, class: gpr32 }
  - { id: 258, class: fgr32 }
  - { id: 259, class: fgr32 }
  - { id: 260, class: fgr32 }
  - { id: 261, class: gpr32 }
  - { id: 262, class: gpr32 }
  - { id: 263, class: gpr32 }
  - { id: 264, class: gpr32 }
  - { id: 265, class: gpr32 }
  - { id: 266, class: gpr32 }
  - { id: 267, class: gpr32 }
  - { id: 268, class: gpr32 }
  - { id: 269, class: gpr32 }
  - { id: 270, class: gpr32 }
  - { id: 271, class: gpr32 }
  - { id: 272, class: gpr32 }
  - { id: 273, class: gpr32 }
  - { id: 274, class: gpr32 }
  - { id: 275, class: gpr32 }
  - { id: 276, class: gpr32 }
  - { id: 277, class: gpr32 }
  - { id: 278, class: gpr32 }
  - { id: 279, class: gpr32 }
  - { id: 280, class: gpr32 }
  - { id: 281, class: gpr32 }
  - { id: 282, class: gpr32 }
  - { id: 283, class: gpr32 }
  - { id: 284, class: gpr32 }
  - { id: 285, class: gpr32 }
  - { id: 286, class: gpr32 }
  - { id: 287, class: gpr32 }
  - { id: 288, class: gpr32 }
  - { id: 289, class: gpr32 }
  - { id: 290, class: gpr32 }
  - { id: 291, class: gpr32 }
  - { id: 292, class: gpr32 }
  - { id: 293, class: gpr32 }
  - { id: 294, class: gpr32 }
  - { id: 295, class: gpr32 }
  - { id: 296, class: gpr32 }
  - { id: 297, class: gpr32 }
  - { id: 298, class: gpr32 }
  - { id: 299, class: gpr32 }
  - { id: 300, class: gpr32 }
  - { id: 301, class: gpr32 }
  - { id: 302, class: gpr32 }
  - { id: 303, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%56' }
  - { reg: '%a1', virtual-reg: '%57' }
  - { reg: '%a2', virtual-reg: '%58' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           float 5.000000e-01
    alignment:       4
  - id:              1
    value:           'float 1.000000e+00'
    alignment:       4
  - id:              2
    value:           'float 5.000000e+00'
    alignment:       4
  - id:              3
    value:           'float 1.000000e+01'
    alignment:       4
  - id:              4
    value:           float 0x3FE6A09020000000
    alignment:       4
  - id:              5
    value:           float 0xBFE6A09020000000
    alignment:       4
  - id:              6
    value:           'float 2.560000e+02'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 42):
    successors: %bb.39(50), %bb.1(50)
    liveins: %a0, %a1, %a2, %t9, %v0
  
    %60 = ADDu %v0, %t9
    %58 = COPY %a2
    %57 = COPY %a1
    %56 = COPY %a0
    %61 = ORi %zero, 55812
    %62 = ORi %zero, 54136
    %3 = LWXC1 %56, killed %62, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.7, !tbaa !37)
    %63 = ADDu %56, killed %61
    %64 = ORi %zero, 55784
    %65 = ADDu %56, killed %64
    %2 = LW killed %65, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.5, !tbaa !58)
    %66 = LW %60, target-flags(<unknown>) %const.0, <0x422cde0> = !{!"unison-memory-partition", i32 2} :: (load 4 from got)
    %67 = ORi %zero, 55808
    %1 = LW killed %63, 0, <0x42cc270> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.3, !tbaa !40)
    %68 = ADDu %56, killed %67
    %0 = LW killed %68, 0, <0x426cc40> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.1, !tbaa !39)
    %69 = LW %60, target-flags(<unknown>) %const.1, <0x427a720> = !{!"unison-memory-partition", i32 5} :: (load 4 from got)
    %70 = LWC1 killed %69, target-flags(<unknown>) %const.1, <0x4262310> = !{!"unison-memory-partition", i32 6} :: (load 4 from constant-pool)
    FCMP_S32 %3, killed %70, 4, implicit-def %fcc0
    BC1F %fcc0, %bb.1, implicit-def %at
  
  bb.39 (freq 21):
    successors: %bb.3(100)
  
    %59 = LWC1 %66, target-flags(<unknown>) %const.0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from constant-pool)
    B %bb.3, implicit-def %at
  
  bb.1 (%ir-block.10, freq 21):
    successors: %bb.40(50), %bb.2(50)
  
    %73 = LW %60, target-flags(<unknown>) %const.3, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %74 = LWC1 killed %73, target-flags(<unknown>) %const.3, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    FCMP_S32 %3, killed %74, 23, implicit-def %fcc0
    BC1T %fcc0, %bb.2, implicit-def %at
  
  bb.40 (freq 10):
    successors: %bb.3(100)
  
    %72 = LW %60, target-flags(<unknown>) %const.2, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %71 = LWC1 %72, target-flags(<unknown>) %const.2, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    B %bb.3, implicit-def %at
  
  bb.2 (%ir-block.12, freq 10):
    successors: %bb.3(100)
  
    %76 = LWC1 %66, target-flags(<unknown>) %const.0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from constant-pool)
    %4 = FMUL_S %3, killed %76
  
  bb.3 (%ir-block.13, freq 42):
    successors: %bb.6..preheader17(37), %bb.4..preheader19(62)
  
    %5 = PHI %59, %bb.39, %71, %bb.40, %4, %bb.2
    %77 = LW %60, target-flags(<unknown>) %const.4, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %78 = LWC1 killed %77, target-flags(<unknown>) %const.4, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    %79 = LW %60, target-flags(<unknown>) %const.5, <0x422cde0> = !{!"unison-memory-partition", i32 2} :: (load 4 from got)
    %80 = LWC1 killed %79, target-flags(<unknown>) %const.5, <0x42cc270> = !{!"unison-memory-partition", i32 3} :: (load 4 from constant-pool)
    %81 = FADD_S %5, killed %80
    %82 = FADD_S %5, killed %78
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %83 = LW %60, target-flags(<unknown>) %const.6, <0x426cc40> = !{!"unison-memory-partition", i32 4} :: (load 4 from got)
    %84 = LWC1 %83, target-flags(<unknown>) %const.6, <0x427a720> = !{!"unison-memory-partition", i32 5} :: (load 4 from constant-pool)
    %85 = LW %60, target-flags(<unknown>) @gl_texturing_enabled, <0x4262310> = !{!"unison-memory-partition", i32 6} :: (load 4 from call-entry @gl_texturing_enabled)
    %7 = FMUL_S %82, %82
    %6 = FMUL_S %81, %81
    %86 = MSUB_S %6, %82, %82
    %a0 = COPY %56
    %gp = COPY %60
    %t9 = COPY %85
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %87 = COPY %v0
    %8 = FDIV_S %84, killed %86
    BEQ %87, %zero, %bb.6..preheader17, implicit-def dead %at
    B %bb.4..preheader19, implicit-def dead %at
  
  bb.4..preheader19 (freq 26):
    successors: %bb.36..loopexit(50), %bb.37(50)
  
    %88 = SLTu %58, %57
    BNE %88, %zero, %bb.36..loopexit, implicit-def %at
  
  bb.37 (freq 13):
    successors: %bb.8(100)
  
    %90 = ORi %zero, 65024
    %99 = ORi %zero, 56964
    %100 = ORi %zero, 56960
    %104 = ORi %zero, 56972
    %106 = ORi %zero, 56968
    %112 = ORi %zero, 52416
    %113 = ADDu %0, %112
    %199 = LUi 1
    %200 = ORi %199, 49684
    %201 = ADDu %1, %200
    %120 = ORi %zero, 55776
    %160 = ORi %199, 3584
    %161 = ORi %199, 34304
    %162 = ORi %199, 18944
    %163 = ORi %zero, 49920
    %164 = ORi %zero, 46080
    %165 = ORi %zero, 42240
    %166 = ORi %zero, 38400
    B %bb.8, implicit-def %at
  
  bb.6..preheader17 (freq 15):
    successors: %bb.36..loopexit(50), %bb.38(50)
  
    %206 = SLTu %58, %57
    BNE %206, %zero, %bb.36..loopexit, implicit-def %at
  
  bb.38 (freq 8):
    successors: %bb.22(100)
  
    %208 = ORi %zero, 65024
    %218 = ORi %zero, 52416
    %219 = ADDu %0, %218
    %295 = LUi 1
    %296 = ORi %295, 49684
    %297 = ADDu %1, %296
    %228 = ORi %zero, 55776
    %268 = ORi %zero, 49920
    %269 = ORi %zero, 46080
    %270 = ORi %zero, 42240
    %271 = ORi %zero, 38400
    B %bb.22, implicit-def %at
  
  bb.8 (%ir-block.25, freq 426):
    successors: %bb.21(37), %bb.9(62)
  
    %9 = PHI %57, %bb.37, %33, %bb.21
    %89 = ADDu %0, %9
    %91 = ADDu killed %89, %90
    %92 = LBu killed %91, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.26, !tbaa !43)
    BEQ killed %92, %zero, %bb.21, implicit-def dead %at
    B %bb.9, implicit-def dead %at
  
  bb.9 (%ir-block.29, freq 266):
    successors: %bb.19.._crit_edge32(50), %bb.10..preheader18.lr.ph(50)
  
    %95 = SLL %9, 2
    %96 = SLL %9, 3
    %97 = ADDu %96, %95
    %98 = ADDu %0, %97
    %110 = LWC1 %98, 24196, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.36, !tbaa !44)
    %111 = FSUB_S %110, %5
    %114 = TRUNC_W_S killed %111
    %14 = MFC1 killed %114
    %117 = FADD_S %5, %110
    %118 = TRUNC_W_S killed %117
    %15 = MFC1 killed %118
    %119 = SLT %15, %14
    BNE killed %119, %zero, %bb.19.._crit_edge32, implicit-def dead %at
    B %bb.10..preheader18.lr.ph, implicit-def dead %at
  
  bb.10..preheader18.lr.ph (freq 133):
    successors: %bb.11..preheader18(100)
  
    %93 = SLL %9, 4
    %94 = ADDu %0, %93
    %101 = LWC1 %98, 24192, <0x42573c0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.30, !tbaa !44)
    %102 = LWXC1 %94, %100, <0x4254410> = !{!"unison-memory-partition", i32 9} :: (load 4 from %ir.43, !tbaa !44)
    %103 = LWXC1 %94, %99, <0x42b9a40> = !{!"unison-memory-partition", i32 10} :: (load 4 from %ir.48, !tbaa !44)
    %105 = LWXC1 %94, %104, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.45, !tbaa !44)
    %107 = LWXC1 %94, %106, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.51, !tbaa !44)
    %19 = FDIV_S %107, %105
    %18 = FDIV_S %103, %105
    %17 = FDIV_S %102, %105
    %13 = ADDiu %98, 24196
    %10 = ADDiu %98, 24192
    %108 = FADD_S %5, %101
    %109 = FSUB_S %101, %5
    %16 = LW %113, 0, <0x422cde0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.sunkaddr2, !tbaa !59)
    %115 = TRUNC_W_S %109
    %116 = TRUNC_W_S %108
    %12 = MFC1 %116
    %11 = MFC1 %115
    %121 = LWXC1 %56, %120, <0x42cc270> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.sunkaddr5, !tbaa !46)
    %126 = LWC1 %98, 24200, <0x426cc40> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.64, !tbaa !44)
    %127 = FADD_S killed %126, killed %121
    %129 = ADDu %16, %93
    %130 = LW %129, 4, <0x427a720> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.58, !tbaa !45)
    %131 = LW %129, 0, <0x4262310> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.61, !tbaa !45)
    %132 = TRUNC_W_S killed %127
    %23 = MFC1 killed %132
    %22 = SRAV killed %131, %2
    %21 = SRAV killed %130, %2
    %133 = LW %129, 8, <0x42492f0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.55, !tbaa !45)
    %20 = SRAV killed %133, %2
  
  bb.11..preheader18 (freq 4266):
    successors: %bb.18.._crit_edge30(50), %bb.12..lr.ph29(50)
  
    %24 = PHI %14, %bb.10..preheader18.lr.ph, %32, %bb.18.._crit_edge30
    %134 = SLT %12, %11
    BNE killed %134, %zero, %bb.18.._crit_edge30, implicit-def dead %at
    B %bb.12..lr.ph29, implicit-def dead %at
  
  bb.12..lr.ph29 (freq 2133):
    successors: %bb.13(100)
  
    %25 = PseudoCVT_S_W %24
  
  bb.13 (%ir-block.71, freq 68266):
    successors: %bb.14(50), %bb.17(50)
  
    %26 = PHI %11, %bb.12..lr.ph29, %31, %bb.17
    %135 = LWC1 %13, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.36, !tbaa !44)
    %136 = FSUB_S %25, killed %135
    %137 = LWC1 %10, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.30, !tbaa !44)
    %138 = PseudoCVT_S_W %26
    %139 = FSUB_S killed %138, killed %137
    %140 = FMUL_S %136, %136
    %27 = MADD_S killed %140, %139, %139
    FCMP_S32 %27, %7, 20, implicit-def %fcc0
    BC1F %fcc0, %bb.17, implicit-def dead %at
    B %bb.14, implicit-def dead %at
  
  bb.14 (%ir-block.81, freq 34133):
    successors: %bb.16(50), %bb.15(50)
  
    %143 = LW %113, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.sunkaddr8, !tbaa !59)
    %145 = ADDu killed %143, %93
    %146 = LW killed %145, 12, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.83, !tbaa !45)
    %28 = SRAV killed %146, %2
    FCMP_S32 %27, %6, 5, implicit-def %fcc0
    BC1T %fcc0, %bb.16, implicit-def dead %at
    B %bb.15, implicit-def dead %at
  
  bb.15 (%ir-block.87, freq 17066):
    successors: %bb.16(100)
  
    %147 = FSUB_S %27, %6
    %148 = FMUL_S %8, killed %147
    %151 = FSUB_S %84, killed %148
    %152 = TRUNC_W_S killed %151
    %153 = MFC1 killed %152
    %154 = MUL %28, killed %153, implicit-def dead %hi0, implicit-def dead %lo0
    %29 = SRA killed %154, 8
  
  bb.16 (%ir-block.94, freq 34133):
    successors: %bb.17(100)
  
    %30 = PHI %28, %bb.14, %29, %bb.15
    %158 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %159 = SLL killed %158, 2
    %167 = ADDu %1, killed %159
    SW %26, killed %167, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.100, !tbaa !45)
    %168 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %169 = SLL killed %168, 2
    %170 = ADDu %1, killed %169
    SW %24, killed %170, 15360, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.102, !tbaa !45)
    %171 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %172 = SLL killed %171, 1
    %173 = ADDu %1, killed %172
    SH %23, killed %173, 30720, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.104, !tbaa !47)
    %174 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %175 = ADDu %1, killed %174
    %176 = ADDu killed %175, %166
    SB %22, killed %176, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.106, !tbaa !43)
    %177 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %178 = ADDu %1, killed %177
    %179 = ADDu killed %178, %165
    SB %21, killed %179, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.108, !tbaa !43)
    %180 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %181 = ADDu %1, killed %180
    %182 = ADDu killed %181, %164
    SB %20, killed %182, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.110, !tbaa !43)
    %183 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %184 = ADDu %1, killed %183
    %185 = ADDu killed %184, %163
    SB %30, killed %185, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.113, !tbaa !43)
    %186 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %187 = SLL killed %186, 2
    %188 = ADDu %1, killed %187
    SWXC1 %17, killed %188, %160, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.115, !tbaa !44)
    %189 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %190 = SLL killed %189, 2
    %191 = ADDu %1, killed %190
    SWXC1 %18, killed %191, %162, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.117, !tbaa !44)
    %192 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %193 = SLL killed %192, 2
    %194 = ADDu %1, killed %193
    SWXC1 %19, killed %194, %161, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.119, !tbaa !44)
    %195 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr11, !tbaa !41)
    %196 = ADDiu killed %195, 1
    SW killed %196, %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr11, !tbaa !41)
  
  bb.17 (%ir-block.122, freq 68266):
    successors: %bb.13(96), %bb.18.._crit_edge30(3)
  
    %197 = SLT %26, %12
    %31 = ADDiu %26, 1
    BNE killed %197, %zero, %bb.13, implicit-def dead %at
    B %bb.18.._crit_edge30, implicit-def dead %at
  
  bb.18.._crit_edge30 (freq 4266):
    successors: %bb.11..preheader18(96), %bb.19.._crit_edge32(3)
  
    %198 = SLT %24, %15
    %32 = ADDiu %24, 1
    BNE killed %198, %zero, %bb.11..preheader18, implicit-def dead %at
    B %bb.19.._crit_edge32, implicit-def dead %at
  
  bb.19.._crit_edge32 (freq 266):
    successors: %bb.20(50), %bb.21(50)
  
    %202 = LW %201, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr14, !tbaa !41)
    %203 = SLTiu killed %202, 2560
    BNE killed %203, %zero, %bb.21, implicit-def dead %at
    B %bb.20, implicit-def dead %at
  
  bb.20 (%ir-block.130, freq 133):
    successors: %bb.21(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %204 = LW %60, target-flags(<unknown>) @gl_flush_pb, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gl_flush_pb)
    %a0 = COPY %56
    %gp = COPY %60
    %t9 = COPY %204
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.21 (%ir-block.131, freq 426):
    successors: %bb.36..loopexit(3), %bb.8(96)
  
    %33 = ADDiu %9, 1
    %205 = SLTu %58, %33
    BNE killed %205, %zero, %bb.36..loopexit, implicit-def dead %at
    B %bb.8, implicit-def dead %at
  
  bb.22 (%ir-block.134, freq 255):
    successors: %bb.35(37), %bb.23(62)
  
    %34 = PHI %57, %bb.38, %55, %bb.35
    %207 = ADDu %0, %34
    %209 = ADDu killed %207, %208
    %210 = LBu killed %209, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 1 from %ir.135, !tbaa !43)
    BEQ killed %210, %zero, %bb.35, implicit-def dead %at
    B %bb.23, implicit-def dead %at
  
  bb.23 (%ir-block.138, freq 159):
    successors: %bb.33.._crit_edge23(50), %bb.24..preheader.lr.ph(50)
  
    %211 = SLL %34, 2
    %212 = SLL %34, 3
    %213 = ADDu %212, %211
    %214 = ADDu %0, %213
    %215 = LWC1 %214, 24196, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.145, !tbaa !44)
    %217 = FSUB_S %215, %5
    %220 = TRUNC_W_S killed %217
    %39 = MFC1 killed %220
    %223 = FADD_S %5, %215
    %224 = TRUNC_W_S killed %223
    %40 = MFC1 killed %224
    %225 = SLT %40, %39
    BNE killed %225, %zero, %bb.33.._crit_edge23, implicit-def dead %at
    B %bb.24..preheader.lr.ph, implicit-def dead %at
  
  bb.24..preheader.lr.ph (freq 79):
    successors: %bb.25..preheader(100)
  
    %216 = LWC1 %214, 24192, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.139, !tbaa !44)
    %38 = ADDiu %214, 24196
    %35 = ADDiu %214, 24192
    %41 = LW %219, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.sunkaddr17, !tbaa !59)
    %221 = FADD_S %5, %216
    %222 = TRUNC_W_S %221
    %37 = MFC1 %222
    %226 = FSUB_S %216, %5
    %227 = TRUNC_W_S %226
    %36 = MFC1 %227
    %229 = LWXC1 %56, %228, <0x422cde0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.sunkaddr20, !tbaa !46)
    %234 = LWC1 %214, 24200, <0x42cc270> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.162, !tbaa !44)
    %235 = FADD_S killed %234, killed %229
    %236 = SLL %34, 4
    %237 = ADDu %41, %236
    %238 = LW %237, 4, <0x426cc40> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.156, !tbaa !45)
    %239 = LW %237, 0, <0x427a720> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.159, !tbaa !45)
    %240 = TRUNC_W_S killed %235
    %45 = MFC1 killed %240
    %44 = SRAV killed %239, %2
    %43 = SRAV killed %238, %2
    %241 = LW %237, 8, <0x4262310> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.153, !tbaa !45)
    %42 = SRAV killed %241, %2
  
  bb.25..preheader (freq 2559):
    successors: %bb.32.._crit_edge(50), %bb.26..lr.ph(50)
  
    %46 = PHI %39, %bb.24..preheader.lr.ph, %54, %bb.32.._crit_edge
    %242 = SLT %37, %36
    BNE killed %242, %zero, %bb.32.._crit_edge, implicit-def dead %at
    B %bb.26..lr.ph, implicit-def dead %at
  
  bb.26..lr.ph (freq 1279):
    successors: %bb.27(100)
  
    %47 = PseudoCVT_S_W %46
  
  bb.27 (%ir-block.169, freq 40959):
    successors: %bb.28(50), %bb.31(50)
  
    %48 = PHI %36, %bb.26..lr.ph, %53, %bb.31
    %243 = LWC1 %38, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.145, !tbaa !44)
    %244 = FSUB_S %47, killed %243
    %245 = LWC1 %35, 0, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.139, !tbaa !44)
    %246 = PseudoCVT_S_W %48
    %247 = FSUB_S killed %246, killed %245
    %248 = FMUL_S %244, %244
    %49 = MADD_S killed %248, %247, %247
    FCMP_S32 %49, %7, 20, implicit-def %fcc0
    BC1F %fcc0, %bb.31, implicit-def dead %at
    B %bb.28, implicit-def dead %at
  
  bb.28 (%ir-block.179, freq 20479):
    successors: %bb.30(50), %bb.29(50)
  
    %251 = LW %219, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr23, !tbaa !59)
    %253 = ADDu killed %251, %236
    %254 = LW killed %253, 12, <0x4261e60> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.181, !tbaa !45)
    %50 = SRAV killed %254, %2
    FCMP_S32 %49, %6, 5, implicit-def %fcc0
    BC1T %fcc0, %bb.30, implicit-def dead %at
    B %bb.29, implicit-def dead %at
  
  bb.29 (%ir-block.185, freq 10239):
    successors: %bb.30(100)
  
    %255 = FSUB_S %49, %6
    %256 = FMUL_S %8, killed %255
    %259 = FSUB_S %84, killed %256
    %260 = TRUNC_W_S killed %259
    %261 = MFC1 killed %260
    %262 = MUL %50, killed %261, implicit-def dead %hi0, implicit-def dead %lo0
    %51 = SRA killed %262, 8
  
  bb.30 (%ir-block.192, freq 20479):
    successors: %bb.31(100)
  
    %52 = PHI %50, %bb.28, %51, %bb.29
    %266 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %267 = SLL killed %266, 2
    %272 = ADDu %1, killed %267
    SW %48, killed %272, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.198, !tbaa !45)
    %273 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %274 = SLL killed %273, 2
    %275 = ADDu %1, killed %274
    SW %46, killed %275, 15360, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.200, !tbaa !45)
    %276 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %277 = SLL killed %276, 1
    %278 = ADDu %1, killed %277
    SH %45, killed %278, 30720, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 2 into %ir.202, !tbaa !47)
    %279 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %280 = ADDu %1, killed %279
    %281 = ADDu killed %280, %271
    SB %44, killed %281, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.204, !tbaa !43)
    %282 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %283 = ADDu %1, killed %282
    %284 = ADDu killed %283, %270
    SB %43, killed %284, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.206, !tbaa !43)
    %285 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %286 = ADDu %1, killed %285
    %287 = ADDu killed %286, %269
    SB %42, killed %287, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.208, !tbaa !43)
    %288 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %289 = ADDu %1, killed %288
    %290 = ADDu killed %289, %268
    SB %52, killed %290, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 1 into %ir.211, !tbaa !43)
    %291 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr26, !tbaa !41)
    %292 = ADDiu killed %291, 1
    SW killed %292, %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr26, !tbaa !41)
  
  bb.31 (%ir-block.214, freq 40959):
    successors: %bb.27(96), %bb.32.._crit_edge(3)
  
    %293 = SLT %48, %37
    %53 = ADDiu %48, 1
    BNE killed %293, %zero, %bb.27, implicit-def dead %at
    B %bb.32.._crit_edge, implicit-def dead %at
  
  bb.32.._crit_edge (freq 2559):
    successors: %bb.25..preheader(96), %bb.33.._crit_edge23(3)
  
    %294 = SLT %46, %40
    %54 = ADDiu %46, 1
    BNE killed %294, %zero, %bb.25..preheader, implicit-def dead %at
    B %bb.33.._crit_edge23, implicit-def dead %at
  
  bb.33.._crit_edge23 (freq 159):
    successors: %bb.34(50), %bb.35(50)
  
    %298 = LW %297, 0, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.sunkaddr29, !tbaa !41)
    %299 = SLTiu killed %298, 2560
    BNE killed %299, %zero, %bb.35, implicit-def dead %at
    B %bb.34, implicit-def dead %at
  
  bb.34 (%ir-block.222, freq 79):
    successors: %bb.35(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %300 = LW %60, target-flags(<unknown>) @gl_flush_pb, <0x4252ee0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gl_flush_pb)
    %a0 = COPY %56
    %gp = COPY %60
    %t9 = COPY %300
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.35 (%ir-block.223, freq 255):
    successors: %bb.36..loopexit(3), %bb.22(96)
  
    %55 = ADDiu %34, 1
    %301 = SLTu %58, %55
    BEQ killed %301, %zero, %bb.22, implicit-def dead %at
    B %bb.36..loopexit, implicit-def dead %at
  
  bb.36..loopexit (freq 42):
    liveouts:
  
    RetRA

...
