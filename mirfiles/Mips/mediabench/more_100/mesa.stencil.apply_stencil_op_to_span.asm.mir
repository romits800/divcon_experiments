--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.stencil.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, void (%struct.gl_context*, float)*, {}*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, {}*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, {}*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*)* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { void (%struct.gl_context*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, void (%struct.gl_context*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type opaque
  %struct.pixel_buffer = type { [3840 x i32], [3840 x i32], [3840 x i16], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i8], [3840 x i32], [3840 x float], [3840 x float], [3840 x float], [4 x i32], i32, i32, i8, i32 }
  
  @.str = private unnamed_addr constant [15 x i8] c"glClearStencil\00", align 1
  @.str.1 = private unnamed_addr constant [14 x i8] c"glStencilFunc\00", align 1
  @.str.2 = private unnamed_addr constant [14 x i8] c"glStencilMask\00", align 1
  @.str.3 = private unnamed_addr constant [12 x i8] c"glStencilOp\00", align 1
  @.str.4 = private unnamed_addr constant [24 x i8] c"gl_alloc_stencil_buffer\00", align 1
  
  ; Function Attrs: nounwind
  define void @gl_ClearStencil(%struct.gl_context* %ctx, i32 signext %s) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0)) #5
    br label %8
  
  ; <label>:5                                       ; preds = %0
    %6 = trunc i32 %s to i8
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 7
    store i8 %6, i8* %7, align 2, !tbaa !37
    br label %8
  
  ; <label>:8                                       ; preds = %5, %4
    ret void
  }
  
  declare void @gl_error(%struct.gl_context*, i32 signext, i8*) #1
  
  ; Function Attrs: nounwind
  define void @gl_StencilFunc(%struct.gl_context* %ctx, i32 signext %func, i32 signext %ref, i32 signext %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %19
  
  ; <label>:5                                       ; preds = %0
    %6 = and i32 %func, -8
    %switch = icmp eq i32 %6, 512
    br i1 %switch, label %7, label %10
  
  ; <label>:7                                       ; preds = %5
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 1
    store i32 %func, i32* %8, align 4, !tbaa !38
    %9 = icmp slt i32 %ref, 0
    br i1 %9, label %14, label %11
  
  ; <label>:10                                      ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0)) #5
    br label %19
  
  ; <label>:11                                      ; preds = %7
    %12 = icmp sgt i32 %ref, 255
    %13 = select i1 %12, i32 255, i32 %ref
    %phitmp = trunc i32 %13 to i8
    br label %14
  
  ; <label>:14                                      ; preds = %11, %7
    %15 = phi i8 [ 0, %7 ], [ %phitmp, %11 ]
    %16 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    store i8 %15, i8* %16, align 4, !tbaa !39
    %17 = trunc i32 %mask to i8
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 6
    store i8 %17, i8* %18, align 1, !tbaa !40
    br label %19
  
  ; <label>:19                                      ; preds = %14, %10, %4
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #2
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #2
  
  ; Function Attrs: nounwind
  define void @gl_StencilMask(%struct.gl_context* %ctx, i32 signext %mask) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)) #5
    br label %8
  
  ; <label>:5                                       ; preds = %0
    %6 = trunc i32 %mask to i8
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 8
    store i8 %6, i8* %7, align 1, !tbaa !41
    br label %8
  
  ; <label>:8                                       ; preds = %5, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_StencilOp(%struct.gl_context* %ctx, i32 signext %fail, i32 signext %zfail, i32 signext %zpass) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 55
    %2 = load i32, i32* %1, align 4, !tbaa !1
    %3 = icmp eq i32 %2, 6656
    br i1 %3, label %5, label %4
  
  ; <label>:4                                       ; preds = %0
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1282, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %15
  
  ; <label>:5                                       ; preds = %0
    switch i32 %fail, label %8 [
      i32 7680, label %6
      i32 0, label %6
      i32 7681, label %6
      i32 7682, label %6
      i32 7683, label %6
      i32 5386, label %6
    ]
  
  ; <label>:6                                       ; preds = %5, %5, %5, %5, %5, %5
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 2
    store i32 %fail, i32* %7, align 4, !tbaa !42
    switch i32 %zfail, label %11 [
      i32 7680, label %9
      i32 0, label %9
      i32 7681, label %9
      i32 7682, label %9
      i32 7683, label %9
      i32 5386, label %9
    ]
  
  ; <label>:8                                       ; preds = %5
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %15
  
  ; <label>:9                                       ; preds = %6, %6, %6, %6, %6, %6
    %10 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 4
    store i32 %zfail, i32* %10, align 4, !tbaa !43
    switch i32 %zpass, label %14 [
      i32 7680, label %12
      i32 0, label %12
      i32 7681, label %12
      i32 7682, label %12
      i32 7683, label %12
      i32 5386, label %12
    ]
  
  ; <label>:11                                      ; preds = %6
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %15
  
  ; <label>:12                                      ; preds = %9, %9, %9, %9, %9, %9
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 3
    store i32 %zpass, i32* %13, align 4, !tbaa !44
    br label %15
  
  ; <label>:14                                      ; preds = %9
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1280, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0)) #5
    br label %15
  
  ; <label>:15                                      ; preds = %14, %12, %11, %8, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_stencil_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture %mask) #0 {
    %fail = alloca [1280 x i8], align 1
    %1 = bitcast [1280 x i8]* %fail to i8*
    call void @llvm.lifetime.start(i64 1280, i8* %1) #5
    %2 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %3 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %2, align 4, !tbaa !45
    %4 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %3, i32 0, i32 4
    %5 = load i8*, i8** %4, align 4, !tbaa !46
    %6 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %3, i32 0, i32 1
    %7 = load i32, i32* %6, align 4, !tbaa !48
    %8 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 1
    %9 = load i32, i32* %8, align 4, !tbaa !38
    switch i32 %9, label %169 [
      i32 512, label %.preheader
      i32 513, label %19
      i32 515, label %44
      i32 516, label %69
      i32 518, label %94
      i32 514, label %119
      i32 517, label %144
      i32 519, label %.preheader7
    ]
  
  .preheader7:                                      ; preds = %0
    %10 = icmp eq i32 %n, 0
    br i1 %10, label %.loopexit, label %.lr.ph23.preheader
  
  .lr.ph23.preheader:                               ; preds = %.preheader7
    %11 = bitcast [1280 x i8]* %fail to i8*
    call void @llvm.memset.p0i8.i32(i8* %11, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  .preheader:                                       ; preds = %0
    %12 = icmp eq i32 %n, 0
    br i1 %12, label %.loopexit, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %16
    %lsr.iv3 = phi i8* [ %scevgep4, %16 ], [ %mask, %.preheader ]
    %lsr.iv1 = phi [1280 x i8]* [ %18, %16 ], [ %fail, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %16 ], [ %n, %.preheader ]
    %13 = load i8, i8* %lsr.iv3, align 1, !tbaa !49
    %14 = icmp eq i8 %13, 0
    br i1 %14, label %16, label %15
  
  ; <label>:15                                      ; preds = %.lr.ph
    store i8 0, i8* %lsr.iv3, align 1, !tbaa !49
    br label %16
  
  ; <label>:16                                      ; preds = %15, %.lr.ph
    %.sink = phi i8 [ 1, %15 ], [ 0, %.lr.ph ]
    %17 = bitcast [1280 x i8]* %lsr.iv1 to i8*
    store i8 %.sink, i8* %17, align 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv1, i32 0, i32 1
    %18 = bitcast i8* %scevgep to [1280 x i8]*
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:19                                      ; preds = %0
    %20 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %21 = bitcast i8* %20 to i16*
    %22 = load i16, i16* %21, align 4
    %23 = lshr i16 %22, 8
    %24 = and i16 %22, %23
    %25 = icmp eq i32 %n, 0
    br i1 %25, label %.loopexit, label %.lr.ph11.preheader
  
  .lr.ph11.preheader:                               ; preds = %19
    %26 = mul i32 %7, %y
    %27 = add i32 %x, %26
    %scevgep10 = getelementptr i8, i8* %5, i32 %27
    br label %.lr.ph11
  
  .lr.ph11:                                         ; preds = %42, %.lr.ph11.preheader
    %lsr.iv13 = phi i8* [ %scevgep14, %42 ], [ %mask, %.lr.ph11.preheader ]
    %lsr.iv11 = phi i8* [ %scevgep12, %42 ], [ %scevgep10, %.lr.ph11.preheader ]
    %lsr.iv7 = phi [1280 x i8]* [ %43, %42 ], [ %fail, %.lr.ph11.preheader ]
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %42 ], [ %n, %.lr.ph11.preheader ]
    %28 = load i8, i8* %lsr.iv13, align 1, !tbaa !49
    %29 = icmp eq i8 %28, 0
    br i1 %29, label %40, label %30
  
  ; <label>:30                                      ; preds = %.lr.ph11
    %31 = trunc i16 %24 to i8
    %32 = load i8, i8* %lsr.iv11, align 1, !tbaa !49
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr66 = add i32 %sunkaddr, 54349
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to i8*
    %33 = load i8, i8* %sunkaddr67, align 1, !tbaa !40
    %34 = and i8 %33, %32
    %35 = icmp ult i8 %31, %34
    br i1 %35, label %36, label %38
  
  ; <label>:36                                      ; preds = %30
    %37 = bitcast [1280 x i8]* %lsr.iv7 to i8*
    store i8 0, i8* %37, align 1, !tbaa !49
    br label %42
  
  ; <label>:38                                      ; preds = %30
    %39 = bitcast [1280 x i8]* %lsr.iv7 to i8*
    store i8 1, i8* %39, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv13, align 1, !tbaa !49
    br label %42
  
  ; <label>:40                                      ; preds = %.lr.ph11
    %41 = bitcast [1280 x i8]* %lsr.iv7 to i8*
    store i8 0, i8* %41, align 1, !tbaa !49
    br label %42
  
  ; <label>:42                                      ; preds = %40, %38, %36
    %lsr.iv.next6 = add i32 %lsr.iv5, -1
    %scevgep8 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv7, i32 0, i32 1
    %43 = bitcast i8* %scevgep8 to [1280 x i8]*
    %scevgep12 = getelementptr i8, i8* %lsr.iv11, i32 1
    %scevgep14 = getelementptr i8, i8* %lsr.iv13, i32 1
    %exitcond31 = icmp eq i32 %lsr.iv.next6, 0
    br i1 %exitcond31, label %.loopexit, label %.lr.ph11
  
  ; <label>:44                                      ; preds = %0
    %45 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %46 = bitcast i8* %45 to i16*
    %47 = load i16, i16* %46, align 4
    %48 = lshr i16 %47, 8
    %49 = and i16 %47, %48
    %50 = icmp eq i32 %n, 0
    br i1 %50, label %.loopexit, label %.lr.ph13.preheader
  
  .lr.ph13.preheader:                               ; preds = %44
    %51 = mul i32 %7, %y
    %52 = add i32 %x, %51
    %scevgep20 = getelementptr i8, i8* %5, i32 %52
    br label %.lr.ph13
  
  .lr.ph13:                                         ; preds = %67, %.lr.ph13.preheader
    %lsr.iv23 = phi i8* [ %scevgep24, %67 ], [ %mask, %.lr.ph13.preheader ]
    %lsr.iv21 = phi i8* [ %scevgep22, %67 ], [ %scevgep20, %.lr.ph13.preheader ]
    %lsr.iv17 = phi [1280 x i8]* [ %68, %67 ], [ %fail, %.lr.ph13.preheader ]
    %lsr.iv15 = phi i32 [ %lsr.iv.next16, %67 ], [ %n, %.lr.ph13.preheader ]
    %53 = load i8, i8* %lsr.iv23, align 1, !tbaa !49
    %54 = icmp eq i8 %53, 0
    br i1 %54, label %65, label %55
  
  ; <label>:55                                      ; preds = %.lr.ph13
    %56 = trunc i16 %49 to i8
    %57 = load i8, i8* %lsr.iv21, align 1, !tbaa !49
    %sunkaddr68 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr69 = add i32 %sunkaddr68, 54349
    %sunkaddr70 = inttoptr i32 %sunkaddr69 to i8*
    %58 = load i8, i8* %sunkaddr70, align 1, !tbaa !40
    %59 = and i8 %58, %57
    %60 = icmp ugt i8 %56, %59
    br i1 %60, label %63, label %61
  
  ; <label>:61                                      ; preds = %55
    %62 = bitcast [1280 x i8]* %lsr.iv17 to i8*
    store i8 0, i8* %62, align 1, !tbaa !49
    br label %67
  
  ; <label>:63                                      ; preds = %55
    %64 = bitcast [1280 x i8]* %lsr.iv17 to i8*
    store i8 1, i8* %64, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv23, align 1, !tbaa !49
    br label %67
  
  ; <label>:65                                      ; preds = %.lr.ph13
    %66 = bitcast [1280 x i8]* %lsr.iv17 to i8*
    store i8 0, i8* %66, align 1, !tbaa !49
    br label %67
  
  ; <label>:67                                      ; preds = %65, %63, %61
    %lsr.iv.next16 = add i32 %lsr.iv15, -1
    %scevgep18 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv17, i32 0, i32 1
    %68 = bitcast i8* %scevgep18 to [1280 x i8]*
    %scevgep22 = getelementptr i8, i8* %lsr.iv21, i32 1
    %scevgep24 = getelementptr i8, i8* %lsr.iv23, i32 1
    %exitcond32 = icmp eq i32 %lsr.iv.next16, 0
    br i1 %exitcond32, label %.loopexit, label %.lr.ph13
  
  ; <label>:69                                      ; preds = %0
    %70 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %71 = bitcast i8* %70 to i16*
    %72 = load i16, i16* %71, align 4
    %73 = lshr i16 %72, 8
    %74 = and i16 %72, %73
    %75 = icmp eq i32 %n, 0
    br i1 %75, label %.loopexit, label %.lr.ph15.preheader
  
  .lr.ph15.preheader:                               ; preds = %69
    %76 = mul i32 %7, %y
    %77 = add i32 %x, %76
    %scevgep30 = getelementptr i8, i8* %5, i32 %77
    br label %.lr.ph15
  
  .lr.ph15:                                         ; preds = %92, %.lr.ph15.preheader
    %lsr.iv33 = phi i8* [ %scevgep34, %92 ], [ %mask, %.lr.ph15.preheader ]
    %lsr.iv31 = phi i8* [ %scevgep32, %92 ], [ %scevgep30, %.lr.ph15.preheader ]
    %lsr.iv27 = phi [1280 x i8]* [ %93, %92 ], [ %fail, %.lr.ph15.preheader ]
    %lsr.iv25 = phi i32 [ %lsr.iv.next26, %92 ], [ %n, %.lr.ph15.preheader ]
    %78 = load i8, i8* %lsr.iv33, align 1, !tbaa !49
    %79 = icmp eq i8 %78, 0
    br i1 %79, label %90, label %80
  
  ; <label>:80                                      ; preds = %.lr.ph15
    %81 = trunc i16 %74 to i8
    %82 = load i8, i8* %lsr.iv31, align 1, !tbaa !49
    %sunkaddr71 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr72 = add i32 %sunkaddr71, 54349
    %sunkaddr73 = inttoptr i32 %sunkaddr72 to i8*
    %83 = load i8, i8* %sunkaddr73, align 1, !tbaa !40
    %84 = and i8 %83, %82
    %85 = icmp ugt i8 %81, %84
    br i1 %85, label %86, label %88
  
  ; <label>:86                                      ; preds = %80
    %87 = bitcast [1280 x i8]* %lsr.iv27 to i8*
    store i8 0, i8* %87, align 1, !tbaa !49
    br label %92
  
  ; <label>:88                                      ; preds = %80
    %89 = bitcast [1280 x i8]* %lsr.iv27 to i8*
    store i8 1, i8* %89, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv33, align 1, !tbaa !49
    br label %92
  
  ; <label>:90                                      ; preds = %.lr.ph15
    %91 = bitcast [1280 x i8]* %lsr.iv27 to i8*
    store i8 0, i8* %91, align 1, !tbaa !49
    br label %92
  
  ; <label>:92                                      ; preds = %90, %88, %86
    %lsr.iv.next26 = add i32 %lsr.iv25, -1
    %scevgep28 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv27, i32 0, i32 1
    %93 = bitcast i8* %scevgep28 to [1280 x i8]*
    %scevgep32 = getelementptr i8, i8* %lsr.iv31, i32 1
    %scevgep34 = getelementptr i8, i8* %lsr.iv33, i32 1
    %exitcond33 = icmp eq i32 %lsr.iv.next26, 0
    br i1 %exitcond33, label %.loopexit, label %.lr.ph15
  
  ; <label>:94                                      ; preds = %0
    %95 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %96 = bitcast i8* %95 to i16*
    %97 = load i16, i16* %96, align 4
    %98 = lshr i16 %97, 8
    %99 = and i16 %97, %98
    %100 = icmp eq i32 %n, 0
    br i1 %100, label %.loopexit, label %.lr.ph17.preheader
  
  .lr.ph17.preheader:                               ; preds = %94
    %101 = mul i32 %7, %y
    %102 = add i32 %x, %101
    %scevgep40 = getelementptr i8, i8* %5, i32 %102
    br label %.lr.ph17
  
  .lr.ph17:                                         ; preds = %117, %.lr.ph17.preheader
    %lsr.iv43 = phi i8* [ %scevgep44, %117 ], [ %mask, %.lr.ph17.preheader ]
    %lsr.iv41 = phi i8* [ %scevgep42, %117 ], [ %scevgep40, %.lr.ph17.preheader ]
    %lsr.iv37 = phi [1280 x i8]* [ %118, %117 ], [ %fail, %.lr.ph17.preheader ]
    %lsr.iv35 = phi i32 [ %lsr.iv.next36, %117 ], [ %n, %.lr.ph17.preheader ]
    %103 = load i8, i8* %lsr.iv43, align 1, !tbaa !49
    %104 = icmp eq i8 %103, 0
    br i1 %104, label %115, label %105
  
  ; <label>:105                                     ; preds = %.lr.ph17
    %106 = trunc i16 %99 to i8
    %107 = load i8, i8* %lsr.iv41, align 1, !tbaa !49
    %sunkaddr74 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr75 = add i32 %sunkaddr74, 54349
    %sunkaddr76 = inttoptr i32 %sunkaddr75 to i8*
    %108 = load i8, i8* %sunkaddr76, align 1, !tbaa !40
    %109 = and i8 %108, %107
    %110 = icmp ult i8 %106, %109
    br i1 %110, label %113, label %111
  
  ; <label>:111                                     ; preds = %105
    %112 = bitcast [1280 x i8]* %lsr.iv37 to i8*
    store i8 0, i8* %112, align 1, !tbaa !49
    br label %117
  
  ; <label>:113                                     ; preds = %105
    %114 = bitcast [1280 x i8]* %lsr.iv37 to i8*
    store i8 1, i8* %114, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv43, align 1, !tbaa !49
    br label %117
  
  ; <label>:115                                     ; preds = %.lr.ph17
    %116 = bitcast [1280 x i8]* %lsr.iv37 to i8*
    store i8 0, i8* %116, align 1, !tbaa !49
    br label %117
  
  ; <label>:117                                     ; preds = %115, %113, %111
    %lsr.iv.next36 = add i32 %lsr.iv35, -1
    %scevgep38 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv37, i32 0, i32 1
    %118 = bitcast i8* %scevgep38 to [1280 x i8]*
    %scevgep42 = getelementptr i8, i8* %lsr.iv41, i32 1
    %scevgep44 = getelementptr i8, i8* %lsr.iv43, i32 1
    %exitcond34 = icmp eq i32 %lsr.iv.next36, 0
    br i1 %exitcond34, label %.loopexit, label %.lr.ph17
  
  ; <label>:119                                     ; preds = %0
    %120 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %121 = bitcast i8* %120 to i16*
    %122 = load i16, i16* %121, align 4
    %123 = lshr i16 %122, 8
    %124 = and i16 %122, %123
    %125 = icmp eq i32 %n, 0
    br i1 %125, label %.loopexit, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %119
    %126 = mul i32 %7, %y
    %127 = add i32 %x, %126
    %scevgep50 = getelementptr i8, i8* %5, i32 %127
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %142, %.lr.ph19.preheader
    %lsr.iv53 = phi i8* [ %scevgep54, %142 ], [ %mask, %.lr.ph19.preheader ]
    %lsr.iv51 = phi i8* [ %scevgep52, %142 ], [ %scevgep50, %.lr.ph19.preheader ]
    %lsr.iv47 = phi [1280 x i8]* [ %143, %142 ], [ %fail, %.lr.ph19.preheader ]
    %lsr.iv45 = phi i32 [ %lsr.iv.next46, %142 ], [ %n, %.lr.ph19.preheader ]
    %128 = load i8, i8* %lsr.iv53, align 1, !tbaa !49
    %129 = icmp eq i8 %128, 0
    br i1 %129, label %140, label %130
  
  ; <label>:130                                     ; preds = %.lr.ph19
    %131 = trunc i16 %124 to i8
    %132 = load i8, i8* %lsr.iv51, align 1, !tbaa !49
    %sunkaddr77 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr78 = add i32 %sunkaddr77, 54349
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to i8*
    %133 = load i8, i8* %sunkaddr79, align 1, !tbaa !40
    %134 = and i8 %133, %132
    %135 = icmp eq i8 %131, %134
    br i1 %135, label %136, label %138
  
  ; <label>:136                                     ; preds = %130
    %137 = bitcast [1280 x i8]* %lsr.iv47 to i8*
    store i8 0, i8* %137, align 1, !tbaa !49
    br label %142
  
  ; <label>:138                                     ; preds = %130
    %139 = bitcast [1280 x i8]* %lsr.iv47 to i8*
    store i8 1, i8* %139, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv53, align 1, !tbaa !49
    br label %142
  
  ; <label>:140                                     ; preds = %.lr.ph19
    %141 = bitcast [1280 x i8]* %lsr.iv47 to i8*
    store i8 0, i8* %141, align 1, !tbaa !49
    br label %142
  
  ; <label>:142                                     ; preds = %140, %138, %136
    %lsr.iv.next46 = add i32 %lsr.iv45, -1
    %scevgep48 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv47, i32 0, i32 1
    %143 = bitcast i8* %scevgep48 to [1280 x i8]*
    %scevgep52 = getelementptr i8, i8* %lsr.iv51, i32 1
    %scevgep54 = getelementptr i8, i8* %lsr.iv53, i32 1
    %exitcond35 = icmp eq i32 %lsr.iv.next46, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph19
  
  ; <label>:144                                     ; preds = %0
    %145 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %146 = bitcast i8* %145 to i16*
    %147 = load i16, i16* %146, align 4
    %148 = lshr i16 %147, 8
    %149 = and i16 %147, %148
    %150 = icmp eq i32 %n, 0
    br i1 %150, label %.loopexit, label %.lr.ph21.preheader
  
  .lr.ph21.preheader:                               ; preds = %144
    %151 = mul i32 %7, %y
    %152 = add i32 %x, %151
    %scevgep60 = getelementptr i8, i8* %5, i32 %152
    br label %.lr.ph21
  
  .lr.ph21:                                         ; preds = %167, %.lr.ph21.preheader
    %lsr.iv63 = phi i8* [ %scevgep64, %167 ], [ %mask, %.lr.ph21.preheader ]
    %lsr.iv61 = phi i8* [ %scevgep62, %167 ], [ %scevgep60, %.lr.ph21.preheader ]
    %lsr.iv57 = phi [1280 x i8]* [ %168, %167 ], [ %fail, %.lr.ph21.preheader ]
    %lsr.iv55 = phi i32 [ %lsr.iv.next56, %167 ], [ %n, %.lr.ph21.preheader ]
    %153 = load i8, i8* %lsr.iv63, align 1, !tbaa !49
    %154 = icmp eq i8 %153, 0
    br i1 %154, label %165, label %155
  
  ; <label>:155                                     ; preds = %.lr.ph21
    %156 = trunc i16 %149 to i8
    %157 = load i8, i8* %lsr.iv61, align 1, !tbaa !49
    %sunkaddr80 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr81 = add i32 %sunkaddr80, 54349
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to i8*
    %158 = load i8, i8* %sunkaddr82, align 1, !tbaa !40
    %159 = and i8 %158, %157
    %160 = icmp eq i8 %156, %159
    br i1 %160, label %163, label %161
  
  ; <label>:161                                     ; preds = %155
    %162 = bitcast [1280 x i8]* %lsr.iv57 to i8*
    store i8 0, i8* %162, align 1, !tbaa !49
    br label %167
  
  ; <label>:163                                     ; preds = %155
    %164 = bitcast [1280 x i8]* %lsr.iv57 to i8*
    store i8 1, i8* %164, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv63, align 1, !tbaa !49
    br label %167
  
  ; <label>:165                                     ; preds = %.lr.ph21
    %166 = bitcast [1280 x i8]* %lsr.iv57 to i8*
    store i8 0, i8* %166, align 1, !tbaa !49
    br label %167
  
  ; <label>:167                                     ; preds = %165, %163, %161
    %lsr.iv.next56 = add i32 %lsr.iv55, -1
    %scevgep58 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv57, i32 0, i32 1
    %168 = bitcast i8* %scevgep58 to [1280 x i8]*
    %scevgep62 = getelementptr i8, i8* %lsr.iv61, i32 1
    %scevgep64 = getelementptr i8, i8* %lsr.iv63, i32 1
    %exitcond36 = icmp eq i32 %lsr.iv.next56, 0
    br i1 %exitcond36, label %.loopexit, label %.lr.ph21
  
  ; <label>:169                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %167, %142, %117, %92, %67, %42, %16, %144, %119, %94, %69, %44, %19, %.preheader, %.lr.ph23.preheader, %.preheader7
    %allfail.0 = phi i32 [ 0, %.preheader ], [ 1, %19 ], [ 1, %44 ], [ 1, %69 ], [ 1, %94 ], [ 1, %119 ], [ 1, %144 ], [ 1, %.preheader7 ], [ 1, %.lr.ph23.preheader ], [ 0, %16 ], [ 1, %42 ], [ 1, %67 ], [ 1, %92 ], [ 1, %117 ], [ 1, %142 ], [ 1, %167 ]
    %170 = bitcast [1280 x i8]* %fail to i8*
    %171 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 2
    %172 = load i32, i32* %171, align 4, !tbaa !42
    call fastcc void @apply_stencil_op_to_span(%struct.gl_context* %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32 signext %172, i8* %170)
    call void @llvm.lifetime.end(i64 1280, i8* %170) #5
    ret i32 %allfail.0
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @abort() #3
  
  ; Function Attrs: nounwind
  define internal fastcc void @apply_stencil_op_to_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32 signext %oper, i8* nocapture readonly %mask) unnamed_addr #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 8
    %2 = load i8, i8* %1, align 1, !tbaa !41
    %3 = zext i8 %2 to i32
    %4 = xor i32 %3, 255
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %6 = load i8, i8* %5, align 4, !tbaa !39
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %7, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 4
    %10 = load i8*, i8** %9, align 4, !tbaa !46
    %11 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 1
    %12 = load i32, i32* %11, align 4, !tbaa !48
    switch i32 %oper, label %146 [
      i32 7680, label %.loopexit
      i32 0, label %13
      i32 7681, label %33
      i32 7682, label %57
      i32 7683, label %88
      i32 5386, label %119
    ]
  
  ; <label>:13                                      ; preds = %0
    %14 = icmp eq i8 %2, -1
    br i1 %14, label %.preheader, label %.preheader1
  
  .preheader1:                                      ; preds = %13
    %15 = icmp ne i32 %n, 0
    br i1 %15, label %.lr.ph21.preheader, label %.loopexit
  
  .lr.ph21.preheader:                               ; preds = %.preheader1
    %16 = mul i32 %12, %y
    %17 = add i32 %x, %16
    %scevgep7 = getelementptr i8, i8* %10, i32 %17
    br label %.lr.ph21
  
  .preheader:                                       ; preds = %13
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %19 = mul i32 %12, %y
    %20 = add i32 %x, %19
    %scevgep = getelementptr i8, i8* %10, i32 %20
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %24, %.lr.ph.preheader
    %lsr.iv3 = phi i8* [ %scevgep4, %24 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv1 = phi i8* [ %scevgep2, %24 ], [ %scevgep, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %24 ], [ %n, %.lr.ph.preheader ]
    %21 = load i8, i8* %lsr.iv3, align 1, !tbaa !49
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %24, label %23
  
  ; <label>:23                                      ; preds = %.lr.ph
    store i8 0, i8* %lsr.iv1, align 1, !tbaa !49
    br label %24
  
  ; <label>:24                                      ; preds = %23, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep2 = getelementptr i8, i8* %lsr.iv1, i32 1
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph21:                                         ; preds = %32, %.lr.ph21.preheader
    %lsr.iv10 = phi i8* [ %scevgep11, %32 ], [ %mask, %.lr.ph21.preheader ]
    %lsr.iv8 = phi i8* [ %scevgep9, %32 ], [ %scevgep7, %.lr.ph21.preheader ]
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %32 ], [ %n, %.lr.ph21.preheader ]
    %25 = load i8, i8* %lsr.iv10, align 1, !tbaa !49
    %26 = icmp eq i8 %25, 0
    br i1 %26, label %32, label %27
  
  ; <label>:27                                      ; preds = %.lr.ph21
    %28 = load i8, i8* %lsr.iv8, align 1, !tbaa !49
    %29 = zext i8 %28 to i32
    %30 = and i32 %29, %4
    %31 = trunc i32 %30 to i8
    store i8 %31, i8* %lsr.iv8, align 1, !tbaa !49
    br label %32
  
  ; <label>:32                                      ; preds = %27, %.lr.ph21
    %lsr.iv.next6 = add i32 %lsr.iv5, -1
    %scevgep9 = getelementptr i8, i8* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i8, i8* %lsr.iv10, i32 1
    %exitcond47 = icmp eq i32 %lsr.iv.next6, 0
    br i1 %exitcond47, label %.loopexit, label %.lr.ph21
  
  ; <label>:33                                      ; preds = %0
    %34 = icmp eq i8 %2, -1
    br i1 %34, label %.preheader3, label %.preheader5
  
  .preheader5:                                      ; preds = %33
    %35 = icmp ne i32 %n, 0
    br i1 %35, label %.lr.ph25, label %.loopexit
  
  .lr.ph25:                                         ; preds = %.preheader5
    %36 = and i8 %6, %2
    %37 = zext i8 %36 to i32
    %38 = mul i32 %12, %y
    %39 = add i32 %x, %38
    %scevgep21 = getelementptr i8, i8* %10, i32 %39
    br label %47
  
  .preheader3:                                      ; preds = %33
    %40 = icmp ne i32 %n, 0
    br i1 %40, label %.lr.ph23.preheader, label %.loopexit
  
  .lr.ph23.preheader:                               ; preds = %.preheader3
    %41 = mul i32 %12, %y
    %42 = add i32 %x, %41
    %scevgep14 = getelementptr i8, i8* %10, i32 %42
    br label %.lr.ph23
  
  .lr.ph23:                                         ; preds = %46, %.lr.ph23.preheader
    %lsr.iv17 = phi i8* [ %scevgep18, %46 ], [ %mask, %.lr.ph23.preheader ]
    %lsr.iv15 = phi i8* [ %scevgep16, %46 ], [ %scevgep14, %.lr.ph23.preheader ]
    %lsr.iv12 = phi i32 [ %lsr.iv.next13, %46 ], [ %n, %.lr.ph23.preheader ]
    %43 = load i8, i8* %lsr.iv17, align 1, !tbaa !49
    %44 = icmp eq i8 %43, 0
    br i1 %44, label %46, label %45
  
  ; <label>:45                                      ; preds = %.lr.ph23
    store i8 %6, i8* %lsr.iv15, align 1, !tbaa !49
    br label %46
  
  ; <label>:46                                      ; preds = %45, %.lr.ph23
    %lsr.iv.next13 = add i32 %lsr.iv12, -1
    %scevgep16 = getelementptr i8, i8* %lsr.iv15, i32 1
    %scevgep18 = getelementptr i8, i8* %lsr.iv17, i32 1
    %exitcond48 = icmp eq i32 %lsr.iv.next13, 0
    br i1 %exitcond48, label %.loopexit, label %.lr.ph23
  
  ; <label>:47                                      ; preds = %56, %.lr.ph25
    %lsr.iv24 = phi i8* [ %scevgep25, %56 ], [ %mask, %.lr.ph25 ]
    %lsr.iv22 = phi i8* [ %scevgep23, %56 ], [ %scevgep21, %.lr.ph25 ]
    %lsr.iv19 = phi i32 [ %lsr.iv.next20, %56 ], [ %n, %.lr.ph25 ]
    %48 = load i8, i8* %lsr.iv24, align 1, !tbaa !49
    %49 = icmp eq i8 %48, 0
    br i1 %49, label %56, label %50
  
  ; <label>:50                                      ; preds = %47
    %51 = load i8, i8* %lsr.iv22, align 1, !tbaa !49
    %52 = zext i8 %51 to i32
    %53 = and i32 %52, %4
    %54 = or i32 %53, %37
    %55 = trunc i32 %54 to i8
    store i8 %55, i8* %lsr.iv22, align 1, !tbaa !49
    br label %56
  
  ; <label>:56                                      ; preds = %50, %47
    %lsr.iv.next20 = add i32 %lsr.iv19, -1
    %scevgep23 = getelementptr i8, i8* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i8, i8* %lsr.iv24, i32 1
    %exitcond49 = icmp eq i32 %lsr.iv.next20, 0
    br i1 %exitcond49, label %.loopexit, label %47
  
  ; <label>:57                                      ; preds = %0
    %58 = icmp eq i8 %2, -1
    br i1 %58, label %.preheader7, label %.preheader9
  
  .preheader9:                                      ; preds = %57
    %59 = icmp ne i32 %n, 0
    br i1 %59, label %.lr.ph29.preheader, label %.loopexit
  
  .lr.ph29.preheader:                               ; preds = %.preheader9
    %60 = mul i32 %12, %y
    %61 = add i32 %x, %60
    %scevgep35 = getelementptr i8, i8* %10, i32 %61
    br label %.lr.ph29
  
  .preheader7:                                      ; preds = %57
    %62 = icmp ne i32 %n, 0
    br i1 %62, label %.lr.ph27.preheader, label %.loopexit
  
  .lr.ph27.preheader:                               ; preds = %.preheader7
    %63 = mul i32 %12, %y
    %64 = add i32 %x, %63
    %scevgep28 = getelementptr i8, i8* %10, i32 %64
    br label %.lr.ph27
  
  .lr.ph27:                                         ; preds = %74, %.lr.ph27.preheader
    %lsr.iv31 = phi i8* [ %scevgep32, %74 ], [ %mask, %.lr.ph27.preheader ]
    %lsr.iv29 = phi i8* [ %scevgep30, %74 ], [ %scevgep28, %.lr.ph27.preheader ]
    %lsr.iv26 = phi i32 [ %lsr.iv.next27, %74 ], [ %n, %.lr.ph27.preheader ]
    %65 = load i8, i8* %lsr.iv31, align 1, !tbaa !49
    %66 = icmp eq i8 %65, 0
    br i1 %66, label %74, label %67
  
  ; <label>:67                                      ; preds = %.lr.ph27
    %68 = load i8, i8* %lsr.iv29, align 1, !tbaa !49
    %69 = zext i8 %68 to i32
    %70 = icmp eq i8 %68, -1
    br i1 %70, label %74, label %71
  
  ; <label>:71                                      ; preds = %67
    %72 = add nuw nsw i32 %69, 1
    %73 = trunc i32 %72 to i8
    store i8 %73, i8* %lsr.iv29, align 1, !tbaa !49
    br label %74
  
  ; <label>:74                                      ; preds = %71, %67, %.lr.ph27
    %lsr.iv.next27 = add i32 %lsr.iv26, -1
    %scevgep30 = getelementptr i8, i8* %lsr.iv29, i32 1
    %scevgep32 = getelementptr i8, i8* %lsr.iv31, i32 1
    %exitcond50 = icmp eq i32 %lsr.iv.next27, 0
    br i1 %exitcond50, label %.loopexit, label %.lr.ph27
  
  .lr.ph29:                                         ; preds = %87, %.lr.ph29.preheader
    %lsr.iv38 = phi i8* [ %scevgep39, %87 ], [ %mask, %.lr.ph29.preheader ]
    %lsr.iv36 = phi i8* [ %scevgep37, %87 ], [ %scevgep35, %.lr.ph29.preheader ]
    %lsr.iv33 = phi i32 [ %lsr.iv.next34, %87 ], [ %n, %.lr.ph29.preheader ]
    %75 = load i8, i8* %lsr.iv38, align 1, !tbaa !49
    %76 = icmp eq i8 %75, 0
    br i1 %76, label %87, label %77
  
  ; <label>:77                                      ; preds = %.lr.ph29
    %78 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %79 = zext i8 %78 to i32
    %80 = icmp eq i8 %78, -1
    br i1 %80, label %87, label %81
  
  ; <label>:81                                      ; preds = %77
    %82 = and i32 %79, %4
    %83 = add nuw nsw i32 %79, 1
    %84 = and i32 %83, %3
    %85 = or i32 %84, %82
    %86 = trunc i32 %85 to i8
    store i8 %86, i8* %lsr.iv36, align 1, !tbaa !49
    br label %87
  
  ; <label>:87                                      ; preds = %81, %77, %.lr.ph29
    %lsr.iv.next34 = add i32 %lsr.iv33, -1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %scevgep39 = getelementptr i8, i8* %lsr.iv38, i32 1
    %exitcond51 = icmp eq i32 %lsr.iv.next34, 0
    br i1 %exitcond51, label %.loopexit, label %.lr.ph29
  
  ; <label>:88                                      ; preds = %0
    %89 = icmp eq i8 %2, -1
    br i1 %89, label %.preheader11, label %.preheader13
  
  .preheader13:                                     ; preds = %88
    %90 = icmp ne i32 %n, 0
    br i1 %90, label %.lr.ph33.preheader, label %.loopexit
  
  .lr.ph33.preheader:                               ; preds = %.preheader13
    %91 = mul i32 %12, %y
    %92 = add i32 %x, %91
    %scevgep49 = getelementptr i8, i8* %10, i32 %92
    br label %.lr.ph33
  
  .preheader11:                                     ; preds = %88
    %93 = icmp ne i32 %n, 0
    br i1 %93, label %.lr.ph31.preheader, label %.loopexit
  
  .lr.ph31.preheader:                               ; preds = %.preheader11
    %94 = mul i32 %12, %y
    %95 = add i32 %x, %94
    %scevgep42 = getelementptr i8, i8* %10, i32 %95
    br label %.lr.ph31
  
  .lr.ph31:                                         ; preds = %105, %.lr.ph31.preheader
    %lsr.iv45 = phi i8* [ %scevgep46, %105 ], [ %mask, %.lr.ph31.preheader ]
    %lsr.iv43 = phi i8* [ %scevgep44, %105 ], [ %scevgep42, %.lr.ph31.preheader ]
    %lsr.iv40 = phi i32 [ %lsr.iv.next41, %105 ], [ %n, %.lr.ph31.preheader ]
    %96 = load i8, i8* %lsr.iv45, align 1, !tbaa !49
    %97 = icmp eq i8 %96, 0
    br i1 %97, label %105, label %98
  
  ; <label>:98                                      ; preds = %.lr.ph31
    %99 = load i8, i8* %lsr.iv43, align 1, !tbaa !49
    %100 = zext i8 %99 to i32
    %101 = icmp eq i8 %99, 0
    br i1 %101, label %105, label %102
  
  ; <label>:102                                     ; preds = %98
    %103 = add nuw nsw i32 %100, 255
    %104 = trunc i32 %103 to i8
    store i8 %104, i8* %lsr.iv43, align 1, !tbaa !49
    br label %105
  
  ; <label>:105                                     ; preds = %102, %98, %.lr.ph31
    %lsr.iv.next41 = add i32 %lsr.iv40, -1
    %scevgep44 = getelementptr i8, i8* %lsr.iv43, i32 1
    %scevgep46 = getelementptr i8, i8* %lsr.iv45, i32 1
    %exitcond52 = icmp eq i32 %lsr.iv.next41, 0
    br i1 %exitcond52, label %.loopexit, label %.lr.ph31
  
  .lr.ph33:                                         ; preds = %118, %.lr.ph33.preheader
    %lsr.iv52 = phi i8* [ %scevgep53, %118 ], [ %mask, %.lr.ph33.preheader ]
    %lsr.iv50 = phi i8* [ %scevgep51, %118 ], [ %scevgep49, %.lr.ph33.preheader ]
    %lsr.iv47 = phi i32 [ %lsr.iv.next48, %118 ], [ %n, %.lr.ph33.preheader ]
    %106 = load i8, i8* %lsr.iv52, align 1, !tbaa !49
    %107 = icmp eq i8 %106, 0
    br i1 %107, label %118, label %108
  
  ; <label>:108                                     ; preds = %.lr.ph33
    %109 = load i8, i8* %lsr.iv50, align 1, !tbaa !49
    %110 = zext i8 %109 to i32
    %111 = icmp eq i8 %109, 0
    br i1 %111, label %118, label %112
  
  ; <label>:112                                     ; preds = %108
    %113 = and i32 %110, %4
    %114 = add nuw nsw i32 %110, 255
    %115 = and i32 %114, %3
    %116 = or i32 %115, %113
    %117 = trunc i32 %116 to i8
    store i8 %117, i8* %lsr.iv50, align 1, !tbaa !49
    br label %118
  
  ; <label>:118                                     ; preds = %112, %108, %.lr.ph33
    %lsr.iv.next48 = add i32 %lsr.iv47, -1
    %scevgep51 = getelementptr i8, i8* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i8, i8* %lsr.iv52, i32 1
    %exitcond53 = icmp eq i32 %lsr.iv.next48, 0
    br i1 %exitcond53, label %.loopexit, label %.lr.ph33
  
  ; <label>:119                                     ; preds = %0
    %120 = icmp eq i8 %2, -1
    br i1 %120, label %.preheader15, label %.preheader17
  
  .preheader17:                                     ; preds = %119
    %121 = icmp ne i32 %n, 0
    br i1 %121, label %.lr.ph37.preheader, label %.loopexit
  
  .lr.ph37.preheader:                               ; preds = %.preheader17
    %122 = mul i32 %12, %y
    %123 = add i32 %x, %122
    %scevgep63 = getelementptr i8, i8* %10, i32 %123
    br label %.lr.ph37
  
  .preheader15:                                     ; preds = %119
    %124 = icmp ne i32 %n, 0
    br i1 %124, label %.lr.ph35.preheader, label %.loopexit
  
  .lr.ph35.preheader:                               ; preds = %.preheader15
    %125 = mul i32 %12, %y
    %126 = add i32 %x, %125
    %scevgep56 = getelementptr i8, i8* %10, i32 %126
    br label %.lr.ph35
  
  .lr.ph35:                                         ; preds = %134, %.lr.ph35.preheader
    %lsr.iv59 = phi i8* [ %scevgep60, %134 ], [ %mask, %.lr.ph35.preheader ]
    %lsr.iv57 = phi i8* [ %scevgep58, %134 ], [ %scevgep56, %.lr.ph35.preheader ]
    %lsr.iv54 = phi i32 [ %lsr.iv.next55, %134 ], [ %n, %.lr.ph35.preheader ]
    %127 = load i8, i8* %lsr.iv59, align 1, !tbaa !49
    %128 = icmp eq i8 %127, 0
    br i1 %128, label %134, label %129
  
  ; <label>:129                                     ; preds = %.lr.ph35
    %130 = load i8, i8* %lsr.iv57, align 1, !tbaa !49
    %131 = zext i8 %130 to i32
    %132 = xor i32 %131, 255
    %133 = trunc i32 %132 to i8
    store i8 %133, i8* %lsr.iv57, align 1, !tbaa !49
    br label %134
  
  ; <label>:134                                     ; preds = %129, %.lr.ph35
    %lsr.iv.next55 = add i32 %lsr.iv54, -1
    %scevgep58 = getelementptr i8, i8* %lsr.iv57, i32 1
    %scevgep60 = getelementptr i8, i8* %lsr.iv59, i32 1
    %exitcond54 = icmp eq i32 %lsr.iv.next55, 0
    br i1 %exitcond54, label %.loopexit, label %.lr.ph35
  
  .lr.ph37:                                         ; preds = %145, %.lr.ph37.preheader
    %lsr.iv66 = phi i8* [ %scevgep67, %145 ], [ %mask, %.lr.ph37.preheader ]
    %lsr.iv64 = phi i8* [ %scevgep65, %145 ], [ %scevgep63, %.lr.ph37.preheader ]
    %lsr.iv61 = phi i32 [ %lsr.iv.next62, %145 ], [ %n, %.lr.ph37.preheader ]
    %135 = load i8, i8* %lsr.iv66, align 1, !tbaa !49
    %136 = icmp eq i8 %135, 0
    br i1 %136, label %145, label %137
  
  ; <label>:137                                     ; preds = %.lr.ph37
    %138 = load i8, i8* %lsr.iv64, align 1, !tbaa !49
    %139 = zext i8 %138 to i32
    %140 = and i32 %139, %4
    %141 = xor i32 %139, 255
    %142 = and i32 %141, %3
    %143 = or i32 %142, %140
    %144 = trunc i32 %143 to i8
    store i8 %144, i8* %lsr.iv64, align 1, !tbaa !49
    br label %145
  
  ; <label>:145                                     ; preds = %137, %.lr.ph37
    %lsr.iv.next62 = add i32 %lsr.iv61, -1
    %scevgep65 = getelementptr i8, i8* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i8, i8* %lsr.iv66, i32 1
    %exitcond55 = icmp eq i32 %lsr.iv.next62, 0
    br i1 %exitcond55, label %.loopexit, label %.lr.ph37
  
  ; <label>:146                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %145, %134, %118, %105, %87, %74, %56, %46, %32, %24, %.preheader15, %.preheader17, %.preheader11, %.preheader13, %.preheader7, %.preheader9, %.preheader3, %.preheader5, %.preheader, %.preheader1, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_stencil_span(%struct.gl_context* %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* %z, i8* %mask) #0 {
    %passmask = alloca [1280 x i8], align 1
    %failmask = alloca [1280 x i8], align 1
    %oldmask = alloca [1280 x i8], align 1
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    %2 = load i8, i8* %1, align 4, !tbaa !50
    %3 = icmp eq i8 %2, 0
    br i1 %3, label %4, label %7
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 3
    %6 = load i32, i32* %5, align 4, !tbaa !44
    tail call fastcc void @apply_stencil_op_to_span(%struct.gl_context* nonnull %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32 signext %6, i8* %mask)
    br label %41
  
  ; <label>:7                                       ; preds = %0
    %8 = bitcast [1280 x i8]* %passmask to i8*
    call void @llvm.lifetime.start(i64 1280, i8* %8) #5
    %9 = bitcast [1280 x i8]* %failmask to i8*
    call void @llvm.lifetime.start(i64 1280, i8* %9) #5
    %10 = bitcast [1280 x i8]* %oldmask to i8*
    call void @llvm.lifetime.start(i64 1280, i8* %10) #5
    %11 = icmp eq i32 %n, 0
    br i1 %11, label %._crit_edge5.thread, label %.lr.ph.preheader
  
  ._crit_edge5.thread:                              ; preds = %7
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 29
    %13 = load i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)** %12, align 4, !tbaa !51
    %14 = tail call i32 %13(%struct.gl_context* nonnull %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* %z, i8* %mask) #5
    br label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %7
    %15 = bitcast [1280 x i8]* %oldmask to i8*
    %16 = bitcast [1280 x i8]* %failmask to i8*
    %17 = bitcast [1280 x i8]* %passmask to i8*
    call void @llvm.memset.p0i8.i32(i8* %16, i8 0, i32 %n, i32 1, i1 false)
    call void @llvm.memset.p0i8.i32(i8* %17, i8 0, i32 %n, i32 1, i1 false)
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %15, i8* %mask, i32 %n, i32 1, i1 false)
    %18 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 29
    %19 = load i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)** %18, align 4, !tbaa !51
    %20 = tail call i32 %19(%struct.gl_context* nonnull %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i16* %z, i8* %mask) #5
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %30, %.lr.ph.preheader
    %lsr.iv8 = phi [1280 x i8]* [ %33, %30 ], [ %oldmask, %.lr.ph.preheader ]
    %lsr.iv6 = phi i8* [ %scevgep7, %30 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi [1280 x i8]* [ %32, %30 ], [ %passmask, %.lr.ph.preheader ]
    %lsr.iv1 = phi [1280 x i8]* [ %31, %30 ], [ %failmask, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %30 ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [1280 x i8]* %lsr.iv8 to i8*
    %21 = load i8, i8* %lsr.iv810, align 1, !tbaa !49
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %30, label %23
  
  ; <label>:23                                      ; preds = %.lr.ph
    %24 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %25 = icmp eq i8 %24, 0
    br i1 %25, label %28, label %26
  
  ; <label>:26                                      ; preds = %23
    %27 = bitcast [1280 x i8]* %lsr.iv3 to i8*
    store i8 1, i8* %27, align 1, !tbaa !49
    br label %30
  
  ; <label>:28                                      ; preds = %23
    %29 = bitcast [1280 x i8]* %lsr.iv1 to i8*
    store i8 1, i8* %29, align 1, !tbaa !49
    br label %30
  
  ; <label>:30                                      ; preds = %28, %26, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv1, i32 0, i32 1
    %31 = bitcast i8* %scevgep to [1280 x i8]*
    %scevgep4 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv3, i32 0, i32 1
    %32 = bitcast i8* %scevgep4 to [1280 x i8]*
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %scevgep9 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv8, i32 0, i32 1
    %33 = bitcast i8* %scevgep9 to [1280 x i8]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %30, %._crit_edge5.thread
    %34 = bitcast [1280 x i8]* %oldmask to i8*
    %35 = bitcast [1280 x i8]* %failmask to i8*
    %36 = bitcast [1280 x i8]* %passmask to i8*
    %37 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 4
    %38 = load i32, i32* %37, align 4, !tbaa !43
    call fastcc void @apply_stencil_op_to_span(%struct.gl_context* %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32 signext %38, i8* %35)
    %39 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 3
    %40 = load i32, i32* %39, align 4, !tbaa !44
    call fastcc void @apply_stencil_op_to_span(%struct.gl_context* %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i32 signext %40, i8* %36)
    call void @llvm.lifetime.end(i64 1280, i8* %34) #5
    call void @llvm.lifetime.end(i64 1280, i8* %35) #5
    call void @llvm.lifetime.end(i64 1280, i8* %36) #5
    br label %41
  
  ; <label>:41                                      ; preds = %._crit_edge, %4
    ret void
  }
  
  ; Function Attrs: nounwind
  define i32 @gl_stencil_pixels(%struct.gl_context* readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i8* nocapture %mask) #0 {
    %fail = alloca [3840 x i8], align 1
    %1 = bitcast [3840 x i8]* %fail to i8*
    call void @llvm.lifetime.start(i64 3840, i8* %1) #5
    %2 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 1
    %3 = load i32, i32* %2, align 4, !tbaa !38
    switch i32 %3, label %217 [
      i32 512, label %.preheader
      i32 513, label %13
      i32 515, label %47
      i32 516, label %81
      i32 518, label %115
      i32 514, label %149
      i32 517, label %183
      i32 519, label %.preheader12
    ]
  
  .preheader12:                                     ; preds = %0
    %4 = icmp eq i32 %n, 0
    br i1 %4, label %.loopexit, label %.lr.ph28.preheader
  
  .lr.ph28.preheader:                               ; preds = %.preheader12
    %5 = bitcast [3840 x i8]* %fail to i8*
    call void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 %n, i32 1, i1 false)
    br label %.loopexit
  
  .preheader:                                       ; preds = %0
    %6 = icmp eq i32 %n, 0
    br i1 %6, label %.loopexit, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader, %10
    %lsr.iv3 = phi i8* [ %scevgep4, %10 ], [ %mask, %.preheader ]
    %lsr.iv1 = phi [3840 x i8]* [ %12, %10 ], [ %fail, %.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %10 ], [ %n, %.preheader ]
    %7 = load i8, i8* %lsr.iv3, align 1, !tbaa !49
    %8 = icmp eq i8 %7, 0
    br i1 %8, label %10, label %9
  
  ; <label>:9                                       ; preds = %.lr.ph
    store i8 0, i8* %lsr.iv3, align 1, !tbaa !49
    br label %10
  
  ; <label>:10                                      ; preds = %9, %.lr.ph
    %.sink = phi i8 [ 1, %9 ], [ 0, %.lr.ph ]
    %11 = bitcast [3840 x i8]* %lsr.iv1 to i8*
    store i8 %.sink, i8* %11, align 1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv1, i32 0, i32 1
    %12 = bitcast i8* %scevgep to [3840 x i8]*
    %scevgep4 = getelementptr i8, i8* %lsr.iv3, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  ; <label>:13                                      ; preds = %0
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %15 = bitcast i8* %14 to i16*
    %16 = load i16, i16* %15, align 4
    %17 = lshr i16 %16, 8
    %18 = and i16 %16, %17
    %19 = icmp eq i32 %n, 0
    br i1 %19, label %.loopexit, label %.lr.ph16
  
  .lr.ph16:                                         ; preds = %13
    br label %20
  
  ; <label>:20                                      ; preds = %45, %.lr.ph16
    %lsr.iv15 = phi i8* [ %scevgep16, %45 ], [ %mask, %.lr.ph16 ]
    %lsr.iv13 = phi i32* [ %scevgep14, %45 ], [ %y, %.lr.ph16 ]
    %lsr.iv10 = phi i32* [ %scevgep11, %45 ], [ %x, %.lr.ph16 ]
    %lsr.iv7 = phi [3840 x i8]* [ %46, %45 ], [ %fail, %.lr.ph16 ]
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %45 ], [ %n, %.lr.ph16 ]
    %21 = load i8, i8* %lsr.iv15, align 1, !tbaa !49
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %43, label %23
  
  ; <label>:23                                      ; preds = %20
    %24 = trunc i16 %18 to i8
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr73 = add i32 %sunkaddr, 2024
    %sunkaddr74 = inttoptr i32 %sunkaddr73 to %struct.gl_frame_buffer**
    %25 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr74, align 4, !tbaa !45
    %26 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %25, i32 0, i32 4
    %27 = load i8*, i8** %26, align 4, !tbaa !46
    %28 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %25, i32 0, i32 1
    %29 = load i32, i32* %28, align 4, !tbaa !48
    %30 = load i32, i32* %lsr.iv13, align 4, !tbaa !52
    %31 = mul nsw i32 %30, %29
    %32 = getelementptr inbounds i8, i8* %27, i32 %31
    %33 = load i32, i32* %lsr.iv10, align 4, !tbaa !52
    %34 = getelementptr inbounds i8, i8* %32, i32 %33
    %35 = load i8, i8* %34, align 1, !tbaa !49
    %sunkaddr75 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr76 = add i32 %sunkaddr75, 54349
    %sunkaddr77 = inttoptr i32 %sunkaddr76 to i8*
    %36 = load i8, i8* %sunkaddr77, align 1, !tbaa !40
    %37 = and i8 %36, %35
    %38 = icmp ult i8 %24, %37
    br i1 %38, label %39, label %41
  
  ; <label>:39                                      ; preds = %23
    %40 = bitcast [3840 x i8]* %lsr.iv7 to i8*
    store i8 0, i8* %40, align 1, !tbaa !49
    br label %45
  
  ; <label>:41                                      ; preds = %23
    %42 = bitcast [3840 x i8]* %lsr.iv7 to i8*
    store i8 1, i8* %42, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv15, align 1, !tbaa !49
    br label %45
  
  ; <label>:43                                      ; preds = %20
    %44 = bitcast [3840 x i8]* %lsr.iv7 to i8*
    store i8 0, i8* %44, align 1, !tbaa !49
    br label %45
  
  ; <label>:45                                      ; preds = %43, %41, %39
    %lsr.iv.next6 = add i32 %lsr.iv5, -1
    %scevgep8 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv7, i32 0, i32 1
    %46 = bitcast i8* %scevgep8 to [3840 x i8]*
    %scevgep11 = getelementptr i32, i32* %lsr.iv10, i32 1
    %scevgep14 = getelementptr i32, i32* %lsr.iv13, i32 1
    %scevgep16 = getelementptr i8, i8* %lsr.iv15, i32 1
    %exitcond36 = icmp eq i32 %lsr.iv.next6, 0
    br i1 %exitcond36, label %.loopexit, label %20
  
  ; <label>:47                                      ; preds = %0
    %48 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %49 = bitcast i8* %48 to i16*
    %50 = load i16, i16* %49, align 4
    %51 = lshr i16 %50, 8
    %52 = and i16 %50, %51
    %53 = icmp eq i32 %n, 0
    br i1 %53, label %.loopexit, label %.lr.ph18
  
  .lr.ph18:                                         ; preds = %47
    br label %54
  
  ; <label>:54                                      ; preds = %79, %.lr.ph18
    %lsr.iv26 = phi i8* [ %scevgep27, %79 ], [ %mask, %.lr.ph18 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %79 ], [ %y, %.lr.ph18 ]
    %lsr.iv22 = phi i32* [ %scevgep23, %79 ], [ %x, %.lr.ph18 ]
    %lsr.iv19 = phi [3840 x i8]* [ %80, %79 ], [ %fail, %.lr.ph18 ]
    %lsr.iv17 = phi i32 [ %lsr.iv.next18, %79 ], [ %n, %.lr.ph18 ]
    %55 = load i8, i8* %lsr.iv26, align 1, !tbaa !49
    %56 = icmp eq i8 %55, 0
    br i1 %56, label %77, label %57
  
  ; <label>:57                                      ; preds = %54
    %58 = trunc i16 %52 to i8
    %sunkaddr78 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr79 = add i32 %sunkaddr78, 2024
    %sunkaddr80 = inttoptr i32 %sunkaddr79 to %struct.gl_frame_buffer**
    %59 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr80, align 4, !tbaa !45
    %60 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 4
    %61 = load i8*, i8** %60, align 4, !tbaa !46
    %62 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %59, i32 0, i32 1
    %63 = load i32, i32* %62, align 4, !tbaa !48
    %64 = load i32, i32* %lsr.iv24, align 4, !tbaa !52
    %65 = mul nsw i32 %64, %63
    %66 = getelementptr inbounds i8, i8* %61, i32 %65
    %67 = load i32, i32* %lsr.iv22, align 4, !tbaa !52
    %68 = getelementptr inbounds i8, i8* %66, i32 %67
    %69 = load i8, i8* %68, align 1, !tbaa !49
    %sunkaddr81 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr82 = add i32 %sunkaddr81, 54349
    %sunkaddr83 = inttoptr i32 %sunkaddr82 to i8*
    %70 = load i8, i8* %sunkaddr83, align 1, !tbaa !40
    %71 = and i8 %70, %69
    %72 = icmp ugt i8 %58, %71
    br i1 %72, label %75, label %73
  
  ; <label>:73                                      ; preds = %57
    %74 = bitcast [3840 x i8]* %lsr.iv19 to i8*
    store i8 0, i8* %74, align 1, !tbaa !49
    br label %79
  
  ; <label>:75                                      ; preds = %57
    %76 = bitcast [3840 x i8]* %lsr.iv19 to i8*
    store i8 1, i8* %76, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv26, align 1, !tbaa !49
    br label %79
  
  ; <label>:77                                      ; preds = %54
    %78 = bitcast [3840 x i8]* %lsr.iv19 to i8*
    store i8 0, i8* %78, align 1, !tbaa !49
    br label %79
  
  ; <label>:79                                      ; preds = %77, %75, %73
    %lsr.iv.next18 = add i32 %lsr.iv17, -1
    %scevgep20 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv19, i32 0, i32 1
    %80 = bitcast i8* %scevgep20 to [3840 x i8]*
    %scevgep23 = getelementptr i32, i32* %lsr.iv22, i32 1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i8, i8* %lsr.iv26, i32 1
    %exitcond37 = icmp eq i32 %lsr.iv.next18, 0
    br i1 %exitcond37, label %.loopexit, label %54
  
  ; <label>:81                                      ; preds = %0
    %82 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %83 = bitcast i8* %82 to i16*
    %84 = load i16, i16* %83, align 4
    %85 = lshr i16 %84, 8
    %86 = and i16 %84, %85
    %87 = icmp eq i32 %n, 0
    br i1 %87, label %.loopexit, label %.lr.ph20
  
  .lr.ph20:                                         ; preds = %81
    br label %88
  
  ; <label>:88                                      ; preds = %113, %.lr.ph20
    %lsr.iv37 = phi i8* [ %scevgep38, %113 ], [ %mask, %.lr.ph20 ]
    %lsr.iv35 = phi i32* [ %scevgep36, %113 ], [ %y, %.lr.ph20 ]
    %lsr.iv33 = phi i32* [ %scevgep34, %113 ], [ %x, %.lr.ph20 ]
    %lsr.iv30 = phi [3840 x i8]* [ %114, %113 ], [ %fail, %.lr.ph20 ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %113 ], [ %n, %.lr.ph20 ]
    %89 = load i8, i8* %lsr.iv37, align 1, !tbaa !49
    %90 = icmp eq i8 %89, 0
    br i1 %90, label %111, label %91
  
  ; <label>:91                                      ; preds = %88
    %92 = trunc i16 %86 to i8
    %sunkaddr84 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr85 = add i32 %sunkaddr84, 2024
    %sunkaddr86 = inttoptr i32 %sunkaddr85 to %struct.gl_frame_buffer**
    %93 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr86, align 4, !tbaa !45
    %94 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %93, i32 0, i32 4
    %95 = load i8*, i8** %94, align 4, !tbaa !46
    %96 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %93, i32 0, i32 1
    %97 = load i32, i32* %96, align 4, !tbaa !48
    %98 = load i32, i32* %lsr.iv35, align 4, !tbaa !52
    %99 = mul nsw i32 %98, %97
    %100 = getelementptr inbounds i8, i8* %95, i32 %99
    %101 = load i32, i32* %lsr.iv33, align 4, !tbaa !52
    %102 = getelementptr inbounds i8, i8* %100, i32 %101
    %103 = load i8, i8* %102, align 1, !tbaa !49
    %sunkaddr87 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr88 = add i32 %sunkaddr87, 54349
    %sunkaddr89 = inttoptr i32 %sunkaddr88 to i8*
    %104 = load i8, i8* %sunkaddr89, align 1, !tbaa !40
    %105 = and i8 %104, %103
    %106 = icmp ugt i8 %92, %105
    br i1 %106, label %107, label %109
  
  ; <label>:107                                     ; preds = %91
    %108 = bitcast [3840 x i8]* %lsr.iv30 to i8*
    store i8 0, i8* %108, align 1, !tbaa !49
    br label %113
  
  ; <label>:109                                     ; preds = %91
    %110 = bitcast [3840 x i8]* %lsr.iv30 to i8*
    store i8 1, i8* %110, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv37, align 1, !tbaa !49
    br label %113
  
  ; <label>:111                                     ; preds = %88
    %112 = bitcast [3840 x i8]* %lsr.iv30 to i8*
    store i8 0, i8* %112, align 1, !tbaa !49
    br label %113
  
  ; <label>:113                                     ; preds = %111, %109, %107
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv30, i32 0, i32 1
    %114 = bitcast i8* %scevgep31 to [3840 x i8]*
    %scevgep34 = getelementptr i32, i32* %lsr.iv33, i32 1
    %scevgep36 = getelementptr i32, i32* %lsr.iv35, i32 1
    %scevgep38 = getelementptr i8, i8* %lsr.iv37, i32 1
    %exitcond38 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond38, label %.loopexit, label %88
  
  ; <label>:115                                     ; preds = %0
    %116 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %117 = bitcast i8* %116 to i16*
    %118 = load i16, i16* %117, align 4
    %119 = lshr i16 %118, 8
    %120 = and i16 %118, %119
    %121 = icmp eq i32 %n, 0
    br i1 %121, label %.loopexit, label %.lr.ph22
  
  .lr.ph22:                                         ; preds = %115
    br label %122
  
  ; <label>:122                                     ; preds = %147, %.lr.ph22
    %lsr.iv48 = phi i8* [ %scevgep49, %147 ], [ %mask, %.lr.ph22 ]
    %lsr.iv46 = phi i32* [ %scevgep47, %147 ], [ %y, %.lr.ph22 ]
    %lsr.iv44 = phi i32* [ %scevgep45, %147 ], [ %x, %.lr.ph22 ]
    %lsr.iv41 = phi [3840 x i8]* [ %148, %147 ], [ %fail, %.lr.ph22 ]
    %lsr.iv39 = phi i32 [ %lsr.iv.next40, %147 ], [ %n, %.lr.ph22 ]
    %123 = load i8, i8* %lsr.iv48, align 1, !tbaa !49
    %124 = icmp eq i8 %123, 0
    br i1 %124, label %145, label %125
  
  ; <label>:125                                     ; preds = %122
    %126 = trunc i16 %120 to i8
    %sunkaddr90 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr91 = add i32 %sunkaddr90, 2024
    %sunkaddr92 = inttoptr i32 %sunkaddr91 to %struct.gl_frame_buffer**
    %127 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr92, align 4, !tbaa !45
    %128 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %127, i32 0, i32 4
    %129 = load i8*, i8** %128, align 4, !tbaa !46
    %130 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %127, i32 0, i32 1
    %131 = load i32, i32* %130, align 4, !tbaa !48
    %132 = load i32, i32* %lsr.iv46, align 4, !tbaa !52
    %133 = mul nsw i32 %132, %131
    %134 = getelementptr inbounds i8, i8* %129, i32 %133
    %135 = load i32, i32* %lsr.iv44, align 4, !tbaa !52
    %136 = getelementptr inbounds i8, i8* %134, i32 %135
    %137 = load i8, i8* %136, align 1, !tbaa !49
    %sunkaddr93 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr94 = add i32 %sunkaddr93, 54349
    %sunkaddr95 = inttoptr i32 %sunkaddr94 to i8*
    %138 = load i8, i8* %sunkaddr95, align 1, !tbaa !40
    %139 = and i8 %138, %137
    %140 = icmp ult i8 %126, %139
    br i1 %140, label %143, label %141
  
  ; <label>:141                                     ; preds = %125
    %142 = bitcast [3840 x i8]* %lsr.iv41 to i8*
    store i8 0, i8* %142, align 1, !tbaa !49
    br label %147
  
  ; <label>:143                                     ; preds = %125
    %144 = bitcast [3840 x i8]* %lsr.iv41 to i8*
    store i8 1, i8* %144, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv48, align 1, !tbaa !49
    br label %147
  
  ; <label>:145                                     ; preds = %122
    %146 = bitcast [3840 x i8]* %lsr.iv41 to i8*
    store i8 0, i8* %146, align 1, !tbaa !49
    br label %147
  
  ; <label>:147                                     ; preds = %145, %143, %141
    %lsr.iv.next40 = add i32 %lsr.iv39, -1
    %scevgep42 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv41, i32 0, i32 1
    %148 = bitcast i8* %scevgep42 to [3840 x i8]*
    %scevgep45 = getelementptr i32, i32* %lsr.iv44, i32 1
    %scevgep47 = getelementptr i32, i32* %lsr.iv46, i32 1
    %scevgep49 = getelementptr i8, i8* %lsr.iv48, i32 1
    %exitcond39 = icmp eq i32 %lsr.iv.next40, 0
    br i1 %exitcond39, label %.loopexit, label %122
  
  ; <label>:149                                     ; preds = %0
    %150 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %151 = bitcast i8* %150 to i16*
    %152 = load i16, i16* %151, align 4
    %153 = lshr i16 %152, 8
    %154 = and i16 %152, %153
    %155 = icmp eq i32 %n, 0
    br i1 %155, label %.loopexit, label %.lr.ph24
  
  .lr.ph24:                                         ; preds = %149
    br label %156
  
  ; <label>:156                                     ; preds = %181, %.lr.ph24
    %lsr.iv59 = phi i8* [ %scevgep60, %181 ], [ %mask, %.lr.ph24 ]
    %lsr.iv57 = phi i32* [ %scevgep58, %181 ], [ %y, %.lr.ph24 ]
    %lsr.iv55 = phi i32* [ %scevgep56, %181 ], [ %x, %.lr.ph24 ]
    %lsr.iv52 = phi [3840 x i8]* [ %182, %181 ], [ %fail, %.lr.ph24 ]
    %lsr.iv50 = phi i32 [ %lsr.iv.next51, %181 ], [ %n, %.lr.ph24 ]
    %157 = load i8, i8* %lsr.iv59, align 1, !tbaa !49
    %158 = icmp eq i8 %157, 0
    br i1 %158, label %179, label %159
  
  ; <label>:159                                     ; preds = %156
    %160 = trunc i16 %154 to i8
    %sunkaddr96 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr97 = add i32 %sunkaddr96, 2024
    %sunkaddr98 = inttoptr i32 %sunkaddr97 to %struct.gl_frame_buffer**
    %161 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr98, align 4, !tbaa !45
    %162 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %161, i32 0, i32 4
    %163 = load i8*, i8** %162, align 4, !tbaa !46
    %164 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %161, i32 0, i32 1
    %165 = load i32, i32* %164, align 4, !tbaa !48
    %166 = load i32, i32* %lsr.iv57, align 4, !tbaa !52
    %167 = mul nsw i32 %166, %165
    %168 = getelementptr inbounds i8, i8* %163, i32 %167
    %169 = load i32, i32* %lsr.iv55, align 4, !tbaa !52
    %170 = getelementptr inbounds i8, i8* %168, i32 %169
    %171 = load i8, i8* %170, align 1, !tbaa !49
    %sunkaddr99 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr100 = add i32 %sunkaddr99, 54349
    %sunkaddr101 = inttoptr i32 %sunkaddr100 to i8*
    %172 = load i8, i8* %sunkaddr101, align 1, !tbaa !40
    %173 = and i8 %172, %171
    %174 = icmp eq i8 %160, %173
    br i1 %174, label %175, label %177
  
  ; <label>:175                                     ; preds = %159
    %176 = bitcast [3840 x i8]* %lsr.iv52 to i8*
    store i8 0, i8* %176, align 1, !tbaa !49
    br label %181
  
  ; <label>:177                                     ; preds = %159
    %178 = bitcast [3840 x i8]* %lsr.iv52 to i8*
    store i8 1, i8* %178, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv59, align 1, !tbaa !49
    br label %181
  
  ; <label>:179                                     ; preds = %156
    %180 = bitcast [3840 x i8]* %lsr.iv52 to i8*
    store i8 0, i8* %180, align 1, !tbaa !49
    br label %181
  
  ; <label>:181                                     ; preds = %179, %177, %175
    %lsr.iv.next51 = add i32 %lsr.iv50, -1
    %scevgep53 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv52, i32 0, i32 1
    %182 = bitcast i8* %scevgep53 to [3840 x i8]*
    %scevgep56 = getelementptr i32, i32* %lsr.iv55, i32 1
    %scevgep58 = getelementptr i32, i32* %lsr.iv57, i32 1
    %scevgep60 = getelementptr i8, i8* %lsr.iv59, i32 1
    %exitcond40 = icmp eq i32 %lsr.iv.next51, 0
    br i1 %exitcond40, label %.loopexit, label %156
  
  ; <label>:183                                     ; preds = %0
    %184 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %185 = bitcast i8* %184 to i16*
    %186 = load i16, i16* %185, align 4
    %187 = lshr i16 %186, 8
    %188 = and i16 %186, %187
    %189 = icmp eq i32 %n, 0
    br i1 %189, label %.loopexit, label %.lr.ph26
  
  .lr.ph26:                                         ; preds = %183
    br label %190
  
  ; <label>:190                                     ; preds = %215, %.lr.ph26
    %lsr.iv70 = phi i8* [ %scevgep71, %215 ], [ %mask, %.lr.ph26 ]
    %lsr.iv68 = phi i32* [ %scevgep69, %215 ], [ %y, %.lr.ph26 ]
    %lsr.iv66 = phi i32* [ %scevgep67, %215 ], [ %x, %.lr.ph26 ]
    %lsr.iv63 = phi [3840 x i8]* [ %216, %215 ], [ %fail, %.lr.ph26 ]
    %lsr.iv61 = phi i32 [ %lsr.iv.next62, %215 ], [ %n, %.lr.ph26 ]
    %191 = load i8, i8* %lsr.iv70, align 1, !tbaa !49
    %192 = icmp eq i8 %191, 0
    br i1 %192, label %213, label %193
  
  ; <label>:193                                     ; preds = %190
    %194 = trunc i16 %188 to i8
    %sunkaddr102 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr103 = add i32 %sunkaddr102, 2024
    %sunkaddr104 = inttoptr i32 %sunkaddr103 to %struct.gl_frame_buffer**
    %195 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr104, align 4, !tbaa !45
    %196 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %195, i32 0, i32 4
    %197 = load i8*, i8** %196, align 4, !tbaa !46
    %198 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %195, i32 0, i32 1
    %199 = load i32, i32* %198, align 4, !tbaa !48
    %200 = load i32, i32* %lsr.iv68, align 4, !tbaa !52
    %201 = mul nsw i32 %200, %199
    %202 = getelementptr inbounds i8, i8* %197, i32 %201
    %203 = load i32, i32* %lsr.iv66, align 4, !tbaa !52
    %204 = getelementptr inbounds i8, i8* %202, i32 %203
    %205 = load i8, i8* %204, align 1, !tbaa !49
    %sunkaddr105 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr106 = add i32 %sunkaddr105, 54349
    %sunkaddr107 = inttoptr i32 %sunkaddr106 to i8*
    %206 = load i8, i8* %sunkaddr107, align 1, !tbaa !40
    %207 = and i8 %206, %205
    %208 = icmp eq i8 %194, %207
    br i1 %208, label %211, label %209
  
  ; <label>:209                                     ; preds = %193
    %210 = bitcast [3840 x i8]* %lsr.iv63 to i8*
    store i8 0, i8* %210, align 1, !tbaa !49
    br label %215
  
  ; <label>:211                                     ; preds = %193
    %212 = bitcast [3840 x i8]* %lsr.iv63 to i8*
    store i8 1, i8* %212, align 1, !tbaa !49
    store i8 0, i8* %lsr.iv70, align 1, !tbaa !49
    br label %215
  
  ; <label>:213                                     ; preds = %190
    %214 = bitcast [3840 x i8]* %lsr.iv63 to i8*
    store i8 0, i8* %214, align 1, !tbaa !49
    br label %215
  
  ; <label>:215                                     ; preds = %213, %211, %209
    %lsr.iv.next62 = add i32 %lsr.iv61, -1
    %scevgep64 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv63, i32 0, i32 1
    %216 = bitcast i8* %scevgep64 to [3840 x i8]*
    %scevgep67 = getelementptr i32, i32* %lsr.iv66, i32 1
    %scevgep69 = getelementptr i32, i32* %lsr.iv68, i32 1
    %scevgep71 = getelementptr i8, i8* %lsr.iv70, i32 1
    %exitcond41 = icmp eq i32 %lsr.iv.next62, 0
    br i1 %exitcond41, label %.loopexit, label %190
  
  ; <label>:217                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %215, %181, %147, %113, %79, %45, %10, %183, %149, %115, %81, %47, %13, %.preheader, %.lr.ph28.preheader, %.preheader12
    %allfail.0 = phi i32 [ 0, %.preheader ], [ 1, %13 ], [ 1, %47 ], [ 1, %81 ], [ 1, %115 ], [ 1, %149 ], [ 1, %183 ], [ 1, %.preheader12 ], [ 1, %.lr.ph28.preheader ], [ 0, %10 ], [ 1, %45 ], [ 1, %79 ], [ 1, %113 ], [ 1, %147 ], [ 1, %181 ], [ 1, %215 ]
    %218 = bitcast [3840 x i8]* %fail to i8*
    %219 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 2
    %220 = load i32, i32* %219, align 4, !tbaa !42
    call fastcc void @apply_stencil_op_to_pixels(%struct.gl_context* %ctx, i32 signext %n, i32* %x, i32* %y, i32 signext %220, i8* %218)
    call void @llvm.lifetime.end(i64 3840, i8* %218) #5
    ret i32 %allfail.0
  }
  
  ; Function Attrs: nounwind
  define internal fastcc void @apply_stencil_op_to_pixels(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32* nocapture readonly %x, i32* nocapture readonly %y, i32 signext %oper, i8* nocapture readonly %mask) unnamed_addr #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 8
    %2 = load i8, i8* %1, align 1, !tbaa !41
    %3 = zext i8 %2 to i32
    %4 = xor i32 %3, 255
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 5
    %6 = load i8, i8* %5, align 4, !tbaa !39
    switch i32 %oper, label %229 [
      i32 7680, label %.loopexit
      i32 0, label %7
      i32 7681, label %45
      i32 7682, label %86
      i32 7683, label %135
      i32 5386, label %184
    ]
  
  ; <label>:7                                       ; preds = %0
    %8 = icmp eq i8 %2, -1
    br i1 %8, label %.preheader, label %.preheader10
  
  .preheader10:                                     ; preds = %7
    %9 = icmp ne i32 %n, 0
    br i1 %9, label %.lr.ph30, label %.loopexit
  
  .lr.ph30:                                         ; preds = %.preheader10
    br label %26
  
  .preheader:                                       ; preds = %7
    %10 = icmp ne i32 %n, 0
    br i1 %10, label %.lr.ph, label %.loopexit
  
  .lr.ph:                                           ; preds = %.preheader
    br label %11
  
  ; <label>:11                                      ; preds = %25, %.lr.ph
    %lsr.iv4 = phi i8* [ %scevgep5, %25 ], [ %mask, %.lr.ph ]
    %lsr.iv2 = phi i32* [ %scevgep3, %25 ], [ %y, %.lr.ph ]
    %lsr.iv1 = phi i32* [ %scevgep, %25 ], [ %x, %.lr.ph ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %25 ], [ %n, %.lr.ph ]
    %12 = load i8, i8* %lsr.iv4, align 1, !tbaa !49
    %13 = icmp eq i8 %12, 0
    br i1 %13, label %25, label %14
  
  ; <label>:14                                      ; preds = %11
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr78 = add i32 %sunkaddr, 2024
    %sunkaddr79 = inttoptr i32 %sunkaddr78 to %struct.gl_frame_buffer**
    %15 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr79, align 4, !tbaa !45
    %16 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %15, i32 0, i32 4
    %17 = load i8*, i8** %16, align 4, !tbaa !46
    %18 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %15, i32 0, i32 1
    %19 = load i32, i32* %18, align 4, !tbaa !48
    %20 = load i32, i32* %lsr.iv2, align 4, !tbaa !52
    %21 = mul nsw i32 %20, %19
    %22 = getelementptr inbounds i8, i8* %17, i32 %21
    %23 = load i32, i32* %lsr.iv1, align 4, !tbaa !52
    %24 = getelementptr inbounds i8, i8* %22, i32 %23
    store i8 0, i8* %24, align 1, !tbaa !49
    br label %25
  
  ; <label>:25                                      ; preds = %14, %11
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr i32, i32* %lsr.iv1, i32 1
    %scevgep3 = getelementptr i32, i32* %lsr.iv2, i32 1
    %scevgep5 = getelementptr i8, i8* %lsr.iv4, i32 1
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %11
  
  ; <label>:26                                      ; preds = %44, %.lr.ph30
    %lsr.iv12 = phi i8* [ %scevgep13, %44 ], [ %mask, %.lr.ph30 ]
    %lsr.iv10 = phi i32* [ %scevgep11, %44 ], [ %y, %.lr.ph30 ]
    %lsr.iv8 = phi i32* [ %scevgep9, %44 ], [ %x, %.lr.ph30 ]
    %lsr.iv6 = phi i32 [ %lsr.iv.next7, %44 ], [ %n, %.lr.ph30 ]
    %27 = load i8, i8* %lsr.iv12, align 1, !tbaa !49
    %28 = icmp eq i8 %27, 0
    br i1 %28, label %44, label %29
  
  ; <label>:29                                      ; preds = %26
    %sunkaddr80 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr81 = add i32 %sunkaddr80, 2024
    %sunkaddr82 = inttoptr i32 %sunkaddr81 to %struct.gl_frame_buffer**
    %30 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr82, align 4, !tbaa !45
    %31 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %30, i32 0, i32 4
    %32 = load i8*, i8** %31, align 4, !tbaa !46
    %33 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %30, i32 0, i32 1
    %34 = load i32, i32* %33, align 4, !tbaa !48
    %35 = load i32, i32* %lsr.iv10, align 4, !tbaa !52
    %36 = mul nsw i32 %35, %34
    %37 = getelementptr inbounds i8, i8* %32, i32 %36
    %38 = load i32, i32* %lsr.iv8, align 4, !tbaa !52
    %39 = getelementptr inbounds i8, i8* %37, i32 %38
    %40 = load i8, i8* %39, align 1, !tbaa !49
    %41 = zext i8 %40 to i32
    %42 = and i32 %41, %4
    %43 = trunc i32 %42 to i8
    store i8 %43, i8* %39, align 1, !tbaa !49
    br label %44
  
  ; <label>:44                                      ; preds = %29, %26
    %lsr.iv.next7 = add i32 %lsr.iv6, -1
    %scevgep9 = getelementptr i32, i32* %lsr.iv8, i32 1
    %scevgep11 = getelementptr i32, i32* %lsr.iv10, i32 1
    %scevgep13 = getelementptr i8, i8* %lsr.iv12, i32 1
    %exitcond56 = icmp eq i32 %lsr.iv.next7, 0
    br i1 %exitcond56, label %.loopexit, label %26
  
  ; <label>:45                                      ; preds = %0
    %46 = icmp eq i8 %2, -1
    br i1 %46, label %.preheader12, label %.preheader14
  
  .preheader14:                                     ; preds = %45
    %47 = icmp ne i32 %n, 0
    br i1 %47, label %.lr.ph34, label %.loopexit
  
  .lr.ph34:                                         ; preds = %.preheader14
    %48 = and i8 %6, %2
    %49 = zext i8 %48 to i32
    br label %66
  
  .preheader12:                                     ; preds = %45
    %50 = icmp ne i32 %n, 0
    br i1 %50, label %.lr.ph32, label %.loopexit
  
  .lr.ph32:                                         ; preds = %.preheader12
    br label %51
  
  ; <label>:51                                      ; preds = %65, %.lr.ph32
    %lsr.iv20 = phi i8* [ %scevgep21, %65 ], [ %mask, %.lr.ph32 ]
    %lsr.iv18 = phi i32* [ %scevgep19, %65 ], [ %y, %.lr.ph32 ]
    %lsr.iv16 = phi i32* [ %scevgep17, %65 ], [ %x, %.lr.ph32 ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %65 ], [ %n, %.lr.ph32 ]
    %52 = load i8, i8* %lsr.iv20, align 1, !tbaa !49
    %53 = icmp eq i8 %52, 0
    br i1 %53, label %65, label %54
  
  ; <label>:54                                      ; preds = %51
    %sunkaddr83 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr84 = add i32 %sunkaddr83, 2024
    %sunkaddr85 = inttoptr i32 %sunkaddr84 to %struct.gl_frame_buffer**
    %55 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr85, align 4, !tbaa !45
    %56 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %55, i32 0, i32 4
    %57 = load i8*, i8** %56, align 4, !tbaa !46
    %58 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %55, i32 0, i32 1
    %59 = load i32, i32* %58, align 4, !tbaa !48
    %60 = load i32, i32* %lsr.iv18, align 4, !tbaa !52
    %61 = mul nsw i32 %60, %59
    %62 = getelementptr inbounds i8, i8* %57, i32 %61
    %63 = load i32, i32* %lsr.iv16, align 4, !tbaa !52
    %64 = getelementptr inbounds i8, i8* %62, i32 %63
    store i8 %6, i8* %64, align 1, !tbaa !49
    br label %65
  
  ; <label>:65                                      ; preds = %54, %51
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep17 = getelementptr i32, i32* %lsr.iv16, i32 1
    %scevgep19 = getelementptr i32, i32* %lsr.iv18, i32 1
    %scevgep21 = getelementptr i8, i8* %lsr.iv20, i32 1
    %exitcond57 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond57, label %.loopexit, label %51
  
  ; <label>:66                                      ; preds = %85, %.lr.ph34
    %lsr.iv28 = phi i8* [ %scevgep29, %85 ], [ %mask, %.lr.ph34 ]
    %lsr.iv26 = phi i32* [ %scevgep27, %85 ], [ %y, %.lr.ph34 ]
    %lsr.iv24 = phi i32* [ %scevgep25, %85 ], [ %x, %.lr.ph34 ]
    %lsr.iv22 = phi i32 [ %lsr.iv.next23, %85 ], [ %n, %.lr.ph34 ]
    %67 = load i8, i8* %lsr.iv28, align 1, !tbaa !49
    %68 = icmp eq i8 %67, 0
    br i1 %68, label %85, label %69
  
  ; <label>:69                                      ; preds = %66
    %sunkaddr86 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr87 = add i32 %sunkaddr86, 2024
    %sunkaddr88 = inttoptr i32 %sunkaddr87 to %struct.gl_frame_buffer**
    %70 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr88, align 4, !tbaa !45
    %71 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %70, i32 0, i32 4
    %72 = load i8*, i8** %71, align 4, !tbaa !46
    %73 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %70, i32 0, i32 1
    %74 = load i32, i32* %73, align 4, !tbaa !48
    %75 = load i32, i32* %lsr.iv26, align 4, !tbaa !52
    %76 = mul nsw i32 %75, %74
    %77 = getelementptr inbounds i8, i8* %72, i32 %76
    %78 = load i32, i32* %lsr.iv24, align 4, !tbaa !52
    %79 = getelementptr inbounds i8, i8* %77, i32 %78
    %80 = load i8, i8* %79, align 1, !tbaa !49
    %81 = zext i8 %80 to i32
    %82 = and i32 %81, %4
    %83 = or i32 %82, %49
    %84 = trunc i32 %83 to i8
    store i8 %84, i8* %79, align 1, !tbaa !49
    br label %85
  
  ; <label>:85                                      ; preds = %69, %66
    %lsr.iv.next23 = add i32 %lsr.iv22, -1
    %scevgep25 = getelementptr i32, i32* %lsr.iv24, i32 1
    %scevgep27 = getelementptr i32, i32* %lsr.iv26, i32 1
    %scevgep29 = getelementptr i8, i8* %lsr.iv28, i32 1
    %exitcond58 = icmp eq i32 %lsr.iv.next23, 0
    br i1 %exitcond58, label %.loopexit, label %66
  
  ; <label>:86                                      ; preds = %0
    %87 = icmp eq i8 %2, -1
    br i1 %87, label %.preheader16, label %.preheader18
  
  .preheader18:                                     ; preds = %86
    %88 = icmp ne i32 %n, 0
    br i1 %88, label %.lr.ph38, label %.loopexit
  
  .lr.ph38:                                         ; preds = %.preheader18
    br label %111
  
  .preheader16:                                     ; preds = %86
    %89 = icmp ne i32 %n, 0
    br i1 %89, label %.lr.ph36, label %.loopexit
  
  .lr.ph36:                                         ; preds = %.preheader16
    br label %90
  
  ; <label>:90                                      ; preds = %110, %.lr.ph36
    %lsr.iv36 = phi i8* [ %scevgep37, %110 ], [ %mask, %.lr.ph36 ]
    %lsr.iv34 = phi i32* [ %scevgep35, %110 ], [ %y, %.lr.ph36 ]
    %lsr.iv32 = phi i32* [ %scevgep33, %110 ], [ %x, %.lr.ph36 ]
    %lsr.iv30 = phi i32 [ %lsr.iv.next31, %110 ], [ %n, %.lr.ph36 ]
    %91 = load i8, i8* %lsr.iv36, align 1, !tbaa !49
    %92 = icmp eq i8 %91, 0
    br i1 %92, label %110, label %93
  
  ; <label>:93                                      ; preds = %90
    %sunkaddr89 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr90 = add i32 %sunkaddr89, 2024
    %sunkaddr91 = inttoptr i32 %sunkaddr90 to %struct.gl_frame_buffer**
    %94 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr91, align 4, !tbaa !45
    %95 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %94, i32 0, i32 4
    %96 = load i8*, i8** %95, align 4, !tbaa !46
    %97 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %94, i32 0, i32 1
    %98 = load i32, i32* %97, align 4, !tbaa !48
    %99 = load i32, i32* %lsr.iv34, align 4, !tbaa !52
    %100 = mul nsw i32 %99, %98
    %101 = getelementptr inbounds i8, i8* %96, i32 %100
    %102 = load i32, i32* %lsr.iv32, align 4, !tbaa !52
    %103 = getelementptr inbounds i8, i8* %101, i32 %102
    %104 = load i8, i8* %103, align 1, !tbaa !49
    %105 = zext i8 %104 to i32
    %106 = icmp eq i8 %104, -1
    br i1 %106, label %110, label %107
  
  ; <label>:107                                     ; preds = %93
    %108 = add nuw nsw i32 %105, 1
    %109 = trunc i32 %108 to i8
    store i8 %109, i8* %103, align 1, !tbaa !49
    br label %110
  
  ; <label>:110                                     ; preds = %107, %93, %90
    %lsr.iv.next31 = add i32 %lsr.iv30, -1
    %scevgep33 = getelementptr i32, i32* %lsr.iv32, i32 1
    %scevgep35 = getelementptr i32, i32* %lsr.iv34, i32 1
    %scevgep37 = getelementptr i8, i8* %lsr.iv36, i32 1
    %exitcond59 = icmp eq i32 %lsr.iv.next31, 0
    br i1 %exitcond59, label %.loopexit, label %90
  
  ; <label>:111                                     ; preds = %134, %.lr.ph38
    %lsr.iv44 = phi i8* [ %scevgep45, %134 ], [ %mask, %.lr.ph38 ]
    %lsr.iv42 = phi i32* [ %scevgep43, %134 ], [ %y, %.lr.ph38 ]
    %lsr.iv40 = phi i32* [ %scevgep41, %134 ], [ %x, %.lr.ph38 ]
    %lsr.iv38 = phi i32 [ %lsr.iv.next39, %134 ], [ %n, %.lr.ph38 ]
    %112 = load i8, i8* %lsr.iv44, align 1, !tbaa !49
    %113 = icmp eq i8 %112, 0
    br i1 %113, label %134, label %114
  
  ; <label>:114                                     ; preds = %111
    %sunkaddr92 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr93 = add i32 %sunkaddr92, 2024
    %sunkaddr94 = inttoptr i32 %sunkaddr93 to %struct.gl_frame_buffer**
    %115 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr94, align 4, !tbaa !45
    %116 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %115, i32 0, i32 4
    %117 = load i8*, i8** %116, align 4, !tbaa !46
    %118 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %115, i32 0, i32 1
    %119 = load i32, i32* %118, align 4, !tbaa !48
    %120 = load i32, i32* %lsr.iv42, align 4, !tbaa !52
    %121 = mul nsw i32 %120, %119
    %122 = getelementptr inbounds i8, i8* %117, i32 %121
    %123 = load i32, i32* %lsr.iv40, align 4, !tbaa !52
    %124 = getelementptr inbounds i8, i8* %122, i32 %123
    %125 = load i8, i8* %124, align 1, !tbaa !49
    %126 = zext i8 %125 to i32
    %127 = icmp eq i8 %125, -1
    br i1 %127, label %134, label %128
  
  ; <label>:128                                     ; preds = %114
    %129 = and i32 %126, %4
    %130 = add nuw nsw i32 %126, 1
    %131 = and i32 %130, %3
    %132 = or i32 %131, %129
    %133 = trunc i32 %132 to i8
    store i8 %133, i8* %124, align 1, !tbaa !49
    br label %134
  
  ; <label>:134                                     ; preds = %128, %114, %111
    %lsr.iv.next39 = add i32 %lsr.iv38, -1
    %scevgep41 = getelementptr i32, i32* %lsr.iv40, i32 1
    %scevgep43 = getelementptr i32, i32* %lsr.iv42, i32 1
    %scevgep45 = getelementptr i8, i8* %lsr.iv44, i32 1
    %exitcond60 = icmp eq i32 %lsr.iv.next39, 0
    br i1 %exitcond60, label %.loopexit, label %111
  
  ; <label>:135                                     ; preds = %0
    %136 = icmp eq i8 %2, -1
    br i1 %136, label %.preheader20, label %.preheader22
  
  .preheader22:                                     ; preds = %135
    %137 = icmp ne i32 %n, 0
    br i1 %137, label %.lr.ph42, label %.loopexit
  
  .lr.ph42:                                         ; preds = %.preheader22
    br label %160
  
  .preheader20:                                     ; preds = %135
    %138 = icmp ne i32 %n, 0
    br i1 %138, label %.lr.ph40, label %.loopexit
  
  .lr.ph40:                                         ; preds = %.preheader20
    br label %139
  
  ; <label>:139                                     ; preds = %159, %.lr.ph40
    %lsr.iv52 = phi i8* [ %scevgep53, %159 ], [ %mask, %.lr.ph40 ]
    %lsr.iv50 = phi i32* [ %scevgep51, %159 ], [ %y, %.lr.ph40 ]
    %lsr.iv48 = phi i32* [ %scevgep49, %159 ], [ %x, %.lr.ph40 ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %159 ], [ %n, %.lr.ph40 ]
    %140 = load i8, i8* %lsr.iv52, align 1, !tbaa !49
    %141 = icmp eq i8 %140, 0
    br i1 %141, label %159, label %142
  
  ; <label>:142                                     ; preds = %139
    %sunkaddr95 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr96 = add i32 %sunkaddr95, 2024
    %sunkaddr97 = inttoptr i32 %sunkaddr96 to %struct.gl_frame_buffer**
    %143 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr97, align 4, !tbaa !45
    %144 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %143, i32 0, i32 4
    %145 = load i8*, i8** %144, align 4, !tbaa !46
    %146 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %143, i32 0, i32 1
    %147 = load i32, i32* %146, align 4, !tbaa !48
    %148 = load i32, i32* %lsr.iv50, align 4, !tbaa !52
    %149 = mul nsw i32 %148, %147
    %150 = getelementptr inbounds i8, i8* %145, i32 %149
    %151 = load i32, i32* %lsr.iv48, align 4, !tbaa !52
    %152 = getelementptr inbounds i8, i8* %150, i32 %151
    %153 = load i8, i8* %152, align 1, !tbaa !49
    %154 = zext i8 %153 to i32
    %155 = icmp eq i8 %153, 0
    br i1 %155, label %159, label %156
  
  ; <label>:156                                     ; preds = %142
    %157 = add nuw nsw i32 %154, 255
    %158 = trunc i32 %157 to i8
    store i8 %158, i8* %152, align 1, !tbaa !49
    br label %159
  
  ; <label>:159                                     ; preds = %156, %142, %139
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep49 = getelementptr i32, i32* %lsr.iv48, i32 1
    %scevgep51 = getelementptr i32, i32* %lsr.iv50, i32 1
    %scevgep53 = getelementptr i8, i8* %lsr.iv52, i32 1
    %exitcond61 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond61, label %.loopexit, label %139
  
  ; <label>:160                                     ; preds = %183, %.lr.ph42
    %lsr.iv60 = phi i8* [ %scevgep61, %183 ], [ %mask, %.lr.ph42 ]
    %lsr.iv58 = phi i32* [ %scevgep59, %183 ], [ %y, %.lr.ph42 ]
    %lsr.iv56 = phi i32* [ %scevgep57, %183 ], [ %x, %.lr.ph42 ]
    %lsr.iv54 = phi i32 [ %lsr.iv.next55, %183 ], [ %n, %.lr.ph42 ]
    %161 = load i8, i8* %lsr.iv60, align 1, !tbaa !49
    %162 = icmp eq i8 %161, 0
    br i1 %162, label %183, label %163
  
  ; <label>:163                                     ; preds = %160
    %sunkaddr98 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr99 = add i32 %sunkaddr98, 2024
    %sunkaddr100 = inttoptr i32 %sunkaddr99 to %struct.gl_frame_buffer**
    %164 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr100, align 4, !tbaa !45
    %165 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %164, i32 0, i32 4
    %166 = load i8*, i8** %165, align 4, !tbaa !46
    %167 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %164, i32 0, i32 1
    %168 = load i32, i32* %167, align 4, !tbaa !48
    %169 = load i32, i32* %lsr.iv58, align 4, !tbaa !52
    %170 = mul nsw i32 %169, %168
    %171 = getelementptr inbounds i8, i8* %166, i32 %170
    %172 = load i32, i32* %lsr.iv56, align 4, !tbaa !52
    %173 = getelementptr inbounds i8, i8* %171, i32 %172
    %174 = load i8, i8* %173, align 1, !tbaa !49
    %175 = zext i8 %174 to i32
    %176 = icmp eq i8 %174, 0
    br i1 %176, label %183, label %177
  
  ; <label>:177                                     ; preds = %163
    %178 = and i32 %175, %4
    %179 = add nuw nsw i32 %175, 255
    %180 = and i32 %179, %3
    %181 = or i32 %180, %178
    %182 = trunc i32 %181 to i8
    store i8 %182, i8* %173, align 1, !tbaa !49
    br label %183
  
  ; <label>:183                                     ; preds = %177, %163, %160
    %lsr.iv.next55 = add i32 %lsr.iv54, -1
    %scevgep57 = getelementptr i32, i32* %lsr.iv56, i32 1
    %scevgep59 = getelementptr i32, i32* %lsr.iv58, i32 1
    %scevgep61 = getelementptr i8, i8* %lsr.iv60, i32 1
    %exitcond62 = icmp eq i32 %lsr.iv.next55, 0
    br i1 %exitcond62, label %.loopexit, label %160
  
  ; <label>:184                                     ; preds = %0
    %185 = icmp eq i8 %2, -1
    br i1 %185, label %.preheader24, label %.preheader26
  
  .preheader26:                                     ; preds = %184
    %186 = icmp ne i32 %n, 0
    br i1 %186, label %.lr.ph46, label %.loopexit
  
  .lr.ph46:                                         ; preds = %.preheader26
    br label %207
  
  .preheader24:                                     ; preds = %184
    %187 = icmp ne i32 %n, 0
    br i1 %187, label %.lr.ph44, label %.loopexit
  
  .lr.ph44:                                         ; preds = %.preheader24
    br label %188
  
  ; <label>:188                                     ; preds = %206, %.lr.ph44
    %lsr.iv68 = phi i8* [ %scevgep69, %206 ], [ %mask, %.lr.ph44 ]
    %lsr.iv66 = phi i32* [ %scevgep67, %206 ], [ %y, %.lr.ph44 ]
    %lsr.iv64 = phi i32* [ %scevgep65, %206 ], [ %x, %.lr.ph44 ]
    %lsr.iv62 = phi i32 [ %lsr.iv.next63, %206 ], [ %n, %.lr.ph44 ]
    %189 = load i8, i8* %lsr.iv68, align 1, !tbaa !49
    %190 = icmp eq i8 %189, 0
    br i1 %190, label %206, label %191
  
  ; <label>:191                                     ; preds = %188
    %sunkaddr101 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr102 = add i32 %sunkaddr101, 2024
    %sunkaddr103 = inttoptr i32 %sunkaddr102 to %struct.gl_frame_buffer**
    %192 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr103, align 4, !tbaa !45
    %193 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %192, i32 0, i32 4
    %194 = load i8*, i8** %193, align 4, !tbaa !46
    %195 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %192, i32 0, i32 1
    %196 = load i32, i32* %195, align 4, !tbaa !48
    %197 = load i32, i32* %lsr.iv66, align 4, !tbaa !52
    %198 = mul nsw i32 %197, %196
    %199 = getelementptr inbounds i8, i8* %194, i32 %198
    %200 = load i32, i32* %lsr.iv64, align 4, !tbaa !52
    %201 = getelementptr inbounds i8, i8* %199, i32 %200
    %202 = load i8, i8* %201, align 1, !tbaa !49
    %203 = zext i8 %202 to i32
    %204 = xor i32 %203, 255
    %205 = trunc i32 %204 to i8
    store i8 %205, i8* %201, align 1, !tbaa !49
    br label %206
  
  ; <label>:206                                     ; preds = %191, %188
    %lsr.iv.next63 = add i32 %lsr.iv62, -1
    %scevgep65 = getelementptr i32, i32* %lsr.iv64, i32 1
    %scevgep67 = getelementptr i32, i32* %lsr.iv66, i32 1
    %scevgep69 = getelementptr i8, i8* %lsr.iv68, i32 1
    %exitcond63 = icmp eq i32 %lsr.iv.next63, 0
    br i1 %exitcond63, label %.loopexit, label %188
  
  ; <label>:207                                     ; preds = %228, %.lr.ph46
    %lsr.iv76 = phi i8* [ %scevgep77, %228 ], [ %mask, %.lr.ph46 ]
    %lsr.iv74 = phi i32* [ %scevgep75, %228 ], [ %y, %.lr.ph46 ]
    %lsr.iv72 = phi i32* [ %scevgep73, %228 ], [ %x, %.lr.ph46 ]
    %lsr.iv70 = phi i32 [ %lsr.iv.next71, %228 ], [ %n, %.lr.ph46 ]
    %208 = load i8, i8* %lsr.iv76, align 1, !tbaa !49
    %209 = icmp eq i8 %208, 0
    br i1 %209, label %228, label %210
  
  ; <label>:210                                     ; preds = %207
    %sunkaddr104 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr105 = add i32 %sunkaddr104, 2024
    %sunkaddr106 = inttoptr i32 %sunkaddr105 to %struct.gl_frame_buffer**
    %211 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr106, align 4, !tbaa !45
    %212 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %211, i32 0, i32 4
    %213 = load i8*, i8** %212, align 4, !tbaa !46
    %214 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %211, i32 0, i32 1
    %215 = load i32, i32* %214, align 4, !tbaa !48
    %216 = load i32, i32* %lsr.iv74, align 4, !tbaa !52
    %217 = mul nsw i32 %216, %215
    %218 = getelementptr inbounds i8, i8* %213, i32 %217
    %219 = load i32, i32* %lsr.iv72, align 4, !tbaa !52
    %220 = getelementptr inbounds i8, i8* %218, i32 %219
    %221 = load i8, i8* %220, align 1, !tbaa !49
    %222 = zext i8 %221 to i32
    %223 = and i32 %222, %4
    %224 = xor i32 %222, 255
    %225 = and i32 %224, %3
    %226 = or i32 %225, %223
    %227 = trunc i32 %226 to i8
    store i8 %227, i8* %220, align 1, !tbaa !49
    br label %228
  
  ; <label>:228                                     ; preds = %210, %207
    %lsr.iv.next71 = add i32 %lsr.iv70, -1
    %scevgep73 = getelementptr i32, i32* %lsr.iv72, i32 1
    %scevgep75 = getelementptr i32, i32* %lsr.iv74, i32 1
    %scevgep77 = getelementptr i8, i8* %lsr.iv76, i32 1
    %exitcond64 = icmp eq i32 %lsr.iv.next71, 0
    br i1 %exitcond64, label %.loopexit, label %207
  
  ; <label>:229                                     ; preds = %0
    tail call void @abort() #6
    unreachable
  
  .loopexit:                                        ; preds = %228, %206, %183, %159, %134, %110, %85, %65, %44, %25, %.preheader24, %.preheader26, %.preheader20, %.preheader22, %.preheader16, %.preheader18, %.preheader12, %.preheader14, %.preheader, %.preheader10, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_depth_stencil_pixels(%struct.gl_context* %ctx, i32 signext %n, i32* %x, i32* %y, i16* %z, i8* %mask) #0 {
    %passmask = alloca [3840 x i8], align 1
    %failmask = alloca [3840 x i8], align 1
    %oldmask = alloca [3840 x i8], align 1
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 2
    %2 = load i8, i8* %1, align 4, !tbaa !50
    %3 = icmp eq i8 %2, 0
    br i1 %3, label %4, label %7
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 3
    %6 = load i32, i32* %5, align 4, !tbaa !44
    tail call fastcc void @apply_stencil_op_to_pixels(%struct.gl_context* nonnull %ctx, i32 signext %n, i32* %x, i32* %y, i32 signext %6, i8* %mask)
    br label %39
  
  ; <label>:7                                       ; preds = %0
    %8 = bitcast [3840 x i8]* %passmask to i8*
    call void @llvm.lifetime.start(i64 3840, i8* %8) #5
    %9 = bitcast [3840 x i8]* %failmask to i8*
    call void @llvm.lifetime.start(i64 3840, i8* %9) #5
    %10 = bitcast [3840 x i8]* %oldmask to i8*
    call void @llvm.lifetime.start(i64 3840, i8* %10) #5
    %11 = icmp eq i32 %n, 0
    br i1 %11, label %._crit_edge5.thread, label %.lr.ph.preheader
  
  ._crit_edge5.thread:                              ; preds = %7
    %12 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 30
    %13 = load void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)** %12, align 4, !tbaa !53
    tail call void %13(%struct.gl_context* nonnull %ctx, i32 signext %n, i32* %x, i32* %y, i16* %z, i8* %mask) #5
    br label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %7
    %14 = bitcast [3840 x i8]* %oldmask to i8*
    %15 = bitcast [3840 x i8]* %failmask to i8*
    %16 = bitcast [3840 x i8]* %passmask to i8*
    call void @llvm.memset.p0i8.i32(i8* %15, i8 0, i32 %n, i32 1, i1 false)
    call void @llvm.memset.p0i8.i32(i8* %16, i8 0, i32 %n, i32 1, i1 false)
    call void @llvm.memcpy.p0i8.p0i8.i32(i8* %14, i8* %mask, i32 %n, i32 1, i1 false)
    %17 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 30
    %18 = load void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)** %17, align 4, !tbaa !53
    tail call void %18(%struct.gl_context* nonnull %ctx, i32 signext %n, i32* %x, i32* %y, i16* %z, i8* %mask) #5
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %28, %.lr.ph.preheader
    %lsr.iv8 = phi [3840 x i8]* [ %31, %28 ], [ %oldmask, %.lr.ph.preheader ]
    %lsr.iv6 = phi i8* [ %scevgep7, %28 ], [ %mask, %.lr.ph.preheader ]
    %lsr.iv3 = phi [3840 x i8]* [ %30, %28 ], [ %passmask, %.lr.ph.preheader ]
    %lsr.iv1 = phi [3840 x i8]* [ %29, %28 ], [ %failmask, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %28 ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3840 x i8]* %lsr.iv8 to i8*
    %19 = load i8, i8* %lsr.iv810, align 1, !tbaa !49
    %20 = icmp eq i8 %19, 0
    br i1 %20, label %28, label %21
  
  ; <label>:21                                      ; preds = %.lr.ph
    %22 = load i8, i8* %lsr.iv6, align 1, !tbaa !49
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %26, label %24
  
  ; <label>:24                                      ; preds = %21
    %25 = bitcast [3840 x i8]* %lsr.iv3 to i8*
    store i8 1, i8* %25, align 1, !tbaa !49
    br label %28
  
  ; <label>:26                                      ; preds = %21
    %27 = bitcast [3840 x i8]* %lsr.iv1 to i8*
    store i8 1, i8* %27, align 1, !tbaa !49
    br label %28
  
  ; <label>:28                                      ; preds = %26, %24, %.lr.ph
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv1, i32 0, i32 1
    %29 = bitcast i8* %scevgep to [3840 x i8]*
    %scevgep4 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv3, i32 0, i32 1
    %30 = bitcast i8* %scevgep4 to [3840 x i8]*
    %scevgep7 = getelementptr i8, i8* %lsr.iv6, i32 1
    %scevgep9 = getelementptr [3840 x i8], [3840 x i8]* %lsr.iv8, i32 0, i32 1
    %31 = bitcast i8* %scevgep9 to [3840 x i8]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %28, %._crit_edge5.thread
    %32 = bitcast [3840 x i8]* %oldmask to i8*
    %33 = bitcast [3840 x i8]* %failmask to i8*
    %34 = bitcast [3840 x i8]* %passmask to i8*
    %35 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 4
    %36 = load i32, i32* %35, align 4, !tbaa !43
    call fastcc void @apply_stencil_op_to_pixels(%struct.gl_context* %ctx, i32 signext %n, i32* %x, i32* %y, i32 signext %36, i8* %33)
    %37 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 3
    %38 = load i32, i32* %37, align 4, !tbaa !44
    call fastcc void @apply_stencil_op_to_pixels(%struct.gl_context* %ctx, i32 signext %n, i32* %x, i32* %y, i32 signext %38, i8* %34)
    call void @llvm.lifetime.end(i64 3840, i8* %32) #5
    call void @llvm.lifetime.end(i64 3840, i8* %33) #5
    call void @llvm.lifetime.end(i64 3840, i8* %34) #5
    br label %39
  
  ; <label>:39                                      ; preds = %._crit_edge, %4
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_read_stencil_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture %stencil) #4 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 4
    %4 = load i8*, i8** %3, align 4, !tbaa !46
    %5 = icmp eq i8* %4, null
    br i1 %5, label %12, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %8 = load i32, i32* %7, align 4, !tbaa !48
    %9 = mul nsw i32 %8, %y
    %10 = getelementptr inbounds i8, i8* %4, i32 %9
    %11 = getelementptr inbounds i8, i8* %10, i32 %x
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %stencil, i8* %11, i32 %n, i32 1, i1 false)
    br label %12
  
  ; <label>:12                                      ; preds = %6, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #2
  
  ; Function Attrs: norecurse nounwind
  define void @gl_write_stencil_span(%struct.gl_context* nocapture readonly %ctx, i32 signext %n, i32 signext %x, i32 signext %y, i8* nocapture readonly %stencil) #4 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 4
    %4 = load i8*, i8** %3, align 4, !tbaa !46
    %5 = icmp eq i8* %4, null
    br i1 %5, label %12, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %8 = load i32, i32* %7, align 4, !tbaa !48
    %9 = mul nsw i32 %8, %y
    %10 = getelementptr inbounds i8, i8* %4, i32 %9
    %11 = getelementptr inbounds i8, i8* %10, i32 %x
    tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %11, i8* %stencil, i32 %n, i32 1, i1 false)
    br label %12
  
  ; <label>:12                                      ; preds = %6, %0
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_alloc_stencil_buffer(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %2 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %1, align 4, !tbaa !45
    %3 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 1
    %4 = load i32, i32* %3, align 4, !tbaa !48
    %5 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 2
    %6 = load i32, i32* %5, align 4, !tbaa !54
    %7 = mul nsw i32 %6, %4
    %8 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %2, i32 0, i32 4
    %9 = load i8*, i8** %8, align 4, !tbaa !46
    %10 = icmp eq i8* %9, null
    br i1 %10, label %14, label %11
  
  ; <label>:11                                      ; preds = %0
    tail call void @free(i8* nonnull %9) #5
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %12 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %13 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %12, i32 0, i32 4
    store i8* null, i8** %13, align 4, !tbaa !46
    br label %14
  
  ; <label>:14                                      ; preds = %11, %0
    %15 = phi %struct.gl_frame_buffer* [ %2, %0 ], [ %12, %11 ]
    %16 = tail call noalias i8* @malloc(i32 signext %7) #5
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %15, i32 0, i32 4
    store i8* %16, i8** %17, align 4, !tbaa !46
    %18 = icmp eq i8* %16, null
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %14
    %20 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 0
    store i8 0, i8* %20, align 4, !tbaa !55
    tail call void @gl_error(%struct.gl_context* nonnull %ctx, i32 signext 1285, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0)) #5
    br label %21
  
  ; <label>:21                                      ; preds = %19, %14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare noalias i8* @malloc(i32 signext) #0
  
  ; Function Attrs: norecurse nounwind
  define void @gl_clear_stencil_buffer(%struct.gl_context* nocapture readonly %ctx) #4 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !56
    %3 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %2, i32 0, i32 14
    %4 = load i32, i32* %3, align 4, !tbaa !57
    %5 = icmp eq i32 %4, 0
    br i1 %5, label %.loopexit, label %6
  
  ; <label>:6                                       ; preds = %0
    %7 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 5
    %8 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %7, align 4, !tbaa !45
    %9 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 4
    %10 = load i8*, i8** %9, align 4, !tbaa !46
    %11 = icmp eq i8* %10, null
    br i1 %11, label %.loopexit, label %12
  
  ; <label>:12                                      ; preds = %6
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 39, i32 0
    %14 = load i8, i8* %13, align 4, !tbaa !59
    %15 = icmp eq i8 %14, 0
    br i1 %15, label %52, label %16
  
  ; <label>:16                                      ; preds = %12
    %17 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 10
    %18 = load i32, i32* %17, align 4, !tbaa !60
    %19 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 9
    %20 = load i32, i32* %19, align 4, !tbaa !61
    %21 = add i32 %18, 1
    %22 = sub i32 %21, %20
    %23 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 11
    %24 = load i32, i32* %23, align 4, !tbaa !62
    %25 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 12
    %26 = load i32, i32* %25, align 4, !tbaa !63
    %27 = icmp sgt i32 %24, %26
    br i1 %27, label %.loopexit, label %.lr.ph
  
  .lr.ph:                                           ; preds = %16
    %28 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 7
    %29 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 1
    %30 = load i32, i32* %29, align 4, !tbaa !48
    %31 = mul nsw i32 %30, %24
    %32 = getelementptr inbounds i8, i8* %10, i32 %31
    %33 = getelementptr inbounds i8, i8* %32, i32 %20
    %34 = load i8, i8* %28, align 2, !tbaa !37
    tail call void @llvm.memset.p0i8.i32(i8* %33, i8 %34, i32 %22, i32 1, i1 false)
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2024
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_frame_buffer**
    %35 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr2, align 4, !tbaa !45
    %36 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %35, i32 0, i32 12
    %37 = load i32, i32* %36, align 4, !tbaa !63
    %38 = icmp slt i32 %24, %37
    br i1 %38, label %._crit_edge, label %.loopexit
  
  ._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge
    %39 = phi %struct.gl_frame_buffer* [ %48, %._crit_edge ], [ %35, %.lr.ph ]
    %y.014 = phi i32 [ %40, %._crit_edge ], [ %24, %.lr.ph ]
    %40 = add nsw i32 %y.014, 1
    %.phi.trans.insert = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %39, i32 0, i32 4
    %.pre = load i8*, i8** %.phi.trans.insert, align 4, !tbaa !46
    %.phi.trans.insert2 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %39, i32 0, i32 9
    %.pre3 = load i32, i32* %.phi.trans.insert2, align 4, !tbaa !61
    %41 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %39, i32 0, i32 1
    %42 = load i32, i32* %41, align 4, !tbaa !48
    %43 = add i32 %y.014, 1
    %44 = mul nsw i32 %42, %43
    %45 = getelementptr inbounds i8, i8* %.pre, i32 %44
    %46 = getelementptr inbounds i8, i8* %45, i32 %.pre3
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 54350
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i8*
    %47 = load i8, i8* %sunkaddr5, align 2, !tbaa !37
    tail call void @llvm.memset.p0i8.i32(i8* %46, i8 %47, i32 %22, i32 1, i1 false)
    %sunkaddr6 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr7 = add i32 %sunkaddr6, 2024
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to %struct.gl_frame_buffer**
    %48 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr8, align 4, !tbaa !45
    %49 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %48, i32 0, i32 12
    %50 = load i32, i32* %49, align 4, !tbaa !63
    %51 = icmp slt i32 %40, %50
    br i1 %51, label %._crit_edge, label %.loopexit
  
  ; <label>:52                                      ; preds = %12
    %53 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 40, i32 7
    %54 = load i8, i8* %53, align 2, !tbaa !37
    %55 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 1
    %56 = load i32, i32* %55, align 4, !tbaa !48
    %57 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %8, i32 0, i32 2
    %58 = load i32, i32* %57, align 4, !tbaa !54
    %59 = mul nsw i32 %58, %56
    tail call void @llvm.memset.p0i8.i32(i8* nonnull %10, i8 %54, i32 %59, i32 1, i1 false)
    br label %.loopexit
  
  .loopexit:                                        ; preds = %._crit_edge, %52, %.lr.ph, %16, %6, %0
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !4, i64 55744}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!2, !4, i64 54350}
  !38 = !{!2, !4, i64 54332}
  !39 = !{!2, !4, i64 54348}
  !40 = !{!2, !4, i64 54349}
  !41 = !{!2, !4, i64 54351}
  !42 = !{!2, !4, i64 54336}
  !43 = !{!2, !4, i64 54344}
  !44 = !{!2, !4, i64 54340}
  !45 = !{!2, !3, i64 2024}
  !46 = !{!47, !3, i64 16}
  !47 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !48 = !{!47, !8, i64 4}
  !49 = !{!4, !4, i64 0}
  !50 = !{!2, !4, i64 7520}
  !51 = !{!2, !3, i64 2144}
  !52 = !{!8, !8, i64 0}
  !53 = !{!2, !3, i64 2148}
  !54 = !{!47, !8, i64 8}
  !55 = !{!2, !4, i64 54328}
  !56 = !{!2, !3, i64 2020}
  !57 = !{!58, !8, i64 52}
  !58 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !59 = !{!2, !4, i64 54308}
  !60 = !{!47, !8, i64 40}
  !61 = !{!47, !8, i64 36}
  !62 = !{!47, !8, i64 44}
  !63 = !{!47, !8, i64 48}

...
---
name:            apply_stencil_op_to_span
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%a3' }
  - { reg: '%t0' }
  - { reg: '%t1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       24
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.72..loopexit', '%bb.2', '%bb.18', '%bb.26' ]
body:             |
  bb.0 (%ir-block.0, freq 8388568):
    successors: %bb.9(33), %bb.1(66)
    liveins: %a0, %a1, %a2, %a3, %t0, %t1, %t9, %ra
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -24
    CFI_INSTRUCTION .cfi_def_cfa_offset 24
    SW killed %ra, %sp, 20 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    %gp = ADDu %v0, %t9
    %at = ORi %zero, 54351
    %at = ADDu %a0, killed %at
    %v1 = LBu killed %at, 0 :: (load 1 from %ir.1, !tbaa !41)
    %at = LW %a0, 2024 :: (load 4 from %ir.7, !tbaa !45)
    %t3 = LW %at, 4 :: (load 4 from %ir.11, !tbaa !48)
    %t2 = LW killed %at, 16 :: (load 4 from %ir.9, !tbaa !46)
    %t4 = ADDiu %t0, -7680
    %at = SLTiu %t4, 4
    BEQ %at, %zero, %bb.9, implicit-def %at {
      %v0 = XORi %v1, 255
    }
  
  bb.1 (%ir-block.0, freq 5592373):
    successors: %bb.72..loopexit(25), %bb.2(25), %bb.18(25), %bb.26(25)
    liveins: %gp, %a0, %a1, %a2, %a3, %t1, %t2, %t3, %t4, %v0, %v1
  
    %at = SLL killed %t4, 2
    %t0 = LW %gp, target-flags(<unknown>) %jump-table.0 :: (load 4 from got)
    %at = ADDu killed %at, killed %t0
    %at = LW killed %at, target-flags(<unknown>) %jump-table.0 :: (load 4 from jump-table)
    %at = ADDu killed %at, killed %gp
    PseudoIndirectBranch killed %at {
      NOP
    }
  
  bb.2 (%ir-block.33, freq 1398093):
    successors: %bb.61..preheader3(37), %bb.3..preheader5(62)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = ORi %zero, 54348
    %at = ADDu killed %a0, killed %at
    %a0 = LBu killed %at, 0 :: (load 1 from %ir.5, align 4, !tbaa !39)
    %at = ADDiu %zero, 255
    BEQ %v1, %at, %bb.61..preheader3, implicit-def %at {
      NOP
    }
  
  bb.3..preheader5 (freq 873808):
    successors: %bb.4..lr.ph25(62), %bb.72..loopexit(37)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.4..lr.ph25 (freq 546130):
    successors: %bb.5(100)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %v1 = AND killed %a0, killed %v1
    %at = ADDu killed %a2, killed %at
    %a0 = ADDu killed %t2, killed %at
  
  bb.5 (%ir-block.47, freq 1092260):
    successors: %bb.7(37), %bb.6(62)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv24, !tbaa !49)
    BEQ %at, %zero, %bb.7, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.50, freq 682662):
    successors: %bb.7(100)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = LBu %a0, 0 :: (load 1 from %ir.lsr.iv22, !tbaa !49)
    %at = AND killed %at, %v0
    %at = OR killed %at, %v1
    SB killed %at, %a0, 0 :: (store 1 into %ir.lsr.iv22, !tbaa !49)
  
  bb.7 (%ir-block.56, freq 1092260):
    successors: %bb.8(50), %bb.5(50)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.5, implicit-def %at {
      %a0 = ADDiu killed %a0, 1
    }
  
  bb.8 (%ir-block.56, freq 546130):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.9 (%ir-block.0, freq 2796194):
    successors: %bb.34(49), %bb.10(50)
    liveins: %gp, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %v0, %v1
  
    %at = ADDiu %zero, 5386
    BEQ %t0, %at, %bb.34, implicit-def %at {
      NOP
    }
  
  bb.10 (%ir-block.0, freq 1398101):
    successors: %bb.11(99), %bb.73(0)
    liveins: %gp, %a1, %a2, %a3, %t0, %t1, %t2, %t3, %v0, %v1
  
    BNE %t0, %zero, %bb.73, implicit-def %at {
      NOP
    }
  
  bb.11 (%ir-block.13, freq 1398093):
    successors: %bb.67..preheader(37), %bb.12..preheader1(62)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = ADDiu %zero, 255
    BEQ %v1, %at, %bb.67..preheader, implicit-def %at {
      NOP
    }
  
  bb.12..preheader1 (freq 873808):
    successors: %bb.13..lr.ph21.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.13..lr.ph21.preheader (freq 546130):
    successors: %bb.14..lr.ph21(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v1 = ADDu killed %t2, killed %at
  
  bb.14..lr.ph21 (freq 1092260):
    successors: %bb.16(37), %bb.15(62)
    liveins: %a1, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv10, !tbaa !49)
    BEQ %at, %zero, %bb.16, implicit-def %at {
      NOP
    }
  
  bb.15 (%ir-block.27, freq 682662):
    successors: %bb.16(100)
    liveins: %a1, %t1, %v0, %v1
  
    %at = LBu %v1, 0 :: (load 1 from %ir.lsr.iv8, !tbaa !49)
    %at = AND killed %at, %v0
    SB killed %at, %v1, 0 :: (store 1 into %ir.lsr.iv8, !tbaa !49)
  
  bb.16 (%ir-block.32, freq 1092260):
    successors: %bb.17(50), %bb.14..lr.ph21(50)
    liveins: %a1, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.14..lr.ph21, implicit-def %at {
      %v1 = ADDiu killed %v1, 1
    }
  
  bb.17 (%ir-block.32, freq 546130):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.18 (%ir-block.57, freq 1398093):
    successors: %bb.41..preheader7(37), %bb.19..preheader9(62)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = ADDiu %zero, 255
    BEQ %v1, %at, %bb.41..preheader7, implicit-def %at {
      NOP
    }
  
  bb.19..preheader9 (freq 873808):
    successors: %bb.20..lr.ph29.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.20..lr.ph29.preheader (freq 546130):
    successors: %bb.21..lr.ph29(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %a0 = ADDu killed %t2, killed %at
    %a2 = ADDiu %zero, 255
  
  bb.21..lr.ph29 (freq 1092260):
    successors: %bb.24(37), %bb.22(62)
    liveins: %a0, %a1, %a2, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv38, !tbaa !49)
    BEQ %at, %zero, %bb.24, implicit-def %at {
      NOP
    }
  
  bb.22 (%ir-block.77, freq 682662):
    successors: %bb.24(37), %bb.23(62)
    liveins: %a0, %a1, %a2, %t1, %v0, %v1
  
    %a3 = LBu %a0, 0 :: (load 1 from %ir.lsr.iv36, !tbaa !49)
    BEQ %a3, %a2, %bb.24, implicit-def %at {
      NOP
    }
  
  bb.23 (%ir-block.81, freq 426664):
    successors: %bb.24(100)
    liveins: %a0, %a1, %a2, %a3, %t1, %v0, %v1
  
    %at = AND %a3, %v0
    %a3 = ADDiu killed %a3, 1
    %a3 = AND killed %a3, %v1
    %at = OR killed %a3, killed %at
    SB killed %at, %a0, 0 :: (store 1 into %ir.lsr.iv36, !tbaa !49)
  
  bb.24 (%ir-block.87, freq 1092260):
    successors: %bb.25(50), %bb.21..lr.ph29(50)
    liveins: %a0, %a1, %a2, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.21..lr.ph29, implicit-def %at {
      %a0 = ADDiu killed %a0, 1
    }
  
  bb.25 (%ir-block.87, freq 546130):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.26 (%ir-block.88, freq 1398093):
    successors: %bb.48..preheader11(37), %bb.27..preheader13(62)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = ADDiu %zero, 255
    BEQ %v1, %at, %bb.48..preheader11, implicit-def %at {
      NOP
    }
  
  bb.27..preheader13 (freq 873808):
    successors: %bb.28..lr.ph33.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.28..lr.ph33.preheader (freq 546130):
    successors: %bb.29..lr.ph33(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %a0 = ADDu killed %t2, killed %at
  
  bb.29..lr.ph33 (freq 1092260):
    successors: %bb.32(37), %bb.30(62)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv52, !tbaa !49)
    BEQ %at, %zero, %bb.32, implicit-def %at {
      NOP
    }
  
  bb.30 (%ir-block.108, freq 682662):
    successors: %bb.32(37), %bb.31(62)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %a2 = LBu %a0, 0 :: (load 1 from %ir.lsr.iv50, !tbaa !49)
    BEQ %a2, %zero, %bb.32, implicit-def %at {
      NOP
    }
  
  bb.31 (%ir-block.112, freq 426664):
    successors: %bb.32(100)
    liveins: %a0, %a1, %a2, %t1, %v0, %v1
  
    %at = AND %a2, %v0
    %a2 = ADDiu killed %a2, 255
    %a2 = AND killed %a2, %v1
    %at = OR killed %a2, killed %at
    SB killed %at, %a0, 0 :: (store 1 into %ir.lsr.iv50, !tbaa !49)
  
  bb.32 (%ir-block.118, freq 1092260):
    successors: %bb.33(50), %bb.29..lr.ph33(50)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.29..lr.ph33, implicit-def %at {
      %a0 = ADDiu killed %a0, 1
    }
  
  bb.33 (%ir-block.118, freq 546130):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.34 (%ir-block.119, freq 1398093):
    successors: %bb.55..preheader15(37), %bb.35..preheader17(62)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = ADDiu %zero, 255
    BEQ %v1, %at, %bb.55..preheader15, implicit-def %at {
      NOP
    }
  
  bb.35..preheader17 (freq 873808):
    successors: %bb.36..lr.ph37.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.36..lr.ph37.preheader (freq 546130):
    successors: %bb.37..lr.ph37(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3, %v0, %v1
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %a0 = ADDu killed %t2, killed %at
  
  bb.37..lr.ph37 (freq 1092260):
    successors: %bb.39(37), %bb.38(62)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv66, !tbaa !49)
    BEQ %at, %zero, %bb.39, implicit-def %at {
      NOP
    }
  
  bb.38 (%ir-block.137, freq 682662):
    successors: %bb.39(100)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = LBu %a0, 0 :: (load 1 from %ir.lsr.iv64, !tbaa !49)
    %a2 = AND %at, %v0
    %at = NOR killed %at, %zero
    %at = AND killed %at, %v1
    %at = OR killed %at, killed %a2
    SB killed %at, %a0, 0 :: (store 1 into %ir.lsr.iv64, !tbaa !49)
  
  bb.39 (%ir-block.145, freq 1092260):
    successors: %bb.40(50), %bb.37..lr.ph37(50)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.37..lr.ph37, implicit-def %at {
      %a0 = ADDiu killed %a0, 1
    }
  
  bb.40 (%ir-block.145, freq 546130):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.41..preheader7 (freq 524285):
    successors: %bb.42..lr.ph27.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.42..lr.ph27.preheader (freq 327678):
    successors: %bb.43..lr.ph27(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v0 = ADDu killed %t2, killed %at
    %v1 = ADDiu %zero, 255
  
  bb.43..lr.ph27 (freq 655356):
    successors: %bb.46(37), %bb.44(62)
    liveins: %a1, %t1, %v0, %v1
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv31, !tbaa !49)
    BEQ %at, %zero, %bb.46, implicit-def %at {
      NOP
    }
  
  bb.44 (%ir-block.67, freq 409597):
    successors: %bb.46(37), %bb.45(62)
    liveins: %a1, %t1, %v0, %v1
  
    %a0 = LBu %v0, 0 :: (load 1 from %ir.lsr.iv29, !tbaa !49)
    BEQ %a0, %v1, %bb.46, implicit-def %at {
      NOP
    }
  
  bb.45 (%ir-block.71, freq 255998):
    successors: %bb.46(100)
    liveins: %a0, %a1, %t1, %v0, %v1
  
    %at = ADDiu killed %a0, 1
    SB killed %at, %v0, 0 :: (store 1 into %ir.lsr.iv29, !tbaa !49)
  
  bb.46 (%ir-block.74, freq 655356):
    successors: %bb.47(50), %bb.43..lr.ph27(50)
    liveins: %a1, %t1, %v0, %v1
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.43..lr.ph27, implicit-def %at {
      %v0 = ADDiu killed %v0, 1
    }
  
  bb.47 (%ir-block.74, freq 327678):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.48..preheader11 (freq 524285):
    successors: %bb.49..lr.ph31.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.49..lr.ph31.preheader (freq 327678):
    successors: %bb.50..lr.ph31(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v0 = ADDu killed %t2, killed %at
  
  bb.50..lr.ph31 (freq 655356):
    successors: %bb.53(37), %bb.51(62)
    liveins: %a1, %t1, %v0
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv45, !tbaa !49)
    BEQ %at, %zero, %bb.53, implicit-def %at {
      NOP
    }
  
  bb.51 (%ir-block.98, freq 409597):
    successors: %bb.53(37), %bb.52(62)
    liveins: %a1, %t1, %v0
  
    %v1 = LBu %v0, 0 :: (load 1 from %ir.lsr.iv43, !tbaa !49)
    BEQ %v1, %zero, %bb.53, implicit-def %at {
      NOP
    }
  
  bb.52 (%ir-block.102, freq 255998):
    successors: %bb.53(100)
    liveins: %a1, %t1, %v0, %v1
  
    %at = ADDiu killed %v1, 255
    SB killed %at, %v0, 0 :: (store 1 into %ir.lsr.iv43, !tbaa !49)
  
  bb.53 (%ir-block.105, freq 655356):
    successors: %bb.54(50), %bb.50..lr.ph31(50)
    liveins: %a1, %t1, %v0
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.50..lr.ph31, implicit-def %at {
      %v0 = ADDiu killed %v0, 1
    }
  
  bb.54 (%ir-block.105, freq 327678):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.55..preheader15 (freq 524285):
    successors: %bb.56..lr.ph35.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.56..lr.ph35.preheader (freq 327678):
    successors: %bb.57..lr.ph35(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v0 = ADDu killed %t2, killed %at
  
  bb.57..lr.ph35 (freq 655356):
    successors: %bb.59(37), %bb.58(62)
    liveins: %a1, %t1, %v0
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv59, !tbaa !49)
    BEQ %at, %zero, %bb.59, implicit-def %at {
      NOP
    }
  
  bb.58 (%ir-block.129, freq 409597):
    successors: %bb.59(100)
    liveins: %a1, %t1, %v0
  
    %at = LBu %v0, 0 :: (load 1 from %ir.lsr.iv57, !tbaa !49)
    %at = NOR killed %at, %zero
    SB killed %at, %v0, 0 :: (store 1 into %ir.lsr.iv57, !tbaa !49)
  
  bb.59 (%ir-block.134, freq 655356):
    successors: %bb.60(50), %bb.57..lr.ph35(50)
    liveins: %a1, %t1, %v0
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.57..lr.ph35, implicit-def %at {
      %v0 = ADDiu killed %v0, 1
    }
  
  bb.60 (%ir-block.134, freq 327678):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.61..preheader3 (freq 524284):
    successors: %bb.62..lr.ph23.preheader(62), %bb.72..loopexit(37)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.62..lr.ph23.preheader (freq 327678):
    successors: %bb.63..lr.ph23(100)
    liveins: %a0, %a1, %a2, %a3, %t1, %t2, %t3
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v0 = ADDu killed %t2, killed %at
  
  bb.63..lr.ph23 (freq 655356):
    successors: %bb.65(37), %bb.64(62)
    liveins: %a0, %a1, %t1, %v0
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv17, !tbaa !49)
    BEQ %at, %zero, %bb.65, implicit-def %at {
      NOP
    }
  
  bb.64 (%ir-block.45, freq 409597):
    successors: %bb.65(100)
    liveins: %a0, %a1, %t1, %v0
  
    SB %a0, %v0, 0 :: (store 1 into %ir.lsr.iv15, !tbaa !49)
  
  bb.65 (%ir-block.46, freq 655356):
    successors: %bb.66(50), %bb.63..lr.ph23(50)
    liveins: %a0, %a1, %t1, %v0
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.63..lr.ph23, implicit-def %at {
      %v0 = ADDiu killed %v0, 1
    }
  
  bb.66 (%ir-block.46, freq 327678):
    successors: %bb.72..loopexit(100)
  
    B %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.67..preheader (freq 524284):
    successors: %bb.68..lr.ph.preheader(62), %bb.72..loopexit(37)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    BEQ %a1, %zero, %bb.72..loopexit, implicit-def %at {
      NOP
    }
  
  bb.68..lr.ph.preheader (freq 327678):
    successors: %bb.69..lr.ph(100)
    liveins: %a1, %a2, %a3, %t1, %t2, %t3
  
    %at = MUL killed %t3, killed %a3, implicit-def dead %hi0, implicit-def dead %lo0
    %at = ADDu killed %a2, killed %at
    %v0 = ADDu killed %t2, killed %at
  
  bb.69..lr.ph (freq 10485699):
    successors: %bb.71(37), %bb.70(62)
    liveins: %a1, %t1, %v0
  
    %at = LBu %t1, 0 :: (load 1 from %ir.lsr.iv3, !tbaa !49)
    BEQ %at, %zero, %bb.71, implicit-def %at {
      NOP
    }
  
  bb.70 (%ir-block.23, freq 6553562):
    successors: %bb.71(100)
    liveins: %a1, %t1, %v0
  
    SB %zero, %v0, 0 :: (store 1 into %ir.lsr.iv1, !tbaa !49)
  
  bb.71 (%ir-block.24, freq 10485699):
    successors: %bb.72..loopexit(3), %bb.69..lr.ph(96)
    liveins: %a1, %t1, %v0
  
    %t1 = ADDiu killed %t1, 1
    %a1 = ADDiu killed %a1, -1
    BNE %a1, %zero, %bb.69..lr.ph, implicit-def %at {
      %v0 = ADDiu killed %v0, 1
    }
  
  bb.72..loopexit (freq 8388560):
    liveouts:
  
    %ra = LW %sp, 20 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 24
    }
  
  bb.73 (%ir-block.146, freq 8):
    liveins: %gp
    exit
  
    %t9 = LW %gp, target-flags(<unknown>) @abort :: (load 4 from call-entry @abort)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %gp, implicit-def %sp {
      NOP
    }

...
