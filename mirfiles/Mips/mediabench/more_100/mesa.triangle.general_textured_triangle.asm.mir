--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.triangle.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.gl_context = type { %struct.gl_shared_state*, %struct.api_function_table, %struct.api_function_table, %struct.api_function_table, %struct.gl_visual*, %struct.gl_frame_buffer*, %struct.dd_function_table, i8*, [16 x float], [16 x float], i8, i32, [32 x [16 x float]], [16 x float], i32, [32 x [16 x float]], [16 x float], i8, i32, [10 x [16 x float]], i32, i8, i8, i32, [16 x %struct.gl_attrib_node*], %struct.gl_accum_attrib, %struct.gl_colorbuffer_attrib, %struct.gl_current_attrib, %struct.gl_depthbuffer_attrib, %struct.gl_eval_attrib, %struct.gl_fog_attrib, %struct.gl_hint_attrib, %struct.gl_light_attrib, %struct.gl_line_attrib, %struct.gl_list_attrib, %struct.gl_pixel_attrib, %struct.gl_point_attrib, %struct.gl_polygon_attrib, [32 x i32], %struct.gl_scissor_attrib, %struct.gl_stencil_attrib, %struct.gl_texture_attrib, %struct.gl_transform_attrib, %struct.gl_viewport_attrib, i32, [16 x %struct.gl_attrib_node*], %struct.gl_array_attrib, %struct.gl_pixelstore_attrib, %struct.gl_pixelstore_attrib, %struct.gl_evaluators, %struct.gl_feedback, %struct.gl_selection, i32, i32, i32, i32, i32, i32, i32, i32, i8, float, float, float, i8, i8, i8, i8, i32, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, %struct.vertex_buffer*, %struct.pixel_buffer*, i8 }
  %struct.gl_shared_state = type { i32, [7000 x %union.node*], %struct.gl_texture_object* }
  %union.node = type opaque
  %struct.gl_texture_object = type { i32, i32, i32, float, [4 x i32], i32, i32, i32, i32, i32, [11 x %struct.gl_texture_image*], i8, %struct.gl_texture_object* }
  %struct.gl_texture_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
  %struct.api_function_table = type { void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, i32, float)*, i8 (%struct.gl_context*, i32, i32*, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, double)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, double, double)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i8)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, {}*, {}*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, float*)*, {}*, {}*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, double, double, double, double, double, double)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i8*)*, void (%struct.gl_context*, i32, double*)*, void (%struct.gl_context*, i32, double*)*, i32 (%struct.gl_context*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, i8* (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32, i16*)*, void (%struct.gl_context*, i32, i8**)*, void (%struct.gl_context*, i8*)*, void (%struct.gl_context*, i32, i32*, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, double*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i8*)*, {}*, void (%struct.gl_context*, i32, i32, i8*)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, float*, i32)*, void (%struct.gl_context*, i32, i16)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float, i32, i32, float, float, i32, i32, float*, i8)*, void (%struct.gl_context*, i32, float, float)*, void (%struct.gl_context*, i32, float, float, i32, float, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float*)*, void (%struct.gl_context*, i32, i32, i8*)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, float)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, float)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, float, float)*, void (%struct.gl_context*, i8*)*, {}*, {}*, {}*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8*)*, void (%struct.gl_context*, float, float, float, float)*, i32 (%struct.gl_context*, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32*)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gl_image*)*, void (%struct.gl_context*, i32, i32, float*)*, void (%struct.gl_context*, float, float, float)*, void (%struct.gl_context*, float, float, float, float)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, float, float, float, float)*, {}* }
  %struct.gl_image = type { i32, i32, i32, i32, i32, i32, i8*, i8, i32 }
  %struct.gl_visual = type { i8, i8, float, float, float, float, i8, float, float, float, float, i32, i32, i32, i32, i8, i8 }
  %struct.gl_frame_buffer = type { %struct.gl_visual*, i32, i32, i16*, i8*, i16*, i8*, i8*, i8*, i32, i32, i32, i32 }
  %struct.dd_function_table = type { {}*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i32, i32, i32, i32)*, void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32*, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i32*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i32*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i8*, i8*, i8*, i8*, i8*)*, {}*, {}*, i8 (%struct.gl_context*, i32)*, i8 (%struct.gl_context*, i8, i8, i8, i8)*, i8 (%struct.gl_context*, i32)*, void (%struct.gl_context*, i8)*, {}*, {}*, {}*, i32 (%struct.gl_context*, i32, i32, i32, i16*, i8*)*, void (%struct.gl_context*, i32, i32*, i32*, i16*, i8*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i16*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)*, i8 (%struct.gl_context*, i32, i32, i32, i32, i32, i32, i8, i8*)*, i8 (%struct.gl_context*, i32, i32, float, float, float, float, %struct.gl_image*)*, void (%struct.gl_context*, i32)*, {}*, void (%struct.gl_context*, i32, float*)*, void (%struct.gl_context*, i32, i32, i32, i32, %struct.gl_texture_image*)*, void (%struct.gl_context*, i32, i32, i32, float*)*, void (%struct.gl_context*, i32, i32)*, void (%struct.gl_context*, i32)* }
  %struct.gl_accum_attrib = type { [4 x float] }
  %struct.gl_colorbuffer_attrib = type { i32, [4 x float], i32, i32, i8, i32, i8, i32, float, i8, i8, i32, i32, i32, [4 x float], i32, i8, i8, i8, i8 }
  %struct.gl_current_attrib = type { [4 x i32], i32, [3 x float], [4 x float], [4 x float], float, [4 x float], i32, [4 x float], i8, i8 }
  %struct.gl_depthbuffer_attrib = type { i32, float, i8, i8 }
  %struct.gl_eval_attrib = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, float, float, i32, i32, float, float, float, float }
  %struct.gl_fog_attrib = type { i8, [4 x float], float, float, float, float, i32 }
  %struct.gl_hint_attrib = type { i32, i32, i32, i32, i32 }
  %struct.gl_light_attrib = type { [8 x %struct.gl_light], %struct.gl_lightmodel, [2 x %struct.gl_material], i8, i32, i32, i32, i32, i8, %struct.gl_light*, i8, [4 x float] }
  %struct.gl_light = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, float, float, i8, %struct.gl_light*, [3 x float], [3 x float], [3 x float], [512 x [2 x float]], [3 x float], [3 x float], [3 x float], float, float }
  %struct.gl_lightmodel = type { [4 x float], i8, i8 }
  %struct.gl_material = type { [4 x float], [4 x float], [4 x float], [4 x float], float, float, float, float, [200 x float] }
  %struct.gl_line_attrib = type { i8, i8, i16, i32, float }
  %struct.gl_list_attrib = type { i32 }
  %struct.gl_pixel_attrib = type { i32, float, float, float, float, float, float, float, float, float, float, i32, i32, i8, i8, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], [256 x i32], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float], [256 x float] }
  %struct.gl_point_attrib = type { i8, float }
  %struct.gl_polygon_attrib = type { i32, i32, i32, i8, i8, i32, i32, i8, i8, float, float, i8, i8, i8, i8 }
  %struct.gl_scissor_attrib = type { i8, i32, i32, i32, i32 }
  %struct.gl_stencil_attrib = type { i8, i32, i32, i32, i32, i8, i8, i8, i8 }
  %struct.gl_texture_attrib = type { i32, i32, [4 x float], i32, i32, i32, i32, i32, [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object*, %struct.gl_texture_object* }
  %struct.gl_transform_attrib = type { i32, [6 x [4 x float]], [6 x i8], i8, i8 }
  %struct.gl_viewport_attrib = type { i32, i32, i32, i32, float, float, float, float, float, float, float, float }
  %struct.gl_attrib_node = type { i32, i8*, %struct.gl_attrib_node* }
  %struct.gl_array_attrib = type { i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i32, i8*, i8, i32, i32, i32, i32, i8*, i8, i32, i32, i8*, i8 }
  %struct.gl_pixelstore_attrib = type { i32, i32, i32, i32, i32, i32, i8, i8 }
  %struct.gl_evaluators = type { %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_1d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map, %struct.gl_2d_map }
  %struct.gl_1d_map = type { i32, float, float, float*, i8 }
  %struct.gl_2d_map = type { i32, i32, float, float, float, float, float*, i8 }
  %struct.gl_feedback = type { i32, i32, float*, i32, i32 }
  %struct.gl_selection = type { i32*, i32, i32, i32, i32, [64 x i32], i8, float, float }
  %struct.vertex_buffer = type { [504 x [4 x float]], [504 x [4 x float]], [504 x [4 x float]], [504 x [3 x float]], [504 x [3 x float]], [504 x [4 x i32]], [504 x [4 x i32]], [4 x i32]*, [504 x i32], [504 x i32], i32*, [504 x i8], [504 x [4 x float]], [504 x i8], i8, i32, i32, i32, i8, [504 x i32], [504 x [2 x %struct.gl_material]], i8 }
  %struct.pixel_buffer = type opaque
  %struct.EdgeT = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.0 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.1 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.2 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.3 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.4 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.5 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  %struct.EdgeT.6 = type { i32, i32, float, float, i32, i32, i32, float, i32, i32 }
  
  ; Function Attrs: nounwind
  define void @gl_set_triangle_function(%struct.gl_context* %ctx) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %2 = load %struct.gl_visual*, %struct.gl_visual** %1, align 4, !tbaa !1
    %3 = bitcast %struct.gl_visual* %2 to i8*
    %4 = load i8, i8* %3, align 4, !tbaa !37
    %5 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 54
    %6 = load i32, i32* %5, align 4, !tbaa !39
    %7 = icmp eq i32 %6, 7168
    br i1 %7, label %8, label %140
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 76
    %10 = load i8, i8* %9, align 4, !tbaa !40
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %14, label %12
  
  ; <label>:12                                      ; preds = %8
    %13 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 73
    store void (%struct.gl_context*, i32, i32, i32, i32)* @null_triangle, void (%struct.gl_context*, i32, i32, i32, i32)** %13, align 4, !tbaa !41
    br label %144
  
  ; <label>:14                                      ; preds = %8
    %15 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 35
    %16 = load void (%struct.gl_context*, i32, i32, i32, i32)*, void (%struct.gl_context*, i32, i32, i32, i32)** %15, align 4, !tbaa !42
    %17 = icmp eq void (%struct.gl_context*, i32, i32, i32, i32)* %16, null
    br i1 %17, label %20, label %18
  
  ; <label>:18                                      ; preds = %14
    %19 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 73
    store void (%struct.gl_context*, i32, i32, i32, i32)* %16, void (%struct.gl_context*, i32, i32, i32, i32)** %19, align 4, !tbaa !41
    br label %144
  
  ; <label>:20                                      ; preds = %14
    %21 = tail call zeroext i8 @gl_texturing_enabled(%struct.gl_context* nonnull %ctx) #4
    %22 = icmp eq i8 %21, 0
    br i1 %22, label %128, label %23
  
  ; <label>:23                                      ; preds = %20
    %24 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 0
    %25 = load i32, i32* %24, align 4, !tbaa !43
    %26 = icmp eq i32 %25, 2
    br i1 %26, label %27, label %94
  
  ; <label>:27                                      ; preds = %23
    %28 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 17
    %29 = load %struct.gl_texture_object*, %struct.gl_texture_object** %28, align 4, !tbaa !44
    %30 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 11
    %31 = load i8, i8* %30, align 4, !tbaa !45
    %32 = icmp eq i8 %31, 0
    br i1 %32, label %.thread3, label %33
  
  ; <label>:33                                      ; preds = %27
    %34 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 8
    %35 = load i32, i32* %34, align 4, !tbaa !47
    %36 = icmp eq i32 %35, 9728
    br i1 %36, label %37, label %.thread3
  
  ; <label>:37                                      ; preds = %33
    %38 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 9
    %39 = load i32, i32* %38, align 4, !tbaa !48
    %40 = icmp eq i32 %39, 9728
    br i1 %40, label %41, label %.thread3
  
  ; <label>:41                                      ; preds = %37
    %42 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 5
    %43 = load i32, i32* %42, align 4, !tbaa !49
    %44 = icmp eq i32 %43, 10497
    br i1 %44, label %45, label %.thread3
  
  ; <label>:45                                      ; preds = %41
    %46 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 6
    %47 = load i32, i32* %46, align 4, !tbaa !50
    %48 = icmp eq i32 %47, 10497
    br i1 %48, label %49, label %.thread3
  
  ; <label>:49                                      ; preds = %45
    %50 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %29, i32 0, i32 10, i32 0
    %51 = load %struct.gl_texture_image*, %struct.gl_texture_image** %50, align 4, !tbaa !51
    %52 = bitcast %struct.gl_texture_image* %51 to i32*
    %53 = load i32, i32* %52, align 4, !tbaa !52
    %54 = icmp eq i32 %53, 6407
    br i1 %54, label %55, label %.thread3
  
  ; <label>:55                                      ; preds = %49
    %56 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %51, i32 0, i32 1
    %57 = load i32, i32* %56, align 4, !tbaa !54
    %58 = icmp eq i32 %57, 0
    br i1 %58, label %59, label %.thread3
  
  ; <label>:59                                      ; preds = %55
    %60 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 1
    %61 = load i32, i32* %60, align 4, !tbaa !55
    switch i32 %61, label %.thread3 [
      i32 8449, label %62
      i32 7681, label %62
    ]
  
  ; <label>:62                                      ; preds = %59, %59
    %63 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 31, i32 0
    %64 = load i32, i32* %63, align 4, !tbaa !56
    %65 = icmp eq i32 %64, 4353
    br i1 %65, label %66, label %.thread3
  
  ; <label>:66                                      ; preds = %62
    %67 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 17
    %68 = load i8, i8* %67, align 4, !tbaa !57
    %69 = icmp eq i8 %68, 0
    br i1 %69, label %.thread3, label %70
  
  ; <label>:70                                      ; preds = %66
    %71 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 58
    %72 = load i32, i32* %71, align 4, !tbaa !58
    switch i32 %72, label %.thread3 [
      i32 4, label %73
      i32 0, label %73
    ]
  
  ; <label>:73                                      ; preds = %70, %70
    %74 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 0
    %75 = load i32, i32* %74, align 4, !tbaa !59
    %76 = icmp eq i32 %75, 513
    br i1 %76, label %77, label %.thread3
  
  ; <label>:77                                      ; preds = %73
    %78 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 28, i32 3
    %79 = load i8, i8* %78, align 1, !tbaa !60
    %80 = icmp eq i8 %79, 1
    br i1 %80, label %81, label %.thread3
  
  ; <label>:81                                      ; preds = %77
    %82 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 37, i32 8
    %83 = load i8, i8* %82, align 1, !tbaa !61
    %84 = icmp eq i8 %83, 0
    br i1 %84, label %85, label %.thread3
  
  ; <label>:85                                      ; preds = %81
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 2020
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.gl_visual**
    %86 = load %struct.gl_visual*, %struct.gl_visual** %sunkaddr2, align 4, !tbaa !1
    %87 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %86, i32 0, i32 6
    %88 = load i8, i8* %87, align 4, !tbaa !62
    %89 = icmp eq i8 %88, 0
    br i1 %89, label %.thread3, label %90
  
  ; <label>:90                                      ; preds = %85
    %91 = icmp eq i32 %72, 4
    br i1 %91, label %92, label %93
  
  ; <label>:92                                      ; preds = %90
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55804
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to void (%struct.gl_context*, i32, i32, i32, i32)**
    store void (%struct.gl_context*, i32, i32, i32, i32)* @simple_z_textured_triangle, void (%struct.gl_context*, i32, i32, i32, i32)** %sunkaddr5, align 4, !tbaa !41
    br label %144
  
  ; <label>:93                                      ; preds = %90
    %sunkaddr6 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr7 = add i32 %sunkaddr6, 55804
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to void (%struct.gl_context*, i32, i32, i32, i32)**
    store void (%struct.gl_context*, i32, i32, i32, i32)* @simple_textured_triangle, void (%struct.gl_context*, i32, i32, i32, i32)** %sunkaddr8, align 4, !tbaa !41
    br label %144
  
  ; <label>:94                                      ; preds = %23
    %95 = and i32 %25, 4
    %96 = icmp eq i32 %95, 0
    br i1 %96, label %105, label %97
  
  ; <label>:97                                      ; preds = %94
    %98 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 18
    %99 = load %struct.gl_texture_object*, %struct.gl_texture_object** %98, align 4, !tbaa !63
    %100 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %99, i32 0, i32 8
    %101 = load i32, i32* %100, align 4, !tbaa !47
    %102 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %99, i32 0, i32 9
    %103 = load i32, i32* %102, align 4, !tbaa !48
    %104 = icmp eq i32 %101, %103
    %general_textured_triangle.lambda_textured_triangle = select i1 %104, void (%struct.gl_context*, i32, i32, i32, i32)* @general_textured_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @lambda_textured_triangle
    br label %126
  
  ; <label>:105                                     ; preds = %94
    %106 = and i32 %25, 2
    %107 = icmp eq i32 %106, 0
    br i1 %107, label %115, label %.thread3
  
  .thread3:                                         ; preds = %105, %85, %81, %77, %73, %70, %66, %62, %59, %55, %49, %45, %41, %37, %33, %27
    %108 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 17
    %109 = load %struct.gl_texture_object*, %struct.gl_texture_object** %108, align 4, !tbaa !44
    %110 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %109, i32 0, i32 8
    %111 = load i32, i32* %110, align 4, !tbaa !47
    %112 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %109, i32 0, i32 9
    %113 = load i32, i32* %112, align 4, !tbaa !48
    %114 = icmp eq i32 %111, %113
    %general_textured_triangle.lambda_textured_triangle1 = select i1 %114, void (%struct.gl_context*, i32, i32, i32, i32)* @general_textured_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @lambda_textured_triangle
    br label %126
  
  ; <label>:115                                     ; preds = %105
    %116 = and i32 %25, 1
    %117 = icmp eq i32 %116, 0
    br i1 %117, label %126, label %118
  
  ; <label>:118                                     ; preds = %115
    %119 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 16
    %120 = load %struct.gl_texture_object*, %struct.gl_texture_object** %119, align 4, !tbaa !64
    %121 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %120, i32 0, i32 8
    %122 = load i32, i32* %121, align 4, !tbaa !47
    %123 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %120, i32 0, i32 9
    %124 = load i32, i32* %123, align 4, !tbaa !48
    %125 = icmp eq i32 %122, %124
    %general_textured_triangle.lambda_textured_triangle2 = select i1 %125, void (%struct.gl_context*, i32, i32, i32, i32)* @general_textured_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @lambda_textured_triangle
    br label %126
  
  ; <label>:126                                     ; preds = %118, %115, %.thread3, %97
    %needLambda.0 = phi void (%struct.gl_context*, i32, i32, i32, i32)* [ @lambda_textured_triangle, %115 ], [ %general_textured_triangle.lambda_textured_triangle, %97 ], [ %general_textured_triangle.lambda_textured_triangle1, %.thread3 ], [ %general_textured_triangle.lambda_textured_triangle2, %118 ]
    %127 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 73
    store void (%struct.gl_context*, i32, i32, i32, i32)* %needLambda.0, void (%struct.gl_context*, i32, i32, i32, i32)** %127, align 4, !tbaa !41
    br label %144
  
  ; <label>:128                                     ; preds = %20
    %129 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %130 = load i32, i32* %129, align 4, !tbaa !65
    %131 = icmp eq i32 %130, 7425
    br i1 %131, label %132, label %136
  
  ; <label>:132                                     ; preds = %128
    %133 = icmp ne i8 %4, 0
    %134 = select i1 %133, void (%struct.gl_context*, i32, i32, i32, i32)* @smooth_rgba_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @smooth_ci_triangle
    %135 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 73
    store void (%struct.gl_context*, i32, i32, i32, i32)* %134, void (%struct.gl_context*, i32, i32, i32, i32)** %135, align 4, !tbaa !41
    br label %144
  
  ; <label>:136                                     ; preds = %128
    %137 = icmp ne i8 %4, 0
    %138 = select i1 %137, void (%struct.gl_context*, i32, i32, i32, i32)* @flat_rgba_triangle, void (%struct.gl_context*, i32, i32, i32, i32)* @flat_ci_triangle
    %139 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 73
    store void (%struct.gl_context*, i32, i32, i32, i32)* %138, void (%struct.gl_context*, i32, i32, i32, i32)** %139, align 4, !tbaa !41
    br label %144
  
  ; <label>:140                                     ; preds = %0
    %141 = icmp eq i32 %6, 7169
    br i1 %141, label %142, label %143
  
  ; <label>:142                                     ; preds = %140
    %sunkaddr9 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr10 = add i32 %sunkaddr9, 55804
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to void (%struct.gl_context*, i32, i32, i32, i32)**
    store void (%struct.gl_context*, i32, i32, i32, i32)* @feedback_triangle, void (%struct.gl_context*, i32, i32, i32, i32)** %sunkaddr11, align 4, !tbaa !41
    br label %144
  
  ; <label>:143                                     ; preds = %140
    %sunkaddr12 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr13 = add i32 %sunkaddr12, 55804
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to void (%struct.gl_context*, i32, i32, i32, i32)**
    store void (%struct.gl_context*, i32, i32, i32, i32)* @select_triangle, void (%struct.gl_context*, i32, i32, i32, i32)** %sunkaddr14, align 4, !tbaa !41
    br label %144
  
  ; <label>:144                                     ; preds = %143, %142, %136, %132, %126, %93, %92, %18, %12
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #1
  
  ; Function Attrs: norecurse nounwind readnone
  define internal void @null_triangle(%struct.gl_context* nocapture %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #2 {
    ret void
  }
  
  declare zeroext i8 @gl_texturing_enabled(%struct.gl_context*) #3
  
  ; Function Attrs: nounwind
  define internal void @simple_z_textured_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT, align 4
    %eTop = alloca %struct.EdgeT, align 4
    %eBot = alloca %struct.EdgeT, align 4
    %red = alloca [1280 x i8], align 1
    %green = alloca [1280 x i8], align 1
    %blue = alloca [1280 x i8], align 1
    %alpha = alloca [1280 x i8], align 1
    %mask = alloca [1280 x i8], align 1
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 17
    %134 = load %struct.gl_texture_object*, %struct.gl_texture_object** %133, align 4, !tbaa !44
    %135 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %134, i32 0, i32 10, i32 0
    %136 = load %struct.gl_texture_image*, %struct.gl_texture_image** %135, align 4, !tbaa !51
    %137 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 2
    %138 = load i32, i32* %137, align 4, !tbaa !79
    %139 = uitofp i32 %138 to float
    %140 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 3
    %141 = load i32, i32* %140, align 4, !tbaa !80
    %142 = uitofp i32 %141 to float
    %143 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 8
    %144 = load i32, i32* %143, align 4, !tbaa !81
    %145 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 12
    %146 = load i8*, i8** %145, align 4, !tbaa !82
    %147 = add i32 %138, -1
    %148 = add i32 %141, -1
    %149 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %150 = load float, float* %149, align 4, !tbaa !67
    %151 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %152 = load float, float* %151, align 4, !tbaa !67
    %153 = fsub float %150, %152
    %154 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %155 = load float, float* %154, align 4, !tbaa !67
    %156 = fsub float %155, %152
    %157 = fmul float %153, %50
    %158 = fmul float %156, %38
    %159 = fsub float %157, %158
    %160 = fmul float %58, %159
    %161 = fcmp ogt float %160, 6.553500e+04
    %162 = fcmp olt float %160, -6.553500e+04
    %or.cond13 = or i1 %161, %162
    br i1 %or.cond13, label %168, label %163
  
  ; <label>:163                                     ; preds = %132
    %164 = fmul float %156, %32
    %165 = fmul float %153, %48
    %166 = fsub float %164, %165
    %167 = fmul float %58, %166
    br label %168
  
  ; <label>:168                                     ; preds = %163, %132
    %dzdy.0 = phi float [ %167, %163 ], [ 0.000000e+00, %132 ]
    %dzdx.0 = phi float [ %160, %163 ], [ 0.000000e+00, %132 ]
    %169 = fcmp olt float %58, 0.000000e+00
    %170 = fmul float %dzdx.0, 2.048000e+03
    %171 = fptosi float %170 to i32
    %172 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 0
    %173 = load float, float* %172, align 4, !tbaa !67
    %174 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 0
    %175 = load float, float* %174, align 4, !tbaa !67
    %176 = fsub float %173, %175
    %177 = fmul float %139, %176
    %178 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 0
    %179 = load float, float* %178, align 4, !tbaa !67
    %180 = fsub float %179, %175
    %181 = fmul float %142, %180
    %182 = fmul float %177, %50
    %183 = fmul float %38, %181
    %184 = fsub float %182, %183
    %185 = fmul float %58, %184
    %186 = fmul float %185, 2.048000e+03
    %187 = fptosi float %186 to i32
    %188 = fmul float %181, %32
    %189 = fmul float %177, %48
    %190 = fsub float %188, %189
    %191 = fmul float %58, %190
    %192 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 1
    %193 = load float, float* %192, align 4, !tbaa !67
    %194 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 1
    %195 = load float, float* %194, align 4, !tbaa !67
    %196 = fsub float %193, %195
    %197 = fmul float %139, %196
    %198 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 1
    %199 = load float, float* %198, align 4, !tbaa !67
    %200 = fsub float %199, %195
    %201 = fmul float %142, %200
    %202 = fmul float %50, %197
    %203 = fmul float %38, %201
    %204 = fsub float %202, %203
    %205 = fmul float %58, %204
    %206 = fmul float %205, 2.048000e+03
    %207 = fptosi float %206 to i32
    %208 = fmul float %32, %201
    %209 = fmul float %48, %197
    %210 = fsub float %208, %209
    %211 = fmul float %58, %210
    %eMaj.eBot = select i1 %169, %struct.EdgeT* %eMaj, %struct.EdgeT* %eBot
    %eBot.eMaj = select i1 %169, %struct.EdgeT* %eBot, %struct.EdgeT* %eMaj
    %.14 = zext i1 %169 to i32
    br label %212
  
  ; <label>:212                                     ; preds = %.loopexit, %168
    %subTriangle.077 = phi i32 [ 0, %168 ], [ %394, %.loopexit ]
    %fxLeftEdge.076 = phi i32 [ undef, %168 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fxRightEdge.075 = phi i32 [ undef, %168 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.074 = phi i32 [ undef, %168 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdxRightEdge.073 = phi i32 [ undef, %168 ], [ %fdxRightEdge.1, %.loopexit ]
    %fError.072 = phi i32 [ undef, %168 ], [ %fError.4.ph, %.loopexit ]
    %fdtOuter.071 = phi i32 [ undef, %168 ], [ %fdtOuter.1, %.loopexit ]
    %ft.070 = phi i32 [ undef, %168 ], [ %ft.4.ph, %.loopexit ]
    %fdError.069 = phi i32 [ undef, %168 ], [ %fdError.1, %.loopexit ]
    %fdsOuter.068 = phi i32 [ undef, %168 ], [ %fdsOuter.1, %.loopexit ]
    %fs.067 = phi i32 [ undef, %168 ], [ %fs.4.ph, %.loopexit ]
    %iy.066 = phi i32 [ undef, %168 ], [ %iy.3.ph, %.loopexit ]
    %fdzOuter.065 = phi i32 [ undef, %168 ], [ %fdzOuter.1, %.loopexit ]
    %fz.064 = phi i32 [ undef, %168 ], [ %fz.4.ph, %.loopexit ]
    %zRow.063 = phi i16* [ undef, %168 ], [ %zRow.4.ph, %.loopexit ]
    %dZRowOuter.062 = phi i32 [ undef, %168 ], [ %dZRowOuter.1, %.loopexit ]
    %213 = icmp eq i32 %subTriangle.077, 0
    br i1 %213, label %.thread, label %214
  
  ; <label>:214                                     ; preds = %212
    %215 = icmp eq i32 %99, 0
    br i1 %215, label %.critedge, label %216
  
  ; <label>:216                                     ; preds = %214
    %217 = fcmp olt float %58, 0.000000e+00
    br i1 %217, label %302, label %.thread
  
  .thread:                                          ; preds = %216, %212
    %lines.121 = phi i32 [ %99, %216 ], [ %118, %212 ]
    %setupRight.119 = phi i32 [ %.14, %216 ], [ 1, %212 ]
    %eRight.117 = phi %struct.EdgeT* [ %eMaj, %216 ], [ %eBot.eMaj, %212 ]
    %eLeft.116 = phi %struct.EdgeT* [ %eTop, %216 ], [ %eMaj.eBot, %212 ]
    %218 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 8
    %219 = load i32, i32* %218, align 4, !tbaa !74
    %220 = icmp sgt i32 %219, 0
    br i1 %220, label %221, label %302
  
  ; <label>:221                                     ; preds = %.thread
    %222 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 5
    %223 = load i32, i32* %222, align 4, !tbaa !78
    %224 = add nsw i32 %223, 2047
    %225 = and i32 %224, -2048
    %226 = sub i32 -2048, %223
    %227 = add i32 %226, %225
    %228 = add nsw i32 %223, -1
    %229 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 4
    %230 = load i32, i32* %229, align 4, !tbaa !75
    %231 = add nsw i32 %230, -1
    %232 = and i32 %231, -2048
    %233 = sub i32 2048, %230
    %234 = add i32 %233, %232
    %235 = ashr i32 %231, 11
    %236 = sitofp i32 %235 to float
    %237 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 6
    %238 = load i32, i32* %237, align 4, !tbaa !73
    %239 = ashr i32 %238, 11
    %240 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 9
    %241 = load i32, i32* %240, align 4, !tbaa !77
    %242 = sub nsw i32 %225, %241
    %243 = sitofp i32 %242 to float
    %244 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eLeft.116, i32 0, i32 7
    %245 = load float, float* %244, align 4, !tbaa !76
    %246 = bitcast %struct.EdgeT* %eLeft.116 to i32*
    %247 = load i32, i32* %246, align 4, !tbaa !68
    %248 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %247, i32 2
    %249 = load float, float* %248, align 4, !tbaa !67
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr18 = add i32 %sunkaddr, 55768
    %sunkaddr19 = inttoptr i32 %sunkaddr18 to float*
    %250 = load float, float* %sunkaddr19, align 4, !tbaa !83
    %251 = fadd float %249, %250
    %252 = fmul float %251, 2.048000e+03
    %253 = fmul float %dzdx.0, %243
    %254 = fadd float %253, %252
    %255 = fmul float %dzdy.0, %245
    %256 = fadd float %255, %254
    %257 = fptosi float %256 to i32
    %258 = add nsw i32 %257, 1024
    %259 = fmul float %dzdx.0, %236
    %260 = fadd float %dzdy.0, %259
    %261 = fmul float %260, 2.048000e+03
    %262 = fptosi float %261 to i32
    %sunkaddr20 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr21 = add i32 %sunkaddr20, 2024
    %sunkaddr22 = inttoptr i32 %sunkaddr21 to %struct.gl_frame_buffer**
    %263 = load %struct.gl_frame_buffer*, %struct.gl_frame_buffer** %sunkaddr22, align 4, !tbaa !84
    %264 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %263, i32 0, i32 3
    %265 = load i16*, i16** %264, align 4, !tbaa !85
    %266 = getelementptr inbounds %struct.gl_frame_buffer, %struct.gl_frame_buffer* %263, i32 0, i32 1
    %267 = load i32, i32* %266, align 4, !tbaa !87
    %268 = mul nsw i32 %267, %239
    %269 = getelementptr inbounds i16, i16* %265, i32 %268
    %270 = ashr i32 %228, 11
    %271 = getelementptr inbounds i16, i16* %269, i32 %270
    %272 = add nsw i32 %267, %235
    %273 = shl i32 %272, 1
    %274 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %247, i32 0
    %275 = load float, float* %274, align 4, !tbaa !67
    %276 = fmul float %139, %275
    %277 = fmul float %276, 2.048000e+03
    %278 = fmul float %185, %243
    %279 = fadd float %278, %277
    %280 = fmul float %191, %245
    %281 = fadd float %280, %279
    %282 = fptosi float %281 to i32
    %283 = add nsw i32 %282, 1024
    %284 = fmul float %185, %236
    %285 = fadd float %191, %284
    %286 = fmul float %285, 2.048000e+03
    %287 = fptosi float %286 to i32
    %288 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %247, i32 1
    %289 = load float, float* %288, align 4, !tbaa !67
    %290 = fmul float %142, %289
    %291 = fmul float %290, 2.048000e+03
    %292 = fmul float %205, %243
    %293 = fadd float %292, %291
    %294 = fmul float %211, %245
    %295 = fadd float %294, %293
    %296 = fptosi float %295 to i32
    %297 = add nsw i32 %296, 1024
    %298 = fmul float %205, %236
    %299 = fadd float %211, %298
    %300 = fmul float %299, 2.048000e+03
    %301 = fptosi float %300 to i32
    br label %302
  
  ; <label>:302                                     ; preds = %221, %.thread, %216
    %lines.122 = phi i32 [ %lines.121, %221 ], [ %lines.121, %.thread ], [ %99, %216 ]
    %setupRight.120 = phi i32 [ %setupRight.119, %221 ], [ %setupRight.119, %.thread ], [ %.14, %216 ]
    %eRight.118 = phi %struct.EdgeT* [ %eRight.117, %221 ], [ %eRight.117, %.thread ], [ %eTop, %216 ]
    %dZRowOuter.1 = phi i32 [ %273, %221 ], [ %dZRowOuter.062, %.thread ], [ %dZRowOuter.062, %216 ]
    %zRow.1 = phi i16* [ %271, %221 ], [ %zRow.063, %.thread ], [ %zRow.063, %216 ]
    %fz.1 = phi i32 [ %258, %221 ], [ %fz.064, %.thread ], [ %fz.064, %216 ]
    %fdzOuter.1 = phi i32 [ %262, %221 ], [ %fdzOuter.065, %.thread ], [ %fdzOuter.065, %216 ]
    %iy.1 = phi i32 [ %239, %221 ], [ %iy.066, %.thread ], [ %iy.066, %216 ]
    %fs.1 = phi i32 [ %283, %221 ], [ %fs.067, %.thread ], [ %fs.067, %216 ]
    %fdsOuter.1 = phi i32 [ %287, %221 ], [ %fdsOuter.068, %.thread ], [ %fdsOuter.068, %216 ]
    %fdError.1 = phi i32 [ %234, %221 ], [ %fdError.069, %.thread ], [ %fdError.069, %216 ]
    %ft.1 = phi i32 [ %297, %221 ], [ %ft.070, %.thread ], [ %ft.070, %216 ]
    %fdtOuter.1 = phi i32 [ %301, %221 ], [ %fdtOuter.071, %.thread ], [ %fdtOuter.071, %216 ]
    %fError.1 = phi i32 [ %227, %221 ], [ %fError.072, %.thread ], [ %fError.072, %216 ]
    %fdxLeftEdge.1 = phi i32 [ %230, %221 ], [ %fdxLeftEdge.074, %.thread ], [ %fdxLeftEdge.074, %216 ]
    %fxLeftEdge.1 = phi i32 [ %228, %221 ], [ %fxLeftEdge.076, %.thread ], [ %fxLeftEdge.076, %216 ]
    %303 = icmp eq i32 %setupRight.120, 0
    br i1 %303, label %314, label %304
  
  ; <label>:304                                     ; preds = %302
    %305 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.118, i32 0, i32 8
    %306 = load i32, i32* %305, align 4, !tbaa !74
    %307 = icmp sgt i32 %306, 0
    br i1 %307, label %308, label %314
  
  ; <label>:308                                     ; preds = %304
    %309 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.118, i32 0, i32 5
    %310 = load i32, i32* %309, align 4, !tbaa !78
    %311 = add nsw i32 %310, -1
    %312 = getelementptr inbounds %struct.EdgeT, %struct.EdgeT* %eRight.118, i32 0, i32 4
    %313 = load i32, i32* %312, align 4, !tbaa !75
    br label %314
  
  ; <label>:314                                     ; preds = %308, %304, %302
    %fdxRightEdge.1 = phi i32 [ %313, %308 ], [ %fdxRightEdge.073, %304 ], [ %fdxRightEdge.073, %302 ]
    %fxRightEdge.1 = phi i32 [ %311, %308 ], [ %fxRightEdge.075, %304 ], [ %fxRightEdge.075, %302 ]
    %315 = icmp eq i32 %lines.122, 0
    br i1 %315, label %.loopexit, label %316
  
  ; <label>:316                                     ; preds = %314
    %317 = add i32 %dZRowOuter.1, 2
    %318 = add nsw i32 %fdzOuter.1, %171
    %319 = add nsw i32 %fdsOuter.1, %187
    %320 = add nsw i32 %fdtOuter.1, %207
    %321 = icmp sgt i32 %lines.122, 0
    br i1 %321, label %.lr.ph54, label %.loopexit
  
  .lr.ph54:                                         ; preds = %316, %392
    %fxLeftEdge.252 = phi i32 [ %381, %392 ], [ %fxLeftEdge.1, %316 ]
    %fxRightEdge.251 = phi i32 [ %382, %392 ], [ %fxRightEdge.1, %316 ]
    %lines.250 = phi i32 [ %380, %392 ], [ %lines.122, %316 ]
    %fError.249 = phi i32 [ %fError.3, %392 ], [ %fError.1, %316 ]
    %ft.248 = phi i32 [ %ft.3, %392 ], [ %ft.1, %316 ]
    %fs.247 = phi i32 [ %fs.3, %392 ], [ %fs.1, %316 ]
    %iy.246 = phi i32 [ %379, %392 ], [ %iy.1, %316 ]
    %fz.245 = phi i32 [ %fz.3, %392 ], [ %fz.1, %316 ]
    %zRow.244 = phi i16* [ %zRow.3, %392 ], [ %zRow.1, %316 ]
    %322 = bitcast [1280 x i8]* %mask to i8*
    %323 = bitcast [1280 x i8]* %alpha to i8*
    %324 = bitcast [1280 x i8]* %blue to i8*
    %325 = bitcast [1280 x i8]* %green to i8*
    %326 = bitcast [1280 x i8]* %red to i8*
    %327 = ashr i32 %fxLeftEdge.252, 11
    %328 = ashr i32 %fxRightEdge.251, 11
    %329 = sub nsw i32 %328, %327
    call void @llvm.lifetime.start(i64 1280, i8* %326) #4
    call void @llvm.lifetime.start(i64 1280, i8* %325) #4
    call void @llvm.lifetime.start(i64 1280, i8* %324) #4
    call void @llvm.lifetime.start(i64 1280, i8* %323) #4
    call void @llvm.lifetime.start(i64 1280, i8* %322) #4
    %330 = icmp sgt i32 %329, 0
    br i1 %330, label %.lr.ph, label %373
  
  .lr.ph:                                           ; preds = %.lr.ph54, %357
    %lsr.iv16 = phi i16* [ %scevgep17, %357 ], [ %zRow.244, %.lr.ph54 ]
    %lsr.iv13 = phi [1280 x i8]* [ %366, %357 ], [ %red, %.lr.ph54 ]
    %lsr.iv9 = phi [1280 x i8]* [ %365, %357 ], [ %green, %.lr.ph54 ]
    %lsr.iv6 = phi [1280 x i8]* [ %364, %357 ], [ %blue, %.lr.ph54 ]
    %lsr.iv3 = phi [1280 x i8]* [ %363, %357 ], [ %alpha, %.lr.ph54 ]
    %lsr.iv1 = phi [1280 x i8]* [ %362, %357 ], [ %mask, %.lr.ph54 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %357 ], [ %328, %.lr.ph54 ]
    %fft.042 = phi i32 [ %361, %357 ], [ %ft.248, %.lr.ph54 ]
    %ffs.041 = phi i32 [ %360, %357 ], [ %fs.247, %.lr.ph54 ]
    %ffz.040 = phi i32 [ %359, %357 ], [ %fz.245, %.lr.ph54 ]
    %331 = lshr i32 %ffz.040, 11
    %332 = and i32 %331, 65535
    %333 = load i16, i16* %lsr.iv16, align 2, !tbaa !88
    %334 = zext i16 %333 to i32
    %335 = icmp ult i32 %332, %334
    br i1 %335, label %336, label %357
  
  ; <label>:336                                     ; preds = %.lr.ph
    %337 = bitcast [1280 x i8]* %lsr.iv3 to i8*
    %338 = bitcast [1280 x i8]* %lsr.iv6 to i8*
    %339 = bitcast [1280 x i8]* %lsr.iv9 to i8*
    %340 = bitcast [1280 x i8]* %lsr.iv13 to i8*
    %341 = trunc i32 %331 to i16
    %342 = ashr i32 %ffs.041, 11
    %343 = and i32 %342, %147
    %344 = ashr i32 %fft.042, 11
    %345 = and i32 %344, %148
    %346 = shl i32 %345, %144
    %347 = add nsw i32 %346, %343
    %348 = mul nsw i32 %347, 3
    %349 = getelementptr inbounds i8, i8* %146, i32 %348
    %350 = load i8, i8* %349, align 1, !tbaa !89
    store i8 %350, i8* %340, align 1, !tbaa !89
    %351 = add nsw i32 %348, 1
    %352 = getelementptr inbounds i8, i8* %146, i32 %351
    %353 = load i8, i8* %352, align 1, !tbaa !89
    store i8 %353, i8* %339, align 1, !tbaa !89
    %354 = add nsw i32 %348, 2
    %355 = getelementptr inbounds i8, i8* %146, i32 %354
    %356 = load i8, i8* %355, align 1, !tbaa !89
    store i8 %356, i8* %338, align 1, !tbaa !89
    store i8 -1, i8* %337, align 1, !tbaa !89
    store i16 %341, i16* %lsr.iv16, align 2, !tbaa !88
    br label %357
  
  ; <label>:357                                     ; preds = %336, %.lr.ph
    %.sink = phi i8 [ 1, %336 ], [ 0, %.lr.ph ]
    %358 = bitcast [1280 x i8]* %lsr.iv1 to i8*
    store i8 %.sink, i8* %358, align 1
    %359 = add nsw i32 %ffz.040, %171
    %360 = add nsw i32 %ffs.041, %187
    %361 = add nsw i32 %fft.042, %207
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv1, i32 0, i32 1
    %362 = bitcast i8* %scevgep to [1280 x i8]*
    %scevgep4 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv3, i32 0, i32 1
    %363 = bitcast i8* %scevgep4 to [1280 x i8]*
    %scevgep7 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv6, i32 0, i32 1
    %364 = bitcast i8* %scevgep7 to [1280 x i8]*
    %scevgep10 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv9, i32 0, i32 1
    %365 = bitcast i8* %scevgep10 to [1280 x i8]*
    %scevgep14 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv13, i32 0, i32 1
    %366 = bitcast i8* %scevgep14 to [1280 x i8]*
    %scevgep17 = getelementptr i16, i16* %lsr.iv16, i32 1
    %exitcond = icmp eq i32 %327, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %357
    %367 = bitcast [1280 x i8]* %mask to i8*
    %368 = bitcast [1280 x i8]* %alpha to i8*
    %369 = bitcast [1280 x i8]* %blue to i8*
    %370 = bitcast [1280 x i8]* %green to i8*
    %371 = bitcast [1280 x i8]* %red to i8*
    %sunkaddr23 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr24 = add i32 %sunkaddr23, 2060
    %sunkaddr25 = inttoptr i32 %sunkaddr24 to void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)**
    %372 = load void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)** %sunkaddr25, align 4, !tbaa !90
    call void %372(%struct.gl_context* %ctx, i32 signext %329, i32 signext %327, i32 signext %iy.246, i8* %371, i8* %370, i8* %369, i8* %368, i8* nonnull %367) #4
    br label %373
  
  ; <label>:373                                     ; preds = %._crit_edge, %.lr.ph54
    %374 = bitcast [1280 x i8]* %mask to i8*
    %375 = bitcast [1280 x i8]* %alpha to i8*
    %376 = bitcast [1280 x i8]* %blue to i8*
    %377 = bitcast [1280 x i8]* %green to i8*
    %378 = bitcast [1280 x i8]* %red to i8*
    call void @llvm.lifetime.end(i64 1280, i8* %374) #4
    call void @llvm.lifetime.end(i64 1280, i8* %375) #4
    call void @llvm.lifetime.end(i64 1280, i8* %376) #4
    call void @llvm.lifetime.end(i64 1280, i8* %377) #4
    call void @llvm.lifetime.end(i64 1280, i8* %378) #4
    %379 = add nsw i32 %iy.246, 1
    %380 = add nsw i32 %lines.250, -1
    %381 = add nsw i32 %fxLeftEdge.252, %fdxLeftEdge.1
    %382 = add nsw i32 %fxRightEdge.251, %fdxRightEdge.1
    %383 = add nsw i32 %fError.249, %fdError.1
    %384 = icmp sgt i32 %383, -1
    br i1 %384, label %385, label %389
  
  ; <label>:385                                     ; preds = %373
    %386 = add nsw i32 %383, -2048
    %387 = bitcast i16* %zRow.244 to i8*
    %388 = getelementptr inbounds i8, i8* %387, i32 %dZRowOuter.1
    br label %392
  
  ; <label>:389                                     ; preds = %373
    %390 = bitcast i16* %zRow.244 to i8*
    %391 = getelementptr inbounds i8, i8* %390, i32 %317
    br label %392
  
  ; <label>:392                                     ; preds = %389, %385
    %zRow.3.in = phi i8* [ %388, %385 ], [ %391, %389 ]
    %fdzOuter.1.pn = phi i32 [ %fdzOuter.1, %385 ], [ %318, %389 ]
    %fdsOuter.1.pn = phi i32 [ %fdsOuter.1, %385 ], [ %319, %389 ]
    %fdtOuter.1.pn = phi i32 [ %fdtOuter.1, %385 ], [ %320, %389 ]
    %fError.3 = phi i32 [ %386, %385 ], [ %383, %389 ]
    %ft.3 = add nsw i32 %fdtOuter.1.pn, %ft.248
    %fs.3 = add nsw i32 %fdsOuter.1.pn, %fs.247
    %fz.3 = add nsw i32 %fdzOuter.1.pn, %fz.245
    %zRow.3 = bitcast i8* %zRow.3.in to i16*
    %393 = icmp sgt i32 %lines.250, 1
    br i1 %393, label %.lr.ph54, label %.loopexit
  
  .loopexit:                                        ; preds = %392, %316, %314
    %zRow.4.ph = phi i16* [ %zRow.1, %314 ], [ %zRow.1, %316 ], [ %zRow.3, %392 ]
    %fz.4.ph = phi i32 [ %fz.1, %314 ], [ %fz.1, %316 ], [ %fz.3, %392 ]
    %iy.3.ph = phi i32 [ %iy.1, %314 ], [ %iy.1, %316 ], [ %379, %392 ]
    %fs.4.ph = phi i32 [ %fs.1, %314 ], [ %fs.1, %316 ], [ %fs.3, %392 ]
    %ft.4.ph = phi i32 [ %ft.1, %314 ], [ %ft.1, %316 ], [ %ft.3, %392 ]
    %fError.4.ph = phi i32 [ %fError.1, %314 ], [ %fError.1, %316 ], [ %fError.3, %392 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %314 ], [ %fxRightEdge.1, %316 ], [ %382, %392 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %314 ], [ %fxLeftEdge.1, %316 ], [ %381, %392 ]
    %394 = add nuw nsw i32 %subTriangle.077, 1
    %395 = icmp slt i32 %394, 2
    br i1 %395, label %212, label %.critedge
  
  .critedge:                                        ; preds = %214, %.loopexit, %57, %21
    %396 = bitcast %struct.EdgeT* %eBot to i8*
    %397 = bitcast %struct.EdgeT* %eTop to i8*
    %398 = bitcast %struct.EdgeT* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %396) #4
    call void @llvm.lifetime.end(i64 40, i8* %397) #4
    call void @llvm.lifetime.end(i64 40, i8* %398) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @simple_textured_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.0, align 4
    %eTop = alloca %struct.EdgeT.0, align 4
    %eBot = alloca %struct.EdgeT.0, align 4
    %red = alloca [1280 x i8], align 1
    %green = alloca [1280 x i8], align 1
    %blue = alloca [1280 x i8], align 1
    %alpha = alloca [1280 x i8], align 1
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.0* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.0* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.0* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.0* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.0* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.0* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 17
    %134 = load %struct.gl_texture_object*, %struct.gl_texture_object** %133, align 4, !tbaa !44
    %135 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %134, i32 0, i32 10, i32 0
    %136 = load %struct.gl_texture_image*, %struct.gl_texture_image** %135, align 4, !tbaa !51
    %137 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 2
    %138 = load i32, i32* %137, align 4, !tbaa !79
    %139 = uitofp i32 %138 to float
    %140 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 3
    %141 = load i32, i32* %140, align 4, !tbaa !80
    %142 = uitofp i32 %141 to float
    %143 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 8
    %144 = load i32, i32* %143, align 4, !tbaa !81
    %145 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %136, i32 0, i32 12
    %146 = load i8*, i8** %145, align 4, !tbaa !82
    %147 = add i32 %138, -1
    %148 = add i32 %141, -1
    %149 = fcmp olt float %58, 0.000000e+00
    %150 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 0
    %151 = load float, float* %150, align 4, !tbaa !67
    %152 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 0
    %153 = load float, float* %152, align 4, !tbaa !67
    %154 = fsub float %151, %153
    %155 = fmul float %139, %154
    %156 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 0
    %157 = load float, float* %156, align 4, !tbaa !67
    %158 = fsub float %157, %153
    %159 = fmul float %142, %158
    %160 = fmul float %155, %50
    %161 = fmul float %38, %159
    %162 = fsub float %160, %161
    %163 = fmul float %58, %162
    %164 = fmul float %163, 2.048000e+03
    %165 = fptosi float %164 to i32
    %166 = fmul float %159, %32
    %167 = fmul float %155, %48
    %168 = fsub float %166, %167
    %169 = fmul float %58, %168
    %170 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 1
    %171 = load float, float* %170, align 4, !tbaa !67
    %172 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 1
    %173 = load float, float* %172, align 4, !tbaa !67
    %174 = fsub float %171, %173
    %175 = fmul float %139, %174
    %176 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 1
    %177 = load float, float* %176, align 4, !tbaa !67
    %178 = fsub float %177, %173
    %179 = fmul float %142, %178
    %180 = fmul float %50, %175
    %181 = fmul float %38, %179
    %182 = fsub float %180, %181
    %183 = fmul float %58, %182
    %184 = fmul float %183, 2.048000e+03
    %185 = fptosi float %184 to i32
    %186 = fmul float %32, %179
    %187 = fmul float %48, %175
    %188 = fsub float %186, %187
    %189 = fmul float %58, %188
    %eMaj.eBot = select i1 %149, %struct.EdgeT.0* %eMaj, %struct.EdgeT.0* %eBot
    %eBot.eMaj = select i1 %149, %struct.EdgeT.0* %eBot, %struct.EdgeT.0* %eMaj
    %.12 = zext i1 %149 to i32
    br label %190
  
  ; <label>:190                                     ; preds = %.loopexit, %132
    %subTriangle.062 = phi i32 [ 0, %132 ], [ %317, %.loopexit ]
    %fxLeftEdge.061 = phi i32 [ undef, %132 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fxRightEdge.060 = phi i32 [ undef, %132 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.059 = phi i32 [ undef, %132 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdxRightEdge.058 = phi i32 [ undef, %132 ], [ %fdxRightEdge.1, %.loopexit ]
    %fError.057 = phi i32 [ undef, %132 ], [ %fError.4.ph, %.loopexit ]
    %fdtOuter.056 = phi i32 [ undef, %132 ], [ %fdtOuter.1, %.loopexit ]
    %ft.055 = phi i32 [ undef, %132 ], [ %ft.4.ph, %.loopexit ]
    %fdError.054 = phi i32 [ undef, %132 ], [ %fdError.1, %.loopexit ]
    %fdsOuter.053 = phi i32 [ undef, %132 ], [ %fdsOuter.1, %.loopexit ]
    %fs.052 = phi i32 [ undef, %132 ], [ %fs.4.ph, %.loopexit ]
    %iy.051 = phi i32 [ undef, %132 ], [ %iy.3.ph, %.loopexit ]
    %191 = icmp eq i32 %subTriangle.062, 0
    br i1 %191, label %.thread, label %192
  
  ; <label>:192                                     ; preds = %190
    %193 = icmp eq i32 %99, 0
    br i1 %193, label %.critedge, label %194
  
  ; <label>:194                                     ; preds = %192
    %195 = fcmp olt float %58, 0.000000e+00
    br i1 %195, label %254, label %.thread
  
  .thread:                                          ; preds = %194, %190
    %lines.119 = phi i32 [ %99, %194 ], [ %118, %190 ]
    %setupRight.117 = phi i32 [ %.12, %194 ], [ 1, %190 ]
    %eRight.115 = phi %struct.EdgeT.0* [ %eMaj, %194 ], [ %eBot.eMaj, %190 ]
    %eLeft.114 = phi %struct.EdgeT.0* [ %eTop, %194 ], [ %eMaj.eBot, %190 ]
    %196 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 8
    %197 = load i32, i32* %196, align 4, !tbaa !74
    %198 = icmp sgt i32 %197, 0
    br i1 %198, label %199, label %254
  
  ; <label>:199                                     ; preds = %.thread
    %200 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 5
    %201 = load i32, i32* %200, align 4, !tbaa !78
    %202 = add nsw i32 %201, 2047
    %203 = and i32 %202, -2048
    %204 = sub i32 -2048, %201
    %205 = add i32 %204, %203
    %206 = add nsw i32 %201, -1
    %207 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 4
    %208 = load i32, i32* %207, align 4, !tbaa !75
    %209 = add nsw i32 %208, -1
    %210 = and i32 %209, -2048
    %211 = sub i32 2048, %208
    %212 = add i32 %211, %210
    %213 = ashr i32 %209, 11
    %214 = sitofp i32 %213 to float
    %215 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 6
    %216 = load i32, i32* %215, align 4, !tbaa !73
    %217 = ashr i32 %216, 11
    %218 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 9
    %219 = load i32, i32* %218, align 4, !tbaa !77
    %220 = sub nsw i32 %203, %219
    %221 = sitofp i32 %220 to float
    %222 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eLeft.114, i32 0, i32 7
    %223 = load float, float* %222, align 4, !tbaa !76
    %224 = bitcast %struct.EdgeT.0* %eLeft.114 to i32*
    %225 = load i32, i32* %224, align 4, !tbaa !68
    %226 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %225, i32 0
    %227 = load float, float* %226, align 4, !tbaa !67
    %228 = fmul float %139, %227
    %229 = fmul float %228, 2.048000e+03
    %230 = fmul float %163, %221
    %231 = fadd float %230, %229
    %232 = fmul float %169, %223
    %233 = fadd float %232, %231
    %234 = fptosi float %233 to i32
    %235 = add nsw i32 %234, 1024
    %236 = fmul float %163, %214
    %237 = fadd float %169, %236
    %238 = fmul float %237, 2.048000e+03
    %239 = fptosi float %238 to i32
    %240 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %225, i32 1
    %241 = load float, float* %240, align 4, !tbaa !67
    %242 = fmul float %142, %241
    %243 = fmul float %242, 2.048000e+03
    %244 = fmul float %183, %221
    %245 = fadd float %244, %243
    %246 = fmul float %189, %223
    %247 = fadd float %246, %245
    %248 = fptosi float %247 to i32
    %249 = add nsw i32 %248, 1024
    %250 = fmul float %183, %214
    %251 = fadd float %189, %250
    %252 = fmul float %251, 2.048000e+03
    %253 = fptosi float %252 to i32
    br label %254
  
  ; <label>:254                                     ; preds = %199, %.thread, %194
    %lines.120 = phi i32 [ %lines.119, %199 ], [ %lines.119, %.thread ], [ %99, %194 ]
    %setupRight.118 = phi i32 [ %setupRight.117, %199 ], [ %setupRight.117, %.thread ], [ %.12, %194 ]
    %eRight.116 = phi %struct.EdgeT.0* [ %eRight.115, %199 ], [ %eRight.115, %.thread ], [ %eTop, %194 ]
    %iy.1 = phi i32 [ %217, %199 ], [ %iy.051, %.thread ], [ %iy.051, %194 ]
    %fs.1 = phi i32 [ %235, %199 ], [ %fs.052, %.thread ], [ %fs.052, %194 ]
    %fdsOuter.1 = phi i32 [ %239, %199 ], [ %fdsOuter.053, %.thread ], [ %fdsOuter.053, %194 ]
    %fdError.1 = phi i32 [ %212, %199 ], [ %fdError.054, %.thread ], [ %fdError.054, %194 ]
    %ft.1 = phi i32 [ %249, %199 ], [ %ft.055, %.thread ], [ %ft.055, %194 ]
    %fdtOuter.1 = phi i32 [ %253, %199 ], [ %fdtOuter.056, %.thread ], [ %fdtOuter.056, %194 ]
    %fError.1 = phi i32 [ %205, %199 ], [ %fError.057, %.thread ], [ %fError.057, %194 ]
    %fdxLeftEdge.1 = phi i32 [ %208, %199 ], [ %fdxLeftEdge.059, %.thread ], [ %fdxLeftEdge.059, %194 ]
    %fxLeftEdge.1 = phi i32 [ %206, %199 ], [ %fxLeftEdge.061, %.thread ], [ %fxLeftEdge.061, %194 ]
    %255 = icmp eq i32 %setupRight.118, 0
    br i1 %255, label %266, label %256
  
  ; <label>:256                                     ; preds = %254
    %257 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.116, i32 0, i32 8
    %258 = load i32, i32* %257, align 4, !tbaa !74
    %259 = icmp sgt i32 %258, 0
    br i1 %259, label %260, label %266
  
  ; <label>:260                                     ; preds = %256
    %261 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.116, i32 0, i32 5
    %262 = load i32, i32* %261, align 4, !tbaa !78
    %263 = add nsw i32 %262, -1
    %264 = getelementptr inbounds %struct.EdgeT.0, %struct.EdgeT.0* %eRight.116, i32 0, i32 4
    %265 = load i32, i32* %264, align 4, !tbaa !75
    br label %266
  
  ; <label>:266                                     ; preds = %260, %256, %254
    %fdxRightEdge.1 = phi i32 [ %265, %260 ], [ %fdxRightEdge.058, %256 ], [ %fdxRightEdge.058, %254 ]
    %fxRightEdge.1 = phi i32 [ %263, %260 ], [ %fxRightEdge.060, %256 ], [ %fxRightEdge.060, %254 ]
    %267 = icmp sgt i32 %lines.120, 0
    br i1 %267, label %.lr.ph45, label %.loopexit
  
  .lr.ph45:                                         ; preds = %266, %302
    %fxLeftEdge.244 = phi i32 [ %309, %302 ], [ %fxLeftEdge.1, %266 ]
    %fxRightEdge.243 = phi i32 [ %310, %302 ], [ %fxRightEdge.1, %266 ]
    %lines.242 = phi i32 [ %308, %302 ], [ %lines.120, %266 ]
    %fError.241 = phi i32 [ %fError.3, %302 ], [ %fError.1, %266 ]
    %ft.240 = phi i32 [ %ft.3, %302 ], [ %ft.1, %266 ]
    %fs.239 = phi i32 [ %fs.3, %302 ], [ %fs.1, %266 ]
    %iy.238 = phi i32 [ %307, %302 ], [ %iy.1, %266 ]
    %268 = bitcast [1280 x i8]* %alpha to i8*
    %269 = bitcast [1280 x i8]* %blue to i8*
    %270 = bitcast [1280 x i8]* %green to i8*
    %271 = bitcast [1280 x i8]* %red to i8*
    %272 = ashr i32 %fxLeftEdge.244, 11
    %273 = ashr i32 %fxRightEdge.243, 11
    %274 = sub nsw i32 %273, %272
    call void @llvm.lifetime.start(i64 1280, i8* %271) #4
    call void @llvm.lifetime.start(i64 1280, i8* %270) #4
    call void @llvm.lifetime.start(i64 1280, i8* %269) #4
    call void @llvm.lifetime.start(i64 1280, i8* %268) #4
    %275 = icmp sgt i32 %274, 0
    br i1 %275, label %.lr.ph, label %302
  
  .lr.ph:                                           ; preds = %.lr.ph45, %.lr.ph
    %lsr.iv9 = phi [1280 x i8]* [ %296, %.lr.ph ], [ %red, %.lr.ph45 ]
    %lsr.iv6 = phi [1280 x i8]* [ %295, %.lr.ph ], [ %green, %.lr.ph45 ]
    %lsr.iv3 = phi [1280 x i8]* [ %294, %.lr.ph ], [ %blue, %.lr.ph45 ]
    %lsr.iv1 = phi [1280 x i8]* [ %293, %.lr.ph ], [ %alpha, %.lr.ph45 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %273, %.lr.ph45 ]
    %fft.036 = phi i32 [ %292, %.lr.ph ], [ %ft.240, %.lr.ph45 ]
    %ffs.035 = phi i32 [ %291, %.lr.ph ], [ %fs.239, %.lr.ph45 ]
    %lsr.iv911 = bitcast [1280 x i8]* %lsr.iv9 to i8*
    %lsr.iv68 = bitcast [1280 x i8]* %lsr.iv6 to i8*
    %lsr.iv35 = bitcast [1280 x i8]* %lsr.iv3 to i8*
    %lsr.iv12 = bitcast [1280 x i8]* %lsr.iv1 to i8*
    %276 = ashr i32 %ffs.035, 11
    %277 = and i32 %276, %147
    %278 = ashr i32 %fft.036, 11
    %279 = and i32 %278, %148
    %280 = shl i32 %279, %144
    %281 = add nsw i32 %280, %277
    %282 = mul nsw i32 %281, 3
    %283 = getelementptr inbounds i8, i8* %146, i32 %282
    %284 = load i8, i8* %283, align 1, !tbaa !89
    store i8 %284, i8* %lsr.iv911, align 1, !tbaa !89
    %285 = add nsw i32 %282, 1
    %286 = getelementptr inbounds i8, i8* %146, i32 %285
    %287 = load i8, i8* %286, align 1, !tbaa !89
    store i8 %287, i8* %lsr.iv68, align 1, !tbaa !89
    %288 = add nsw i32 %282, 2
    %289 = getelementptr inbounds i8, i8* %146, i32 %288
    %290 = load i8, i8* %289, align 1, !tbaa !89
    store i8 %290, i8* %lsr.iv35, align 1, !tbaa !89
    store i8 -1, i8* %lsr.iv12, align 1, !tbaa !89
    %291 = add nsw i32 %ffs.035, %165
    %292 = add nsw i32 %fft.036, %185
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv1, i32 0, i32 1
    %293 = bitcast i8* %scevgep to [1280 x i8]*
    %scevgep4 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv3, i32 0, i32 1
    %294 = bitcast i8* %scevgep4 to [1280 x i8]*
    %scevgep7 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv6, i32 0, i32 1
    %295 = bitcast i8* %scevgep7 to [1280 x i8]*
    %scevgep10 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv9, i32 0, i32 1
    %296 = bitcast i8* %scevgep10 to [1280 x i8]*
    %exitcond = icmp eq i32 %272, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph
    %297 = bitcast [1280 x i8]* %alpha to i8*
    %298 = bitcast [1280 x i8]* %blue to i8*
    %299 = bitcast [1280 x i8]* %green to i8*
    %300 = bitcast [1280 x i8]* %red to i8*
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr12 = add i32 %sunkaddr, 2060
    %sunkaddr13 = inttoptr i32 %sunkaddr12 to void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)**
    %301 = load void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)*, void (%struct.gl_context*, i32, i32, i32, i8*, i8*, i8*, i8*, i8*)** %sunkaddr13, align 4, !tbaa !90
    call void %301(%struct.gl_context* %ctx, i32 signext %274, i32 signext %272, i32 signext %iy.238, i8* nonnull %300, i8* nonnull %299, i8* nonnull %298, i8* nonnull %297, i8* null) #4
    br label %302
  
  ; <label>:302                                     ; preds = %._crit_edge, %.lr.ph45
    %303 = bitcast [1280 x i8]* %alpha to i8*
    %304 = bitcast [1280 x i8]* %blue to i8*
    %305 = bitcast [1280 x i8]* %green to i8*
    %306 = bitcast [1280 x i8]* %red to i8*
    call void @llvm.lifetime.end(i64 1280, i8* %303) #4
    call void @llvm.lifetime.end(i64 1280, i8* %304) #4
    call void @llvm.lifetime.end(i64 1280, i8* %305) #4
    call void @llvm.lifetime.end(i64 1280, i8* %306) #4
    %307 = add nsw i32 %iy.238, 1
    %308 = add nsw i32 %lines.242, -1
    %309 = add nsw i32 %fxLeftEdge.244, %fdxLeftEdge.1
    %310 = add nsw i32 %fxRightEdge.243, %fdxRightEdge.1
    %311 = add nsw i32 %fError.241, %fdError.1
    %312 = icmp sgt i32 %311, -1
    %313 = add nsw i32 %311, -2048
    %314 = select i1 %312, i32 0, i32 %165
    %315 = select i1 %312, i32 0, i32 %185
    %fError.3 = select i1 %312, i32 %313, i32 %311
    %fdtOuter.1.pn = add i32 %ft.240, %fdtOuter.1
    %ft.3 = add i32 %fdtOuter.1.pn, %315
    %fdsOuter.1.pn = add i32 %fs.239, %fdsOuter.1
    %fs.3 = add i32 %fdsOuter.1.pn, %314
    %316 = icmp sgt i32 %lines.242, 1
    br i1 %316, label %.lr.ph45, label %.loopexit
  
  .loopexit:                                        ; preds = %302, %266
    %iy.3.ph = phi i32 [ %iy.1, %266 ], [ %307, %302 ]
    %fs.4.ph = phi i32 [ %fs.1, %266 ], [ %fs.3, %302 ]
    %ft.4.ph = phi i32 [ %ft.1, %266 ], [ %ft.3, %302 ]
    %fError.4.ph = phi i32 [ %fError.1, %266 ], [ %fError.3, %302 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %266 ], [ %310, %302 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %266 ], [ %309, %302 ]
    %317 = add nuw nsw i32 %subTriangle.062, 1
    %318 = icmp slt i32 %317, 2
    br i1 %318, label %190, label %.critedge
  
  .critedge:                                        ; preds = %192, %.loopexit, %57, %21
    %319 = bitcast %struct.EdgeT.0* %eBot to i8*
    %320 = bitcast %struct.EdgeT.0* %eTop to i8*
    %321 = bitcast %struct.EdgeT.0* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %319) #4
    call void @llvm.lifetime.end(i64 40, i8* %320) #4
    call void @llvm.lifetime.end(i64 40, i8* %321) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @lambda_textured_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.1, align 4
    %eTop = alloca %struct.EdgeT.1, align 4
    %eBot = alloca %struct.EdgeT.1, align 4
    %zspan = alloca [1280 x i16], align 2
    %red = alloca [1280 x i8], align 1
    %green = alloca [1280 x i8], align 1
    %blue = alloca [1280 x i8], align 1
    %alpha = alloca [1280 x i8], align 1
    %s = alloca [1280 x float], align 4
    %t = alloca [1280 x float], align 4
    %u = alloca [1280 x float], align 4
    %lambda = alloca [1280 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.1* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.1* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.1* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.1* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.1* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.1* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %134 = load i32, i32* %133, align 4, !tbaa !65
    %135 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 0
    %136 = load i32, i32* %135, align 4, !tbaa !43
    %137 = and i32 %136, 4
    %138 = icmp eq i32 %137, 0
    br i1 %138, label %148, label %139
  
  ; <label>:139                                     ; preds = %132
    %140 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 18
    %141 = load %struct.gl_texture_object*, %struct.gl_texture_object** %140, align 4, !tbaa !63
    %142 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %141, i32 0, i32 10, i32 0
    %143 = load %struct.gl_texture_image*, %struct.gl_texture_image** %142, align 4, !tbaa !51
    %144 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %143, i32 0, i32 2
    %145 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %143, i32 0, i32 3
    %146 = load i32, i32* %145, align 4, !tbaa !80
    %147 = uitofp i32 %146 to float
    br label %166
  
  ; <label>:148                                     ; preds = %132
    %149 = and i32 %136, 2
    %150 = icmp eq i32 %149, 0
    br i1 %150, label %160, label %151
  
  ; <label>:151                                     ; preds = %148
    %152 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 17
    %153 = load %struct.gl_texture_object*, %struct.gl_texture_object** %152, align 4, !tbaa !44
    %154 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %153, i32 0, i32 10, i32 0
    %155 = load %struct.gl_texture_image*, %struct.gl_texture_image** %154, align 4, !tbaa !51
    %156 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %155, i32 0, i32 2
    %157 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %155, i32 0, i32 3
    %158 = load i32, i32* %157, align 4, !tbaa !80
    %159 = uitofp i32 %158 to float
    br label %166
  
  ; <label>:160                                     ; preds = %148
    %161 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 41, i32 16
    %162 = load %struct.gl_texture_object*, %struct.gl_texture_object** %161, align 4, !tbaa !64
    %163 = getelementptr inbounds %struct.gl_texture_object, %struct.gl_texture_object* %162, i32 0, i32 10, i32 0
    %164 = load %struct.gl_texture_image*, %struct.gl_texture_image** %163, align 4, !tbaa !51
    %165 = getelementptr inbounds %struct.gl_texture_image, %struct.gl_texture_image* %164, i32 0, i32 2
    br label %166
  
  ; <label>:166                                     ; preds = %160, %151, %139
    %theight.0 = phi float [ %147, %139 ], [ %159, %151 ], [ 1.000000e+00, %160 ]
    %twidth.0.in.in = phi i32* [ %144, %139 ], [ %156, %151 ], [ %165, %160 ]
    %167 = icmp eq i32 %134, 7424
    %twidth.0.in = load i32, i32* %twidth.0.in.in, align 4, !tbaa !79
    %twidth.0 = uitofp i32 %twidth.0.in to float
    br i1 %167, label %168, label %179
  
  ; <label>:168                                     ; preds = %166
    %169 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %170 = load [4 x i32]*, [4 x i32]** %169, align 4, !tbaa !91
    %171 = getelementptr inbounds [4 x i32], [4 x i32]* %170, i32 %pv, i32 0
    %172 = load i32, i32* %171, align 4, !tbaa !93
    %173 = getelementptr inbounds [4 x i32], [4 x i32]* %170, i32 %pv, i32 1
    %174 = load i32, i32* %173, align 4, !tbaa !93
    %175 = getelementptr inbounds [4 x i32], [4 x i32]* %170, i32 %pv, i32 2
    %176 = load i32, i32* %175, align 4, !tbaa !93
    %177 = getelementptr inbounds [4 x i32], [4 x i32]* %170, i32 %pv, i32 3
    %178 = load i32, i32* %177, align 4, !tbaa !93
    %phitmp = trunc i32 %172 to i8
    %phitmp61 = trunc i32 %174 to i8
    %phitmp62 = trunc i32 %176 to i8
    %phitmp63 = trunc i32 %178 to i8
    br label %179
  
  ; <label>:179                                     ; preds = %168, %166
    %a.0 = phi i8 [ %phitmp63, %168 ], [ undef, %166 ]
    %b.0 = phi i8 [ %phitmp62, %168 ], [ undef, %166 ]
    %g.0 = phi i8 [ %phitmp61, %168 ], [ undef, %166 ]
    %r.0 = phi i8 [ %phitmp, %168 ], [ undef, %166 ]
    %180 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %181 = load float, float* %180, align 4, !tbaa !67
    %182 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %183 = load float, float* %182, align 4, !tbaa !67
    %184 = fsub float %181, %183
    %185 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %186 = load float, float* %185, align 4, !tbaa !67
    %187 = fsub float %186, %183
    %188 = fmul float %184, %50
    %189 = fmul float %187, %38
    %190 = fsub float %188, %189
    %191 = fmul float %58, %190
    %192 = fcmp ogt float %191, 6.553500e+04
    %193 = fcmp olt float %191, -6.553500e+04
    %or.cond15 = or i1 %192, %193
    br i1 %or.cond15, label %199, label %194
  
  ; <label>:194                                     ; preds = %179
    %195 = fmul float %187, %32
    %196 = fmul float %184, %48
    %197 = fsub float %195, %196
    %198 = fmul float %58, %197
    br label %199
  
  ; <label>:199                                     ; preds = %194, %179
    %dzdy.0 = phi float [ %198, %194 ], [ 0.000000e+00, %179 ]
    %dzdx.0 = phi float [ %191, %194 ], [ 0.000000e+00, %179 ]
    %200 = fcmp olt float %58, 0.000000e+00
    %201 = fmul float %dzdx.0, 2.048000e+03
    %202 = fptosi float %201 to i32
    %203 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %204 = load [4 x i32]*, [4 x i32]** %203, align 4, !tbaa !91
    %205 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMax.0, i32 0
    %206 = load i32, i32* %205, align 4, !tbaa !93
    %207 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMin.0, i32 0
    %208 = load i32, i32* %207, align 4, !tbaa !93
    %209 = sub nsw i32 %206, %208
    %210 = sitofp i32 %209 to float
    %211 = fmul float %210, 0x3F40000000000000
    %212 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMid.0, i32 0
    %213 = load i32, i32* %212, align 4, !tbaa !93
    %214 = sub nsw i32 %213, %208
    %215 = sitofp i32 %214 to float
    %216 = fmul float %215, 0x3F40000000000000
    %217 = fmul float %50, %211
    %218 = fmul float %38, %216
    %219 = fsub float %217, %218
    %220 = fmul float %58, %219
    %221 = fmul float %220, 2.048000e+03
    %222 = fptosi float %221 to i32
    %223 = fmul float %32, %216
    %224 = fmul float %211, %48
    %225 = fsub float %223, %224
    %226 = fmul float %58, %225
    %227 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMax.0, i32 1
    %228 = load i32, i32* %227, align 4, !tbaa !93
    %229 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMin.0, i32 1
    %230 = load i32, i32* %229, align 4, !tbaa !93
    %231 = sub nsw i32 %228, %230
    %232 = sitofp i32 %231 to float
    %233 = fmul float %232, 0x3F40000000000000
    %234 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMid.0, i32 1
    %235 = load i32, i32* %234, align 4, !tbaa !93
    %236 = sub nsw i32 %235, %230
    %237 = sitofp i32 %236 to float
    %238 = fmul float %237, 0x3F40000000000000
    %239 = fmul float %50, %233
    %240 = fmul float %38, %238
    %241 = fsub float %239, %240
    %242 = fmul float %58, %241
    %243 = fmul float %242, 2.048000e+03
    %244 = fptosi float %243 to i32
    %245 = fmul float %32, %238
    %246 = fmul float %48, %233
    %247 = fsub float %245, %246
    %248 = fmul float %58, %247
    %249 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMax.0, i32 2
    %250 = load i32, i32* %249, align 4, !tbaa !93
    %251 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMin.0, i32 2
    %252 = load i32, i32* %251, align 4, !tbaa !93
    %253 = sub nsw i32 %250, %252
    %254 = sitofp i32 %253 to float
    %255 = fmul float %254, 0x3F40000000000000
    %256 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMid.0, i32 2
    %257 = load i32, i32* %256, align 4, !tbaa !93
    %258 = sub nsw i32 %257, %252
    %259 = sitofp i32 %258 to float
    %260 = fmul float %259, 0x3F40000000000000
    %261 = fmul float %50, %255
    %262 = fmul float %38, %260
    %263 = fsub float %261, %262
    %264 = fmul float %58, %263
    %265 = fmul float %264, 2.048000e+03
    %266 = fptosi float %265 to i32
    %267 = fmul float %32, %260
    %268 = fmul float %48, %255
    %269 = fsub float %267, %268
    %270 = fmul float %58, %269
    %271 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMax.0, i32 3
    %272 = load i32, i32* %271, align 4, !tbaa !93
    %273 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMin.0, i32 3
    %274 = load i32, i32* %273, align 4, !tbaa !93
    %275 = sub nsw i32 %272, %274
    %276 = sitofp i32 %275 to float
    %277 = fmul float %276, 0x3F40000000000000
    %278 = getelementptr inbounds [4 x i32], [4 x i32]* %204, i32 %vMid.0, i32 3
    %279 = load i32, i32* %278, align 4, !tbaa !93
    %280 = sub nsw i32 %279, %274
    %281 = sitofp i32 %280 to float
    %282 = fmul float %281, 0x3F40000000000000
    %283 = fmul float %50, %277
    %284 = fmul float %38, %282
    %285 = fsub float %283, %284
    %286 = fmul float %58, %285
    %287 = fmul float %286, 2.048000e+03
    %288 = fptosi float %287 to i32
    %289 = fmul float %32, %282
    %290 = fmul float %48, %277
    %291 = fsub float %289, %290
    %292 = fmul float %58, %291
    %293 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMax.0, i32 3
    %294 = load float, float* %293, align 4, !tbaa !67
    %295 = fdiv float 1.000000e+00, %294
    %296 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMin.0, i32 3
    %297 = load float, float* %296, align 4, !tbaa !67
    %298 = fdiv float 1.000000e+00, %297
    %299 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMid.0, i32 3
    %300 = load float, float* %299, align 4, !tbaa !67
    %301 = fdiv float 1.000000e+00, %300
    %302 = fsub float %295, %298
    %303 = fsub float %301, %298
    %304 = fmul float %50, %302
    %305 = fmul float %38, %303
    %306 = fsub float %304, %305
    %307 = fmul float %58, %306
    %308 = fmul float %32, %303
    %309 = fmul float %48, %302
    %310 = fsub float %308, %309
    %311 = fmul float %58, %310
    %312 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 0
    %313 = load float, float* %312, align 4, !tbaa !67
    %314 = fmul float %295, %313
    %315 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 0
    %316 = load float, float* %315, align 4, !tbaa !67
    %317 = fmul float %298, %316
    %318 = fsub float %314, %317
    %319 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 0
    %320 = load float, float* %319, align 4, !tbaa !67
    %321 = fmul float %301, %320
    %322 = fsub float %321, %317
    %323 = fmul float %50, %318
    %324 = fmul float %38, %322
    %325 = fsub float %323, %324
    %326 = fmul float %58, %325
    %327 = fmul float %32, %322
    %328 = fmul float %48, %318
    %329 = fsub float %327, %328
    %330 = fmul float %58, %329
    %331 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 1
    %332 = load float, float* %331, align 4, !tbaa !67
    %333 = fmul float %295, %332
    %334 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 1
    %335 = load float, float* %334, align 4, !tbaa !67
    %336 = fmul float %298, %335
    %337 = fsub float %333, %336
    %338 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 1
    %339 = load float, float* %338, align 4, !tbaa !67
    %340 = fmul float %301, %339
    %341 = fsub float %340, %336
    %342 = fmul float %50, %337
    %343 = fmul float %38, %341
    %344 = fsub float %342, %343
    %345 = fmul float %58, %344
    %346 = fmul float %32, %341
    %347 = fmul float %48, %337
    %348 = fsub float %346, %347
    %349 = fmul float %58, %348
    %350 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 2
    %351 = load float, float* %350, align 4, !tbaa !67
    %352 = fmul float %295, %351
    %353 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 2
    %354 = load float, float* %353, align 4, !tbaa !67
    %355 = fmul float %298, %354
    %356 = fsub float %352, %355
    %357 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 2
    %358 = load float, float* %357, align 4, !tbaa !67
    %359 = fmul float %301, %358
    %360 = fsub float %359, %355
    %361 = fmul float %50, %356
    %362 = fmul float %38, %360
    %363 = fsub float %361, %362
    %364 = fmul float %58, %363
    %365 = fmul float %32, %360
    %366 = fmul float %48, %356
    %367 = fsub float %365, %366
    %368 = fmul float %58, %367
    %369 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 3
    %370 = load float, float* %369, align 4, !tbaa !67
    %371 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 3
    %372 = load float, float* %371, align 4, !tbaa !67
    %373 = fsub float %370, %372
    %374 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 3
    %375 = load float, float* %374, align 4, !tbaa !67
    %376 = fsub float %375, %372
    %377 = fmul float %50, %373
    %378 = fmul float %38, %376
    %379 = fsub float %377, %378
    %380 = fmul float %58, %379
    %381 = fmul float %32, %376
    %382 = fmul float %48, %373
    %383 = fsub float %381, %382
    %384 = fmul float %58, %383
    %eMaj.eBot = select i1 %200, %struct.EdgeT.1* %eMaj, %struct.EdgeT.1* %eBot
    %eBot.eMaj = select i1 %200, %struct.EdgeT.1* %eBot, %struct.EdgeT.1* %eMaj
    %.16 = zext i1 %200 to i32
    br label %385
  
  ; <label>:385                                     ; preds = %.loopexit67, %199
    %subTriangle.0147 = phi i32 [ 0, %199 ], [ %765, %.loopexit67 ]
    %dvOuter.0146 = phi float [ undef, %199 ], [ %dvOuter.1, %.loopexit67 ]
    %vLeft.0145 = phi float [ undef, %199 ], [ %vLeft.4.ph, %.loopexit67 ]
    %fxLeftEdge.0144 = phi i32 [ undef, %199 ], [ %fxLeftEdge.3.ph, %.loopexit67 ]
    %duOuter.0143 = phi float [ undef, %199 ], [ %duOuter.1, %.loopexit67 ]
    %uLeft.0142 = phi float [ undef, %199 ], [ %uLeft.4.ph, %.loopexit67 ]
    %fxRightEdge.0141 = phi i32 [ undef, %199 ], [ %fxRightEdge.3.ph, %.loopexit67 ]
    %dwOuter.0140 = phi float [ undef, %199 ], [ %dwOuter.1, %.loopexit67 ]
    %wLeft.0139 = phi float [ undef, %199 ], [ %wLeft.4.ph, %.loopexit67 ]
    %fdxLeftEdge.0138 = phi i32 [ undef, %199 ], [ %fdxLeftEdge.1, %.loopexit67 ]
    %dtOuter.0137 = phi float [ undef, %199 ], [ %dtOuter.1, %.loopexit67 ]
    %tLeft.0136 = phi float [ undef, %199 ], [ %tLeft.4.ph, %.loopexit67 ]
    %fdxRightEdge.0135 = phi i32 [ undef, %199 ], [ %fdxRightEdge.1, %.loopexit67 ]
    %dsOuter.0134 = phi float [ undef, %199 ], [ %dsOuter.1, %.loopexit67 ]
    %sLeft.0133 = phi float [ undef, %199 ], [ %sLeft.4.ph, %.loopexit67 ]
    %fError.0132 = phi i32 [ undef, %199 ], [ %fError.4.ph, %.loopexit67 ]
    %fdaOuter.0131 = phi i32 [ undef, %199 ], [ %fdaOuter.1, %.loopexit67 ]
    %fa.0130 = phi i32 [ undef, %199 ], [ %fa.4.ph, %.loopexit67 ]
    %fdError.0129 = phi i32 [ undef, %199 ], [ %fdError.1, %.loopexit67 ]
    %fdbOuter.0128 = phi i32 [ undef, %199 ], [ %fdbOuter.1, %.loopexit67 ]
    %fb.0127 = phi i32 [ undef, %199 ], [ %fb.4.ph, %.loopexit67 ]
    %iy.0126 = phi i32 [ undef, %199 ], [ %iy.3.ph, %.loopexit67 ]
    %fdgOuter.0125 = phi i32 [ undef, %199 ], [ %fdgOuter.1, %.loopexit67 ]
    %fg.0124 = phi i32 [ undef, %199 ], [ %fg.4.ph, %.loopexit67 ]
    %fdrOuter.0122 = phi i32 [ undef, %199 ], [ %fdrOuter.1, %.loopexit67 ]
    %fr.0121 = phi i32 [ undef, %199 ], [ %fr.4.ph, %.loopexit67 ]
    %fdzOuter.0119 = phi i32 [ undef, %199 ], [ %fdzOuter.1, %.loopexit67 ]
    %fz.0118 = phi i32 [ undef, %199 ], [ %fz.4.ph, %.loopexit67 ]
    %386 = icmp eq i32 %subTriangle.0147, 0
    br i1 %386, label %.thread, label %388
  
  .thread:                                          ; preds = %385
    %sunkaddr = ptrtoint %struct.EdgeT.1* %eBot to i32
    %sunkaddr57 = add i32 %sunkaddr, 32
    %sunkaddr58 = inttoptr i32 %sunkaddr57 to i32*
    %387 = load i32, i32* %sunkaddr58, align 4, !tbaa !74
    br label %393
  
  ; <label>:388                                     ; preds = %385
    %sunkaddr59 = ptrtoint %struct.EdgeT.1* %eTop to i32
    %sunkaddr60 = add i32 %sunkaddr59, 32
    %sunkaddr61 = inttoptr i32 %sunkaddr60 to i32*
    %389 = load i32, i32* %sunkaddr61, align 4, !tbaa !74
    %390 = icmp eq i32 %389, 0
    br i1 %390, label %.critedge, label %391
  
  ; <label>:391                                     ; preds = %388
    %392 = fcmp olt float %58, 0.000000e+00
    br i1 %392, label %541, label %393
  
  ; <label>:393                                     ; preds = %391, %.thread
    %lines.129 = phi i32 [ %387, %.thread ], [ %389, %391 ]
    %setupRight.127 = phi i32 [ 1, %.thread ], [ %.16, %391 ]
    %eRight.125 = phi %struct.EdgeT.1* [ %eBot.eMaj, %.thread ], [ %eMaj, %391 ]
    %eLeft.124 = phi %struct.EdgeT.1* [ %eMaj.eBot, %.thread ], [ %eTop, %391 ]
    %394 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 8
    %395 = load i32, i32* %394, align 4, !tbaa !74
    %396 = icmp sgt i32 %395, 0
    br i1 %396, label %397, label %541
  
  ; <label>:397                                     ; preds = %393
    %398 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 5
    %399 = load i32, i32* %398, align 4, !tbaa !78
    %400 = add nsw i32 %399, 2047
    %401 = and i32 %400, -2048
    %402 = sub i32 -2048, %399
    %403 = add i32 %402, %401
    %404 = add nsw i32 %399, -1
    %405 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 4
    %406 = load i32, i32* %405, align 4, !tbaa !75
    %407 = add nsw i32 %406, -1
    %408 = and i32 %407, -2048
    %409 = sub i32 2048, %406
    %410 = add i32 %409, %408
    %411 = ashr i32 %407, 11
    %412 = sitofp i32 %411 to float
    %413 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 6
    %414 = load i32, i32* %413, align 4, !tbaa !73
    %415 = ashr i32 %414, 11
    %416 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 9
    %417 = load i32, i32* %416, align 4, !tbaa !77
    %418 = sub nsw i32 %401, %417
    %419 = sitofp i32 %418 to float
    %420 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eLeft.124, i32 0, i32 7
    %421 = load float, float* %420, align 4, !tbaa !76
    %422 = bitcast %struct.EdgeT.1* %eLeft.124 to i32*
    %423 = load i32, i32* %422, align 4, !tbaa !68
    %424 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %423, i32 2
    %425 = load float, float* %424, align 4, !tbaa !67
    %sunkaddr62 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr63 = add i32 %sunkaddr62, 55768
    %sunkaddr64 = inttoptr i32 %sunkaddr63 to float*
    %426 = load float, float* %sunkaddr64, align 4, !tbaa !83
    %427 = fadd float %425, %426
    %428 = fmul float %427, 2.048000e+03
    %429 = fmul float %dzdx.0, %419
    %430 = fadd float %429, %428
    %431 = fmul float %dzdy.0, %421
    %432 = fadd float %431, %430
    %433 = fptosi float %432 to i32
    %434 = add nsw i32 %433, 1024
    %435 = fmul float %dzdx.0, %412
    %436 = fadd float %dzdy.0, %435
    %437 = fmul float %436, 2.048000e+03
    %438 = fptosi float %437 to i32
    %sunkaddr65 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr66 = add i32 %sunkaddr65, 52416
    %sunkaddr67 = inttoptr i32 %sunkaddr66 to [4 x i32]**
    %439 = load [4 x i32]*, [4 x i32]** %sunkaddr67, align 4, !tbaa !91
    %440 = getelementptr inbounds [4 x i32], [4 x i32]* %439, i32 %423, i32 0
    %441 = load i32, i32* %440, align 4, !tbaa !93
    %442 = sitofp i32 %441 to float
    %443 = fmul float %220, %419
    %444 = fadd float %443, %442
    %445 = fmul float %226, %421
    %446 = fadd float %445, %444
    %447 = fptosi float %446 to i32
    %448 = add nsw i32 %447, 1024
    %449 = fmul float %220, %412
    %450 = fadd float %226, %449
    %451 = fmul float %450, 2.048000e+03
    %452 = fptosi float %451 to i32
    %453 = getelementptr inbounds [4 x i32], [4 x i32]* %439, i32 %423, i32 1
    %454 = load i32, i32* %453, align 4, !tbaa !93
    %455 = sitofp i32 %454 to float
    %456 = fmul float %242, %419
    %457 = fadd float %456, %455
    %458 = fmul float %248, %421
    %459 = fadd float %458, %457
    %460 = fptosi float %459 to i32
    %461 = add nsw i32 %460, 1024
    %462 = fmul float %242, %412
    %463 = fadd float %248, %462
    %464 = fmul float %463, 2.048000e+03
    %465 = fptosi float %464 to i32
    %466 = getelementptr inbounds [4 x i32], [4 x i32]* %439, i32 %423, i32 2
    %467 = load i32, i32* %466, align 4, !tbaa !93
    %468 = sitofp i32 %467 to float
    %469 = fmul float %264, %419
    %470 = fadd float %469, %468
    %471 = fmul float %270, %421
    %472 = fadd float %471, %470
    %473 = fptosi float %472 to i32
    %474 = add nsw i32 %473, 1024
    %475 = fmul float %264, %412
    %476 = fadd float %270, %475
    %477 = fmul float %476, 2.048000e+03
    %478 = fptosi float %477 to i32
    %479 = getelementptr inbounds [4 x i32], [4 x i32]* %439, i32 %423, i32 3
    %480 = load i32, i32* %479, align 4, !tbaa !93
    %481 = sitofp i32 %480 to float
    %482 = fmul float %286, %419
    %483 = fadd float %482, %481
    %484 = fmul float %292, %421
    %485 = fadd float %484, %483
    %486 = fptosi float %485 to i32
    %487 = add nsw i32 %486, 1024
    %488 = fmul float %286, %412
    %489 = fadd float %292, %488
    %490 = fmul float %489, 2.048000e+03
    %491 = fptosi float %490 to i32
    %492 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %423, i32 3
    %493 = load float, float* %492, align 4, !tbaa !67
    %494 = fdiv float 1.000000e+00, %493
    %495 = fmul float %307, %419
    %496 = fmul float %311, %421
    %497 = fadd float %496, %495
    %498 = fmul float %497, 0x3F40000000000000
    %499 = fadd float %498, %494
    %500 = fmul float %307, %412
    %501 = fadd float %311, %500
    %502 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %423, i32 0
    %503 = load float, float* %502, align 4, !tbaa !67
    %504 = fmul float %503, %494
    %505 = fmul float %326, %419
    %506 = fmul float %330, %421
    %507 = fadd float %506, %505
    %508 = fmul float %507, 0x3F40000000000000
    %509 = fadd float %508, %504
    %510 = fmul float %326, %412
    %511 = fadd float %330, %510
    %512 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %423, i32 1
    %513 = load float, float* %512, align 4, !tbaa !67
    %514 = fmul float %494, %513
    %515 = fmul float %345, %419
    %516 = fmul float %349, %421
    %517 = fadd float %516, %515
    %518 = fmul float %517, 0x3F40000000000000
    %519 = fadd float %518, %514
    %520 = fmul float %345, %412
    %521 = fadd float %349, %520
    %522 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %423, i32 2
    %523 = load float, float* %522, align 4, !tbaa !67
    %524 = fmul float %494, %523
    %525 = fmul float %364, %419
    %526 = fmul float %368, %421
    %527 = fadd float %526, %525
    %528 = fmul float %527, 0x3F40000000000000
    %529 = fadd float %528, %524
    %530 = fmul float %364, %412
    %531 = fadd float %368, %530
    %532 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %423, i32 3
    %533 = load float, float* %532, align 4, !tbaa !67
    %534 = fmul float %380, %419
    %535 = fmul float %384, %421
    %536 = fadd float %535, %534
    %537 = fmul float %536, 0x3F40000000000000
    %538 = fadd float %537, %533
    %539 = fmul float %380, %412
    %540 = fadd float %384, %539
    br label %541
  
  ; <label>:541                                     ; preds = %397, %393, %391
    %lines.130 = phi i32 [ %lines.129, %397 ], [ %lines.129, %393 ], [ %389, %391 ]
    %setupRight.128 = phi i32 [ %setupRight.127, %397 ], [ %setupRight.127, %393 ], [ %.16, %391 ]
    %eRight.126 = phi %struct.EdgeT.1* [ %eRight.125, %397 ], [ %eRight.125, %393 ], [ %eTop, %391 ]
    %fz.1 = phi i32 [ %434, %397 ], [ %fz.0118, %393 ], [ %fz.0118, %391 ]
    %fdzOuter.1 = phi i32 [ %438, %397 ], [ %fdzOuter.0119, %393 ], [ %fdzOuter.0119, %391 ]
    %fr.1 = phi i32 [ %448, %397 ], [ %fr.0121, %393 ], [ %fr.0121, %391 ]
    %fdrOuter.1 = phi i32 [ %452, %397 ], [ %fdrOuter.0122, %393 ], [ %fdrOuter.0122, %391 ]
    %fg.1 = phi i32 [ %461, %397 ], [ %fg.0124, %393 ], [ %fg.0124, %391 ]
    %fdgOuter.1 = phi i32 [ %465, %397 ], [ %fdgOuter.0125, %393 ], [ %fdgOuter.0125, %391 ]
    %iy.1 = phi i32 [ %415, %397 ], [ %iy.0126, %393 ], [ %iy.0126, %391 ]
    %fb.1 = phi i32 [ %474, %397 ], [ %fb.0127, %393 ], [ %fb.0127, %391 ]
    %fdbOuter.1 = phi i32 [ %478, %397 ], [ %fdbOuter.0128, %393 ], [ %fdbOuter.0128, %391 ]
    %fdError.1 = phi i32 [ %410, %397 ], [ %fdError.0129, %393 ], [ %fdError.0129, %391 ]
    %fa.1 = phi i32 [ %487, %397 ], [ %fa.0130, %393 ], [ %fa.0130, %391 ]
    %fdaOuter.1 = phi i32 [ %491, %397 ], [ %fdaOuter.0131, %393 ], [ %fdaOuter.0131, %391 ]
    %fError.1 = phi i32 [ %403, %397 ], [ %fError.0132, %393 ], [ %fError.0132, %391 ]
    %sLeft.1 = phi float [ %509, %397 ], [ %sLeft.0133, %393 ], [ %sLeft.0133, %391 ]
    %dsOuter.1 = phi float [ %511, %397 ], [ %dsOuter.0134, %393 ], [ %dsOuter.0134, %391 ]
    %tLeft.1 = phi float [ %519, %397 ], [ %tLeft.0136, %393 ], [ %tLeft.0136, %391 ]
    %dtOuter.1 = phi float [ %521, %397 ], [ %dtOuter.0137, %393 ], [ %dtOuter.0137, %391 ]
    %fdxLeftEdge.1 = phi i32 [ %406, %397 ], [ %fdxLeftEdge.0138, %393 ], [ %fdxLeftEdge.0138, %391 ]
    %wLeft.1 = phi float [ %499, %397 ], [ %wLeft.0139, %393 ], [ %wLeft.0139, %391 ]
    %dwOuter.1 = phi float [ %501, %397 ], [ %dwOuter.0140, %393 ], [ %dwOuter.0140, %391 ]
    %uLeft.1 = phi float [ %529, %397 ], [ %uLeft.0142, %393 ], [ %uLeft.0142, %391 ]
    %duOuter.1 = phi float [ %531, %397 ], [ %duOuter.0143, %393 ], [ %duOuter.0143, %391 ]
    %fxLeftEdge.1 = phi i32 [ %404, %397 ], [ %fxLeftEdge.0144, %393 ], [ %fxLeftEdge.0144, %391 ]
    %vLeft.1 = phi float [ %538, %397 ], [ %vLeft.0145, %393 ], [ %vLeft.0145, %391 ]
    %dvOuter.1 = phi float [ %540, %397 ], [ %dvOuter.0146, %393 ], [ %dvOuter.0146, %391 ]
    %542 = icmp eq i32 %setupRight.128, 0
    br i1 %542, label %553, label %543
  
  ; <label>:543                                     ; preds = %541
    %544 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eRight.126, i32 0, i32 8
    %545 = load i32, i32* %544, align 4, !tbaa !74
    %546 = icmp sgt i32 %545, 0
    br i1 %546, label %547, label %553
  
  ; <label>:547                                     ; preds = %543
    %548 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eRight.126, i32 0, i32 5
    %549 = load i32, i32* %548, align 4, !tbaa !78
    %550 = add nsw i32 %549, -1
    %551 = getelementptr inbounds %struct.EdgeT.1, %struct.EdgeT.1* %eRight.126, i32 0, i32 4
    %552 = load i32, i32* %551, align 4, !tbaa !75
    br label %553
  
  ; <label>:553                                     ; preds = %547, %543, %541
    %fdxRightEdge.1 = phi i32 [ %552, %547 ], [ %fdxRightEdge.0135, %543 ], [ %fdxRightEdge.0135, %541 ]
    %fxRightEdge.1 = phi i32 [ %550, %547 ], [ %fxRightEdge.0141, %543 ], [ %fxRightEdge.0141, %541 ]
    %554 = icmp eq i32 %lines.130, 0
    br i1 %554, label %.loopexit67, label %555
  
  ; <label>:555                                     ; preds = %553
    %556 = fadd float %307, %dwOuter.1
    %557 = fadd float %326, %dsOuter.1
    %558 = fadd float %345, %dtOuter.1
    %559 = fadd float %364, %duOuter.1
    %560 = fadd float %380, %dvOuter.1
    %561 = icmp sgt i32 %lines.130, 0
    br i1 %561, label %.lr.ph103, label %.loopexit67
  
  .lr.ph103:                                        ; preds = %555, %742
    %lines.2102 = phi i32 [ %753, %742 ], [ %lines.130, %555 ]
    %vLeft.2101 = phi float [ %vLeft.3, %742 ], [ %vLeft.1, %555 ]
    %fxLeftEdge.2100 = phi i32 [ %754, %742 ], [ %fxLeftEdge.1, %555 ]
    %uLeft.299 = phi float [ %uLeft.3, %742 ], [ %uLeft.1, %555 ]
    %fxRightEdge.298 = phi i32 [ %755, %742 ], [ %fxRightEdge.1, %555 ]
    %wLeft.297 = phi float [ %wLeft.3, %742 ], [ %wLeft.1, %555 ]
    %tLeft.296 = phi float [ %tLeft.3, %742 ], [ %tLeft.1, %555 ]
    %sLeft.295 = phi float [ %sLeft.3, %742 ], [ %sLeft.1, %555 ]
    %fError.294 = phi i32 [ %., %742 ], [ %fError.1, %555 ]
    %fa.293 = phi i32 [ %fa.3, %742 ], [ %fa.1, %555 ]
    %fb.292 = phi i32 [ %fb.3, %742 ], [ %fb.1, %555 ]
    %iy.291 = phi i32 [ %752, %742 ], [ %iy.1, %555 ]
    %fg.290 = phi i32 [ %fg.3, %742 ], [ %fg.1, %555 ]
    %fr.288 = phi i32 [ %fr.3, %742 ], [ %fr.1, %555 ]
    %fz.287 = phi i32 [ %fz.3, %742 ], [ %fz.1, %555 ]
    %562 = bitcast [1280 x float]* %lambda to i8*
    %563 = bitcast [1280 x float]* %u to i8*
    %564 = bitcast [1280 x float]* %t to i8*
    %565 = bitcast [1280 x float]* %s to i8*
    %566 = bitcast [1280 x i8]* %alpha to i8*
    %567 = bitcast [1280 x i8]* %blue to i8*
    %568 = bitcast [1280 x i8]* %green to i8*
    %569 = bitcast [1280 x i8]* %red to i8*
    %570 = bitcast [1280 x i16]* %zspan to i8*
    %571 = ashr i32 %fxLeftEdge.2100, 11
    %572 = ashr i32 %fxRightEdge.298, 11
    %573 = sub nsw i32 %572, %571
    call void @llvm.lifetime.start(i64 2560, i8* %570) #4
    call void @llvm.lifetime.start(i64 1280, i8* %569) #4
    call void @llvm.lifetime.start(i64 1280, i8* %568) #4
    call void @llvm.lifetime.start(i64 1280, i8* %567) #4
    call void @llvm.lifetime.start(i64 1280, i8* %566) #4
    call void @llvm.lifetime.start(i64 5120, i8* %565) #4
    call void @llvm.lifetime.start(i64 5120, i8* %564) #4
    call void @llvm.lifetime.start(i64 5120, i8* %563) #4
    call void @llvm.lifetime.start(i64 5120, i8* %562) #4
    %574 = icmp sgt i32 %573, 0
    br i1 %574, label %575, label %742
  
  ; <label>:575                                     ; preds = %.lr.ph103
    %576 = icmp eq i32 %134, 7424
    br i1 %576, label %.lr.ph86.preheader, label %.lr.ph.preheader
  
  .lr.ph86.preheader:                               ; preds = %575
    %577 = sub i32 %572, %571
    br label %.lr.ph86
  
  .lr.ph.preheader:                                 ; preds = %575
    %578 = icmp slt i32 %fa.293, 0
    %ffa.0 = select i1 %578, i32 0, i32 %fa.293
    %579 = icmp slt i32 %fb.292, 0
    %.fb.2 = select i1 %579, i32 0, i32 %fb.292
    %580 = icmp slt i32 %fg.290, 0
    %ffg.0 = select i1 %580, i32 0, i32 %fg.290
    %581 = icmp slt i32 %fr.288, 0
    %.fr.2 = select i1 %581, i32 0, i32 %fr.288
    %582 = sub i32 %572, %571
    br label %.lr.ph
  
  .lr.ph86:                                         ; preds = %compute_lambda.exit, %.lr.ph86.preheader
    %lsr.iv54 = phi [1280 x i16]* [ %651, %compute_lambda.exit ], [ %zspan, %.lr.ph86.preheader ]
    %lsr.iv51 = phi [1280 x i8]* [ %650, %compute_lambda.exit ], [ %red, %.lr.ph86.preheader ]
    %lsr.iv48 = phi [1280 x i8]* [ %649, %compute_lambda.exit ], [ %green, %.lr.ph86.preheader ]
    %lsr.iv45 = phi [1280 x i8]* [ %648, %compute_lambda.exit ], [ %blue, %.lr.ph86.preheader ]
    %lsr.iv42 = phi [1280 x i8]* [ %647, %compute_lambda.exit ], [ %alpha, %.lr.ph86.preheader ]
    %lsr.iv39 = phi [1280 x float]* [ %646, %compute_lambda.exit ], [ %s, %.lr.ph86.preheader ]
    %lsr.iv36 = phi [1280 x float]* [ %645, %compute_lambda.exit ], [ %t, %.lr.ph86.preheader ]
    %lsr.iv33 = phi [1280 x float]* [ %644, %compute_lambda.exit ], [ %u, %.lr.ph86.preheader ]
    %lsr.iv30 = phi [1280 x float]* [ %643, %compute_lambda.exit ], [ %lambda, %.lr.ph86.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %compute_lambda.exit ], [ %577, %.lr.ph86.preheader ]
    %vv.084 = phi float [ %641, %compute_lambda.exit ], [ %vLeft.2101, %.lr.ph86.preheader ]
    %uu.083 = phi float [ %640, %compute_lambda.exit ], [ %uLeft.299, %.lr.ph86.preheader ]
    %ww.082 = phi float [ %642, %compute_lambda.exit ], [ %wLeft.297, %.lr.ph86.preheader ]
    %tt.081 = phi float [ %639, %compute_lambda.exit ], [ %tLeft.296, %.lr.ph86.preheader ]
    %ss.080 = phi float [ %638, %compute_lambda.exit ], [ %sLeft.295, %.lr.ph86.preheader ]
    %ffz.079 = phi i32 [ %637, %compute_lambda.exit ], [ %fz.287, %.lr.ph86.preheader ]
    %lsr.iv5456 = bitcast [1280 x i16]* %lsr.iv54 to i16*
    %lsr.iv5153 = bitcast [1280 x i8]* %lsr.iv51 to i8*
    %lsr.iv4850 = bitcast [1280 x i8]* %lsr.iv48 to i8*
    %lsr.iv4547 = bitcast [1280 x i8]* %lsr.iv45 to i8*
    %lsr.iv4244 = bitcast [1280 x i8]* %lsr.iv42 to i8*
    %lsr.iv3941 = bitcast [1280 x float]* %lsr.iv39 to float*
    %lsr.iv3638 = bitcast [1280 x float]* %lsr.iv36 to float*
    %lsr.iv3335 = bitcast [1280 x float]* %lsr.iv33 to float*
    %583 = fmul float %ww.082, %vv.084
    %584 = fpext float %583 to double
    %585 = fdiv double 1.000000e+00, %584
    %586 = lshr i32 %ffz.079, 11
    %587 = trunc i32 %586 to i16
    store i16 %587, i16* %lsr.iv5456, align 2, !tbaa !88
    store i8 %r.0, i8* %lsr.iv5153, align 1, !tbaa !89
    store i8 %g.0, i8* %lsr.iv4850, align 1, !tbaa !89
    store i8 %b.0, i8* %lsr.iv4547, align 1, !tbaa !89
    store i8 %a.0, i8* %lsr.iv4244, align 1, !tbaa !89
    %588 = fpext float %ss.080 to double
    %589 = fmul double %588, %585
    %590 = fptrunc double %589 to float
    store float %590, float* %lsr.iv3941, align 4, !tbaa !67
    %591 = fpext float %tt.081 to double
    %592 = fmul double %591, %585
    %593 = fptrunc double %592 to float
    store float %593, float* %lsr.iv3638, align 4, !tbaa !67
    %594 = fpext float %uu.083 to double
    %595 = fmul double %594, %585
    %596 = fptrunc double %595 to float
    store float %596, float* %lsr.iv3335, align 4, !tbaa !67
    %597 = fdiv float 1.000000e+00, %ww.082
    %598 = fmul float %597, %590
    %599 = fmul float %597, %593
    %600 = fadd float %326, %590
    %601 = fmul float %597, %600
    %602 = fadd float %345, %593
    %603 = fmul float %597, %602
    %604 = fadd float %330, %590
    %605 = fmul float %597, %604
    %606 = fadd float %349, %593
    %607 = fmul float %597, %606
    %608 = fsub float %601, %598
    %609 = fmul float %twidth.0, %608
    %610 = fsub float %605, %598
    %611 = fmul float %twidth.0, %610
    %612 = fsub float %603, %599
    %613 = fmul float %theight.0, %612
    %614 = fsub float %607, %599
    %615 = fmul float %theight.0, %614
    %616 = fcmp olt float %609, 0.000000e+00
    %617 = fsub float -0.000000e+00, %609
    %dudx.0.i = select i1 %616, float %617, float %609
    %618 = fcmp olt float %611, 0.000000e+00
    %619 = fsub float -0.000000e+00, %611
    %dudy.0.i = select i1 %618, float %619, float %611
    %620 = fcmp olt float %613, 0.000000e+00
    %621 = fsub float -0.000000e+00, %613
    %dvdx.0.i = select i1 %620, float %621, float %613
    %622 = fcmp olt float %615, 0.000000e+00
    %623 = fsub float -0.000000e+00, %615
    %dvdy.0.i = select i1 %622, float %623, float %615
    %624 = fcmp ogt float %dudx.0.i, %dudy.0.i
    %625 = select i1 %624, float %dudx.0.i, float %dudy.0.i
    %626 = fcmp ogt float %dvdx.0.i, %dvdy.0.i
    %627 = select i1 %626, float %dvdx.0.i, float %dvdy.0.i
    %628 = fcmp ogt float %625, %627
    %629 = select i1 %628, float %625, float %627
    %630 = fcmp ugt float %629, 0.000000e+00
    br i1 %630, label %631, label %compute_lambda.exit
  
  ; <label>:631                                     ; preds = %.lr.ph86
    %632 = fpext float %629 to double
    %633 = call double @log(double %632) #4
    %634 = fmul double %633, 1.442695e+00
    %635 = fptrunc double %634 to float
    br label %compute_lambda.exit
  
  compute_lambda.exit:                              ; preds = %631, %.lr.ph86
    %.0.i = phi float [ %635, %631 ], [ 0.000000e+00, %.lr.ph86 ]
    %636 = bitcast [1280 x float]* %lsr.iv30 to float*
    store float %.0.i, float* %636, align 4, !tbaa !67
    %637 = add nsw i32 %ffz.079, %202
    %638 = fadd float %326, %ss.080
    %639 = fadd float %345, %tt.081
    %640 = fadd float %364, %uu.083
    %641 = fadd float %380, %vv.084
    %642 = fadd float %307, %ww.082
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep31 = getelementptr [1280 x float], [1280 x float]* %lsr.iv30, i32 0, i32 1
    %643 = bitcast float* %scevgep31 to [1280 x float]*
    %scevgep34 = getelementptr [1280 x float], [1280 x float]* %lsr.iv33, i32 0, i32 1
    %644 = bitcast float* %scevgep34 to [1280 x float]*
    %scevgep37 = getelementptr [1280 x float], [1280 x float]* %lsr.iv36, i32 0, i32 1
    %645 = bitcast float* %scevgep37 to [1280 x float]*
    %scevgep40 = getelementptr [1280 x float], [1280 x float]* %lsr.iv39, i32 0, i32 1
    %646 = bitcast float* %scevgep40 to [1280 x float]*
    %scevgep43 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv42, i32 0, i32 1
    %647 = bitcast i8* %scevgep43 to [1280 x i8]*
    %scevgep46 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv45, i32 0, i32 1
    %648 = bitcast i8* %scevgep46 to [1280 x i8]*
    %scevgep49 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv48, i32 0, i32 1
    %649 = bitcast i8* %scevgep49 to [1280 x i8]*
    %scevgep52 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv51, i32 0, i32 1
    %650 = bitcast i8* %scevgep52 to [1280 x i8]*
    %scevgep55 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv54, i32 0, i32 1
    %651 = bitcast i16* %scevgep55 to [1280 x i16]*
    %exitcond151 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond151, label %.loopexit, label %.lr.ph86
  
  .lr.ph:                                           ; preds = %compute_lambda.exit22, %.lr.ph.preheader
    %lsr.iv25 = phi [1280 x i16]* [ %732, %compute_lambda.exit22 ], [ %zspan, %.lr.ph.preheader ]
    %lsr.iv22 = phi [1280 x i8]* [ %731, %compute_lambda.exit22 ], [ %red, %.lr.ph.preheader ]
    %lsr.iv19 = phi [1280 x i8]* [ %730, %compute_lambda.exit22 ], [ %green, %.lr.ph.preheader ]
    %lsr.iv16 = phi [1280 x i8]* [ %729, %compute_lambda.exit22 ], [ %blue, %.lr.ph.preheader ]
    %lsr.iv13 = phi [1280 x i8]* [ %728, %compute_lambda.exit22 ], [ %alpha, %.lr.ph.preheader ]
    %lsr.iv9 = phi [1280 x float]* [ %727, %compute_lambda.exit22 ], [ %s, %.lr.ph.preheader ]
    %lsr.iv6 = phi [1280 x float]* [ %726, %compute_lambda.exit22 ], [ %t, %.lr.ph.preheader ]
    %lsr.iv3 = phi [1280 x float]* [ %725, %compute_lambda.exit22 ], [ %u, %.lr.ph.preheader ]
    %lsr.iv1 = phi [1280 x float]* [ %724, %compute_lambda.exit22 ], [ %lambda, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %compute_lambda.exit22 ], [ %582, %.lr.ph.preheader ]
    %vv.177 = phi float [ %722, %compute_lambda.exit22 ], [ %vLeft.2101, %.lr.ph.preheader ]
    %uu.176 = phi float [ %721, %compute_lambda.exit22 ], [ %uLeft.299, %.lr.ph.preheader ]
    %ww.175 = phi float [ %723, %compute_lambda.exit22 ], [ %wLeft.297, %.lr.ph.preheader ]
    %tt.174 = phi float [ %720, %compute_lambda.exit22 ], [ %tLeft.296, %.lr.ph.preheader ]
    %ss.173 = phi float [ %719, %compute_lambda.exit22 ], [ %sLeft.295, %.lr.ph.preheader ]
    %ffa.172 = phi i32 [ %718, %compute_lambda.exit22 ], [ %ffa.0, %.lr.ph.preheader ]
    %ffb.171 = phi i32 [ %717, %compute_lambda.exit22 ], [ %.fb.2, %.lr.ph.preheader ]
    %ffg.170 = phi i32 [ %716, %compute_lambda.exit22 ], [ %ffg.0, %.lr.ph.preheader ]
    %ffr.169 = phi i32 [ %715, %compute_lambda.exit22 ], [ %.fr.2, %.lr.ph.preheader ]
    %ffz.168 = phi i32 [ %714, %compute_lambda.exit22 ], [ %fz.287, %.lr.ph.preheader ]
    %lsr.iv2527 = bitcast [1280 x i16]* %lsr.iv25 to i16*
    %lsr.iv2224 = bitcast [1280 x i8]* %lsr.iv22 to i8*
    %lsr.iv1921 = bitcast [1280 x i8]* %lsr.iv19 to i8*
    %lsr.iv1618 = bitcast [1280 x i8]* %lsr.iv16 to i8*
    %lsr.iv1315 = bitcast [1280 x i8]* %lsr.iv13 to i8*
    %lsr.iv911 = bitcast [1280 x float]* %lsr.iv9 to float*
    %lsr.iv68 = bitcast [1280 x float]* %lsr.iv6 to float*
    %lsr.iv35 = bitcast [1280 x float]* %lsr.iv3 to float*
    %652 = fmul float %ww.175, %vv.177
    %653 = fpext float %652 to double
    %654 = fdiv double 1.000000e+00, %653
    %655 = lshr i32 %ffz.168, 11
    %656 = trunc i32 %655 to i16
    store i16 %656, i16* %lsr.iv2527, align 2, !tbaa !88
    %657 = lshr i32 %ffr.169, 11
    %658 = trunc i32 %657 to i8
    store i8 %658, i8* %lsr.iv2224, align 1, !tbaa !89
    %659 = lshr i32 %ffg.170, 11
    %660 = trunc i32 %659 to i8
    store i8 %660, i8* %lsr.iv1921, align 1, !tbaa !89
    %661 = lshr i32 %ffb.171, 11
    %662 = trunc i32 %661 to i8
    store i8 %662, i8* %lsr.iv1618, align 1, !tbaa !89
    %663 = lshr i32 %ffa.172, 11
    %664 = trunc i32 %663 to i8
    store i8 %664, i8* %lsr.iv1315, align 1, !tbaa !89
    %665 = fpext float %ss.173 to double
    %666 = fmul double %665, %654
    %667 = fptrunc double %666 to float
    store float %667, float* %lsr.iv911, align 4, !tbaa !67
    %668 = fpext float %tt.174 to double
    %669 = fmul double %668, %654
    %670 = fptrunc double %669 to float
    store float %670, float* %lsr.iv68, align 4, !tbaa !67
    %671 = fpext float %uu.176 to double
    %672 = fmul double %671, %654
    %673 = fptrunc double %672 to float
    store float %673, float* %lsr.iv35, align 4, !tbaa !67
    %674 = fdiv float 1.000000e+00, %ww.175
    %675 = fmul float %674, %667
    %676 = fmul float %674, %670
    %677 = fadd float %326, %667
    %678 = fmul float %674, %677
    %679 = fadd float %345, %670
    %680 = fmul float %674, %679
    %681 = fadd float %330, %667
    %682 = fmul float %674, %681
    %683 = fadd float %349, %670
    %684 = fmul float %674, %683
    %685 = fsub float %678, %675
    %686 = fmul float %twidth.0, %685
    %687 = fsub float %682, %675
    %688 = fmul float %twidth.0, %687
    %689 = fsub float %680, %676
    %690 = fmul float %theight.0, %689
    %691 = fsub float %684, %676
    %692 = fmul float %theight.0, %691
    %693 = fcmp olt float %686, 0.000000e+00
    %694 = fsub float -0.000000e+00, %686
    %dudx.0.i17 = select i1 %693, float %694, float %686
    %695 = fcmp olt float %688, 0.000000e+00
    %696 = fsub float -0.000000e+00, %688
    %dudy.0.i18 = select i1 %695, float %696, float %688
    %697 = fcmp olt float %690, 0.000000e+00
    %698 = fsub float -0.000000e+00, %690
    %dvdx.0.i19 = select i1 %697, float %698, float %690
    %699 = fcmp olt float %692, 0.000000e+00
    %700 = fsub float -0.000000e+00, %692
    %dvdy.0.i20 = select i1 %699, float %700, float %692
    %701 = fcmp ogt float %dudx.0.i17, %dudy.0.i18
    %702 = select i1 %701, float %dudx.0.i17, float %dudy.0.i18
    %703 = fcmp ogt float %dvdx.0.i19, %dvdy.0.i20
    %704 = select i1 %703, float %dvdx.0.i19, float %dvdy.0.i20
    %705 = fcmp ogt float %702, %704
    %706 = select i1 %705, float %702, float %704
    %707 = fcmp ugt float %706, 0.000000e+00
    br i1 %707, label %708, label %compute_lambda.exit22
  
  ; <label>:708                                     ; preds = %.lr.ph
    %709 = fpext float %706 to double
    %710 = call double @log(double %709) #4
    %711 = fmul double %710, 1.442695e+00
    %712 = fptrunc double %711 to float
    br label %compute_lambda.exit22
  
  compute_lambda.exit22:                            ; preds = %708, %.lr.ph
    %.0.i21 = phi float [ %712, %708 ], [ 0.000000e+00, %.lr.ph ]
    %713 = bitcast [1280 x float]* %lsr.iv1 to float*
    store float %.0.i21, float* %713, align 4, !tbaa !67
    %714 = add nsw i32 %ffz.168, %202
    %715 = add nsw i32 %ffr.169, %222
    %716 = add nsw i32 %ffg.170, %244
    %717 = add nsw i32 %ffb.171, %266
    %718 = add nsw i32 %ffa.172, %288
    %719 = fadd float %326, %ss.173
    %720 = fadd float %345, %tt.174
    %721 = fadd float %345, %uu.176
    %722 = fadd float %380, %vv.177
    %723 = fadd float %307, %ww.175
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x float], [1280 x float]* %lsr.iv1, i32 0, i32 1
    %724 = bitcast float* %scevgep to [1280 x float]*
    %scevgep4 = getelementptr [1280 x float], [1280 x float]* %lsr.iv3, i32 0, i32 1
    %725 = bitcast float* %scevgep4 to [1280 x float]*
    %scevgep7 = getelementptr [1280 x float], [1280 x float]* %lsr.iv6, i32 0, i32 1
    %726 = bitcast float* %scevgep7 to [1280 x float]*
    %scevgep10 = getelementptr [1280 x float], [1280 x float]* %lsr.iv9, i32 0, i32 1
    %727 = bitcast float* %scevgep10 to [1280 x float]*
    %scevgep14 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv13, i32 0, i32 1
    %728 = bitcast i8* %scevgep14 to [1280 x i8]*
    %scevgep17 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv16, i32 0, i32 1
    %729 = bitcast i8* %scevgep17 to [1280 x i8]*
    %scevgep20 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv19, i32 0, i32 1
    %730 = bitcast i8* %scevgep20 to [1280 x i8]*
    %scevgep23 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv22, i32 0, i32 1
    %731 = bitcast i8* %scevgep23 to [1280 x i8]*
    %scevgep26 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv25, i32 0, i32 1
    %732 = bitcast i16* %scevgep26 to [1280 x i16]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %compute_lambda.exit22, %compute_lambda.exit
    %733 = bitcast [1280 x float]* %lambda to float*
    %734 = bitcast [1280 x float]* %u to float*
    %735 = bitcast [1280 x float]* %t to float*
    %736 = bitcast [1280 x float]* %s to float*
    %737 = bitcast [1280 x i16]* %zspan to i16*
    %738 = bitcast [1280 x i8]* %alpha to i8*
    %739 = bitcast [1280 x i8]* %blue to i8*
    %740 = bitcast [1280 x i8]* %green to i8*
    %741 = bitcast [1280 x i8]* %red to i8*
    call void @gl_write_texture_span(%struct.gl_context* %ctx, i32 signext %573, i32 signext %571, i32 signext %iy.291, i16* %737, float* %736, float* %735, float* %734, float* nonnull %733, i8* %741, i8* %740, i8* %739, i8* %738, i32 signext 9) #4
    br label %742
  
  ; <label>:742                                     ; preds = %.loopexit, %.lr.ph103
    %743 = bitcast [1280 x float]* %lambda to i8*
    %744 = bitcast [1280 x float]* %u to i8*
    %745 = bitcast [1280 x float]* %t to i8*
    %746 = bitcast [1280 x float]* %s to i8*
    %747 = bitcast [1280 x i8]* %alpha to i8*
    %748 = bitcast [1280 x i8]* %blue to i8*
    %749 = bitcast [1280 x i8]* %green to i8*
    %750 = bitcast [1280 x i8]* %red to i8*
    %751 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 5120, i8* %743) #4
    call void @llvm.lifetime.end(i64 5120, i8* %744) #4
    call void @llvm.lifetime.end(i64 5120, i8* %745) #4
    call void @llvm.lifetime.end(i64 5120, i8* %746) #4
    call void @llvm.lifetime.end(i64 1280, i8* %747) #4
    call void @llvm.lifetime.end(i64 1280, i8* %748) #4
    call void @llvm.lifetime.end(i64 1280, i8* %749) #4
    call void @llvm.lifetime.end(i64 1280, i8* %750) #4
    call void @llvm.lifetime.end(i64 2560, i8* %751) #4
    %752 = add nsw i32 %iy.291, 1
    %753 = add nsw i32 %lines.2102, -1
    %754 = add nsw i32 %fxLeftEdge.2100, %fdxLeftEdge.1
    %755 = add nsw i32 %fxRightEdge.298, %fdxRightEdge.1
    %756 = add nsw i32 %fError.294, %fdError.1
    %757 = icmp sgt i32 %756, -1
    %758 = add nsw i32 %756, -2048
    %759 = select i1 %757, i32 0, i32 %202
    %fdzOuter.1. = add nsw i32 %fdzOuter.1, %759
    %760 = select i1 %757, i32 0, i32 %222
    %fdrOuter.1. = add nsw i32 %fdrOuter.1, %760
    %761 = select i1 %757, i32 0, i32 %244
    %fdgOuter.1. = add nsw i32 %fdgOuter.1, %761
    %762 = select i1 %757, i32 0, i32 %266
    %fdbOuter.1. = add nsw i32 %fdbOuter.1, %762
    %763 = select i1 %757, i32 0, i32 %288
    %fdaOuter.1. = add nsw i32 %fdaOuter.1, %763
    %. = select i1 %757, i32 %758, i32 %756
    %dsOuter.1. = select i1 %757, float %dsOuter.1, float %557
    %dtOuter.1. = select i1 %757, float %dtOuter.1, float %558
    %dwOuter.1. = select i1 %757, float %dwOuter.1, float %556
    %duOuter.1. = select i1 %757, float %duOuter.1, float %559
    %dvOuter.1. = select i1 %757, float %dvOuter.1, float %560
    %vLeft.3 = fadd float %vLeft.2101, %dvOuter.1.
    %uLeft.3 = fadd float %uLeft.299, %duOuter.1.
    %wLeft.3 = fadd float %wLeft.297, %dwOuter.1.
    %tLeft.3 = fadd float %tLeft.296, %dtOuter.1.
    %sLeft.3 = fadd float %sLeft.295, %dsOuter.1.
    %fa.3 = add nsw i32 %fdaOuter.1., %fa.293
    %fb.3 = add nsw i32 %fdbOuter.1., %fb.292
    %fg.3 = add nsw i32 %fdgOuter.1., %fg.290
    %fr.3 = add nsw i32 %fdrOuter.1., %fr.288
    %fz.3 = add nsw i32 %fdzOuter.1., %fz.287
    %764 = icmp sgt i32 %lines.2102, 1
    br i1 %764, label %.lr.ph103, label %.loopexit67
  
  .loopexit67:                                      ; preds = %742, %555, %553
    %fz.4.ph = phi i32 [ %fz.1, %553 ], [ %fz.1, %555 ], [ %fz.3, %742 ]
    %fr.4.ph = phi i32 [ %fr.1, %553 ], [ %fr.1, %555 ], [ %fr.3, %742 ]
    %fg.4.ph = phi i32 [ %fg.1, %553 ], [ %fg.1, %555 ], [ %fg.3, %742 ]
    %iy.3.ph = phi i32 [ %iy.1, %553 ], [ %iy.1, %555 ], [ %752, %742 ]
    %fb.4.ph = phi i32 [ %fb.1, %553 ], [ %fb.1, %555 ], [ %fb.3, %742 ]
    %fa.4.ph = phi i32 [ %fa.1, %553 ], [ %fa.1, %555 ], [ %fa.3, %742 ]
    %fError.4.ph = phi i32 [ %fError.1, %553 ], [ %fError.1, %555 ], [ %., %742 ]
    %sLeft.4.ph = phi float [ %sLeft.1, %553 ], [ %sLeft.1, %555 ], [ %sLeft.3, %742 ]
    %tLeft.4.ph = phi float [ %tLeft.1, %553 ], [ %tLeft.1, %555 ], [ %tLeft.3, %742 ]
    %wLeft.4.ph = phi float [ %wLeft.1, %553 ], [ %wLeft.1, %555 ], [ %wLeft.3, %742 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %553 ], [ %fxRightEdge.1, %555 ], [ %755, %742 ]
    %uLeft.4.ph = phi float [ %uLeft.1, %553 ], [ %uLeft.1, %555 ], [ %uLeft.3, %742 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %553 ], [ %fxLeftEdge.1, %555 ], [ %754, %742 ]
    %vLeft.4.ph = phi float [ %vLeft.1, %553 ], [ %vLeft.1, %555 ], [ %vLeft.3, %742 ]
    %765 = add nuw nsw i32 %subTriangle.0147, 1
    %766 = icmp slt i32 %765, 2
    br i1 %766, label %385, label %.critedge
  
  .critedge:                                        ; preds = %388, %.loopexit67, %57, %21
    %767 = bitcast %struct.EdgeT.1* %eBot to i8*
    %768 = bitcast %struct.EdgeT.1* %eTop to i8*
    %769 = bitcast %struct.EdgeT.1* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %767) #4
    call void @llvm.lifetime.end(i64 40, i8* %768) #4
    call void @llvm.lifetime.end(i64 40, i8* %769) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @general_textured_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.2, align 4
    %eTop = alloca %struct.EdgeT.2, align 4
    %eBot = alloca %struct.EdgeT.2, align 4
    %zspan = alloca [1280 x i16], align 2
    %red = alloca [1280 x i8], align 1
    %green = alloca [1280 x i8], align 1
    %blue = alloca [1280 x i8], align 1
    %alpha = alloca [1280 x i8], align 1
    %s = alloca [1280 x float], align 4
    %t = alloca [1280 x float], align 4
    %u = alloca [1280 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.2* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.2* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.2* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.2* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.2* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.2* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %134 = load i32, i32* %133, align 4, !tbaa !65
    %135 = icmp eq i32 %134, 7424
    br i1 %135, label %136, label %147
  
  ; <label>:136                                     ; preds = %132
    %137 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %138 = load [4 x i32]*, [4 x i32]** %137, align 4, !tbaa !91
    %139 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 0
    %140 = load i32, i32* %139, align 4, !tbaa !93
    %141 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 1
    %142 = load i32, i32* %141, align 4, !tbaa !93
    %143 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 2
    %144 = load i32, i32* %143, align 4, !tbaa !93
    %145 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 3
    %146 = load i32, i32* %145, align 4, !tbaa !93
    %phitmp = trunc i32 %140 to i8
    %phitmp55 = trunc i32 %142 to i8
    %phitmp56 = trunc i32 %144 to i8
    %phitmp57 = trunc i32 %146 to i8
    br label %147
  
  ; <label>:147                                     ; preds = %136, %132
    %a.0 = phi i8 [ %phitmp57, %136 ], [ undef, %132 ]
    %b.0 = phi i8 [ %phitmp56, %136 ], [ undef, %132 ]
    %g.0 = phi i8 [ %phitmp55, %136 ], [ undef, %132 ]
    %r.0 = phi i8 [ %phitmp, %136 ], [ undef, %132 ]
    %148 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %149 = load float, float* %148, align 4, !tbaa !67
    %150 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %151 = load float, float* %150, align 4, !tbaa !67
    %152 = fsub float %149, %151
    %153 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %154 = load float, float* %153, align 4, !tbaa !67
    %155 = fsub float %154, %151
    %156 = fmul float %152, %50
    %157 = fmul float %155, %38
    %158 = fsub float %156, %157
    %159 = fmul float %58, %158
    %160 = fcmp ogt float %159, 6.553500e+04
    %161 = fcmp olt float %159, -6.553500e+04
    %or.cond15 = or i1 %160, %161
    br i1 %or.cond15, label %167, label %162
  
  ; <label>:162                                     ; preds = %147
    %163 = fmul float %155, %32
    %164 = fmul float %152, %48
    %165 = fsub float %163, %164
    %166 = fmul float %58, %165
    br label %167
  
  ; <label>:167                                     ; preds = %162, %147
    %dzdy.0 = phi float [ %166, %162 ], [ 0.000000e+00, %147 ]
    %dzdx.0 = phi float [ %159, %162 ], [ 0.000000e+00, %147 ]
    %168 = fcmp olt float %58, 0.000000e+00
    %169 = fmul float %dzdx.0, 2.048000e+03
    %170 = fptosi float %169 to i32
    %171 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %172 = load [4 x i32]*, [4 x i32]** %171, align 4, !tbaa !91
    %173 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMax.0, i32 0
    %174 = load i32, i32* %173, align 4, !tbaa !93
    %175 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMin.0, i32 0
    %176 = load i32, i32* %175, align 4, !tbaa !93
    %177 = sub nsw i32 %174, %176
    %178 = sitofp i32 %177 to float
    %179 = fmul float %178, 0x3F40000000000000
    %180 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMid.0, i32 0
    %181 = load i32, i32* %180, align 4, !tbaa !93
    %182 = sub nsw i32 %181, %176
    %183 = sitofp i32 %182 to float
    %184 = fmul float %183, 0x3F40000000000000
    %185 = fmul float %50, %179
    %186 = fmul float %38, %184
    %187 = fsub float %185, %186
    %188 = fmul float %58, %187
    %189 = fmul float %188, 2.048000e+03
    %190 = fptosi float %189 to i32
    %191 = fmul float %32, %184
    %192 = fmul float %179, %48
    %193 = fsub float %191, %192
    %194 = fmul float %58, %193
    %195 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMax.0, i32 1
    %196 = load i32, i32* %195, align 4, !tbaa !93
    %197 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMin.0, i32 1
    %198 = load i32, i32* %197, align 4, !tbaa !93
    %199 = sub nsw i32 %196, %198
    %200 = sitofp i32 %199 to float
    %201 = fmul float %200, 0x3F40000000000000
    %202 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMid.0, i32 1
    %203 = load i32, i32* %202, align 4, !tbaa !93
    %204 = sub nsw i32 %203, %198
    %205 = sitofp i32 %204 to float
    %206 = fmul float %205, 0x3F40000000000000
    %207 = fmul float %50, %201
    %208 = fmul float %38, %206
    %209 = fsub float %207, %208
    %210 = fmul float %58, %209
    %211 = fmul float %210, 2.048000e+03
    %212 = fptosi float %211 to i32
    %213 = fmul float %32, %206
    %214 = fmul float %48, %201
    %215 = fsub float %213, %214
    %216 = fmul float %58, %215
    %217 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMax.0, i32 2
    %218 = load i32, i32* %217, align 4, !tbaa !93
    %219 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMin.0, i32 2
    %220 = load i32, i32* %219, align 4, !tbaa !93
    %221 = sub nsw i32 %218, %220
    %222 = sitofp i32 %221 to float
    %223 = fmul float %222, 0x3F40000000000000
    %224 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMid.0, i32 2
    %225 = load i32, i32* %224, align 4, !tbaa !93
    %226 = sub nsw i32 %225, %220
    %227 = sitofp i32 %226 to float
    %228 = fmul float %227, 0x3F40000000000000
    %229 = fmul float %50, %223
    %230 = fmul float %38, %228
    %231 = fsub float %229, %230
    %232 = fmul float %58, %231
    %233 = fmul float %232, 2.048000e+03
    %234 = fptosi float %233 to i32
    %235 = fmul float %32, %228
    %236 = fmul float %48, %223
    %237 = fsub float %235, %236
    %238 = fmul float %58, %237
    %239 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMax.0, i32 3
    %240 = load i32, i32* %239, align 4, !tbaa !93
    %241 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMin.0, i32 3
    %242 = load i32, i32* %241, align 4, !tbaa !93
    %243 = sub nsw i32 %240, %242
    %244 = sitofp i32 %243 to float
    %245 = fmul float %244, 0x3F40000000000000
    %246 = getelementptr inbounds [4 x i32], [4 x i32]* %172, i32 %vMid.0, i32 3
    %247 = load i32, i32* %246, align 4, !tbaa !93
    %248 = sub nsw i32 %247, %242
    %249 = sitofp i32 %248 to float
    %250 = fmul float %249, 0x3F40000000000000
    %251 = fmul float %50, %245
    %252 = fmul float %38, %250
    %253 = fsub float %251, %252
    %254 = fmul float %58, %253
    %255 = fmul float %254, 2.048000e+03
    %256 = fptosi float %255 to i32
    %257 = fmul float %32, %250
    %258 = fmul float %48, %245
    %259 = fsub float %257, %258
    %260 = fmul float %58, %259
    %261 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMax.0, i32 3
    %262 = load float, float* %261, align 4, !tbaa !67
    %263 = fdiv float 1.000000e+00, %262
    %264 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMin.0, i32 3
    %265 = load float, float* %264, align 4, !tbaa !67
    %266 = fdiv float 1.000000e+00, %265
    %267 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %vMid.0, i32 3
    %268 = load float, float* %267, align 4, !tbaa !67
    %269 = fdiv float 1.000000e+00, %268
    %270 = fsub float %263, %266
    %271 = fsub float %269, %266
    %272 = fmul float %50, %270
    %273 = fmul float %38, %271
    %274 = fsub float %272, %273
    %275 = fmul float %58, %274
    %276 = fmul float %32, %271
    %277 = fmul float %48, %270
    %278 = fsub float %276, %277
    %279 = fmul float %58, %278
    %280 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 0
    %281 = load float, float* %280, align 4, !tbaa !67
    %282 = fmul float %263, %281
    %283 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 0
    %284 = load float, float* %283, align 4, !tbaa !67
    %285 = fmul float %266, %284
    %286 = fsub float %282, %285
    %287 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 0
    %288 = load float, float* %287, align 4, !tbaa !67
    %289 = fmul float %269, %288
    %290 = fsub float %289, %285
    %291 = fmul float %50, %286
    %292 = fmul float %38, %290
    %293 = fsub float %291, %292
    %294 = fmul float %58, %293
    %295 = fmul float %32, %290
    %296 = fmul float %48, %286
    %297 = fsub float %295, %296
    %298 = fmul float %58, %297
    %299 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 1
    %300 = load float, float* %299, align 4, !tbaa !67
    %301 = fmul float %263, %300
    %302 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 1
    %303 = load float, float* %302, align 4, !tbaa !67
    %304 = fmul float %266, %303
    %305 = fsub float %301, %304
    %306 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 1
    %307 = load float, float* %306, align 4, !tbaa !67
    %308 = fmul float %269, %307
    %309 = fsub float %308, %304
    %310 = fmul float %50, %305
    %311 = fmul float %38, %309
    %312 = fsub float %310, %311
    %313 = fmul float %58, %312
    %314 = fmul float %32, %309
    %315 = fmul float %48, %305
    %316 = fsub float %314, %315
    %317 = fmul float %58, %316
    %318 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 2
    %319 = load float, float* %318, align 4, !tbaa !67
    %320 = fmul float %263, %319
    %321 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 2
    %322 = load float, float* %321, align 4, !tbaa !67
    %323 = fmul float %266, %322
    %324 = fsub float %320, %323
    %325 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 2
    %326 = load float, float* %325, align 4, !tbaa !67
    %327 = fmul float %269, %326
    %328 = fsub float %327, %323
    %329 = fmul float %50, %324
    %330 = fmul float %38, %328
    %331 = fsub float %329, %330
    %332 = fmul float %58, %331
    %333 = fmul float %32, %328
    %334 = fmul float %48, %324
    %335 = fsub float %333, %334
    %336 = fmul float %58, %335
    %337 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMax.0, i32 3
    %338 = load float, float* %337, align 4, !tbaa !67
    %339 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMin.0, i32 3
    %340 = load float, float* %339, align 4, !tbaa !67
    %341 = fsub float %338, %340
    %342 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %vMid.0, i32 3
    %343 = load float, float* %342, align 4, !tbaa !67
    %344 = fsub float %343, %340
    %345 = fmul float %50, %341
    %346 = fmul float %38, %344
    %347 = fsub float %345, %346
    %348 = fmul float %58, %347
    %349 = fmul float %32, %344
    %350 = fmul float %48, %341
    %351 = fsub float %349, %350
    %352 = fmul float %58, %351
    %eMaj.eBot = select i1 %168, %struct.EdgeT.2* %eMaj, %struct.EdgeT.2* %eBot
    %eBot.eMaj = select i1 %168, %struct.EdgeT.2* %eBot, %struct.EdgeT.2* %eMaj
    %.16 = zext i1 %168 to i32
    br label %353
  
  ; <label>:353                                     ; preds = %.loopexit61, %167
    %subTriangle.0141 = phi i32 [ 0, %167 ], [ %648, %.loopexit61 ]
    %fxLeftEdge.0140 = phi i32 [ undef, %167 ], [ %fxLeftEdge.3.ph, %.loopexit61 ]
    %fxRightEdge.0139 = phi i32 [ undef, %167 ], [ %fxRightEdge.3.ph, %.loopexit61 ]
    %dvOuter.0138 = phi float [ undef, %167 ], [ %dvOuter.1, %.loopexit61 ]
    %vLeft.0137 = phi float [ undef, %167 ], [ %vLeft.4.ph, %.loopexit61 ]
    %fdxLeftEdge.0136 = phi i32 [ undef, %167 ], [ %fdxLeftEdge.1, %.loopexit61 ]
    %duOuter.0135 = phi float [ undef, %167 ], [ %duOuter.1, %.loopexit61 ]
    %uLeft.0134 = phi float [ undef, %167 ], [ %uLeft.4.ph, %.loopexit61 ]
    %fdxRightEdge.0133 = phi i32 [ undef, %167 ], [ %fdxRightEdge.1, %.loopexit61 ]
    %dwOuter.0132 = phi float [ undef, %167 ], [ %dwOuter.1, %.loopexit61 ]
    %wLeft.0131 = phi float [ undef, %167 ], [ %wLeft.4.ph, %.loopexit61 ]
    %fError.0130 = phi i32 [ undef, %167 ], [ %fError.4.ph, %.loopexit61 ]
    %dtOuter.0129 = phi float [ undef, %167 ], [ %dtOuter.1, %.loopexit61 ]
    %tLeft.0128 = phi float [ undef, %167 ], [ %tLeft.4.ph, %.loopexit61 ]
    %fdError.0127 = phi i32 [ undef, %167 ], [ %fdError.1, %.loopexit61 ]
    %dsOuter.0126 = phi float [ undef, %167 ], [ %dsOuter.1, %.loopexit61 ]
    %sLeft.0125 = phi float [ undef, %167 ], [ %sLeft.4.ph, %.loopexit61 ]
    %iy.0124 = phi i32 [ undef, %167 ], [ %iy.3.ph, %.loopexit61 ]
    %fdaOuter.0123 = phi i32 [ undef, %167 ], [ %fdaOuter.1, %.loopexit61 ]
    %fa.0122 = phi i32 [ undef, %167 ], [ %fa.4.ph, %.loopexit61 ]
    %fdbOuter.0120 = phi i32 [ undef, %167 ], [ %fdbOuter.1, %.loopexit61 ]
    %fb.0119 = phi i32 [ undef, %167 ], [ %fb.4.ph, %.loopexit61 ]
    %fdgOuter.0117 = phi i32 [ undef, %167 ], [ %fdgOuter.1, %.loopexit61 ]
    %fg.0116 = phi i32 [ undef, %167 ], [ %fg.4.ph, %.loopexit61 ]
    %fz.0115 = phi i32 [ undef, %167 ], [ %fz.4.ph, %.loopexit61 ]
    %fdrOuter.0114 = phi i32 [ undef, %167 ], [ %fdrOuter.1, %.loopexit61 ]
    %fr.0113 = phi i32 [ undef, %167 ], [ %fr.4.ph, %.loopexit61 ]
    %fdzOuter.0112 = phi i32 [ undef, %167 ], [ %fdzOuter.1, %.loopexit61 ]
    %354 = icmp eq i32 %subTriangle.0141, 0
    br i1 %354, label %.thread, label %356
  
  .thread:                                          ; preds = %353
    %sunkaddr = ptrtoint %struct.EdgeT.2* %eBot to i32
    %sunkaddr43 = add i32 %sunkaddr, 32
    %sunkaddr44 = inttoptr i32 %sunkaddr43 to i32*
    %355 = load i32, i32* %sunkaddr44, align 4, !tbaa !74
    br label %361
  
  ; <label>:356                                     ; preds = %353
    %sunkaddr45 = ptrtoint %struct.EdgeT.2* %eTop to i32
    %sunkaddr46 = add i32 %sunkaddr45, 32
    %sunkaddr47 = inttoptr i32 %sunkaddr46 to i32*
    %357 = load i32, i32* %sunkaddr47, align 4, !tbaa !74
    %358 = icmp eq i32 %357, 0
    br i1 %358, label %.critedge, label %359
  
  ; <label>:359                                     ; preds = %356
    %360 = fcmp olt float %58, 0.000000e+00
    br i1 %360, label %509, label %361
  
  ; <label>:361                                     ; preds = %359, %.thread
    %lines.123 = phi i32 [ %355, %.thread ], [ %357, %359 ]
    %setupRight.121 = phi i32 [ 1, %.thread ], [ %.16, %359 ]
    %eRight.119 = phi %struct.EdgeT.2* [ %eBot.eMaj, %.thread ], [ %eMaj, %359 ]
    %eLeft.118 = phi %struct.EdgeT.2* [ %eMaj.eBot, %.thread ], [ %eTop, %359 ]
    %362 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 8
    %363 = load i32, i32* %362, align 4, !tbaa !74
    %364 = icmp sgt i32 %363, 0
    br i1 %364, label %365, label %509
  
  ; <label>:365                                     ; preds = %361
    %366 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 5
    %367 = load i32, i32* %366, align 4, !tbaa !78
    %368 = add nsw i32 %367, 2047
    %369 = and i32 %368, -2048
    %370 = sub i32 -2048, %367
    %371 = add i32 %370, %369
    %372 = add nsw i32 %367, -1
    %373 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 4
    %374 = load i32, i32* %373, align 4, !tbaa !75
    %375 = add nsw i32 %374, -1
    %376 = and i32 %375, -2048
    %377 = sub i32 2048, %374
    %378 = add i32 %377, %376
    %379 = ashr i32 %375, 11
    %380 = sitofp i32 %379 to float
    %381 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 6
    %382 = load i32, i32* %381, align 4, !tbaa !73
    %383 = ashr i32 %382, 11
    %384 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 9
    %385 = load i32, i32* %384, align 4, !tbaa !77
    %386 = sub nsw i32 %369, %385
    %387 = sitofp i32 %386 to float
    %388 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eLeft.118, i32 0, i32 7
    %389 = load float, float* %388, align 4, !tbaa !76
    %390 = bitcast %struct.EdgeT.2* %eLeft.118 to i32*
    %391 = load i32, i32* %390, align 4, !tbaa !68
    %392 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %391, i32 2
    %393 = load float, float* %392, align 4, !tbaa !67
    %sunkaddr48 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr49 = add i32 %sunkaddr48, 55768
    %sunkaddr50 = inttoptr i32 %sunkaddr49 to float*
    %394 = load float, float* %sunkaddr50, align 4, !tbaa !83
    %395 = fadd float %393, %394
    %396 = fmul float %395, 2.048000e+03
    %397 = fmul float %dzdx.0, %387
    %398 = fadd float %397, %396
    %399 = fmul float %dzdy.0, %389
    %400 = fadd float %399, %398
    %401 = fptosi float %400 to i32
    %402 = add nsw i32 %401, 1024
    %403 = fmul float %dzdx.0, %380
    %404 = fadd float %dzdy.0, %403
    %405 = fmul float %404, 2.048000e+03
    %406 = fptosi float %405 to i32
    %sunkaddr51 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr52 = add i32 %sunkaddr51, 52416
    %sunkaddr53 = inttoptr i32 %sunkaddr52 to [4 x i32]**
    %407 = load [4 x i32]*, [4 x i32]** %sunkaddr53, align 4, !tbaa !91
    %408 = getelementptr inbounds [4 x i32], [4 x i32]* %407, i32 %391, i32 0
    %409 = load i32, i32* %408, align 4, !tbaa !93
    %410 = sitofp i32 %409 to float
    %411 = fmul float %188, %387
    %412 = fadd float %411, %410
    %413 = fmul float %194, %389
    %414 = fadd float %413, %412
    %415 = fptosi float %414 to i32
    %416 = add nsw i32 %415, 1024
    %417 = fmul float %188, %380
    %418 = fadd float %194, %417
    %419 = fmul float %418, 2.048000e+03
    %420 = fptosi float %419 to i32
    %421 = getelementptr inbounds [4 x i32], [4 x i32]* %407, i32 %391, i32 1
    %422 = load i32, i32* %421, align 4, !tbaa !93
    %423 = sitofp i32 %422 to float
    %424 = fmul float %210, %387
    %425 = fadd float %424, %423
    %426 = fmul float %216, %389
    %427 = fadd float %426, %425
    %428 = fptosi float %427 to i32
    %429 = add nsw i32 %428, 1024
    %430 = fmul float %210, %380
    %431 = fadd float %216, %430
    %432 = fmul float %431, 2.048000e+03
    %433 = fptosi float %432 to i32
    %434 = getelementptr inbounds [4 x i32], [4 x i32]* %407, i32 %391, i32 2
    %435 = load i32, i32* %434, align 4, !tbaa !93
    %436 = sitofp i32 %435 to float
    %437 = fmul float %232, %387
    %438 = fadd float %437, %436
    %439 = fmul float %238, %389
    %440 = fadd float %439, %438
    %441 = fptosi float %440 to i32
    %442 = add nsw i32 %441, 1024
    %443 = fmul float %232, %380
    %444 = fadd float %238, %443
    %445 = fmul float %444, 2.048000e+03
    %446 = fptosi float %445 to i32
    %447 = getelementptr inbounds [4 x i32], [4 x i32]* %407, i32 %391, i32 3
    %448 = load i32, i32* %447, align 4, !tbaa !93
    %449 = sitofp i32 %448 to float
    %450 = fmul float %254, %387
    %451 = fadd float %450, %449
    %452 = fmul float %260, %389
    %453 = fadd float %452, %451
    %454 = fptosi float %453 to i32
    %455 = add nsw i32 %454, 1024
    %456 = fmul float %254, %380
    %457 = fadd float %260, %456
    %458 = fmul float %457, 2.048000e+03
    %459 = fptosi float %458 to i32
    %460 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %391, i32 3
    %461 = load float, float* %460, align 4, !tbaa !67
    %462 = fdiv float 1.000000e+00, %461
    %463 = fmul float %275, %387
    %464 = fmul float %279, %389
    %465 = fadd float %464, %463
    %466 = fmul float %465, 0x3F40000000000000
    %467 = fadd float %466, %462
    %468 = fmul float %275, %380
    %469 = fadd float %279, %468
    %470 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %391, i32 0
    %471 = load float, float* %470, align 4, !tbaa !67
    %472 = fmul float %471, %462
    %473 = fmul float %294, %387
    %474 = fmul float %298, %389
    %475 = fadd float %474, %473
    %476 = fmul float %475, 0x3F40000000000000
    %477 = fadd float %476, %472
    %478 = fmul float %294, %380
    %479 = fadd float %298, %478
    %480 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %391, i32 1
    %481 = load float, float* %480, align 4, !tbaa !67
    %482 = fmul float %462, %481
    %483 = fmul float %313, %387
    %484 = fmul float %317, %389
    %485 = fadd float %484, %483
    %486 = fmul float %485, 0x3F40000000000000
    %487 = fadd float %486, %482
    %488 = fmul float %313, %380
    %489 = fadd float %317, %488
    %490 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %391, i32 2
    %491 = load float, float* %490, align 4, !tbaa !67
    %492 = fmul float %462, %491
    %493 = fmul float %332, %387
    %494 = fmul float %336, %389
    %495 = fadd float %494, %493
    %496 = fmul float %495, 0x3F40000000000000
    %497 = fadd float %496, %492
    %498 = fmul float %332, %380
    %499 = fadd float %336, %498
    %500 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %391, i32 3
    %501 = load float, float* %500, align 4, !tbaa !67
    %502 = fmul float %348, %387
    %503 = fmul float %352, %389
    %504 = fadd float %503, %502
    %505 = fmul float %504, 0x3F40000000000000
    %506 = fadd float %505, %501
    %507 = fmul float %348, %380
    %508 = fadd float %352, %507
    br label %509
  
  ; <label>:509                                     ; preds = %365, %361, %359
    %lines.124 = phi i32 [ %lines.123, %365 ], [ %lines.123, %361 ], [ %357, %359 ]
    %setupRight.122 = phi i32 [ %setupRight.121, %365 ], [ %setupRight.121, %361 ], [ %.16, %359 ]
    %eRight.120 = phi %struct.EdgeT.2* [ %eRight.119, %365 ], [ %eRight.119, %361 ], [ %eTop, %359 ]
    %fdzOuter.1 = phi i32 [ %406, %365 ], [ %fdzOuter.0112, %361 ], [ %fdzOuter.0112, %359 ]
    %fr.1 = phi i32 [ %416, %365 ], [ %fr.0113, %361 ], [ %fr.0113, %359 ]
    %fdrOuter.1 = phi i32 [ %420, %365 ], [ %fdrOuter.0114, %361 ], [ %fdrOuter.0114, %359 ]
    %fz.1 = phi i32 [ %402, %365 ], [ %fz.0115, %361 ], [ %fz.0115, %359 ]
    %fg.1 = phi i32 [ %429, %365 ], [ %fg.0116, %361 ], [ %fg.0116, %359 ]
    %fdgOuter.1 = phi i32 [ %433, %365 ], [ %fdgOuter.0117, %361 ], [ %fdgOuter.0117, %359 ]
    %fb.1 = phi i32 [ %442, %365 ], [ %fb.0119, %361 ], [ %fb.0119, %359 ]
    %fdbOuter.1 = phi i32 [ %446, %365 ], [ %fdbOuter.0120, %361 ], [ %fdbOuter.0120, %359 ]
    %fa.1 = phi i32 [ %455, %365 ], [ %fa.0122, %361 ], [ %fa.0122, %359 ]
    %fdaOuter.1 = phi i32 [ %459, %365 ], [ %fdaOuter.0123, %361 ], [ %fdaOuter.0123, %359 ]
    %iy.1 = phi i32 [ %383, %365 ], [ %iy.0124, %361 ], [ %iy.0124, %359 ]
    %sLeft.1 = phi float [ %477, %365 ], [ %sLeft.0125, %361 ], [ %sLeft.0125, %359 ]
    %dsOuter.1 = phi float [ %479, %365 ], [ %dsOuter.0126, %361 ], [ %dsOuter.0126, %359 ]
    %fdError.1 = phi i32 [ %378, %365 ], [ %fdError.0127, %361 ], [ %fdError.0127, %359 ]
    %tLeft.1 = phi float [ %487, %365 ], [ %tLeft.0128, %361 ], [ %tLeft.0128, %359 ]
    %dtOuter.1 = phi float [ %489, %365 ], [ %dtOuter.0129, %361 ], [ %dtOuter.0129, %359 ]
    %fError.1 = phi i32 [ %371, %365 ], [ %fError.0130, %361 ], [ %fError.0130, %359 ]
    %wLeft.1 = phi float [ %467, %365 ], [ %wLeft.0131, %361 ], [ %wLeft.0131, %359 ]
    %dwOuter.1 = phi float [ %469, %365 ], [ %dwOuter.0132, %361 ], [ %dwOuter.0132, %359 ]
    %uLeft.1 = phi float [ %497, %365 ], [ %uLeft.0134, %361 ], [ %uLeft.0134, %359 ]
    %duOuter.1 = phi float [ %499, %365 ], [ %duOuter.0135, %361 ], [ %duOuter.0135, %359 ]
    %fdxLeftEdge.1 = phi i32 [ %374, %365 ], [ %fdxLeftEdge.0136, %361 ], [ %fdxLeftEdge.0136, %359 ]
    %vLeft.1 = phi float [ %506, %365 ], [ %vLeft.0137, %361 ], [ %vLeft.0137, %359 ]
    %dvOuter.1 = phi float [ %508, %365 ], [ %dvOuter.0138, %361 ], [ %dvOuter.0138, %359 ]
    %fxLeftEdge.1 = phi i32 [ %372, %365 ], [ %fxLeftEdge.0140, %361 ], [ %fxLeftEdge.0140, %359 ]
    %510 = icmp eq i32 %setupRight.122, 0
    br i1 %510, label %521, label %511
  
  ; <label>:511                                     ; preds = %509
    %512 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eRight.120, i32 0, i32 8
    %513 = load i32, i32* %512, align 4, !tbaa !74
    %514 = icmp sgt i32 %513, 0
    br i1 %514, label %515, label %521
  
  ; <label>:515                                     ; preds = %511
    %516 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eRight.120, i32 0, i32 5
    %517 = load i32, i32* %516, align 4, !tbaa !78
    %518 = add nsw i32 %517, -1
    %519 = getelementptr inbounds %struct.EdgeT.2, %struct.EdgeT.2* %eRight.120, i32 0, i32 4
    %520 = load i32, i32* %519, align 4, !tbaa !75
    br label %521
  
  ; <label>:521                                     ; preds = %515, %511, %509
    %fdxRightEdge.1 = phi i32 [ %520, %515 ], [ %fdxRightEdge.0133, %511 ], [ %fdxRightEdge.0133, %509 ]
    %fxRightEdge.1 = phi i32 [ %518, %515 ], [ %fxRightEdge.0139, %511 ], [ %fxRightEdge.0139, %509 ]
    %522 = icmp eq i32 %lines.124, 0
    br i1 %522, label %.loopexit61, label %523
  
  ; <label>:523                                     ; preds = %521
    %524 = fadd float %275, %dwOuter.1
    %525 = fadd float %294, %dsOuter.1
    %526 = fadd float %313, %dtOuter.1
    %527 = fadd float %332, %duOuter.1
    %528 = fadd float %348, %dvOuter.1
    %529 = icmp sgt i32 %lines.124, 0
    br i1 %529, label %.lr.ph97, label %.loopexit61
  
  .lr.ph97:                                         ; preds = %523, %626
    %fxLeftEdge.296 = phi i32 [ %637, %626 ], [ %fxLeftEdge.1, %523 ]
    %lines.295 = phi i32 [ %636, %626 ], [ %lines.124, %523 ]
    %fxRightEdge.294 = phi i32 [ %638, %626 ], [ %fxRightEdge.1, %523 ]
    %vLeft.293 = phi float [ %vLeft.3, %626 ], [ %vLeft.1, %523 ]
    %uLeft.292 = phi float [ %uLeft.3, %626 ], [ %uLeft.1, %523 ]
    %wLeft.291 = phi float [ %wLeft.3, %626 ], [ %wLeft.1, %523 ]
    %fError.290 = phi i32 [ %., %626 ], [ %fError.1, %523 ]
    %tLeft.289 = phi float [ %tLeft.3, %626 ], [ %tLeft.1, %523 ]
    %sLeft.288 = phi float [ %sLeft.3, %626 ], [ %sLeft.1, %523 ]
    %iy.287 = phi i32 [ %635, %626 ], [ %iy.1, %523 ]
    %fa.286 = phi i32 [ %fa.3, %626 ], [ %fa.1, %523 ]
    %fb.284 = phi i32 [ %fb.3, %626 ], [ %fb.1, %523 ]
    %fg.283 = phi i32 [ %fg.3, %626 ], [ %fg.1, %523 ]
    %fz.282 = phi i32 [ %fz.3, %626 ], [ %fz.1, %523 ]
    %fr.281 = phi i32 [ %fr.3, %626 ], [ %fr.1, %523 ]
    %530 = bitcast [1280 x float]* %u to i8*
    %531 = bitcast [1280 x float]* %t to i8*
    %532 = bitcast [1280 x float]* %s to i8*
    %533 = bitcast [1280 x i8]* %alpha to i8*
    %534 = bitcast [1280 x i8]* %blue to i8*
    %535 = bitcast [1280 x i8]* %green to i8*
    %536 = bitcast [1280 x i8]* %red to i8*
    %537 = bitcast [1280 x i16]* %zspan to i8*
    %538 = ashr i32 %fxLeftEdge.296, 11
    %539 = ashr i32 %fxRightEdge.294, 11
    %540 = sub nsw i32 %539, %538
    call void @llvm.lifetime.start(i64 2560, i8* %537) #4
    call void @llvm.lifetime.start(i64 1280, i8* %536) #4
    call void @llvm.lifetime.start(i64 1280, i8* %535) #4
    call void @llvm.lifetime.start(i64 1280, i8* %534) #4
    call void @llvm.lifetime.start(i64 1280, i8* %533) #4
    call void @llvm.lifetime.start(i64 5120, i8* %532) #4
    call void @llvm.lifetime.start(i64 5120, i8* %531) #4
    call void @llvm.lifetime.start(i64 5120, i8* %530) #4
    %541 = icmp sgt i32 %540, 0
    br i1 %541, label %542, label %626
  
  ; <label>:542                                     ; preds = %.lr.ph97
    %543 = icmp eq i32 %134, 7424
    br i1 %543, label %.lr.ph80.preheader, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %542
    %544 = icmp slt i32 %fa.286, 0
    %ffa.0 = select i1 %544, i32 0, i32 %fa.286
    %545 = icmp slt i32 %fb.284, 0
    %.fb.2 = select i1 %545, i32 0, i32 %fb.284
    %546 = icmp slt i32 %fg.283, 0
    %ffg.0 = select i1 %546, i32 0, i32 %fg.283
    %547 = icmp slt i32 %fr.281, 0
    %.fr.2 = select i1 %547, i32 0, i32 %fr.281
    %548 = sub i32 %539, %538
    br label %.lr.ph
  
  .lr.ph80.preheader:                               ; preds = %542
    %549 = bitcast [1280 x i8]* %alpha to i8*
    %550 = bitcast [1280 x i8]* %blue to i8*
    %551 = bitcast [1280 x i8]* %green to i8*
    %552 = bitcast [1280 x i8]* %red to i8*
    call void @llvm.memset.p0i8.i32(i8* %552, i8 %r.0, i32 %540, i32 1, i1 false)
    call void @llvm.memset.p0i8.i32(i8* %551, i8 %g.0, i32 %540, i32 1, i1 false)
    call void @llvm.memset.p0i8.i32(i8* %550, i8 %b.0, i32 %540, i32 1, i1 false)
    call void @llvm.memset.p0i8.i32(i8* %549, i8 %a.0, i32 %540, i32 1, i1 false)
    %553 = sub i32 %539, %538
    br label %.lr.ph80
  
  .lr.ph80:                                         ; preds = %.lr.ph80, %.lr.ph80.preheader
    %lsr.iv36 = phi [1280 x i16]* [ %577, %.lr.ph80 ], [ %zspan, %.lr.ph80.preheader ]
    %lsr.iv33 = phi [1280 x float]* [ %576, %.lr.ph80 ], [ %s, %.lr.ph80.preheader ]
    %lsr.iv30 = phi [1280 x float]* [ %575, %.lr.ph80 ], [ %t, %.lr.ph80.preheader ]
    %lsr.iv27 = phi [1280 x float]* [ %574, %.lr.ph80 ], [ %u, %.lr.ph80.preheader ]
    %lsr.iv25 = phi i32 [ %lsr.iv.next26, %.lr.ph80 ], [ %553, %.lr.ph80.preheader ]
    %vv.078 = phi float [ %572, %.lr.ph80 ], [ %vLeft.293, %.lr.ph80.preheader ]
    %uu.077 = phi float [ %571, %.lr.ph80 ], [ %uLeft.292, %.lr.ph80.preheader ]
    %ww.076 = phi float [ %573, %.lr.ph80 ], [ %wLeft.291, %.lr.ph80.preheader ]
    %tt.075 = phi float [ %570, %.lr.ph80 ], [ %tLeft.289, %.lr.ph80.preheader ]
    %ss.074 = phi float [ %569, %.lr.ph80 ], [ %sLeft.288, %.lr.ph80.preheader ]
    %ffz.073 = phi i32 [ %568, %.lr.ph80 ], [ %fz.282, %.lr.ph80.preheader ]
    %lsr.iv3638 = bitcast [1280 x i16]* %lsr.iv36 to i16*
    %lsr.iv3335 = bitcast [1280 x float]* %lsr.iv33 to float*
    %lsr.iv3032 = bitcast [1280 x float]* %lsr.iv30 to float*
    %lsr.iv2729 = bitcast [1280 x float]* %lsr.iv27 to float*
    %554 = fmul float %ww.076, %vv.078
    %555 = fpext float %554 to double
    %556 = fdiv double 1.000000e+00, %555
    %557 = lshr i32 %ffz.073, 11
    %558 = trunc i32 %557 to i16
    store i16 %558, i16* %lsr.iv3638, align 2, !tbaa !88
    %559 = fpext float %ss.074 to double
    %560 = fmul double %559, %556
    %561 = fptrunc double %560 to float
    store float %561, float* %lsr.iv3335, align 4, !tbaa !67
    %562 = fpext float %tt.075 to double
    %563 = fmul double %562, %556
    %564 = fptrunc double %563 to float
    store float %564, float* %lsr.iv3032, align 4, !tbaa !67
    %565 = fpext float %uu.077 to double
    %566 = fmul double %565, %556
    %567 = fptrunc double %566 to float
    store float %567, float* %lsr.iv2729, align 4, !tbaa !67
    %568 = add nsw i32 %ffz.073, %170
    %569 = fadd float %294, %ss.074
    %570 = fadd float %313, %tt.075
    %571 = fadd float %332, %uu.077
    %572 = fadd float %348, %vv.078
    %573 = fadd float %275, %ww.076
    %lsr.iv.next26 = add i32 %lsr.iv25, -1
    %scevgep28 = getelementptr [1280 x float], [1280 x float]* %lsr.iv27, i32 0, i32 1
    %574 = bitcast float* %scevgep28 to [1280 x float]*
    %scevgep31 = getelementptr [1280 x float], [1280 x float]* %lsr.iv30, i32 0, i32 1
    %575 = bitcast float* %scevgep31 to [1280 x float]*
    %scevgep34 = getelementptr [1280 x float], [1280 x float]* %lsr.iv33, i32 0, i32 1
    %576 = bitcast float* %scevgep34 to [1280 x float]*
    %scevgep37 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv36, i32 0, i32 1
    %577 = bitcast i16* %scevgep37 to [1280 x i16]*
    %exitcond145 = icmp eq i32 %lsr.iv.next26, 0
    br i1 %exitcond145, label %.loopexit, label %.lr.ph80
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv22 = phi [1280 x i16]* [ %617, %.lr.ph ], [ %zspan, %.lr.ph.preheader ]
    %lsr.iv19 = phi [1280 x i8]* [ %616, %.lr.ph ], [ %red, %.lr.ph.preheader ]
    %lsr.iv16 = phi [1280 x i8]* [ %615, %.lr.ph ], [ %green, %.lr.ph.preheader ]
    %lsr.iv13 = phi [1280 x i8]* [ %614, %.lr.ph ], [ %blue, %.lr.ph.preheader ]
    %lsr.iv9 = phi [1280 x i8]* [ %613, %.lr.ph ], [ %alpha, %.lr.ph.preheader ]
    %lsr.iv6 = phi [1280 x float]* [ %612, %.lr.ph ], [ %s, %.lr.ph.preheader ]
    %lsr.iv3 = phi [1280 x float]* [ %611, %.lr.ph ], [ %t, %.lr.ph.preheader ]
    %lsr.iv1 = phi [1280 x float]* [ %610, %.lr.ph ], [ %u, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %548, %.lr.ph.preheader ]
    %vv.171 = phi float [ %609, %.lr.ph ], [ %vLeft.293, %.lr.ph.preheader ]
    %uu.170 = phi float [ %607, %.lr.ph ], [ %uLeft.292, %.lr.ph.preheader ]
    %ww.169 = phi float [ %608, %.lr.ph ], [ %wLeft.291, %.lr.ph.preheader ]
    %tt.168 = phi float [ %606, %.lr.ph ], [ %tLeft.289, %.lr.ph.preheader ]
    %ss.167 = phi float [ %605, %.lr.ph ], [ %sLeft.288, %.lr.ph.preheader ]
    %ffa.166 = phi i32 [ %604, %.lr.ph ], [ %ffa.0, %.lr.ph.preheader ]
    %ffb.165 = phi i32 [ %603, %.lr.ph ], [ %.fb.2, %.lr.ph.preheader ]
    %ffg.164 = phi i32 [ %602, %.lr.ph ], [ %ffg.0, %.lr.ph.preheader ]
    %ffr.163 = phi i32 [ %601, %.lr.ph ], [ %.fr.2, %.lr.ph.preheader ]
    %ffz.162 = phi i32 [ %600, %.lr.ph ], [ %fz.282, %.lr.ph.preheader ]
    %lsr.iv2224 = bitcast [1280 x i16]* %lsr.iv22 to i16*
    %lsr.iv1921 = bitcast [1280 x i8]* %lsr.iv19 to i8*
    %lsr.iv1618 = bitcast [1280 x i8]* %lsr.iv16 to i8*
    %lsr.iv1315 = bitcast [1280 x i8]* %lsr.iv13 to i8*
    %lsr.iv911 = bitcast [1280 x i8]* %lsr.iv9 to i8*
    %lsr.iv68 = bitcast [1280 x float]* %lsr.iv6 to float*
    %lsr.iv35 = bitcast [1280 x float]* %lsr.iv3 to float*
    %lsr.iv12 = bitcast [1280 x float]* %lsr.iv1 to float*
    %578 = fmul float %ww.169, %vv.171
    %579 = fpext float %578 to double
    %580 = fdiv double 1.000000e+00, %579
    %581 = lshr i32 %ffz.162, 11
    %582 = trunc i32 %581 to i16
    store i16 %582, i16* %lsr.iv2224, align 2, !tbaa !88
    %583 = lshr i32 %ffr.163, 11
    %584 = trunc i32 %583 to i8
    store i8 %584, i8* %lsr.iv1921, align 1, !tbaa !89
    %585 = lshr i32 %ffg.164, 11
    %586 = trunc i32 %585 to i8
    store i8 %586, i8* %lsr.iv1618, align 1, !tbaa !89
    %587 = lshr i32 %ffb.165, 11
    %588 = trunc i32 %587 to i8
    store i8 %588, i8* %lsr.iv1315, align 1, !tbaa !89
    %589 = lshr i32 %ffa.166, 11
    %590 = trunc i32 %589 to i8
    store i8 %590, i8* %lsr.iv911, align 1, !tbaa !89
    %591 = fpext float %ss.167 to double
    %592 = fmul double %591, %580
    %593 = fptrunc double %592 to float
    store float %593, float* %lsr.iv68, align 4, !tbaa !67
    %594 = fpext float %tt.168 to double
    %595 = fmul double %594, %580
    %596 = fptrunc double %595 to float
    store float %596, float* %lsr.iv35, align 4, !tbaa !67
    %597 = fpext float %uu.170 to double
    %598 = fmul double %597, %580
    %599 = fptrunc double %598 to float
    store float %599, float* %lsr.iv12, align 4, !tbaa !67
    %600 = add nsw i32 %ffz.162, %170
    %601 = add nsw i32 %ffr.163, %190
    %602 = add nsw i32 %ffg.164, %212
    %603 = add nsw i32 %ffb.165, %234
    %604 = add nsw i32 %ffa.166, %256
    %605 = fadd float %294, %ss.167
    %606 = fadd float %313, %tt.168
    %607 = fadd float %332, %uu.170
    %608 = fadd float %275, %ww.169
    %609 = fadd float %348, %vv.171
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x float], [1280 x float]* %lsr.iv1, i32 0, i32 1
    %610 = bitcast float* %scevgep to [1280 x float]*
    %scevgep4 = getelementptr [1280 x float], [1280 x float]* %lsr.iv3, i32 0, i32 1
    %611 = bitcast float* %scevgep4 to [1280 x float]*
    %scevgep7 = getelementptr [1280 x float], [1280 x float]* %lsr.iv6, i32 0, i32 1
    %612 = bitcast float* %scevgep7 to [1280 x float]*
    %scevgep10 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv9, i32 0, i32 1
    %613 = bitcast i8* %scevgep10 to [1280 x i8]*
    %scevgep14 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv13, i32 0, i32 1
    %614 = bitcast i8* %scevgep14 to [1280 x i8]*
    %scevgep17 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv16, i32 0, i32 1
    %615 = bitcast i8* %scevgep17 to [1280 x i8]*
    %scevgep20 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv19, i32 0, i32 1
    %616 = bitcast i8* %scevgep20 to [1280 x i8]*
    %scevgep23 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv22, i32 0, i32 1
    %617 = bitcast i16* %scevgep23 to [1280 x i16]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph, %.lr.ph80
    %618 = bitcast [1280 x float]* %u to float*
    %619 = bitcast [1280 x float]* %t to float*
    %620 = bitcast [1280 x float]* %s to float*
    %621 = bitcast [1280 x i16]* %zspan to i16*
    %622 = bitcast [1280 x i8]* %alpha to i8*
    %623 = bitcast [1280 x i8]* %blue to i8*
    %624 = bitcast [1280 x i8]* %green to i8*
    %625 = bitcast [1280 x i8]* %red to i8*
    call void @gl_write_texture_span(%struct.gl_context* %ctx, i32 signext %540, i32 signext %538, i32 signext %iy.287, i16* nonnull %621, float* nonnull %620, float* nonnull %619, float* nonnull %618, float* null, i8* %625, i8* %624, i8* %623, i8* %622, i32 signext 9) #4
    br label %626
  
  ; <label>:626                                     ; preds = %.loopexit, %.lr.ph97
    %627 = bitcast [1280 x float]* %u to i8*
    %628 = bitcast [1280 x float]* %t to i8*
    %629 = bitcast [1280 x float]* %s to i8*
    %630 = bitcast [1280 x i8]* %alpha to i8*
    %631 = bitcast [1280 x i8]* %blue to i8*
    %632 = bitcast [1280 x i8]* %green to i8*
    %633 = bitcast [1280 x i8]* %red to i8*
    %634 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 5120, i8* %627) #4
    call void @llvm.lifetime.end(i64 5120, i8* %628) #4
    call void @llvm.lifetime.end(i64 5120, i8* %629) #4
    call void @llvm.lifetime.end(i64 1280, i8* %630) #4
    call void @llvm.lifetime.end(i64 1280, i8* %631) #4
    call void @llvm.lifetime.end(i64 1280, i8* %632) #4
    call void @llvm.lifetime.end(i64 1280, i8* %633) #4
    call void @llvm.lifetime.end(i64 2560, i8* %634) #4
    %635 = add nsw i32 %iy.287, 1
    %636 = add nsw i32 %lines.295, -1
    %637 = add nsw i32 %fxLeftEdge.296, %fdxLeftEdge.1
    %638 = add nsw i32 %fxRightEdge.294, %fdxRightEdge.1
    %639 = add nsw i32 %fError.290, %fdError.1
    %640 = icmp sgt i32 %639, -1
    %641 = add nsw i32 %639, -2048
    %642 = select i1 %640, i32 0, i32 %190
    %fdrOuter.1. = add nsw i32 %fdrOuter.1, %642
    %643 = select i1 %640, i32 0, i32 %170
    %fdzOuter.1. = add nsw i32 %fdzOuter.1, %643
    %644 = select i1 %640, i32 0, i32 %212
    %fdgOuter.1. = add nsw i32 %fdgOuter.1, %644
    %645 = select i1 %640, i32 0, i32 %234
    %fdbOuter.1. = add nsw i32 %fdbOuter.1, %645
    %646 = select i1 %640, i32 0, i32 %256
    %fdaOuter.1. = add nsw i32 %fdaOuter.1, %646
    %dsOuter.1. = select i1 %640, float %dsOuter.1, float %525
    %dtOuter.1. = select i1 %640, float %dtOuter.1, float %526
    %. = select i1 %640, i32 %641, i32 %639
    %dwOuter.1. = select i1 %640, float %dwOuter.1, float %524
    %duOuter.1. = select i1 %640, float %duOuter.1, float %527
    %dvOuter.1. = select i1 %640, float %dvOuter.1, float %528
    %vLeft.3 = fadd float %vLeft.293, %dvOuter.1.
    %uLeft.3 = fadd float %uLeft.292, %duOuter.1.
    %wLeft.3 = fadd float %wLeft.291, %dwOuter.1.
    %tLeft.3 = fadd float %tLeft.289, %dtOuter.1.
    %sLeft.3 = fadd float %sLeft.288, %dsOuter.1.
    %fa.3 = add nsw i32 %fdaOuter.1., %fa.286
    %fb.3 = add nsw i32 %fdbOuter.1., %fb.284
    %fg.3 = add nsw i32 %fdgOuter.1., %fg.283
    %fz.3 = add nsw i32 %fdzOuter.1., %fz.282
    %fr.3 = add nsw i32 %fdrOuter.1., %fr.281
    %647 = icmp sgt i32 %lines.295, 1
    br i1 %647, label %.lr.ph97, label %.loopexit61
  
  .loopexit61:                                      ; preds = %626, %523, %521
    %fr.4.ph = phi i32 [ %fr.1, %521 ], [ %fr.1, %523 ], [ %fr.3, %626 ]
    %fz.4.ph = phi i32 [ %fz.1, %521 ], [ %fz.1, %523 ], [ %fz.3, %626 ]
    %fg.4.ph = phi i32 [ %fg.1, %521 ], [ %fg.1, %523 ], [ %fg.3, %626 ]
    %fb.4.ph = phi i32 [ %fb.1, %521 ], [ %fb.1, %523 ], [ %fb.3, %626 ]
    %fa.4.ph = phi i32 [ %fa.1, %521 ], [ %fa.1, %523 ], [ %fa.3, %626 ]
    %iy.3.ph = phi i32 [ %iy.1, %521 ], [ %iy.1, %523 ], [ %635, %626 ]
    %sLeft.4.ph = phi float [ %sLeft.1, %521 ], [ %sLeft.1, %523 ], [ %sLeft.3, %626 ]
    %tLeft.4.ph = phi float [ %tLeft.1, %521 ], [ %tLeft.1, %523 ], [ %tLeft.3, %626 ]
    %fError.4.ph = phi i32 [ %fError.1, %521 ], [ %fError.1, %523 ], [ %., %626 ]
    %wLeft.4.ph = phi float [ %wLeft.1, %521 ], [ %wLeft.1, %523 ], [ %wLeft.3, %626 ]
    %uLeft.4.ph = phi float [ %uLeft.1, %521 ], [ %uLeft.1, %523 ], [ %uLeft.3, %626 ]
    %vLeft.4.ph = phi float [ %vLeft.1, %521 ], [ %vLeft.1, %523 ], [ %vLeft.3, %626 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %521 ], [ %fxRightEdge.1, %523 ], [ %638, %626 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %521 ], [ %fxLeftEdge.1, %523 ], [ %637, %626 ]
    %648 = add nuw nsw i32 %subTriangle.0141, 1
    %649 = icmp slt i32 %648, 2
    br i1 %649, label %353, label %.critedge
  
  .critedge:                                        ; preds = %356, %.loopexit61, %57, %21
    %650 = bitcast %struct.EdgeT.2* %eBot to i8*
    %651 = bitcast %struct.EdgeT.2* %eTop to i8*
    %652 = bitcast %struct.EdgeT.2* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %650) #4
    call void @llvm.lifetime.end(i64 40, i8* %651) #4
    call void @llvm.lifetime.end(i64 40, i8* %652) #4
    ret void
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #1
  
  ; Function Attrs: nounwind
  define internal void @smooth_rgba_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.3, align 4
    %eTop = alloca %struct.EdgeT.3, align 4
    %eBot = alloca %struct.EdgeT.3, align 4
    %zspan = alloca [1280 x i16], align 2
    %red = alloca [1280 x i8], align 1
    %green = alloca [1280 x i8], align 1
    %blue = alloca [1280 x i8], align 1
    %alpha = alloca [1280 x i8], align 1
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.3* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.3* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.3* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.3* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.3* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.3* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %134 = load float, float* %133, align 4, !tbaa !67
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %136 = load float, float* %135, align 4, !tbaa !67
    %137 = fsub float %134, %136
    %138 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %139 = load float, float* %138, align 4, !tbaa !67
    %140 = fsub float %139, %136
    %141 = fmul float %137, %50
    %142 = fmul float %140, %38
    %143 = fsub float %141, %142
    %144 = fmul float %58, %143
    %145 = fcmp ogt float %144, 6.553500e+04
    %146 = fcmp olt float %144, -6.553500e+04
    %or.cond13 = or i1 %145, %146
    br i1 %or.cond13, label %152, label %147
  
  ; <label>:147                                     ; preds = %132
    %148 = fmul float %140, %32
    %149 = fmul float %137, %48
    %150 = fsub float %148, %149
    %151 = fmul float %58, %150
    br label %152
  
  ; <label>:152                                     ; preds = %147, %132
    %dzdy.0 = phi float [ %151, %147 ], [ 0.000000e+00, %132 ]
    %dzdx.0 = phi float [ %144, %147 ], [ 0.000000e+00, %132 ]
    %153 = fcmp olt float %58, 0.000000e+00
    %154 = fmul float %dzdx.0, 2.048000e+03
    %155 = fptosi float %154 to i32
    %156 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %157 = load [4 x i32]*, [4 x i32]** %156, align 4, !tbaa !91
    %158 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMax.0, i32 0
    %159 = load i32, i32* %158, align 4, !tbaa !93
    %160 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMin.0, i32 0
    %161 = load i32, i32* %160, align 4, !tbaa !93
    %162 = sub nsw i32 %159, %161
    %163 = sitofp i32 %162 to float
    %164 = fmul float %163, 0x3F40000000000000
    %165 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMid.0, i32 0
    %166 = load i32, i32* %165, align 4, !tbaa !93
    %167 = sub nsw i32 %166, %161
    %168 = sitofp i32 %167 to float
    %169 = fmul float %168, 0x3F40000000000000
    %170 = fmul float %50, %164
    %171 = fmul float %38, %169
    %172 = fsub float %170, %171
    %173 = fmul float %58, %172
    %174 = fmul float %173, 2.048000e+03
    %175 = fptosi float %174 to i32
    %176 = fmul float %32, %169
    %177 = fmul float %164, %48
    %178 = fsub float %176, %177
    %179 = fmul float %58, %178
    %180 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMax.0, i32 1
    %181 = load i32, i32* %180, align 4, !tbaa !93
    %182 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMin.0, i32 1
    %183 = load i32, i32* %182, align 4, !tbaa !93
    %184 = sub nsw i32 %181, %183
    %185 = sitofp i32 %184 to float
    %186 = fmul float %185, 0x3F40000000000000
    %187 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMid.0, i32 1
    %188 = load i32, i32* %187, align 4, !tbaa !93
    %189 = sub nsw i32 %188, %183
    %190 = sitofp i32 %189 to float
    %191 = fmul float %190, 0x3F40000000000000
    %192 = fmul float %50, %186
    %193 = fmul float %38, %191
    %194 = fsub float %192, %193
    %195 = fmul float %58, %194
    %196 = fmul float %195, 2.048000e+03
    %197 = fptosi float %196 to i32
    %198 = fmul float %32, %191
    %199 = fmul float %48, %186
    %200 = fsub float %198, %199
    %201 = fmul float %58, %200
    %202 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMax.0, i32 2
    %203 = load i32, i32* %202, align 4, !tbaa !93
    %204 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMin.0, i32 2
    %205 = load i32, i32* %204, align 4, !tbaa !93
    %206 = sub nsw i32 %203, %205
    %207 = sitofp i32 %206 to float
    %208 = fmul float %207, 0x3F40000000000000
    %209 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMid.0, i32 2
    %210 = load i32, i32* %209, align 4, !tbaa !93
    %211 = sub nsw i32 %210, %205
    %212 = sitofp i32 %211 to float
    %213 = fmul float %212, 0x3F40000000000000
    %214 = fmul float %50, %208
    %215 = fmul float %38, %213
    %216 = fsub float %214, %215
    %217 = fmul float %58, %216
    %218 = fmul float %217, 2.048000e+03
    %219 = fptosi float %218 to i32
    %220 = fmul float %32, %213
    %221 = fmul float %48, %208
    %222 = fsub float %220, %221
    %223 = fmul float %58, %222
    %224 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMax.0, i32 3
    %225 = load i32, i32* %224, align 4, !tbaa !93
    %226 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMin.0, i32 3
    %227 = load i32, i32* %226, align 4, !tbaa !93
    %228 = sub nsw i32 %225, %227
    %229 = sitofp i32 %228 to float
    %230 = fmul float %229, 0x3F40000000000000
    %231 = getelementptr inbounds [4 x i32], [4 x i32]* %157, i32 %vMid.0, i32 3
    %232 = load i32, i32* %231, align 4, !tbaa !93
    %233 = sub nsw i32 %232, %227
    %234 = sitofp i32 %233 to float
    %235 = fmul float %234, 0x3F40000000000000
    %236 = fmul float %50, %230
    %237 = fmul float %38, %235
    %238 = fsub float %236, %237
    %239 = fmul float %58, %238
    %240 = fmul float %239, 2.048000e+03
    %241 = fptosi float %240 to i32
    %242 = fmul float %32, %235
    %243 = fmul float %48, %230
    %244 = fsub float %242, %243
    %245 = fmul float %58, %244
    %eMaj.eBot = select i1 %153, %struct.EdgeT.3* %eMaj, %struct.EdgeT.3* %eBot
    %eBot.eMaj = select i1 %153, %struct.EdgeT.3* %eBot, %struct.EdgeT.3* %eMaj
    %.14 = zext i1 %153 to i32
    br label %246
  
  ; <label>:246                                     ; preds = %.loopexit, %152
    %fdaOuter.091 = phi i32 [ undef, %152 ], [ %fdaOuter.1, %.loopexit ]
    %fa.090 = phi i32 [ undef, %152 ], [ %fa.4.ph, %.loopexit ]
    %subTriangle.089 = phi i32 [ 0, %152 ], [ %424, %.loopexit ]
    %fdbOuter.088 = phi i32 [ undef, %152 ], [ %fdbOuter.1, %.loopexit ]
    %fb.087 = phi i32 [ undef, %152 ], [ %fb.4.ph, %.loopexit ]
    %fxLeftEdge.086 = phi i32 [ undef, %152 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fdgOuter.085 = phi i32 [ undef, %152 ], [ %fdgOuter.1, %.loopexit ]
    %fg.084 = phi i32 [ undef, %152 ], [ %fg.4.ph, %.loopexit ]
    %fxRightEdge.083 = phi i32 [ undef, %152 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdrOuter.082 = phi i32 [ undef, %152 ], [ %fdrOuter.1, %.loopexit ]
    %fr.081 = phi i32 [ undef, %152 ], [ %fr.4.ph, %.loopexit ]
    %fdxLeftEdge.080 = phi i32 [ undef, %152 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdzOuter.079 = phi i32 [ undef, %152 ], [ %fdzOuter.1, %.loopexit ]
    %fz.078 = phi i32 [ undef, %152 ], [ %fz.4.ph, %.loopexit ]
    %fdxRightEdge.077 = phi i32 [ undef, %152 ], [ %fdxRightEdge.1, %.loopexit ]
    %iy.074 = phi i32 [ undef, %152 ], [ %iy.3.ph, %.loopexit ]
    %fError.073 = phi i32 [ undef, %152 ], [ %fError.4.ph, %.loopexit ]
    %fdError.072 = phi i32 [ undef, %152 ], [ %fdError.1, %.loopexit ]
    %247 = icmp eq i32 %subTriangle.089, 0
    br i1 %247, label %.thread, label %249
  
  .thread:                                          ; preds = %246
    %sunkaddr = ptrtoint %struct.EdgeT.3* %eBot to i32
    %sunkaddr16 = add i32 %sunkaddr, 32
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %248 = load i32, i32* %sunkaddr17, align 4, !tbaa !74
    br label %254
  
  ; <label>:249                                     ; preds = %246
    %sunkaddr18 = ptrtoint %struct.EdgeT.3* %eTop to i32
    %sunkaddr19 = add i32 %sunkaddr18, 32
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to i32*
    %250 = load i32, i32* %sunkaddr20, align 4, !tbaa !74
    %251 = icmp eq i32 %250, 0
    br i1 %251, label %.critedge, label %252
  
  ; <label>:252                                     ; preds = %249
    %253 = fcmp olt float %58, 0.000000e+00
    br i1 %253, label %353, label %254
  
  ; <label>:254                                     ; preds = %252, %.thread
    %lines.121 = phi i32 [ %248, %.thread ], [ %250, %252 ]
    %setupRight.119 = phi i32 [ 1, %.thread ], [ %.14, %252 ]
    %eRight.117 = phi %struct.EdgeT.3* [ %eBot.eMaj, %.thread ], [ %eMaj, %252 ]
    %eLeft.116 = phi %struct.EdgeT.3* [ %eMaj.eBot, %.thread ], [ %eTop, %252 ]
    %255 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 8
    %256 = load i32, i32* %255, align 4, !tbaa !74
    %257 = icmp sgt i32 %256, 0
    br i1 %257, label %258, label %353
  
  ; <label>:258                                     ; preds = %254
    %259 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 5
    %260 = load i32, i32* %259, align 4, !tbaa !78
    %261 = add nsw i32 %260, 2047
    %262 = and i32 %261, -2048
    %263 = sub i32 -2048, %260
    %264 = add i32 %263, %262
    %265 = add nsw i32 %260, -1
    %266 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 4
    %267 = load i32, i32* %266, align 4, !tbaa !75
    %268 = add nsw i32 %267, -1
    %269 = and i32 %268, -2048
    %270 = sub i32 2048, %267
    %271 = add i32 %270, %269
    %272 = ashr i32 %268, 11
    %273 = sitofp i32 %272 to float
    %274 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 6
    %275 = load i32, i32* %274, align 4, !tbaa !73
    %276 = ashr i32 %275, 11
    %277 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 9
    %278 = load i32, i32* %277, align 4, !tbaa !77
    %279 = sub nsw i32 %262, %278
    %280 = sitofp i32 %279 to float
    %281 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eLeft.116, i32 0, i32 7
    %282 = load float, float* %281, align 4, !tbaa !76
    %283 = bitcast %struct.EdgeT.3* %eLeft.116 to i32*
    %284 = load i32, i32* %283, align 4, !tbaa !68
    %285 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %284, i32 2
    %286 = load float, float* %285, align 4, !tbaa !67
    %sunkaddr21 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr22 = add i32 %sunkaddr21, 55768
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    %287 = load float, float* %sunkaddr23, align 4, !tbaa !83
    %288 = fadd float %286, %287
    %289 = fmul float %288, 2.048000e+03
    %290 = fmul float %dzdx.0, %280
    %291 = fadd float %290, %289
    %292 = fmul float %dzdy.0, %282
    %293 = fadd float %292, %291
    %294 = fptosi float %293 to i32
    %295 = add nsw i32 %294, 1024
    %296 = fmul float %dzdx.0, %273
    %297 = fadd float %dzdy.0, %296
    %298 = fmul float %297, 2.048000e+03
    %299 = fptosi float %298 to i32
    %sunkaddr24 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr25 = add i32 %sunkaddr24, 52416
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to [4 x i32]**
    %300 = load [4 x i32]*, [4 x i32]** %sunkaddr26, align 4, !tbaa !91
    %301 = getelementptr inbounds [4 x i32], [4 x i32]* %300, i32 %284, i32 0
    %302 = load i32, i32* %301, align 4, !tbaa !93
    %303 = sitofp i32 %302 to float
    %304 = fmul float %173, %280
    %305 = fadd float %304, %303
    %306 = fmul float %179, %282
    %307 = fadd float %306, %305
    %308 = fptosi float %307 to i32
    %309 = add nsw i32 %308, 1024
    %310 = fmul float %173, %273
    %311 = fadd float %179, %310
    %312 = fmul float %311, 2.048000e+03
    %313 = fptosi float %312 to i32
    %314 = getelementptr inbounds [4 x i32], [4 x i32]* %300, i32 %284, i32 1
    %315 = load i32, i32* %314, align 4, !tbaa !93
    %316 = sitofp i32 %315 to float
    %317 = fmul float %195, %280
    %318 = fadd float %317, %316
    %319 = fmul float %201, %282
    %320 = fadd float %319, %318
    %321 = fptosi float %320 to i32
    %322 = add nsw i32 %321, 1024
    %323 = fmul float %195, %273
    %324 = fadd float %201, %323
    %325 = fmul float %324, 2.048000e+03
    %326 = fptosi float %325 to i32
    %327 = getelementptr inbounds [4 x i32], [4 x i32]* %300, i32 %284, i32 2
    %328 = load i32, i32* %327, align 4, !tbaa !93
    %329 = sitofp i32 %328 to float
    %330 = fmul float %217, %280
    %331 = fadd float %330, %329
    %332 = fmul float %223, %282
    %333 = fadd float %332, %331
    %334 = fptosi float %333 to i32
    %335 = add nsw i32 %334, 1024
    %336 = fmul float %217, %273
    %337 = fadd float %223, %336
    %338 = fmul float %337, 2.048000e+03
    %339 = fptosi float %338 to i32
    %340 = getelementptr inbounds [4 x i32], [4 x i32]* %300, i32 %284, i32 3
    %341 = load i32, i32* %340, align 4, !tbaa !93
    %342 = sitofp i32 %341 to float
    %343 = fmul float %239, %280
    %344 = fadd float %343, %342
    %345 = fmul float %245, %282
    %346 = fadd float %345, %344
    %347 = fptosi float %346 to i32
    %348 = add nsw i32 %347, 1024
    %349 = fmul float %239, %273
    %350 = fadd float %245, %349
    %351 = fmul float %350, 2.048000e+03
    %352 = fptosi float %351 to i32
    br label %353
  
  ; <label>:353                                     ; preds = %258, %254, %252
    %lines.122 = phi i32 [ %lines.121, %258 ], [ %lines.121, %254 ], [ %250, %252 ]
    %setupRight.120 = phi i32 [ %setupRight.119, %258 ], [ %setupRight.119, %254 ], [ %.14, %252 ]
    %eRight.118 = phi %struct.EdgeT.3* [ %eRight.117, %258 ], [ %eRight.117, %254 ], [ %eTop, %252 ]
    %fdError.1 = phi i32 [ %271, %258 ], [ %fdError.072, %254 ], [ %fdError.072, %252 ]
    %fError.1 = phi i32 [ %264, %258 ], [ %fError.073, %254 ], [ %fError.073, %252 ]
    %iy.1 = phi i32 [ %276, %258 ], [ %iy.074, %254 ], [ %iy.074, %252 ]
    %fz.1 = phi i32 [ %295, %258 ], [ %fz.078, %254 ], [ %fz.078, %252 ]
    %fdzOuter.1 = phi i32 [ %299, %258 ], [ %fdzOuter.079, %254 ], [ %fdzOuter.079, %252 ]
    %fdxLeftEdge.1 = phi i32 [ %267, %258 ], [ %fdxLeftEdge.080, %254 ], [ %fdxLeftEdge.080, %252 ]
    %fr.1 = phi i32 [ %309, %258 ], [ %fr.081, %254 ], [ %fr.081, %252 ]
    %fdrOuter.1 = phi i32 [ %313, %258 ], [ %fdrOuter.082, %254 ], [ %fdrOuter.082, %252 ]
    %fg.1 = phi i32 [ %322, %258 ], [ %fg.084, %254 ], [ %fg.084, %252 ]
    %fdgOuter.1 = phi i32 [ %326, %258 ], [ %fdgOuter.085, %254 ], [ %fdgOuter.085, %252 ]
    %fxLeftEdge.1 = phi i32 [ %265, %258 ], [ %fxLeftEdge.086, %254 ], [ %fxLeftEdge.086, %252 ]
    %fb.1 = phi i32 [ %335, %258 ], [ %fb.087, %254 ], [ %fb.087, %252 ]
    %fdbOuter.1 = phi i32 [ %339, %258 ], [ %fdbOuter.088, %254 ], [ %fdbOuter.088, %252 ]
    %fa.1 = phi i32 [ %348, %258 ], [ %fa.090, %254 ], [ %fa.090, %252 ]
    %fdaOuter.1 = phi i32 [ %352, %258 ], [ %fdaOuter.091, %254 ], [ %fdaOuter.091, %252 ]
    %354 = icmp eq i32 %setupRight.120, 0
    br i1 %354, label %365, label %355
  
  ; <label>:355                                     ; preds = %353
    %356 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eRight.118, i32 0, i32 8
    %357 = load i32, i32* %356, align 4, !tbaa !74
    %358 = icmp sgt i32 %357, 0
    br i1 %358, label %359, label %365
  
  ; <label>:359                                     ; preds = %355
    %360 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eRight.118, i32 0, i32 5
    %361 = load i32, i32* %360, align 4, !tbaa !78
    %362 = add nsw i32 %361, -1
    %363 = getelementptr inbounds %struct.EdgeT.3, %struct.EdgeT.3* %eRight.118, i32 0, i32 4
    %364 = load i32, i32* %363, align 4, !tbaa !75
    br label %365
  
  ; <label>:365                                     ; preds = %359, %355, %353
    %fdxRightEdge.1 = phi i32 [ %364, %359 ], [ %fdxRightEdge.077, %355 ], [ %fdxRightEdge.077, %353 ]
    %fxRightEdge.1 = phi i32 [ %362, %359 ], [ %fxRightEdge.083, %355 ], [ %fxRightEdge.083, %353 ]
    %366 = icmp sgt i32 %lines.122, 0
    br i1 %366, label %.lr.ph62, label %.loopexit
  
  .lr.ph62:                                         ; preds = %365, %405
    %lines.260 = phi i32 [ %412, %405 ], [ %lines.122, %365 ]
    %fa.259 = phi i32 [ %fa.3, %405 ], [ %fa.1, %365 ]
    %fb.258 = phi i32 [ %fb.3, %405 ], [ %fb.1, %365 ]
    %fxLeftEdge.257 = phi i32 [ %413, %405 ], [ %fxLeftEdge.1, %365 ]
    %fg.256 = phi i32 [ %fg.3, %405 ], [ %fg.1, %365 ]
    %fxRightEdge.255 = phi i32 [ %414, %405 ], [ %fxRightEdge.1, %365 ]
    %fr.254 = phi i32 [ %fr.3, %405 ], [ %fr.1, %365 ]
    %fz.253 = phi i32 [ %fz.3, %405 ], [ %fz.1, %365 ]
    %iy.251 = phi i32 [ %411, %405 ], [ %iy.1, %365 ]
    %fError.250 = phi i32 [ %., %405 ], [ %fError.1, %365 ]
    %367 = bitcast [1280 x i8]* %alpha to i8*
    %368 = bitcast [1280 x i8]* %blue to i8*
    %369 = bitcast [1280 x i8]* %green to i8*
    %370 = bitcast [1280 x i8]* %red to i8*
    %371 = bitcast [1280 x i16]* %zspan to i8*
    %372 = ashr i32 %fxLeftEdge.257, 11
    %373 = ashr i32 %fxRightEdge.255, 11
    %374 = sub nsw i32 %373, %372
    call void @llvm.lifetime.start(i64 2560, i8* %371) #4
    call void @llvm.lifetime.start(i64 1280, i8* %370) #4
    call void @llvm.lifetime.start(i64 1280, i8* %369) #4
    call void @llvm.lifetime.start(i64 1280, i8* %368) #4
    call void @llvm.lifetime.start(i64 1280, i8* %367) #4
    %375 = icmp sgt i32 %374, 0
    br i1 %375, label %.lr.ph.preheader, label %405
  
  .lr.ph.preheader:                                 ; preds = %.lr.ph62
    %376 = icmp slt i32 %fr.254, 0
    %.fr.2 = select i1 %376, i32 0, i32 %fr.254
    %377 = icmp slt i32 %fg.256, 0
    %ffg.0 = select i1 %377, i32 0, i32 %fg.256
    %378 = icmp slt i32 %fb.258, 0
    %.fb.2 = select i1 %378, i32 0, i32 %fb.258
    %379 = icmp slt i32 %fa.259, 0
    %ffa.0 = select i1 %379, i32 0, i32 %fa.259
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv13 = phi [1280 x i16]* [ %399, %.lr.ph ], [ %zspan, %.lr.ph.preheader ]
    %lsr.iv9 = phi [1280 x i8]* [ %398, %.lr.ph ], [ %red, %.lr.ph.preheader ]
    %lsr.iv6 = phi [1280 x i8]* [ %397, %.lr.ph ], [ %green, %.lr.ph.preheader ]
    %lsr.iv3 = phi [1280 x i8]* [ %396, %.lr.ph ], [ %blue, %.lr.ph.preheader ]
    %lsr.iv1 = phi [1280 x i8]* [ %395, %.lr.ph ], [ %alpha, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %373, %.lr.ph.preheader ]
    %ffa.148 = phi i32 [ %394, %.lr.ph ], [ %ffa.0, %.lr.ph.preheader ]
    %ffb.147 = phi i32 [ %393, %.lr.ph ], [ %.fb.2, %.lr.ph.preheader ]
    %ffg.146 = phi i32 [ %392, %.lr.ph ], [ %ffg.0, %.lr.ph.preheader ]
    %ffr.145 = phi i32 [ %391, %.lr.ph ], [ %.fr.2, %.lr.ph.preheader ]
    %ffz.044 = phi i32 [ %390, %.lr.ph ], [ %fz.253, %.lr.ph.preheader ]
    %lsr.iv1315 = bitcast [1280 x i16]* %lsr.iv13 to i16*
    %lsr.iv911 = bitcast [1280 x i8]* %lsr.iv9 to i8*
    %lsr.iv68 = bitcast [1280 x i8]* %lsr.iv6 to i8*
    %lsr.iv35 = bitcast [1280 x i8]* %lsr.iv3 to i8*
    %lsr.iv12 = bitcast [1280 x i8]* %lsr.iv1 to i8*
    %380 = lshr i32 %ffz.044, 11
    %381 = trunc i32 %380 to i16
    store i16 %381, i16* %lsr.iv1315, align 2, !tbaa !88
    %382 = lshr i32 %ffr.145, 11
    %383 = trunc i32 %382 to i8
    store i8 %383, i8* %lsr.iv911, align 1, !tbaa !89
    %384 = lshr i32 %ffg.146, 11
    %385 = trunc i32 %384 to i8
    store i8 %385, i8* %lsr.iv68, align 1, !tbaa !89
    %386 = lshr i32 %ffb.147, 11
    %387 = trunc i32 %386 to i8
    store i8 %387, i8* %lsr.iv35, align 1, !tbaa !89
    %388 = lshr i32 %ffa.148, 11
    %389 = trunc i32 %388 to i8
    store i8 %389, i8* %lsr.iv12, align 1, !tbaa !89
    %390 = add nsw i32 %ffz.044, %155
    %391 = add nsw i32 %ffr.145, %175
    %392 = add nsw i32 %ffg.146, %197
    %393 = add nsw i32 %ffb.147, %219
    %394 = add nsw i32 %ffa.148, %241
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv1, i32 0, i32 1
    %395 = bitcast i8* %scevgep to [1280 x i8]*
    %scevgep4 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv3, i32 0, i32 1
    %396 = bitcast i8* %scevgep4 to [1280 x i8]*
    %scevgep7 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv6, i32 0, i32 1
    %397 = bitcast i8* %scevgep7 to [1280 x i8]*
    %scevgep10 = getelementptr [1280 x i8], [1280 x i8]* %lsr.iv9, i32 0, i32 1
    %398 = bitcast i8* %scevgep10 to [1280 x i8]*
    %scevgep14 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv13, i32 0, i32 1
    %399 = bitcast i16* %scevgep14 to [1280 x i16]*
    %exitcond = icmp eq i32 %372, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph
    %400 = bitcast [1280 x i16]* %zspan to i16*
    %401 = bitcast [1280 x i8]* %alpha to i8*
    %402 = bitcast [1280 x i8]* %blue to i8*
    %403 = bitcast [1280 x i8]* %green to i8*
    %404 = bitcast [1280 x i8]* %red to i8*
    call void @gl_write_color_span(%struct.gl_context* %ctx, i32 signext %374, i32 signext %372, i32 signext %iy.251, i16* nonnull %400, i8* nonnull %404, i8* nonnull %403, i8* nonnull %402, i8* nonnull %401, i32 signext 9) #4
    br label %405
  
  ; <label>:405                                     ; preds = %._crit_edge, %.lr.ph62
    %406 = bitcast [1280 x i8]* %alpha to i8*
    %407 = bitcast [1280 x i8]* %blue to i8*
    %408 = bitcast [1280 x i8]* %green to i8*
    %409 = bitcast [1280 x i8]* %red to i8*
    %410 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 1280, i8* %406) #4
    call void @llvm.lifetime.end(i64 1280, i8* %407) #4
    call void @llvm.lifetime.end(i64 1280, i8* %408) #4
    call void @llvm.lifetime.end(i64 1280, i8* %409) #4
    call void @llvm.lifetime.end(i64 2560, i8* %410) #4
    %411 = add nsw i32 %iy.251, 1
    %412 = add nsw i32 %lines.260, -1
    %413 = add nsw i32 %fxLeftEdge.257, %fdxLeftEdge.1
    %414 = add nsw i32 %fxRightEdge.255, %fdxRightEdge.1
    %415 = add nsw i32 %fError.250, %fdError.1
    %416 = icmp sgt i32 %415, -1
    %417 = add nsw i32 %415, -2048
    %. = select i1 %416, i32 %417, i32 %415
    %418 = select i1 %416, i32 0, i32 %155
    %fdzOuter.1. = add nsw i32 %fdzOuter.1, %418
    %419 = select i1 %416, i32 0, i32 %175
    %fdrOuter.1. = add nsw i32 %fdrOuter.1, %419
    %420 = select i1 %416, i32 0, i32 %197
    %fdgOuter.1. = add nsw i32 %fdgOuter.1, %420
    %421 = select i1 %416, i32 0, i32 %219
    %fdbOuter.1. = add nsw i32 %fdbOuter.1, %421
    %422 = select i1 %416, i32 0, i32 %241
    %fdaOuter.1. = add nsw i32 %fdaOuter.1, %422
    %fa.3 = add nsw i32 %fdaOuter.1., %fa.259
    %fb.3 = add nsw i32 %fdbOuter.1., %fb.258
    %fg.3 = add nsw i32 %fdgOuter.1., %fg.256
    %fr.3 = add nsw i32 %fdrOuter.1., %fr.254
    %fz.3 = add nsw i32 %fdzOuter.1., %fz.253
    %423 = icmp sgt i32 %lines.260, 1
    br i1 %423, label %.lr.ph62, label %.loopexit
  
  .loopexit:                                        ; preds = %405, %365
    %fError.4.ph = phi i32 [ %fError.1, %365 ], [ %., %405 ]
    %iy.3.ph = phi i32 [ %iy.1, %365 ], [ %411, %405 ]
    %fz.4.ph = phi i32 [ %fz.1, %365 ], [ %fz.3, %405 ]
    %fr.4.ph = phi i32 [ %fr.1, %365 ], [ %fr.3, %405 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %365 ], [ %414, %405 ]
    %fg.4.ph = phi i32 [ %fg.1, %365 ], [ %fg.3, %405 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %365 ], [ %413, %405 ]
    %fb.4.ph = phi i32 [ %fb.1, %365 ], [ %fb.3, %405 ]
    %fa.4.ph = phi i32 [ %fa.1, %365 ], [ %fa.3, %405 ]
    %424 = add nuw nsw i32 %subTriangle.089, 1
    %425 = icmp slt i32 %424, 2
    br i1 %425, label %246, label %.critedge
  
  .critedge:                                        ; preds = %249, %.loopexit, %57, %21
    %426 = bitcast %struct.EdgeT.3* %eBot to i8*
    %427 = bitcast %struct.EdgeT.3* %eTop to i8*
    %428 = bitcast %struct.EdgeT.3* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %426) #4
    call void @llvm.lifetime.end(i64 40, i8* %427) #4
    call void @llvm.lifetime.end(i64 40, i8* %428) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @smooth_ci_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.4, align 4
    %eTop = alloca %struct.EdgeT.4, align 4
    %eBot = alloca %struct.EdgeT.4, align 4
    %zspan = alloca [1280 x i16], align 2
    %index = alloca [1280 x i32], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.4* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.4* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.4* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.4* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.4* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.4* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %134 = load float, float* %133, align 4, !tbaa !67
    %135 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %136 = load float, float* %135, align 4, !tbaa !67
    %137 = fsub float %134, %136
    %138 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %139 = load float, float* %138, align 4, !tbaa !67
    %140 = fsub float %139, %136
    %141 = fmul float %137, %50
    %142 = fmul float %140, %38
    %143 = fsub float %141, %142
    %144 = fmul float %58, %143
    %145 = fcmp ogt float %144, 6.553500e+04
    %146 = fcmp olt float %144, -6.553500e+04
    %or.cond13 = or i1 %145, %146
    br i1 %or.cond13, label %152, label %147
  
  ; <label>:147                                     ; preds = %132
    %148 = fmul float %140, %32
    %149 = fmul float %137, %48
    %150 = fsub float %148, %149
    %151 = fmul float %58, %150
    br label %152
  
  ; <label>:152                                     ; preds = %147, %132
    %dzdy.0 = phi float [ %151, %147 ], [ 0.000000e+00, %132 ]
    %dzdx.0 = phi float [ %144, %147 ], [ 0.000000e+00, %132 ]
    %153 = fcmp olt float %58, 0.000000e+00
    %154 = fmul float %dzdx.0, 2.048000e+03
    %155 = fptosi float %154 to i32
    %156 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 10
    %157 = load i32*, i32** %156, align 4, !tbaa !94
    %158 = getelementptr inbounds i32, i32* %157, i32 %vMax.0
    %159 = load i32, i32* %158, align 4, !tbaa !93
    %160 = getelementptr inbounds i32, i32* %157, i32 %vMin.0
    %161 = load i32, i32* %160, align 4, !tbaa !93
    %162 = sub nsw i32 %159, %161
    %163 = sitofp i32 %162 to float
    %164 = getelementptr inbounds i32, i32* %157, i32 %vMid.0
    %165 = load i32, i32* %164, align 4, !tbaa !93
    %166 = sub nsw i32 %165, %161
    %167 = sitofp i32 %166 to float
    %168 = fmul float %163, %50
    %169 = fmul float %38, %167
    %170 = fsub float %168, %169
    %171 = fmul float %58, %170
    %172 = fmul float %171, 2.048000e+03
    %173 = fptosi float %172 to i32
    %174 = fmul float %167, %32
    %175 = fmul float %163, %48
    %176 = fsub float %174, %175
    %177 = fmul float %58, %176
    %eMaj.eBot = select i1 %153, %struct.EdgeT.4* %eMaj, %struct.EdgeT.4* %eBot
    %eBot.eMaj = select i1 %153, %struct.EdgeT.4* %eBot, %struct.EdgeT.4* %eMaj
    %.14 = zext i1 %153 to i32
    br label %178
  
  ; <label>:178                                     ; preds = %.loopexit, %152
    %fdiOuter.070 = phi i32 [ undef, %152 ], [ %fdiOuter.1, %.loopexit ]
    %fi.069 = phi i32 [ undef, %152 ], [ %fi.4.ph, %.loopexit ]
    %subTriangle.068 = phi i32 [ 0, %152 ], [ %287, %.loopexit ]
    %fdzOuter.067 = phi i32 [ undef, %152 ], [ %fdzOuter.1, %.loopexit ]
    %fz.066 = phi i32 [ undef, %152 ], [ %fz.4.ph, %.loopexit ]
    %fxLeftEdge.065 = phi i32 [ undef, %152 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %iy.062 = phi i32 [ undef, %152 ], [ %iy.3.ph, %.loopexit ]
    %fxRightEdge.061 = phi i32 [ undef, %152 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.060 = phi i32 [ undef, %152 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdxRightEdge.059 = phi i32 [ undef, %152 ], [ %fdxRightEdge.1, %.loopexit ]
    %fdError.058 = phi i32 [ undef, %152 ], [ %fdError.1, %.loopexit ]
    %fError.057 = phi i32 [ undef, %152 ], [ %fError.4.ph, %.loopexit ]
    %179 = icmp eq i32 %subTriangle.068, 0
    br i1 %179, label %.thread, label %180
  
  ; <label>:180                                     ; preds = %178
    %181 = icmp eq i32 %99, 0
    br i1 %181, label %.critedge, label %182
  
  ; <label>:182                                     ; preds = %180
    %183 = fcmp olt float %58, 0.000000e+00
    br i1 %183, label %244, label %.thread
  
  .thread:                                          ; preds = %182, %178
    %lines.121 = phi i32 [ %99, %182 ], [ %118, %178 ]
    %setupRight.119 = phi i32 [ %.14, %182 ], [ 1, %178 ]
    %eRight.117 = phi %struct.EdgeT.4* [ %eMaj, %182 ], [ %eBot.eMaj, %178 ]
    %eLeft.116 = phi %struct.EdgeT.4* [ %eTop, %182 ], [ %eMaj.eBot, %178 ]
    %184 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 8
    %185 = load i32, i32* %184, align 4, !tbaa !74
    %186 = icmp sgt i32 %185, 0
    br i1 %186, label %187, label %244
  
  ; <label>:187                                     ; preds = %.thread
    %188 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 5
    %189 = load i32, i32* %188, align 4, !tbaa !78
    %190 = add nsw i32 %189, 2047
    %191 = and i32 %190, -2048
    %192 = sub i32 -2048, %189
    %193 = add i32 %192, %191
    %194 = add nsw i32 %189, -1
    %195 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 4
    %196 = load i32, i32* %195, align 4, !tbaa !75
    %197 = add nsw i32 %196, -1
    %198 = and i32 %197, -2048
    %199 = sub i32 2048, %196
    %200 = add i32 %199, %198
    %201 = ashr i32 %197, 11
    %202 = sitofp i32 %201 to float
    %203 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 6
    %204 = load i32, i32* %203, align 4, !tbaa !73
    %205 = ashr i32 %204, 11
    %206 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 9
    %207 = load i32, i32* %206, align 4, !tbaa !77
    %208 = sub nsw i32 %191, %207
    %209 = sitofp i32 %208 to float
    %210 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eLeft.116, i32 0, i32 7
    %211 = load float, float* %210, align 4, !tbaa !76
    %212 = bitcast %struct.EdgeT.4* %eLeft.116 to i32*
    %213 = load i32, i32* %212, align 4, !tbaa !68
    %214 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %213, i32 2
    %215 = load float, float* %214, align 4, !tbaa !67
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr6 = add i32 %sunkaddr, 55768
    %sunkaddr7 = inttoptr i32 %sunkaddr6 to float*
    %216 = load float, float* %sunkaddr7, align 4, !tbaa !83
    %217 = fadd float %215, %216
    %218 = fmul float %217, 2.048000e+03
    %219 = fmul float %dzdx.0, %209
    %220 = fadd float %219, %218
    %221 = fmul float %dzdy.0, %211
    %222 = fadd float %221, %220
    %223 = fptosi float %222 to i32
    %224 = add nsw i32 %223, 1024
    %225 = fmul float %dzdx.0, %202
    %226 = fadd float %dzdy.0, %225
    %227 = fmul float %226, 2.048000e+03
    %228 = fptosi float %227 to i32
    %sunkaddr8 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr9 = add i32 %sunkaddr8, 56452
    %sunkaddr10 = inttoptr i32 %sunkaddr9 to i32**
    %229 = load i32*, i32** %sunkaddr10, align 4, !tbaa !94
    %230 = getelementptr inbounds i32, i32* %229, i32 %213
    %231 = load i32, i32* %230, align 4, !tbaa !93
    %232 = uitofp i32 %231 to float
    %233 = fmul float %232, 2.048000e+03
    %234 = fmul float %171, %209
    %235 = fadd float %234, %233
    %236 = fmul float %177, %211
    %237 = fadd float %236, %235
    %238 = fptosi float %237 to i32
    %239 = add nsw i32 %238, 1024
    %240 = fmul float %171, %202
    %241 = fadd float %177, %240
    %242 = fmul float %241, 2.048000e+03
    %243 = fptosi float %242 to i32
    br label %244
  
  ; <label>:244                                     ; preds = %187, %.thread, %182
    %lines.122 = phi i32 [ %lines.121, %187 ], [ %lines.121, %.thread ], [ %99, %182 ]
    %setupRight.120 = phi i32 [ %setupRight.119, %187 ], [ %setupRight.119, %.thread ], [ %.14, %182 ]
    %eRight.118 = phi %struct.EdgeT.4* [ %eRight.117, %187 ], [ %eRight.117, %.thread ], [ %eTop, %182 ]
    %fError.1 = phi i32 [ %193, %187 ], [ %fError.057, %.thread ], [ %fError.057, %182 ]
    %fdError.1 = phi i32 [ %200, %187 ], [ %fdError.058, %.thread ], [ %fdError.058, %182 ]
    %fdxLeftEdge.1 = phi i32 [ %196, %187 ], [ %fdxLeftEdge.060, %.thread ], [ %fdxLeftEdge.060, %182 ]
    %iy.1 = phi i32 [ %205, %187 ], [ %iy.062, %.thread ], [ %iy.062, %182 ]
    %fxLeftEdge.1 = phi i32 [ %194, %187 ], [ %fxLeftEdge.065, %.thread ], [ %fxLeftEdge.065, %182 ]
    %fz.1 = phi i32 [ %224, %187 ], [ %fz.066, %.thread ], [ %fz.066, %182 ]
    %fdzOuter.1 = phi i32 [ %228, %187 ], [ %fdzOuter.067, %.thread ], [ %fdzOuter.067, %182 ]
    %fi.1 = phi i32 [ %239, %187 ], [ %fi.069, %.thread ], [ %fi.069, %182 ]
    %fdiOuter.1 = phi i32 [ %243, %187 ], [ %fdiOuter.070, %.thread ], [ %fdiOuter.070, %182 ]
    %245 = icmp eq i32 %setupRight.120, 0
    br i1 %245, label %256, label %246
  
  ; <label>:246                                     ; preds = %244
    %247 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eRight.118, i32 0, i32 8
    %248 = load i32, i32* %247, align 4, !tbaa !74
    %249 = icmp sgt i32 %248, 0
    br i1 %249, label %250, label %256
  
  ; <label>:250                                     ; preds = %246
    %251 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eRight.118, i32 0, i32 5
    %252 = load i32, i32* %251, align 4, !tbaa !78
    %253 = add nsw i32 %252, -1
    %254 = getelementptr inbounds %struct.EdgeT.4, %struct.EdgeT.4* %eRight.118, i32 0, i32 4
    %255 = load i32, i32* %254, align 4, !tbaa !75
    br label %256
  
  ; <label>:256                                     ; preds = %250, %246, %244
    %fdxRightEdge.1 = phi i32 [ %255, %250 ], [ %fdxRightEdge.059, %246 ], [ %fdxRightEdge.059, %244 ]
    %fxRightEdge.1 = phi i32 [ %253, %250 ], [ %fxRightEdge.061, %246 ], [ %fxRightEdge.061, %244 ]
    %257 = icmp sgt i32 %lines.122, 0
    br i1 %257, label %.lr.ph50, label %.loopexit
  
  .lr.ph50:                                         ; preds = %256, %274
    %lines.248 = phi i32 [ %278, %274 ], [ %lines.122, %256 ]
    %fi.247 = phi i32 [ %fi.3, %274 ], [ %fi.1, %256 ]
    %fz.246 = phi i32 [ %fz.3, %274 ], [ %fz.1, %256 ]
    %fxLeftEdge.245 = phi i32 [ %279, %274 ], [ %fxLeftEdge.1, %256 ]
    %iy.243 = phi i32 [ %277, %274 ], [ %iy.1, %256 ]
    %fxRightEdge.242 = phi i32 [ %280, %274 ], [ %fxRightEdge.1, %256 ]
    %fError.241 = phi i32 [ %., %274 ], [ %fError.1, %256 ]
    %258 = bitcast [1280 x i32]* %index to i8*
    %259 = bitcast [1280 x i16]* %zspan to i8*
    %260 = ashr i32 %fxLeftEdge.245, 11
    %261 = ashr i32 %fxRightEdge.242, 11
    %262 = sub nsw i32 %261, %260
    call void @llvm.lifetime.start(i64 2560, i8* %259) #4
    call void @llvm.lifetime.start(i64 5120, i8* %258) #4
    %263 = icmp sgt i32 %262, 0
    br i1 %263, label %.lr.ph.preheader, label %274
  
  .lr.ph.preheader:                                 ; preds = %.lr.ph50
    %264 = icmp slt i32 %fi.247, 0
    %.fi.2 = select i1 %264, i32 0, i32 %fi.247
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv3 = phi [1280 x i16]* [ %271, %.lr.ph ], [ %zspan, %.lr.ph.preheader ]
    %lsr.iv1 = phi [1280 x i32]* [ %270, %.lr.ph ], [ %index, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %261, %.lr.ph.preheader ]
    %ffi.139 = phi i32 [ %269, %.lr.ph ], [ %.fi.2, %.lr.ph.preheader ]
    %ffz.038 = phi i32 [ %268, %.lr.ph ], [ %fz.246, %.lr.ph.preheader ]
    %lsr.iv35 = bitcast [1280 x i16]* %lsr.iv3 to i16*
    %lsr.iv12 = bitcast [1280 x i32]* %lsr.iv1 to i32*
    %265 = lshr i32 %ffz.038, 11
    %266 = trunc i32 %265 to i16
    store i16 %266, i16* %lsr.iv35, align 2, !tbaa !88
    %267 = ashr i32 %ffi.139, 11
    store i32 %267, i32* %lsr.iv12, align 4, !tbaa !93
    %268 = add nsw i32 %ffz.038, %155
    %269 = add nsw i32 %ffi.139, %173
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i32], [1280 x i32]* %lsr.iv1, i32 0, i32 1
    %270 = bitcast i32* %scevgep to [1280 x i32]*
    %scevgep4 = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv3, i32 0, i32 1
    %271 = bitcast i16* %scevgep4 to [1280 x i16]*
    %exitcond = icmp eq i32 %260, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph
    %272 = bitcast [1280 x i32]* %index to i32*
    %273 = bitcast [1280 x i16]* %zspan to i16*
    call void @gl_write_index_span(%struct.gl_context* %ctx, i32 signext %262, i32 signext %260, i32 signext %iy.243, i16* nonnull %273, i32* nonnull %272, i32 signext 9) #4
    br label %274
  
  ; <label>:274                                     ; preds = %._crit_edge, %.lr.ph50
    %275 = bitcast [1280 x i32]* %index to i8*
    %276 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 5120, i8* %275) #4
    call void @llvm.lifetime.end(i64 2560, i8* %276) #4
    %277 = add nsw i32 %iy.243, 1
    %278 = add nsw i32 %lines.248, -1
    %279 = add nsw i32 %fxLeftEdge.245, %fdxLeftEdge.1
    %280 = add nsw i32 %fxRightEdge.242, %fdxRightEdge.1
    %281 = add nsw i32 %fError.241, %fdError.1
    %282 = icmp sgt i32 %281, -1
    %283 = add nsw i32 %281, -2048
    %. = select i1 %282, i32 %283, i32 %281
    %284 = select i1 %282, i32 0, i32 %155
    %fdzOuter.1. = add nsw i32 %fdzOuter.1, %284
    %285 = select i1 %282, i32 0, i32 %173
    %fdiOuter.1. = add nsw i32 %fdiOuter.1, %285
    %fi.3 = add nsw i32 %fdiOuter.1., %fi.247
    %fz.3 = add nsw i32 %fdzOuter.1., %fz.246
    %286 = icmp sgt i32 %lines.248, 1
    br i1 %286, label %.lr.ph50, label %.loopexit
  
  .loopexit:                                        ; preds = %274, %256
    %fError.4.ph = phi i32 [ %fError.1, %256 ], [ %., %274 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %256 ], [ %280, %274 ]
    %iy.3.ph = phi i32 [ %iy.1, %256 ], [ %277, %274 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %256 ], [ %279, %274 ]
    %fz.4.ph = phi i32 [ %fz.1, %256 ], [ %fz.3, %274 ]
    %fi.4.ph = phi i32 [ %fi.1, %256 ], [ %fi.3, %274 ]
    %287 = add nuw nsw i32 %subTriangle.068, 1
    %288 = icmp slt i32 %287, 2
    br i1 %288, label %178, label %.critedge
  
  .critedge:                                        ; preds = %180, %.loopexit, %57, %21
    %289 = bitcast %struct.EdgeT.4* %eBot to i8*
    %290 = bitcast %struct.EdgeT.4* %eTop to i8*
    %291 = bitcast %struct.EdgeT.4* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %289) #4
    call void @llvm.lifetime.end(i64 40, i8* %290) #4
    call void @llvm.lifetime.end(i64 40, i8* %291) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @flat_rgba_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.5, align 4
    %eTop = alloca %struct.EdgeT.5, align 4
    %eBot = alloca %struct.EdgeT.5, align 4
    %zspan = alloca [1280 x i16], align 2
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.5* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.5* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.5* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.5* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.5* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.5* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 21
    %134 = load i8, i8* %133, align 4, !tbaa !95
    %135 = icmp eq i8 %134, 0
    br i1 %135, label %136, label %153
  
  ; <label>:136                                     ; preds = %132
    %137 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 7
    %138 = load [4 x i32]*, [4 x i32]** %137, align 4, !tbaa !91
    %139 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 0
    %140 = load i32, i32* %139, align 4, !tbaa !93
    %141 = trunc i32 %140 to i8
    %142 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 1
    %143 = load i32, i32* %142, align 4, !tbaa !93
    %144 = trunc i32 %143 to i8
    %145 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 2
    %146 = load i32, i32* %145, align 4, !tbaa !93
    %147 = trunc i32 %146 to i8
    %148 = getelementptr inbounds [4 x i32], [4 x i32]* %138, i32 %pv, i32 3
    %149 = load i32, i32* %148, align 4, !tbaa !93
    %150 = trunc i32 %149 to i8
    %151 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 5
    %152 = load void (%struct.gl_context*, i8, i8, i8, i8)*, void (%struct.gl_context*, i8, i8, i8, i8)** %151, align 4, !tbaa !96
    tail call void %152(%struct.gl_context* nonnull %ctx, i8 zeroext %141, i8 zeroext %144, i8 zeroext %147, i8 zeroext %150) #4
    br label %153
  
  ; <label>:153                                     ; preds = %136, %132
    %154 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %155 = load float, float* %154, align 4, !tbaa !67
    %156 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %157 = load float, float* %156, align 4, !tbaa !67
    %158 = fsub float %155, %157
    %159 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %160 = load float, float* %159, align 4, !tbaa !67
    %161 = fsub float %160, %157
    %162 = fmul float %158, %50
    %163 = fmul float %161, %38
    %164 = fsub float %162, %163
    %165 = fmul float %58, %164
    %166 = fcmp ogt float %165, 6.553500e+04
    %167 = fcmp olt float %165, -6.553500e+04
    %or.cond13 = or i1 %166, %167
    br i1 %or.cond13, label %173, label %168
  
  ; <label>:168                                     ; preds = %153
    %169 = fmul float %161, %32
    %170 = fmul float %158, %48
    %171 = fsub float %169, %170
    %172 = fmul float %58, %171
    br label %173
  
  ; <label>:173                                     ; preds = %168, %153
    %dzdy.0 = phi float [ %172, %168 ], [ 0.000000e+00, %153 ]
    %dzdx.0 = phi float [ %165, %168 ], [ 0.000000e+00, %153 ]
    %174 = fcmp olt float %58, 0.000000e+00
    %175 = fmul float %dzdx.0, 2.048000e+03
    %176 = fptosi float %175 to i32
    %eMaj.eBot = select i1 %174, %struct.EdgeT.5* %eMaj, %struct.EdgeT.5* %eBot
    %eBot.eMaj = select i1 %174, %struct.EdgeT.5* %eBot, %struct.EdgeT.5* %eMaj
    %.14 = zext i1 %174 to i32
    br label %177
  
  ; <label>:177                                     ; preds = %.loopexit, %173
    %fdzOuter.063 = phi i32 [ undef, %173 ], [ %fdzOuter.1, %.loopexit ]
    %fz.062 = phi i32 [ undef, %173 ], [ %fz.4.ph, %.loopexit ]
    %subTriangle.061 = phi i32 [ 0, %173 ], [ %272, %.loopexit ]
    %iy.058 = phi i32 [ undef, %173 ], [ %iy.3.ph, %.loopexit ]
    %fxLeftEdge.057 = phi i32 [ undef, %173 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fxRightEdge.056 = phi i32 [ undef, %173 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.055 = phi i32 [ undef, %173 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdError.054 = phi i32 [ undef, %173 ], [ %fdError.1, %.loopexit ]
    %fError.053 = phi i32 [ undef, %173 ], [ %fError.4.ph, %.loopexit ]
    %fdxRightEdge.052 = phi i32 [ undef, %173 ], [ %fdxRightEdge.1, %.loopexit ]
    %178 = icmp eq i32 %subTriangle.061, 0
    br i1 %178, label %.thread, label %179
  
  ; <label>:179                                     ; preds = %177
    %180 = icmp eq i32 %99, 0
    br i1 %180, label %.critedge, label %181
  
  ; <label>:181                                     ; preds = %179
    %182 = fcmp olt float %58, 0.000000e+00
    br i1 %182, label %228, label %.thread
  
  .thread:                                          ; preds = %181, %177
    %lines.121 = phi i32 [ %99, %181 ], [ %118, %177 ]
    %setupRight.119 = phi i32 [ %.14, %181 ], [ 1, %177 ]
    %eRight.117 = phi %struct.EdgeT.5* [ %eMaj, %181 ], [ %eBot.eMaj, %177 ]
    %eLeft.116 = phi %struct.EdgeT.5* [ %eTop, %181 ], [ %eMaj.eBot, %177 ]
    %183 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 8
    %184 = load i32, i32* %183, align 4, !tbaa !74
    %185 = icmp sgt i32 %184, 0
    br i1 %185, label %186, label %228
  
  ; <label>:186                                     ; preds = %.thread
    %187 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 5
    %188 = load i32, i32* %187, align 4, !tbaa !78
    %189 = add nsw i32 %188, 2047
    %190 = and i32 %189, -2048
    %191 = sub i32 -2048, %188
    %192 = add i32 %191, %190
    %193 = add nsw i32 %188, -1
    %194 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 4
    %195 = load i32, i32* %194, align 4, !tbaa !75
    %196 = add nsw i32 %195, -1
    %197 = and i32 %196, -2048
    %198 = sub i32 2048, %195
    %199 = add i32 %198, %197
    %200 = ashr i32 %196, 11
    %201 = sitofp i32 %200 to float
    %202 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 6
    %203 = load i32, i32* %202, align 4, !tbaa !73
    %204 = ashr i32 %203, 11
    %205 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 9
    %206 = load i32, i32* %205, align 4, !tbaa !77
    %207 = sub nsw i32 %190, %206
    %208 = sitofp i32 %207 to float
    %209 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eLeft.116, i32 0, i32 7
    %210 = load float, float* %209, align 4, !tbaa !76
    %211 = bitcast %struct.EdgeT.5* %eLeft.116 to i32*
    %212 = load i32, i32* %211, align 4, !tbaa !68
    %213 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %212, i32 2
    %214 = load float, float* %213, align 4, !tbaa !67
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr3 = add i32 %sunkaddr, 55768
    %sunkaddr4 = inttoptr i32 %sunkaddr3 to float*
    %215 = load float, float* %sunkaddr4, align 4, !tbaa !83
    %216 = fadd float %214, %215
    %217 = fmul float %216, 2.048000e+03
    %218 = fmul float %dzdx.0, %208
    %219 = fadd float %218, %217
    %220 = fmul float %dzdy.0, %210
    %221 = fadd float %220, %219
    %222 = fptosi float %221 to i32
    %223 = add nsw i32 %222, 1024
    %224 = fmul float %dzdx.0, %201
    %225 = fadd float %dzdy.0, %224
    %226 = fmul float %225, 2.048000e+03
    %227 = fptosi float %226 to i32
    br label %228
  
  ; <label>:228                                     ; preds = %186, %.thread, %181
    %lines.122 = phi i32 [ %lines.121, %186 ], [ %lines.121, %.thread ], [ %99, %181 ]
    %setupRight.120 = phi i32 [ %setupRight.119, %186 ], [ %setupRight.119, %.thread ], [ %.14, %181 ]
    %eRight.118 = phi %struct.EdgeT.5* [ %eRight.117, %186 ], [ %eRight.117, %.thread ], [ %eTop, %181 ]
    %fError.1 = phi i32 [ %192, %186 ], [ %fError.053, %.thread ], [ %fError.053, %181 ]
    %fdError.1 = phi i32 [ %199, %186 ], [ %fdError.054, %.thread ], [ %fdError.054, %181 ]
    %fdxLeftEdge.1 = phi i32 [ %195, %186 ], [ %fdxLeftEdge.055, %.thread ], [ %fdxLeftEdge.055, %181 ]
    %fxLeftEdge.1 = phi i32 [ %193, %186 ], [ %fxLeftEdge.057, %.thread ], [ %fxLeftEdge.057, %181 ]
    %iy.1 = phi i32 [ %204, %186 ], [ %iy.058, %.thread ], [ %iy.058, %181 ]
    %fz.1 = phi i32 [ %223, %186 ], [ %fz.062, %.thread ], [ %fz.062, %181 ]
    %fdzOuter.1 = phi i32 [ %227, %186 ], [ %fdzOuter.063, %.thread ], [ %fdzOuter.063, %181 ]
    %229 = icmp eq i32 %setupRight.120, 0
    br i1 %229, label %240, label %230
  
  ; <label>:230                                     ; preds = %228
    %231 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eRight.118, i32 0, i32 8
    %232 = load i32, i32* %231, align 4, !tbaa !74
    %233 = icmp sgt i32 %232, 0
    br i1 %233, label %234, label %240
  
  ; <label>:234                                     ; preds = %230
    %235 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eRight.118, i32 0, i32 5
    %236 = load i32, i32* %235, align 4, !tbaa !78
    %237 = add nsw i32 %236, -1
    %238 = getelementptr inbounds %struct.EdgeT.5, %struct.EdgeT.5* %eRight.118, i32 0, i32 4
    %239 = load i32, i32* %238, align 4, !tbaa !75
    br label %240
  
  ; <label>:240                                     ; preds = %234, %230, %228
    %fdxRightEdge.1 = phi i32 [ %239, %234 ], [ %fdxRightEdge.052, %230 ], [ %fdxRightEdge.052, %228 ]
    %fxRightEdge.1 = phi i32 [ %237, %234 ], [ %fxRightEdge.056, %230 ], [ %fxRightEdge.056, %228 ]
    %241 = icmp sgt i32 %lines.122, 0
    br i1 %241, label %.lr.ph46, label %.loopexit
  
  .lr.ph46:                                         ; preds = %240, %261
    %lines.244 = phi i32 [ %264, %261 ], [ %lines.122, %240 ]
    %fz.243 = phi i32 [ %fz.3, %261 ], [ %fz.1, %240 ]
    %iy.241 = phi i32 [ %263, %261 ], [ %iy.1, %240 ]
    %fxLeftEdge.240 = phi i32 [ %265, %261 ], [ %fxLeftEdge.1, %240 ]
    %fxRightEdge.239 = phi i32 [ %266, %261 ], [ %fxRightEdge.1, %240 ]
    %fError.238 = phi i32 [ %fError.3, %261 ], [ %fError.1, %240 ]
    %242 = bitcast [1280 x i16]* %zspan to i8*
    %243 = ashr i32 %fxLeftEdge.240, 11
    %244 = ashr i32 %fxRightEdge.239, 11
    %245 = sub nsw i32 %244, %243
    call void @llvm.lifetime.start(i64 2560, i8* %242) #4
    %246 = icmp sgt i32 %245, 0
    br i1 %246, label %.lr.ph, label %261
  
  .lr.ph:                                           ; preds = %.lr.ph46, %.lr.ph
    %lsr.iv1 = phi [1280 x i16]* [ %250, %.lr.ph ], [ %zspan, %.lr.ph46 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %244, %.lr.ph46 ]
    %ffz.036 = phi i32 [ %249, %.lr.ph ], [ %fz.243, %.lr.ph46 ]
    %lsr.iv12 = bitcast [1280 x i16]* %lsr.iv1 to i16*
    %247 = lshr i32 %ffz.036, 11
    %248 = trunc i32 %247 to i16
    store i16 %248, i16* %lsr.iv12, align 2, !tbaa !88
    %249 = add nsw i32 %ffz.036, %176
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv1, i32 0, i32 1
    %250 = bitcast i16* %scevgep to [1280 x i16]*
    %exitcond = icmp eq i32 %243, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph
    %251 = bitcast [1280 x i16]* %zspan to i16*
    %sunkaddr5 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr6 = add i32 %sunkaddr5, 52416
    %sunkaddr7 = inttoptr i32 %sunkaddr6 to [4 x i32]**
    %252 = load [4 x i32]*, [4 x i32]** %sunkaddr7, align 4, !tbaa !91
    %253 = getelementptr inbounds [4 x i32], [4 x i32]* %252, i32 %pv, i32 0
    %254 = load i32, i32* %253, align 4, !tbaa !93
    %255 = getelementptr inbounds [4 x i32], [4 x i32]* %252, i32 %pv, i32 1
    %256 = load i32, i32* %255, align 4, !tbaa !93
    %257 = getelementptr inbounds [4 x i32], [4 x i32]* %252, i32 %pv, i32 2
    %258 = load i32, i32* %257, align 4, !tbaa !93
    %259 = getelementptr inbounds [4 x i32], [4 x i32]* %252, i32 %pv, i32 3
    %260 = load i32, i32* %259, align 4, !tbaa !93
    call void @gl_write_monocolor_span(%struct.gl_context* %ctx, i32 signext %245, i32 signext %243, i32 signext %iy.241, i16* nonnull %251, i32 signext %254, i32 signext %256, i32 signext %258, i32 signext %260, i32 signext 9) #4
    br label %261
  
  ; <label>:261                                     ; preds = %._crit_edge, %.lr.ph46
    %262 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 2560, i8* %262) #4
    %263 = add nsw i32 %iy.241, 1
    %264 = add nsw i32 %lines.244, -1
    %265 = add nsw i32 %fxLeftEdge.240, %fdxLeftEdge.1
    %266 = add nsw i32 %fxRightEdge.239, %fdxRightEdge.1
    %267 = add nsw i32 %fError.238, %fdError.1
    %268 = icmp sgt i32 %267, -1
    %269 = add nsw i32 %267, -2048
    %fError.3 = select i1 %268, i32 %269, i32 %267
    %270 = select i1 %268, i32 0, i32 %176
    %fdzOuter.1.pn = add nsw i32 %270, %fdzOuter.1
    %fz.3 = add nsw i32 %fdzOuter.1.pn, %fz.243
    %271 = icmp sgt i32 %lines.244, 1
    br i1 %271, label %.lr.ph46, label %.loopexit
  
  .loopexit:                                        ; preds = %261, %240
    %fError.4.ph = phi i32 [ %fError.1, %240 ], [ %fError.3, %261 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %240 ], [ %266, %261 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %240 ], [ %265, %261 ]
    %iy.3.ph = phi i32 [ %iy.1, %240 ], [ %263, %261 ]
    %fz.4.ph = phi i32 [ %fz.1, %240 ], [ %fz.3, %261 ]
    %272 = add nuw nsw i32 %subTriangle.061, 1
    %273 = icmp slt i32 %272, 2
    br i1 %273, label %177, label %.critedge
  
  .critedge:                                        ; preds = %179, %.loopexit, %57, %21
    %274 = bitcast %struct.EdgeT.5* %eBot to i8*
    %275 = bitcast %struct.EdgeT.5* %eTop to i8*
    %276 = bitcast %struct.EdgeT.5* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %274) #4
    call void @llvm.lifetime.end(i64 40, i8* %275) #4
    call void @llvm.lifetime.end(i64 40, i8* %276) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @flat_ci_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %eMaj = alloca %struct.EdgeT.6, align 4
    %eTop = alloca %struct.EdgeT.6, align 4
    %eBot = alloca %struct.EdgeT.6, align 4
    %zspan = alloca [1280 x i16], align 2
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast %struct.EdgeT.6* %eMaj to i8*
    call void @llvm.lifetime.start(i64 40, i8* %3) #4
    %4 = bitcast %struct.EdgeT.6* %eTop to i8*
    call void @llvm.lifetime.start(i64 40, i8* %4) #4
    %5 = bitcast %struct.EdgeT.6* %eBot to i8*
    call void @llvm.lifetime.start(i64 40, i8* %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 1
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 1
    %9 = load float, float* %8, align 4, !tbaa !67
    %10 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 1
    %11 = load float, float* %10, align 4, !tbaa !67
    %12 = fcmp ugt float %7, %9
    br i1 %12, label %17, label %13
  
  ; <label>:13                                      ; preds = %0
    %14 = fcmp ugt float %9, %11
    br i1 %14, label %15, label %21
  
  ; <label>:15                                      ; preds = %13
    %16 = fcmp ugt float %11, %7
    %v2.v0 = select i1 %16, i32 %v2, i32 %v0
    %v0.v2 = select i1 %16, i32 %v0, i32 %v2
    br label %21
  
  ; <label>:17                                      ; preds = %0
    %18 = fcmp ugt float %7, %11
    br i1 %18, label %19, label %21
  
  ; <label>:19                                      ; preds = %17
    %20 = fcmp ugt float %11, %9
    %v2.v1 = select i1 %20, i32 %v2, i32 %v1
    %v1.v2 = select i1 %20, i32 %v1, i32 %v2
    br label %21
  
  ; <label>:21                                      ; preds = %19, %17, %15, %13
    %vMax.0 = phi i32 [ %v2, %13 ], [ %v1, %15 ], [ %v2, %17 ], [ %v0, %19 ]
    %vMid.0 = phi i32 [ %v1, %13 ], [ %v2.v0, %15 ], [ %v0, %17 ], [ %v2.v1, %19 ]
    %vMin.0 = phi i32 [ %v0, %13 ], [ %v0.v2, %15 ], [ %v1, %17 ], [ %v1.v2, %19 ]
    %22 = bitcast %struct.EdgeT.6* %eMaj to i32*
    store i32 %vMin.0, i32* %22, align 4, !tbaa !68
    %23 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 1
    store i32 %vMax.0, i32* %23, align 4, !tbaa !70
    %24 = bitcast %struct.EdgeT.6* %eTop to i32*
    store i32 %vMid.0, i32* %24, align 4, !tbaa !68
    %25 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 1
    store i32 %vMax.0, i32* %25, align 4, !tbaa !70
    %26 = bitcast %struct.EdgeT.6* %eBot to i32*
    store i32 %vMin.0, i32* %26, align 4, !tbaa !68
    %27 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 1
    store i32 %vMid.0, i32* %27, align 4, !tbaa !70
    %28 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 0
    %29 = load float, float* %28, align 4, !tbaa !67
    %30 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 0
    %31 = load float, float* %30, align 4, !tbaa !67
    %32 = fsub float %29, %31
    %33 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 2
    store float %32, float* %33, align 4, !tbaa !71
    %34 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 1
    %35 = load float, float* %34, align 4, !tbaa !67
    %36 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 1
    %37 = load float, float* %36, align 4, !tbaa !67
    %38 = fsub float %35, %37
    %39 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 3
    store float %38, float* %39, align 4, !tbaa !72
    %40 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 0
    %41 = load float, float* %40, align 4, !tbaa !67
    %42 = fsub float %29, %41
    %43 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 2
    store float %42, float* %43, align 4, !tbaa !71
    %44 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 1
    %45 = load float, float* %44, align 4, !tbaa !67
    %46 = fsub float %35, %45
    %47 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 3
    store float %46, float* %47, align 4, !tbaa !72
    %48 = fsub float %41, %31
    %49 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 2
    store float %48, float* %49, align 4, !tbaa !71
    %50 = fsub float %45, %37
    %51 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 3
    store float %50, float* %51, align 4, !tbaa !72
    %52 = fmul float %50, %32
    %53 = fmul float %48, %38
    %54 = fsub float %52, %53
    %55 = fcmp ogt float %54, 0xBFA99999A0000000
    %56 = fcmp olt float %54, 0x3FA99999A0000000
    %or.cond = and i1 %55, %56
    br i1 %or.cond, label %.critedge, label %57
  
  ; <label>:57                                      ; preds = %21
    %58 = fdiv float 1.000000e+00, %54
    %59 = fadd float %31, 5.000000e-01
    %60 = fmul float %59, 2.048000e+03
    %61 = fptosi float %60 to i32
    %62 = fadd float %37, -5.000000e-01
    %63 = fmul float %62, 2.048000e+03
    %64 = fptosi float %63 to i32
    %65 = fadd float %41, 5.000000e-01
    %66 = fmul float %65, 2.048000e+03
    %67 = fptosi float %66 to i32
    %68 = fadd float %45, -5.000000e-01
    %69 = fmul float %68, 2.048000e+03
    %70 = fptosi float %69 to i32
    %71 = fadd float %35, -5.000000e-01
    %72 = fmul float %71, 2.048000e+03
    %73 = fptosi float %72 to i32
    %74 = add nsw i32 %64, 2047
    %75 = and i32 %74, -2048
    %76 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 6
    store i32 %75, i32* %76, align 4, !tbaa !73
    %77 = add nsw i32 %73, 2047
    %78 = sub nsw i32 %77, %75
    %79 = ashr i32 %78, 11
    %80 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 8
    store i32 %79, i32* %80, align 4, !tbaa !74
    %81 = icmp sgt i32 %79, 0
    br i1 %81, label %82, label %.critedge
  
  ; <label>:82                                      ; preds = %57
    %83 = fdiv float %32, %38
    %84 = fmul float %83, 2.048000e+03
    %85 = fptosi float %84 to i32
    %86 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 4
    store i32 %85, i32* %86, align 4, !tbaa !75
    %87 = sub nsw i32 %75, %64
    %88 = sitofp i32 %87 to float
    %89 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 7
    store float %88, float* %89, align 4, !tbaa !76
    %90 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 9
    store i32 %61, i32* %90, align 4, !tbaa !77
    %91 = fmul float %83, %88
    %92 = fptosi float %91 to i32
    %93 = add nsw i32 %92, %61
    %94 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eMaj, i32 0, i32 5
    store i32 %93, i32* %94, align 4, !tbaa !78
    %95 = add nsw i32 %70, 2047
    %96 = and i32 %95, -2048
    %97 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 6
    store i32 %96, i32* %97, align 4, !tbaa !73
    %98 = sub nsw i32 %77, %96
    %99 = ashr i32 %98, 11
    %100 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 8
    store i32 %99, i32* %100, align 4, !tbaa !74
    %101 = icmp sgt i32 %99, 0
    br i1 %101, label %102, label %115
  
  ; <label>:102                                     ; preds = %82
    %103 = fdiv float %42, %46
    %104 = fmul float %103, 2.048000e+03
    %105 = fptosi float %104 to i32
    %106 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 4
    store i32 %105, i32* %106, align 4, !tbaa !75
    %107 = sub nsw i32 %96, %70
    %108 = sitofp i32 %107 to float
    %109 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 7
    store float %108, float* %109, align 4, !tbaa !76
    %110 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 9
    store i32 %67, i32* %110, align 4, !tbaa !77
    %111 = fmul float %103, %108
    %112 = fptosi float %111 to i32
    %113 = add nsw i32 %112, %67
    %114 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eTop, i32 0, i32 5
    store i32 %113, i32* %114, align 4, !tbaa !78
    br label %115
  
  ; <label>:115                                     ; preds = %102, %82
    %116 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 6
    store i32 %75, i32* %116, align 4, !tbaa !73
    %117 = sub nsw i32 %95, %75
    %118 = ashr i32 %117, 11
    %119 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 8
    store i32 %118, i32* %119, align 4, !tbaa !74
    %120 = icmp sgt i32 %118, 0
    br i1 %120, label %121, label %132
  
  ; <label>:121                                     ; preds = %115
    %122 = fdiv float %48, %50
    %123 = fmul float %122, 2.048000e+03
    %124 = fptosi float %123 to i32
    %125 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 4
    store i32 %124, i32* %125, align 4, !tbaa !75
    %126 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 7
    store float %88, float* %126, align 4, !tbaa !76
    %127 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 9
    store i32 %61, i32* %127, align 4, !tbaa !77
    %128 = fmul float %122, %88
    %129 = fptosi float %128 to i32
    %130 = add nsw i32 %129, %61
    %131 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eBot, i32 0, i32 5
    store i32 %130, i32* %131, align 4, !tbaa !78
    br label %132
  
  ; <label>:132                                     ; preds = %121, %115
    %133 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 10
    %134 = load i32*, i32** %133, align 4, !tbaa !94
    %135 = getelementptr inbounds i32, i32* %134, i32 %pv
    %136 = load i32, i32* %135, align 4, !tbaa !93
    %137 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 21
    %138 = load i8, i8* %137, align 4, !tbaa !95
    %139 = icmp eq i8 %138, 0
    br i1 %139, label %140, label %143
  
  ; <label>:140                                     ; preds = %132
    %141 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 6, i32 4
    %142 = load void (%struct.gl_context*, i32)*, void (%struct.gl_context*, i32)** %141, align 4, !tbaa !97
    tail call void %142(%struct.gl_context* nonnull %ctx, i32 signext %136) #4
    br label %143
  
  ; <label>:143                                     ; preds = %140, %132
    %144 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMax.0, i32 2
    %145 = load float, float* %144, align 4, !tbaa !67
    %146 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMin.0, i32 2
    %147 = load float, float* %146, align 4, !tbaa !67
    %148 = fsub float %145, %147
    %149 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %vMid.0, i32 2
    %150 = load float, float* %149, align 4, !tbaa !67
    %151 = fsub float %150, %147
    %152 = fmul float %148, %50
    %153 = fmul float %151, %38
    %154 = fsub float %152, %153
    %155 = fmul float %58, %154
    %156 = fcmp ogt float %155, 6.553500e+04
    %157 = fcmp olt float %155, -6.553500e+04
    %or.cond13 = or i1 %156, %157
    br i1 %or.cond13, label %163, label %158
  
  ; <label>:158                                     ; preds = %143
    %159 = fmul float %151, %32
    %160 = fmul float %148, %48
    %161 = fsub float %159, %160
    %162 = fmul float %58, %161
    br label %163
  
  ; <label>:163                                     ; preds = %158, %143
    %dzdy.0 = phi float [ %162, %158 ], [ 0.000000e+00, %143 ]
    %dzdx.0 = phi float [ %155, %158 ], [ 0.000000e+00, %143 ]
    %164 = fcmp olt float %58, 0.000000e+00
    %165 = fmul float %dzdx.0, 2.048000e+03
    %166 = fptosi float %165 to i32
    %eMaj.eBot = select i1 %164, %struct.EdgeT.6* %eMaj, %struct.EdgeT.6* %eBot
    %eBot.eMaj = select i1 %164, %struct.EdgeT.6* %eBot, %struct.EdgeT.6* %eMaj
    %.14 = zext i1 %164 to i32
    br label %167
  
  ; <label>:167                                     ; preds = %.loopexit, %163
    %fdzOuter.063 = phi i32 [ undef, %163 ], [ %fdzOuter.1, %.loopexit ]
    %fz.062 = phi i32 [ undef, %163 ], [ %fz.4.ph, %.loopexit ]
    %subTriangle.061 = phi i32 [ 0, %163 ], [ %253, %.loopexit ]
    %iy.058 = phi i32 [ undef, %163 ], [ %iy.3.ph, %.loopexit ]
    %fxLeftEdge.057 = phi i32 [ undef, %163 ], [ %fxLeftEdge.3.ph, %.loopexit ]
    %fxRightEdge.056 = phi i32 [ undef, %163 ], [ %fxRightEdge.3.ph, %.loopexit ]
    %fdxLeftEdge.055 = phi i32 [ undef, %163 ], [ %fdxLeftEdge.1, %.loopexit ]
    %fdError.054 = phi i32 [ undef, %163 ], [ %fdError.1, %.loopexit ]
    %fError.053 = phi i32 [ undef, %163 ], [ %fError.4.ph, %.loopexit ]
    %fdxRightEdge.052 = phi i32 [ undef, %163 ], [ %fdxRightEdge.1, %.loopexit ]
    %168 = icmp eq i32 %subTriangle.061, 0
    br i1 %168, label %.thread, label %169
  
  ; <label>:169                                     ; preds = %167
    %170 = icmp eq i32 %99, 0
    br i1 %170, label %.critedge, label %171
  
  ; <label>:171                                     ; preds = %169
    %172 = fcmp olt float %58, 0.000000e+00
    br i1 %172, label %218, label %.thread
  
  .thread:                                          ; preds = %171, %167
    %lines.121 = phi i32 [ %99, %171 ], [ %118, %167 ]
    %setupRight.119 = phi i32 [ %.14, %171 ], [ 1, %167 ]
    %eRight.117 = phi %struct.EdgeT.6* [ %eMaj, %171 ], [ %eBot.eMaj, %167 ]
    %eLeft.116 = phi %struct.EdgeT.6* [ %eTop, %171 ], [ %eMaj.eBot, %167 ]
    %173 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 8
    %174 = load i32, i32* %173, align 4, !tbaa !74
    %175 = icmp sgt i32 %174, 0
    br i1 %175, label %176, label %218
  
  ; <label>:176                                     ; preds = %.thread
    %177 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 5
    %178 = load i32, i32* %177, align 4, !tbaa !78
    %179 = add nsw i32 %178, 2047
    %180 = and i32 %179, -2048
    %181 = sub i32 -2048, %178
    %182 = add i32 %181, %180
    %183 = add nsw i32 %178, -1
    %184 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 4
    %185 = load i32, i32* %184, align 4, !tbaa !75
    %186 = add nsw i32 %185, -1
    %187 = and i32 %186, -2048
    %188 = sub i32 2048, %185
    %189 = add i32 %188, %187
    %190 = ashr i32 %186, 11
    %191 = sitofp i32 %190 to float
    %192 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 6
    %193 = load i32, i32* %192, align 4, !tbaa !73
    %194 = ashr i32 %193, 11
    %195 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 9
    %196 = load i32, i32* %195, align 4, !tbaa !77
    %197 = sub nsw i32 %180, %196
    %198 = sitofp i32 %197 to float
    %199 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eLeft.116, i32 0, i32 7
    %200 = load float, float* %199, align 4, !tbaa !76
    %201 = bitcast %struct.EdgeT.6* %eLeft.116 to i32*
    %202 = load i32, i32* %201, align 4, !tbaa !68
    %203 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %202, i32 2
    %204 = load float, float* %203, align 4, !tbaa !67
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr3 = add i32 %sunkaddr, 55768
    %sunkaddr4 = inttoptr i32 %sunkaddr3 to float*
    %205 = load float, float* %sunkaddr4, align 4, !tbaa !83
    %206 = fadd float %204, %205
    %207 = fmul float %206, 2.048000e+03
    %208 = fmul float %dzdx.0, %198
    %209 = fadd float %208, %207
    %210 = fmul float %dzdy.0, %200
    %211 = fadd float %210, %209
    %212 = fptosi float %211 to i32
    %213 = add nsw i32 %212, 1024
    %214 = fmul float %dzdx.0, %191
    %215 = fadd float %dzdy.0, %214
    %216 = fmul float %215, 2.048000e+03
    %217 = fptosi float %216 to i32
    br label %218
  
  ; <label>:218                                     ; preds = %176, %.thread, %171
    %lines.122 = phi i32 [ %lines.121, %176 ], [ %lines.121, %.thread ], [ %99, %171 ]
    %setupRight.120 = phi i32 [ %setupRight.119, %176 ], [ %setupRight.119, %.thread ], [ %.14, %171 ]
    %eRight.118 = phi %struct.EdgeT.6* [ %eRight.117, %176 ], [ %eRight.117, %.thread ], [ %eTop, %171 ]
    %fError.1 = phi i32 [ %182, %176 ], [ %fError.053, %.thread ], [ %fError.053, %171 ]
    %fdError.1 = phi i32 [ %189, %176 ], [ %fdError.054, %.thread ], [ %fdError.054, %171 ]
    %fdxLeftEdge.1 = phi i32 [ %185, %176 ], [ %fdxLeftEdge.055, %.thread ], [ %fdxLeftEdge.055, %171 ]
    %fxLeftEdge.1 = phi i32 [ %183, %176 ], [ %fxLeftEdge.057, %.thread ], [ %fxLeftEdge.057, %171 ]
    %iy.1 = phi i32 [ %194, %176 ], [ %iy.058, %.thread ], [ %iy.058, %171 ]
    %fz.1 = phi i32 [ %213, %176 ], [ %fz.062, %.thread ], [ %fz.062, %171 ]
    %fdzOuter.1 = phi i32 [ %217, %176 ], [ %fdzOuter.063, %.thread ], [ %fdzOuter.063, %171 ]
    %219 = icmp eq i32 %setupRight.120, 0
    br i1 %219, label %230, label %220
  
  ; <label>:220                                     ; preds = %218
    %221 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eRight.118, i32 0, i32 8
    %222 = load i32, i32* %221, align 4, !tbaa !74
    %223 = icmp sgt i32 %222, 0
    br i1 %223, label %224, label %230
  
  ; <label>:224                                     ; preds = %220
    %225 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eRight.118, i32 0, i32 5
    %226 = load i32, i32* %225, align 4, !tbaa !78
    %227 = add nsw i32 %226, -1
    %228 = getelementptr inbounds %struct.EdgeT.6, %struct.EdgeT.6* %eRight.118, i32 0, i32 4
    %229 = load i32, i32* %228, align 4, !tbaa !75
    br label %230
  
  ; <label>:230                                     ; preds = %224, %220, %218
    %fdxRightEdge.1 = phi i32 [ %229, %224 ], [ %fdxRightEdge.052, %220 ], [ %fdxRightEdge.052, %218 ]
    %fxRightEdge.1 = phi i32 [ %227, %224 ], [ %fxRightEdge.056, %220 ], [ %fxRightEdge.056, %218 ]
    %231 = icmp sgt i32 %lines.122, 0
    br i1 %231, label %.lr.ph46, label %.loopexit
  
  .lr.ph46:                                         ; preds = %230, %242
    %lines.244 = phi i32 [ %245, %242 ], [ %lines.122, %230 ]
    %fz.243 = phi i32 [ %fz.3, %242 ], [ %fz.1, %230 ]
    %iy.241 = phi i32 [ %244, %242 ], [ %iy.1, %230 ]
    %fxLeftEdge.240 = phi i32 [ %246, %242 ], [ %fxLeftEdge.1, %230 ]
    %fxRightEdge.239 = phi i32 [ %247, %242 ], [ %fxRightEdge.1, %230 ]
    %fError.238 = phi i32 [ %fError.3, %242 ], [ %fError.1, %230 ]
    %232 = bitcast [1280 x i16]* %zspan to i8*
    %233 = ashr i32 %fxLeftEdge.240, 11
    %234 = ashr i32 %fxRightEdge.239, 11
    %235 = sub nsw i32 %234, %233
    call void @llvm.lifetime.start(i64 2560, i8* %232) #4
    %236 = icmp sgt i32 %235, 0
    br i1 %236, label %.lr.ph, label %242
  
  .lr.ph:                                           ; preds = %.lr.ph46, %.lr.ph
    %lsr.iv1 = phi [1280 x i16]* [ %240, %.lr.ph ], [ %zspan, %.lr.ph46 ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %234, %.lr.ph46 ]
    %ffz.036 = phi i32 [ %239, %.lr.ph ], [ %fz.243, %.lr.ph46 ]
    %lsr.iv12 = bitcast [1280 x i16]* %lsr.iv1 to i16*
    %237 = lshr i32 %ffz.036, 11
    %238 = trunc i32 %237 to i16
    store i16 %238, i16* %lsr.iv12, align 2, !tbaa !88
    %239 = add nsw i32 %ffz.036, %166
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep = getelementptr [1280 x i16], [1280 x i16]* %lsr.iv1, i32 0, i32 1
    %240 = bitcast i16* %scevgep to [1280 x i16]*
    %exitcond = icmp eq i32 %233, %lsr.iv.next
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph
    %241 = bitcast [1280 x i16]* %zspan to i16*
    call void @gl_write_monoindex_span(%struct.gl_context* %ctx, i32 signext %235, i32 signext %233, i32 signext %iy.241, i16* nonnull %241, i32 signext %136, i32 signext 9) #4
    br label %242
  
  ; <label>:242                                     ; preds = %._crit_edge, %.lr.ph46
    %243 = bitcast [1280 x i16]* %zspan to i8*
    call void @llvm.lifetime.end(i64 2560, i8* %243) #4
    %244 = add nsw i32 %iy.241, 1
    %245 = add nsw i32 %lines.244, -1
    %246 = add nsw i32 %fxLeftEdge.240, %fdxLeftEdge.1
    %247 = add nsw i32 %fxRightEdge.239, %fdxRightEdge.1
    %248 = add nsw i32 %fError.238, %fdError.1
    %249 = icmp sgt i32 %248, -1
    %250 = add nsw i32 %248, -2048
    %fError.3 = select i1 %249, i32 %250, i32 %248
    %251 = select i1 %249, i32 0, i32 %166
    %fdzOuter.1.pn = add nsw i32 %251, %fdzOuter.1
    %fz.3 = add nsw i32 %fdzOuter.1.pn, %fz.243
    %252 = icmp sgt i32 %lines.244, 1
    br i1 %252, label %.lr.ph46, label %.loopexit
  
  .loopexit:                                        ; preds = %242, %230
    %fError.4.ph = phi i32 [ %fError.1, %230 ], [ %fError.3, %242 ]
    %fxRightEdge.3.ph = phi i32 [ %fxRightEdge.1, %230 ], [ %247, %242 ]
    %fxLeftEdge.3.ph = phi i32 [ %fxLeftEdge.1, %230 ], [ %246, %242 ]
    %iy.3.ph = phi i32 [ %iy.1, %230 ], [ %244, %242 ]
    %fz.4.ph = phi i32 [ %fz.1, %230 ], [ %fz.3, %242 ]
    %253 = add nuw nsw i32 %subTriangle.061, 1
    %254 = icmp slt i32 %253, 2
    br i1 %254, label %167, label %.critedge
  
  .critedge:                                        ; preds = %169, %.loopexit, %57, %21
    %255 = bitcast %struct.EdgeT.6* %eBot to i8*
    %256 = bitcast %struct.EdgeT.6* %eTop to i8*
    %257 = bitcast %struct.EdgeT.6* %eMaj to i8*
    call void @llvm.lifetime.end(i64 40, i8* %255) #4
    call void @llvm.lifetime.end(i64 40, i8* %256) #4
    call void @llvm.lifetime.end(i64 40, i8* %257) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @feedback_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %color = alloca [4 x float], align 4
    %tc = alloca [4 x float], align 4
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = bitcast [4 x float]* %color to i8*
    call void @llvm.lifetime.start(i64 16, i8* %3) #4
    %4 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 4
    %5 = load %struct.gl_visual*, %struct.gl_visual** %4, align 4, !tbaa !1
    %6 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %5, i32 0, i32 7
    %7 = load float, float* %6, align 4, !tbaa !98
    %8 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %5, i32 0, i32 8
    %9 = load float, float* %8, align 4, !tbaa !99
    %10 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %5, i32 0, i32 9
    %11 = load float, float* %10, align 4, !tbaa !100
    %12 = getelementptr inbounds %struct.gl_visual, %struct.gl_visual* %5, i32 0, i32 10
    %13 = load float, float* %12, align 4, !tbaa !101
    %14 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 50, i32 4
    %15 = load i32, i32* %14, align 4, !tbaa !102
    %16 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 50, i32 3
    %17 = load i32, i32* %16, align 4, !tbaa !103
    %18 = icmp ult i32 %15, %17
    br i1 %18, label %19, label %23
  
  ; <label>:19                                      ; preds = %0
    %20 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 50, i32 2
    %21 = load float*, float** %20, align 4, !tbaa !104
    %22 = getelementptr inbounds float, float* %21, i32 %15
    store float 1.795000e+03, float* %22, align 4, !tbaa !67
    br label %23
  
  ; <label>:23                                      ; preds = %19, %0
    %24 = add i32 %15, 1
    %sunkaddr = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr1 = add i32 %sunkaddr, 55440
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 %24, i32* %sunkaddr2, align 4, !tbaa !102
    %25 = icmp ult i32 %24, %17
    br i1 %25, label %26, label %30
  
  ; <label>:26                                      ; preds = %23
    %27 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 50, i32 2
    %28 = load float*, float** %27, align 4, !tbaa !104
    %29 = getelementptr inbounds float, float* %28, i32 %24
    store float 3.000000e+00, float* %29, align 4, !tbaa !67
    br label %30
  
  ; <label>:30                                      ; preds = %26, %23
    %31 = add i32 %15, 2
    %sunkaddr3 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr4 = add i32 %sunkaddr3, 55440
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    store i32 %31, i32* %sunkaddr5, align 4, !tbaa !102
    %32 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 32, i32 4
    %33 = load i32, i32* %32, align 4, !tbaa !65
    %34 = icmp eq i32 %33, 7424
    br i1 %34, label %35, label %..preheader_crit_edge
  
  ..preheader_crit_edge:                            ; preds = %30
    %.pre26 = bitcast [4 x float]* %color to float*
    br label %.preheader
  
  ; <label>:35                                      ; preds = %30
    %sunkaddr7 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr8 = add i32 %sunkaddr7, 52416
    %sunkaddr9 = inttoptr i32 %sunkaddr8 to [4 x i32]**
    %36 = load [4 x i32]*, [4 x i32]** %sunkaddr9, align 4, !tbaa !91
    %37 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 %pv, i32 0
    %38 = load i32, i32* %37, align 4, !tbaa !93
    %39 = sitofp i32 %38 to float
    %40 = fmul float %7, %39
    %41 = bitcast [4 x float]* %color to float*
    store float %40, float* %41, align 4, !tbaa !67
    %42 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 %pv, i32 1
    %43 = load i32, i32* %42, align 4, !tbaa !93
    %44 = sitofp i32 %43 to float
    %45 = fmul float %9, %44
    %46 = getelementptr inbounds [4 x float], [4 x float]* %color, i32 0, i32 1
    store float %45, float* %46, align 4, !tbaa !67
    %47 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 %pv, i32 2
    %48 = load i32, i32* %47, align 4, !tbaa !93
    %49 = sitofp i32 %48 to float
    %50 = fmul float %11, %49
    %51 = getelementptr inbounds [4 x float], [4 x float]* %color, i32 0, i32 2
    store float %50, float* %51, align 4, !tbaa !67
    %52 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 %pv, i32 3
    %53 = load i32, i32* %52, align 4, !tbaa !93
    %54 = sitofp i32 %53 to float
    %55 = fmul float %13, %54
    %56 = getelementptr inbounds [4 x float], [4 x float]* %color, i32 0, i32 3
    store float %55, float* %56, align 4, !tbaa !67
    br label %.preheader
  
  .preheader:                                       ; preds = %35, %..preheader_crit_edge
    %.pre-phi3 = phi float* [ %.pre26, %..preheader_crit_edge ], [ %41, %35 ]
    br label %57
  
  ; <label>:57                                      ; preds = %95, %.preheader
    %i.01 = phi i32 [ 0, %.preheader ], [ %116, %95 ]
    %58 = bitcast [4 x float]* %tc to i8*
    call void @llvm.lifetime.start(i64 16, i8* %58) #4
    switch i32 %i.01, label %60 [
      i32 0, label %61
      i32 1, label %59
    ]
  
  ; <label>:59                                      ; preds = %57
    br label %61
  
  ; <label>:60                                      ; preds = %57
    br label %61
  
  ; <label>:61                                      ; preds = %60, %59, %57
    %v.0 = phi i32 [ %v1, %59 ], [ %v2, %60 ], [ %v0, %57 ]
    %62 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v.0, i32 0
    %63 = load float, float* %62, align 4, !tbaa !67
    %64 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v.0, i32 1
    %65 = load float, float* %64, align 4, !tbaa !67
    %66 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v.0, i32 2
    %67 = load float, float* %66, align 4, !tbaa !67
    %68 = fdiv float %67, 6.553500e+04
    %69 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 2, i32 %v.0, i32 3
    %70 = load float, float* %69, align 4, !tbaa !67
    %sunkaddr10 = ptrtoint %struct.gl_context* %ctx to i32
    %sunkaddr11 = add i32 %sunkaddr10, 43728
    %sunkaddr12 = inttoptr i32 %sunkaddr11 to i32*
    %71 = load i32, i32* %sunkaddr12, align 4, !tbaa !65
    %72 = icmp eq i32 %71, 7425
    br i1 %72, label %73, label %95
  
  ; <label>:73                                      ; preds = %61
    %sunkaddr13 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr14 = add i32 %sunkaddr13, 52416
    %sunkaddr15 = inttoptr i32 %sunkaddr14 to [4 x i32]**
    %74 = load [4 x i32]*, [4 x i32]** %sunkaddr15, align 4, !tbaa !91
    %75 = getelementptr inbounds [4 x i32], [4 x i32]* %74, i32 %v.0, i32 0
    %76 = load i32, i32* %75, align 4, !tbaa !93
    %77 = sitofp i32 %76 to float
    %78 = fmul float %77, 0x3F40000000000000
    %79 = fmul float %7, %78
    %sunkaddr16 = ptrtoint [4 x float]* %color to i32
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to float*
    store float %79, float* %sunkaddr17, align 4, !tbaa !67
    %80 = getelementptr inbounds [4 x i32], [4 x i32]* %74, i32 %v.0, i32 1
    %81 = load i32, i32* %80, align 4, !tbaa !93
    %82 = sitofp i32 %81 to float
    %83 = fmul float %82, 0x3F40000000000000
    %84 = fmul float %9, %83
    %sunkaddr18 = ptrtoint [4 x float]* %color to i32
    %sunkaddr19 = add i32 %sunkaddr18, 4
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to float*
    store float %84, float* %sunkaddr20, align 4, !tbaa !67
    %85 = getelementptr inbounds [4 x i32], [4 x i32]* %74, i32 %v.0, i32 2
    %86 = load i32, i32* %85, align 4, !tbaa !93
    %87 = sitofp i32 %86 to float
    %88 = fmul float %87, 0x3F40000000000000
    %89 = fmul float %11, %88
    %sunkaddr21 = ptrtoint [4 x float]* %color to i32
    %sunkaddr22 = add i32 %sunkaddr21, 8
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to float*
    store float %89, float* %sunkaddr23, align 4, !tbaa !67
    %90 = getelementptr inbounds [4 x i32], [4 x i32]* %74, i32 %v.0, i32 3
    %91 = load i32, i32* %90, align 4, !tbaa !93
    %92 = sitofp i32 %91 to float
    %93 = fmul float %92, 0x3F40000000000000
    %94 = fmul float %13, %93
    %sunkaddr24 = ptrtoint [4 x float]* %color to i32
    %sunkaddr25 = add i32 %sunkaddr24, 12
    %sunkaddr26 = inttoptr i32 %sunkaddr25 to float*
    store float %94, float* %sunkaddr26, align 4, !tbaa !67
    br label %95
  
  ; <label>:95                                      ; preds = %73, %61
    %96 = bitcast [4 x float]* %tc to float*
    %97 = bitcast [4 x float]* %tc to i8*
    %98 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %v.0, i32 3
    %99 = load float, float* %98, align 4, !tbaa !67
    %100 = fdiv float 1.000000e+00, %99
    %101 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %v.0, i32 0
    %102 = load float, float* %101, align 4, !tbaa !67
    %103 = fmul float %102, %100
    store float %103, float* %96, align 4, !tbaa !67
    %104 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %v.0, i32 1
    %105 = load float, float* %104, align 4, !tbaa !67
    %106 = fmul float %100, %105
    %sunkaddr27 = ptrtoint [4 x float]* %tc to i32
    %sunkaddr28 = add i32 %sunkaddr27, 4
    %sunkaddr29 = inttoptr i32 %sunkaddr28 to float*
    store float %106, float* %sunkaddr29, align 4, !tbaa !67
    %107 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 12, i32 %v.0, i32 2
    %108 = load float, float* %107, align 4, !tbaa !67
    %109 = fmul float %100, %108
    %sunkaddr30 = ptrtoint [4 x float]* %tc to i32
    %sunkaddr31 = add i32 %sunkaddr30, 8
    %sunkaddr32 = inttoptr i32 %sunkaddr31 to float*
    store float %109, float* %sunkaddr32, align 4, !tbaa !67
    %110 = bitcast float* %98 to i32*
    %111 = load i32, i32* %110, align 4, !tbaa !67
    %sunkaddr33 = ptrtoint [4 x float]* %tc to i32
    %sunkaddr34 = add i32 %sunkaddr33, 12
    %sunkaddr35 = inttoptr i32 %sunkaddr34 to i32*
    store i32 %111, i32* %sunkaddr35, align 4, !tbaa !67
    %sunkaddr36 = ptrtoint %struct.vertex_buffer* %2 to i32
    %sunkaddr37 = add i32 %sunkaddr36, 56452
    %sunkaddr38 = inttoptr i32 %sunkaddr37 to i32**
    %112 = load i32*, i32** %sunkaddr38, align 4, !tbaa !94
    %113 = getelementptr inbounds i32, i32* %112, i32 %v.0
    %114 = load i32, i32* %113, align 4, !tbaa !93
    %115 = uitofp i32 %114 to float
    call void @gl_feedback_vertex(%struct.gl_context* nonnull %ctx, float %63, float %65, float %68, float %70, float* %.pre-phi3, float %115, float* %96) #4
    call void @llvm.lifetime.end(i64 16, i8* %97) #4
    %116 = add nuw nsw i32 %i.01, 1
    %exitcond = icmp eq i32 %116, 3
    br i1 %exitcond, label %117, label %57
  
  ; <label>:117                                     ; preds = %95
    %118 = bitcast [4 x float]* %color to i8*
    call void @llvm.lifetime.end(i64 16, i8* %118) #4
    ret void
  }
  
  ; Function Attrs: nounwind
  define internal void @select_triangle(%struct.gl_context* %ctx, i32 signext %v0, i32 signext %v1, i32 signext %v2, i32 signext %pv) #0 {
    %1 = getelementptr inbounds %struct.gl_context, %struct.gl_context* %ctx, i32 0, i32 74
    %2 = load %struct.vertex_buffer*, %struct.vertex_buffer** %1, align 4, !tbaa !66
    %3 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v0, i32 2
    %4 = load float, float* %3, align 4, !tbaa !67
    %5 = fdiv float %4, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %5) #4
    %6 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v1, i32 2
    %7 = load float, float* %6, align 4, !tbaa !67
    %8 = fdiv float %7, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %8) #4
    %9 = getelementptr inbounds %struct.vertex_buffer, %struct.vertex_buffer* %2, i32 0, i32 3, i32 %v2, i32 2
    %10 = load float, float* %9, align 4, !tbaa !67
    %11 = fdiv float %10, 6.553500e+04
    tail call void @gl_update_hitflag(%struct.gl_context* %ctx, float %11) #4
    ret void
  }
  
  declare void @gl_write_texture_span(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i16*, float*, float*, float*, float*, i8*, i8*, i8*, i8*, i32 signext) #3
  
  ; Function Attrs: nounwind
  declare double @log(double) #0
  
  declare void @gl_write_color_span(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i16*, i8*, i8*, i8*, i8*, i32 signext) #3
  
  declare void @gl_write_index_span(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i16*, i32*, i32 signext) #3
  
  declare void @gl_write_monocolor_span(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i16*, i32 signext, i32 signext, i32 signext, i32 signext, i32 signext) #3
  
  declare void @gl_write_monoindex_span(%struct.gl_context*, i32 signext, i32 signext, i32 signext, i16*, i32 signext, i32 signext) #3
  
  declare void @gl_feedback_vertex(%struct.gl_context*, float, float, float, float, float*, float, float*) #3
  
  declare void @gl_update_hitflag(%struct.gl_context*, float) #3
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #2 = { norecurse nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !3, i64 2020}
  !2 = !{!"gl_context", !3, i64 0, !6, i64 4, !6, i64 676, !6, i64 1348, !3, i64 2020, !3, i64 2024, !7, i64 2028, !3, i64 2208, !4, i64 2212, !4, i64 2276, !4, i64 2340, !8, i64 2344, !4, i64 2348, !4, i64 4396, !8, i64 4460, !4, i64 4464, !4, i64 6512, !4, i64 6576, !8, i64 6580, !4, i64 6584, !8, i64 7224, !4, i64 7228, !4, i64 7229, !8, i64 7232, !4, i64 7236, !9, i64 7300, !10, i64 7316, !12, i64 7404, !13, i64 7512, !14, i64 7524, !15, i64 7580, !16, i64 7620, !17, i64 7640, !19, i64 43772, !21, i64 43784, !22, i64 43788, !23, i64 54132, !24, i64 54140, !4, i64 54180, !25, i64 54308, !26, i64 54328, !27, i64 54352, !28, i64 54548, !29, i64 54656, !8, i64 54704, !4, i64 54708, !30, i64 54772, !31, i64 54900, !31, i64 54928, !32, i64 54956, !35, i64 55424, !36, i64 55444, !4, i64 55732, !8, i64 55736, !4, i64 55740, !4, i64 55744, !8, i64 55748, !8, i64 55752, !8, i64 55756, !8, i64 55760, !4, i64 55764, !11, i64 55768, !11, i64 55772, !11, i64 55776, !4, i64 55780, !4, i64 55781, !4, i64 55782, !4, i64 55783, !8, i64 55784, !3, i64 55788, !3, i64 55792, !3, i64 55796, !3, i64 55800, !3, i64 55804, !3, i64 55808, !3, i64 55812, !4, i64 55816}
  !3 = !{!"any pointer", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}
  !6 = !{!"api_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192, !3, i64 196, !3, i64 200, !3, i64 204, !3, i64 208, !3, i64 212, !3, i64 216, !3, i64 220, !3, i64 224, !3, i64 228, !3, i64 232, !3, i64 236, !3, i64 240, !3, i64 244, !3, i64 248, !3, i64 252, !3, i64 256, !3, i64 260, !3, i64 264, !3, i64 268, !3, i64 272, !3, i64 276, !3, i64 280, !3, i64 284, !3, i64 288, !3, i64 292, !3, i64 296, !3, i64 300, !3, i64 304, !3, i64 308, !3, i64 312, !3, i64 316, !3, i64 320, !3, i64 324, !3, i64 328, !3, i64 332, !3, i64 336, !3, i64 340, !3, i64 344, !3, i64 348, !3, i64 352, !3, i64 356, !3, i64 360, !3, i64 364, !3, i64 368, !3, i64 372, !3, i64 376, !3, i64 380, !3, i64 384, !3, i64 388, !3, i64 392, !3, i64 396, !3, i64 400, !3, i64 404, !3, i64 408, !3, i64 412, !3, i64 416, !3, i64 420, !3, i64 424, !3, i64 428, !3, i64 432, !3, i64 436, !3, i64 440, !3, i64 444, !3, i64 448, !3, i64 452, !3, i64 456, !3, i64 460, !3, i64 464, !3, i64 468, !3, i64 472, !3, i64 476, !3, i64 480, !3, i64 484, !3, i64 488, !3, i64 492, !3, i64 496, !3, i64 500, !3, i64 504, !3, i64 508, !3, i64 512, !3, i64 516, !3, i64 520, !3, i64 524, !3, i64 528, !3, i64 532, !3, i64 536, !3, i64 540, !3, i64 544, !3, i64 548, !3, i64 552, !3, i64 556, !3, i64 560, !3, i64 564, !3, i64 568, !3, i64 572, !3, i64 576, !3, i64 580, !3, i64 584, !3, i64 588, !3, i64 592, !3, i64 596, !3, i64 600, !3, i64 604, !3, i64 608, !3, i64 612, !3, i64 616, !3, i64 620, !3, i64 624, !3, i64 628, !3, i64 632, !3, i64 636, !3, i64 640, !3, i64 644, !3, i64 648, !3, i64 652, !3, i64 656, !3, i64 660, !3, i64 664, !3, i64 668}
  !7 = !{!"dd_function_table", !3, i64 0, !3, i64 4, !3, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !3, i64 36, !3, i64 40, !3, i64 44, !3, i64 48, !3, i64 52, !3, i64 56, !3, i64 60, !3, i64 64, !3, i64 68, !3, i64 72, !3, i64 76, !3, i64 80, !3, i64 84, !3, i64 88, !3, i64 92, !3, i64 96, !3, i64 100, !3, i64 104, !3, i64 108, !3, i64 112, !3, i64 116, !3, i64 120, !3, i64 124, !3, i64 128, !3, i64 132, !3, i64 136, !3, i64 140, !3, i64 144, !3, i64 148, !3, i64 152, !3, i64 156, !3, i64 160, !3, i64 164, !3, i64 168, !3, i64 172, !3, i64 176}
  !8 = !{!"int", !4, i64 0}
  !9 = !{!"gl_accum_attrib", !4, i64 0}
  !10 = !{!"gl_colorbuffer_attrib", !8, i64 0, !4, i64 4, !8, i64 20, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !11, i64 44, !4, i64 48, !4, i64 49, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 80, !4, i64 84, !4, i64 85, !4, i64 86, !4, i64 87}
  !11 = !{!"float", !4, i64 0}
  !12 = !{!"gl_current_attrib", !4, i64 0, !8, i64 16, !4, i64 20, !4, i64 32, !4, i64 48, !11, i64 64, !4, i64 68, !8, i64 84, !4, i64 88, !4, i64 104, !4, i64 105}
  !13 = !{!"gl_depthbuffer_attrib", !4, i64 0, !11, i64 4, !4, i64 8, !4, i64 9}
  !14 = !{!"gl_eval_attrib", !4, i64 0, !4, i64 1, !4, i64 2, !4, i64 3, !4, i64 4, !4, i64 5, !4, i64 6, !4, i64 7, !4, i64 8, !4, i64 9, !4, i64 10, !4, i64 11, !4, i64 12, !4, i64 13, !4, i64 14, !4, i64 15, !4, i64 16, !4, i64 17, !4, i64 18, !8, i64 20, !11, i64 24, !11, i64 28, !8, i64 32, !8, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52}
  !15 = !{!"gl_fog_attrib", !4, i64 0, !4, i64 4, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !4, i64 36}
  !16 = !{!"gl_hint_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16}
  !17 = !{!"gl_light_attrib", !4, i64 0, !18, i64 34304, !4, i64 34324, !4, i64 36084, !4, i64 36088, !4, i64 36092, !4, i64 36096, !8, i64 36100, !4, i64 36104, !3, i64 36108, !4, i64 36112, !4, i64 36116}
  !18 = !{!"gl_lightmodel", !4, i64 0, !4, i64 16, !4, i64 17}
  !19 = !{!"gl_line_attrib", !4, i64 0, !4, i64 1, !20, i64 2, !8, i64 4, !11, i64 8}
  !20 = !{!"short", !4, i64 0}
  !21 = !{!"gl_list_attrib", !8, i64 0}
  !22 = !{!"gl_pixel_attrib", !4, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !8, i64 44, !8, i64 48, !4, i64 52, !4, i64 53, !11, i64 56, !11, i64 60, !8, i64 64, !8, i64 68, !8, i64 72, !8, i64 76, !8, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !8, i64 96, !8, i64 100, !4, i64 104, !4, i64 1128, !4, i64 2152, !4, i64 3176, !4, i64 4200, !4, i64 5224, !4, i64 6248, !4, i64 7272, !4, i64 8296, !4, i64 9320}
  !23 = !{!"gl_point_attrib", !4, i64 0, !11, i64 4}
  !24 = !{!"gl_polygon_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 13, !4, i64 16, !8, i64 20, !4, i64 24, !4, i64 25, !11, i64 28, !11, i64 32, !4, i64 36, !4, i64 37, !4, i64 38, !4, i64 39}
  !25 = !{!"gl_scissor_attrib", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16}
  !26 = !{!"gl_stencil_attrib", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 21, !4, i64 22, !4, i64 23}
  !27 = !{!"gl_texture_attrib", !8, i64 0, !4, i64 4, !4, i64 8, !8, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 60, !4, i64 76, !4, i64 92, !4, i64 108, !4, i64 124, !4, i64 140, !4, i64 156, !3, i64 172, !3, i64 176, !3, i64 180, !3, i64 184, !3, i64 188, !3, i64 192}
  !28 = !{!"gl_transform_attrib", !4, i64 0, !4, i64 4, !4, i64 100, !4, i64 106, !4, i64 107}
  !29 = !{!"gl_viewport_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44}
  !30 = !{!"gl_array_attrib", !8, i64 0, !4, i64 4, !8, i64 8, !8, i64 12, !3, i64 16, !4, i64 20, !4, i64 24, !8, i64 28, !8, i64 32, !3, i64 36, !4, i64 40, !8, i64 44, !4, i64 48, !8, i64 52, !8, i64 56, !3, i64 60, !4, i64 64, !4, i64 68, !8, i64 72, !8, i64 76, !3, i64 80, !4, i64 84, !8, i64 88, !4, i64 92, !8, i64 96, !8, i64 100, !3, i64 104, !4, i64 108, !8, i64 112, !8, i64 116, !3, i64 120, !4, i64 124}
  !31 = !{!"gl_pixelstore_attrib", !8, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !4, i64 24, !4, i64 25}
  !32 = !{!"gl_evaluators", !33, i64 0, !33, i64 20, !33, i64 40, !33, i64 60, !33, i64 80, !33, i64 100, !33, i64 120, !33, i64 140, !33, i64 160, !34, i64 180, !34, i64 212, !34, i64 244, !34, i64 276, !34, i64 308, !34, i64 340, !34, i64 372, !34, i64 404, !34, i64 436}
  !33 = !{!"gl_1d_map", !8, i64 0, !11, i64 4, !11, i64 8, !3, i64 12, !4, i64 16}
  !34 = !{!"gl_2d_map", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !3, i64 24, !4, i64 28}
  !35 = !{!"gl_feedback", !4, i64 0, !8, i64 4, !3, i64 8, !8, i64 12, !8, i64 16}
  !36 = !{!"gl_selection", !3, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !4, i64 20, !4, i64 276, !11, i64 280, !11, i64 284}
  !37 = !{!38, !4, i64 0}
  !38 = !{!"gl_visual", !4, i64 0, !4, i64 1, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !4, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !8, i64 40, !8, i64 44, !8, i64 48, !8, i64 52, !4, i64 56, !4, i64 57}
  !39 = !{!2, !4, i64 55740}
  !40 = !{!2, !4, i64 55816}
  !41 = !{!2, !3, i64 55804}
  !42 = !{!2, !3, i64 2168}
  !43 = !{!2, !8, i64 54352}
  !44 = !{!2, !3, i64 54528}
  !45 = !{!46, !4, i64 96}
  !46 = !{!"gl_texture_object", !8, i64 0, !8, i64 4, !8, i64 8, !11, i64 12, !4, i64 16, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 48, !4, i64 52, !4, i64 96, !3, i64 100}
  !47 = !{!46, !4, i64 44}
  !48 = !{!46, !4, i64 48}
  !49 = !{!46, !4, i64 32}
  !50 = !{!46, !4, i64 36}
  !51 = !{!3, !3, i64 0}
  !52 = !{!53, !4, i64 0}
  !53 = !{!"gl_texture_image", !4, i64 0, !8, i64 4, !8, i64 8, !8, i64 12, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !8, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !3, i64 48}
  !54 = !{!53, !8, i64 4}
  !55 = !{!2, !4, i64 54356}
  !56 = !{!2, !4, i64 7620}
  !57 = !{!2, !4, i64 6576}
  !58 = !{!2, !8, i64 55756}
  !59 = !{!2, !4, i64 7512}
  !60 = !{!2, !4, i64 7521}
  !61 = !{!2, !4, i64 54165}
  !62 = !{!38, !4, i64 20}
  !63 = !{!2, !3, i64 54532}
  !64 = !{!2, !3, i64 54524}
  !65 = !{!2, !4, i64 43728}
  !66 = !{!2, !3, i64 55808}
  !67 = !{!11, !11, i64 0}
  !68 = !{!69, !8, i64 0}
  !69 = !{!"", !8, i64 0, !8, i64 4, !11, i64 8, !11, i64 12, !8, i64 16, !8, i64 20, !8, i64 24, !11, i64 28, !8, i64 32, !8, i64 36}
  !70 = !{!69, !8, i64 4}
  !71 = !{!69, !11, i64 8}
  !72 = !{!69, !11, i64 12}
  !73 = !{!69, !8, i64 24}
  !74 = !{!69, !8, i64 32}
  !75 = !{!69, !8, i64 16}
  !76 = !{!69, !11, i64 28}
  !77 = !{!69, !8, i64 36}
  !78 = !{!69, !8, i64 20}
  !79 = !{!53, !8, i64 8}
  !80 = !{!53, !8, i64 12}
  !81 = !{!53, !8, i64 32}
  !82 = !{!53, !3, i64 48}
  !83 = !{!2, !11, i64 55768}
  !84 = !{!2, !3, i64 2024}
  !85 = !{!86, !3, i64 12}
  !86 = !{!"gl_frame_buffer", !3, i64 0, !8, i64 4, !8, i64 8, !3, i64 12, !3, i64 16, !3, i64 20, !3, i64 24, !3, i64 28, !3, i64 32, !8, i64 36, !8, i64 40, !8, i64 44, !8, i64 48}
  !87 = !{!86, !8, i64 4}
  !88 = !{!20, !20, i64 0}
  !89 = !{!4, !4, i64 0}
  !90 = !{!2, !3, i64 2060}
  !91 = !{!92, !3, i64 52416}
  !92 = !{!"vertex_buffer", !4, i64 0, !4, i64 8064, !4, i64 16128, !4, i64 24192, !4, i64 30240, !4, i64 36288, !4, i64 44352, !3, i64 52416, !4, i64 52420, !4, i64 54436, !3, i64 56452, !4, i64 56456, !4, i64 56960, !4, i64 65024, !4, i64 65528, !8, i64 65532, !8, i64 65536, !8, i64 65540, !4, i64 65544, !4, i64 65548, !4, i64 67564, !4, i64 954604}
  !93 = !{!8, !8, i64 0}
  !94 = !{!92, !3, i64 56452}
  !95 = !{!92, !4, i64 954604}
  !96 = !{!2, !3, i64 2048}
  !97 = !{!2, !3, i64 2044}
  !98 = !{!38, !11, i64 24}
  !99 = !{!38, !11, i64 28}
  !100 = !{!38, !11, i64 32}
  !101 = !{!38, !11, i64 36}
  !102 = !{!2, !8, i64 55440}
  !103 = !{!2, !8, i64 55436}
  !104 = !{!2, !3, i64 55432}

...
---
name:            general_textured_triangle
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%a3' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       23568
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 56
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
stack:           
  - { id: 0, name: eMaj, offset: -128, size: 40, alignment: 8 }
  - { id: 1, name: eTop, offset: -168, size: 40, alignment: 8 }
  - { id: 2, name: eBot, offset: -208, size: 40, alignment: 8 }
  - { id: 3, name: zspan, offset: -2768, size: 2560, alignment: 4 }
  - { id: 4, name: red, offset: -4048, size: 1280, alignment: 4 }
  - { id: 5, name: green, offset: -5328, size: 1280, alignment: 4 }
  - { id: 6, name: blue, offset: -6608, size: 1280, alignment: 4 }
  - { id: 7, name: alpha, offset: -7888, size: 1280, alignment: 4 }
  - { id: 8, name: s, offset: -13008, size: 5120, alignment: 4 }
  - { id: 9, name: t, offset: -18128, size: 5120, alignment: 4 }
  - { id: 10, name: u, offset: -23248, size: 5120, alignment: 4 }
  - { id: 11, type: spill-slot, offset: -23252, size: 4, alignment: 4 }
  - { id: 12, type: spill-slot, offset: -23256, size: 4, alignment: 4 }
  - { id: 13, type: spill-slot, offset: -23260, size: 4, alignment: 4 }
  - { id: 14, type: spill-slot, offset: -23264, size: 4, alignment: 4 }
  - { id: 15, type: spill-slot, offset: -23268, size: 4, alignment: 4 }
  - { id: 16, type: spill-slot, offset: -23272, size: 4, alignment: 4 }
  - { id: 17, type: spill-slot, offset: -23276, size: 4, alignment: 4 }
  - { id: 18, type: spill-slot, offset: -23280, size: 4, alignment: 4 }
  - { id: 19, type: spill-slot, offset: -23284, size: 4, alignment: 4 }
  - { id: 20, type: spill-slot, offset: -23288, size: 4, alignment: 4 }
  - { id: 21, type: spill-slot, offset: -23292, size: 4, alignment: 4 }
  - { id: 22, type: spill-slot, offset: -23296, size: 4, alignment: 4 }
  - { id: 23, type: spill-slot, offset: -23300, size: 4, alignment: 4 }
  - { id: 24, type: spill-slot, offset: -23304, size: 4, alignment: 4 }
  - { id: 25, type: spill-slot, offset: -23308, size: 4, alignment: 4 }
  - { id: 26, type: spill-slot, offset: -23312, size: 4, alignment: 4 }
  - { id: 27, type: spill-slot, offset: -23316, size: 4, alignment: 4 }
  - { id: 28, type: spill-slot, offset: -23320, size: 4, alignment: 4 }
  - { id: 29, type: spill-slot, offset: -23324, size: 4, alignment: 4 }
  - { id: 30, type: spill-slot, offset: -23328, size: 4, alignment: 4 }
  - { id: 31, type: spill-slot, offset: -23332, size: 4, alignment: 4 }
  - { id: 32, type: spill-slot, offset: -23336, size: 4, alignment: 4 }
  - { id: 33, type: spill-slot, offset: -23340, size: 4, alignment: 4 }
  - { id: 34, type: spill-slot, offset: -23344, size: 4, alignment: 4 }
  - { id: 35, type: spill-slot, offset: -23348, size: 4, alignment: 4 }
  - { id: 36, type: spill-slot, offset: -23352, size: 4, alignment: 4 }
  - { id: 37, type: spill-slot, offset: -23356, size: 4, alignment: 4 }
  - { id: 38, type: spill-slot, offset: -23360, size: 4, alignment: 4 }
  - { id: 39, type: spill-slot, offset: -23364, size: 4, alignment: 4 }
  - { id: 40, type: spill-slot, offset: -23368, size: 4, alignment: 4 }
  - { id: 41, type: spill-slot, offset: -23372, size: 4, alignment: 4 }
  - { id: 42, type: spill-slot, offset: -23376, size: 4, alignment: 4 }
  - { id: 43, type: spill-slot, offset: -23380, size: 4, alignment: 4 }
  - { id: 44, type: spill-slot, offset: -23384, size: 4, alignment: 4 }
  - { id: 45, type: spill-slot, offset: -23388, size: 4, alignment: 4 }
  - { id: 46, type: spill-slot, offset: -23392, size: 4, alignment: 4 }
  - { id: 47, type: spill-slot, offset: -23396, size: 4, alignment: 4 }
  - { id: 48, type: spill-slot, offset: -23400, size: 4, alignment: 4 }
  - { id: 49, type: spill-slot, offset: -23404, size: 4, alignment: 4 }
  - { id: 50, type: spill-slot, offset: -23408, size: 4, alignment: 4 }
  - { id: 51, type: spill-slot, offset: -23412, size: 4, alignment: 4 }
  - { id: 52, type: spill-slot, offset: -23416, size: 4, alignment: 4 }
  - { id: 53, type: spill-slot, offset: -23420, size: 4, alignment: 4 }
  - { id: 54, type: spill-slot, offset: -23424, size: 4, alignment: 4 }
  - { id: 55, type: spill-slot, offset: -23428, size: 4, alignment: 4 }
  - { id: 56, type: spill-slot, offset: -23432, size: 4, alignment: 4 }
  - { id: 57, type: spill-slot, offset: -23436, size: 4, alignment: 4 }
  - { id: 58, type: spill-slot, offset: -23440, size: 4, alignment: 4 }
  - { id: 59, type: spill-slot, offset: -23444, size: 4, alignment: 4 }
  - { id: 60, type: spill-slot, offset: -23448, size: 4, alignment: 4 }
  - { id: 61, type: spill-slot, offset: -23452, size: 4, alignment: 4 }
  - { id: 62, type: spill-slot, offset: -23456, size: 4, alignment: 4 }
  - { id: 63, type: spill-slot, offset: -23460, size: 4, alignment: 4 }
  - { id: 64, type: spill-slot, offset: -23464, size: 4, alignment: 4 }
  - { id: 65, type: spill-slot, offset: -23468, size: 4, alignment: 4 }
  - { id: 66, type: spill-slot, offset: -23472, size: 4, alignment: 4 }
  - { id: 67, type: spill-slot, offset: -23476, size: 4, alignment: 4 }
  - { id: 68, type: spill-slot, offset: -23480, size: 4, alignment: 4 }
  - { id: 69, type: spill-slot, offset: -23484, size: 4, alignment: 4 }
  - { id: 70, type: spill-slot, offset: -23488, size: 4, alignment: 4 }
  - { id: 71, type: spill-slot, offset: -23492, size: 4, alignment: 4 }
  - { id: 72, type: spill-slot, offset: -23496, size: 4, alignment: 4 }
  - { id: 73, type: spill-slot, offset: -23500, size: 4, alignment: 4 }
  - { id: 74, type: spill-slot, offset: -23504, size: 4, alignment: 4 }
  - { id: 75, type: spill-slot, offset: -23508, size: 4, alignment: 4 }
  - { id: 76, type: spill-slot, offset: -23512, size: 4, alignment: 4 }
  - { id: 77, type: spill-slot, offset: -8, size: 8, alignment: 8, callee-saved-register: '%d15' }
  - { id: 78, type: spill-slot, offset: -16, size: 8, alignment: 8, callee-saved-register: '%d14' }
  - { id: 79, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '%d13' }
  - { id: 80, type: spill-slot, offset: -32, size: 8, alignment: 8, callee-saved-register: '%d12' }
  - { id: 81, type: spill-slot, offset: -40, size: 8, alignment: 8, callee-saved-register: '%d11' }
  - { id: 82, type: spill-slot, offset: -48, size: 8, alignment: 8, callee-saved-register: '%d10' }
  - { id: 83, type: spill-slot, offset: -52, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 84, type: spill-slot, offset: -56, size: 4, alignment: 4, callee-saved-register: '%fp' }
  - { id: 85, type: spill-slot, offset: -60, size: 4, alignment: 4, callee-saved-register: '%s7' }
  - { id: 86, type: spill-slot, offset: -64, size: 4, alignment: 4, callee-saved-register: '%s6' }
  - { id: 87, type: spill-slot, offset: -68, size: 4, alignment: 4, callee-saved-register: '%s5' }
  - { id: 88, type: spill-slot, offset: -72, size: 4, alignment: 4, callee-saved-register: '%s4' }
  - { id: 89, type: spill-slot, offset: -76, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 90, type: spill-slot, offset: -80, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 91, type: spill-slot, offset: -84, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 92, type: spill-slot, offset: -88, size: 4, alignment: 4, callee-saved-register: '%s0' }
constants:       
  - id:              0
    value:           float 0xBFA99999A0000000
    alignment:       4
  - id:              1
    value:           float 0x3FA99999A0000000
    alignment:       4
  - id:              2
    value:           float -5.000000e-01
    alignment:       4
  - id:              3
    value:           'float 2.048000e+03'
    alignment:       4
  - id:              4
    value:           float 5.000000e-01
    alignment:       4
  - id:              5
    value:           'float 1.000000e+00'
    alignment:       4
  - id:              6
    value:           'float 6.553500e+04'
    alignment:       4
  - id:              7
    value:           'float -6.553500e+04'
    alignment:       4
  - id:              8
    value:           float 0x3F40000000000000
    alignment:       4
  - id:              9
    value:           'double 1.000000e+00'
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 51):
    successors: %bb.1(50), %bb.3(50)
    liveins: %a0, %a1, %a2, %a3, %t9, %d15, %d14, %d13, %d12, %d11, %d10, %ra, %fp, %s7, %s6, %s5, %s4, %s3, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -23568
    CFI_INSTRUCTION .cfi_def_cfa_offset 23568
    SDC1 killed %d15, %sp, 23560 :: (store 8 into stack)
    SDC1 killed %d14, %sp, 23552 :: (store 8 into stack)
    SDC1 killed %d13, %sp, 23544 :: (store 8 into stack)
    SDC1 killed %d12, %sp, 23536 :: (store 8 into stack)
    SDC1 killed %d11, %sp, 23528 :: (store 8 into stack)
    SDC1 killed %d10, %sp, 23520 :: (store 8 into stack)
    SW killed %ra, %sp, 23516 :: (store 4 into stack)
    SW killed %fp, %sp, 23512 :: (store 4 into stack)
    SW killed %s7, %sp, 23508 :: (store 4 into stack)
    SW killed %s6, %sp, 23504 :: (store 4 into stack)
    SW killed %s5, %sp, 23500 :: (store 4 into stack)
    SW killed %s4, %sp, 23496 :: (store 4 into stack)
    SW killed %s3, %sp, 23492 :: (store 4 into stack)
    SW killed %s2, %sp, 23488 :: (store 4 into stack)
    SW killed %s1, %sp, 23484 :: (store 4 into stack)
    SW killed %s0, %sp, 23480 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %d31_64, -8
    CFI_INSTRUCTION .cfi_offset %d30_64, -4
    CFI_INSTRUCTION .cfi_offset %d29_64, -16
    CFI_INSTRUCTION .cfi_offset %d28_64, -12
    CFI_INSTRUCTION .cfi_offset %d27_64, -24
    CFI_INSTRUCTION .cfi_offset %d26_64, -20
    CFI_INSTRUCTION .cfi_offset %d25_64, -32
    CFI_INSTRUCTION .cfi_offset %d24_64, -28
    CFI_INSTRUCTION .cfi_offset %d23_64, -40
    CFI_INSTRUCTION .cfi_offset %d22_64, -36
    CFI_INSTRUCTION .cfi_offset %d21_64, -48
    CFI_INSTRUCTION .cfi_offset %d20_64, -44
    CFI_INSTRUCTION .cfi_offset %ra_64, -52
    CFI_INSTRUCTION .cfi_offset %fp_64, -56
    CFI_INSTRUCTION .cfi_offset %s7_64, -60
    CFI_INSTRUCTION .cfi_offset %s6_64, -64
    CFI_INSTRUCTION .cfi_offset %s5_64, -68
    CFI_INSTRUCTION .cfi_offset %s4_64, -72
    CFI_INSTRUCTION .cfi_offset %s3_64, -76
    CFI_INSTRUCTION .cfi_offset %s2_64, -80
    CFI_INSTRUCTION .cfi_offset %s1_64, -84
    CFI_INSTRUCTION .cfi_offset %s0_64, -88
    %s0 = ADDu %v0, %t9
    SW %a0, %sp, 180 :: (store 4 into stack)
    %at = SLL %a3, 2
    %v0 = SLL %a3, 3
    %v1 = ORi %zero, 55808
    %at = ADDu killed %v0, killed %at
    %v0 = ADDu killed %a0, killed %v1
    %t8 = LW killed %v0, 0 :: (load 4 from %ir.1, !tbaa !66)
    %v0 = ADDiu %t8, 24192
    %at = ADDu %v0, killed %at
    %v1 = SLL %a1, 2
    %a0 = SLL %a1, 3
    %t0 = SLL %a2, 2
    %t1 = SLL %a2, 3
    %f0 = LWC1 killed %at, 4 :: (load 4 from %ir.10, !tbaa !67)
    %at = ADDu killed %t1, killed %t0
    %at = ADDu %v0, killed %at
    %f1 = LWC1 killed %at, 4 :: (load 4 from %ir.8, !tbaa !67)
    %at = ADDu killed %a0, killed %v1
    %at = ADDu killed %v0, killed %at
    %f2 = LWC1 killed %at, 4 :: (load 4 from %ir.6, !tbaa !67)
    FCMP_S32 %f2, %f1, 22, implicit-def %fcc0
    BC1T %fcc0, %bb.3, implicit-def %at {
      NOP
    }
  
  bb.1 (%ir-block.17, freq 25):
    successors: %bb.2(50), %bb.5(50)
    liveins: %a1, %a2, %a3, %f0, %f1, %f2, %s0, %t8
  
    FCMP_S32 killed %f2, %f0, 6, implicit-def %fcc0
    BC1T %fcc0, %bb.5, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.19, freq 12):
    successors: %bb.7(100)
    liveins: %a1, %a2, %a3, %f0, %f1, %s0, %t8
  
    FCMP_S32 killed %f0, killed %f1, 22, implicit-def %fcc0
    %v0 = OR %a3, %zero
    %v0 = MOVF_I %a2, %fcc0, killed %v0
    %a2 = MOVF_I killed %a3, killed %fcc0, killed %a2
    %a3 = OR killed %a1, %zero
    B %bb.7, implicit-def %at {
      %v1 = OR killed %a2, %zero
    }
  
  bb.3 (%ir-block.13, freq 25):
    successors: %bb.4(50), %bb.6(50)
    liveins: %a1, %a2, %a3, %f0, %f1, %f2, %s0, %t8
  
    FCMP_S32 killed %f1, %f0, 6, implicit-def %fcc0
    BC1T %fcc0, %bb.6, implicit-def %at {
      NOP
    }
  
  bb.4 (%ir-block.15, freq 12):
    successors: %bb.7(100)
    liveins: %a1, %a2, %a3, %f0, %f2, %s0, %t8
  
    FCMP_S32 killed %f0, killed %f2, 22, implicit-def %fcc0
    %v0 = OR %a3, %zero
    %v0 = MOVF_I %a1, %fcc0, killed %v0
    %a1 = MOVF_I killed %a3, killed %fcc0, killed %a1
    %a3 = OR killed %a2, %zero
    B %bb.7, implicit-def dead %at {
      %v1 = OR killed %a1, %zero
    }
  
  bb.5 (freq 12):
    successors: %bb.7(100)
    liveins: %a1, %a2, %a3, %s0, %t8
  
    %v1 = OR killed %a1, %zero
    B %bb.7, implicit-def %at {
      %v0 = OR killed %a2, %zero
    }
  
  bb.6 (freq 12):
    successors: %bb.7(100)
    liveins: %a1, %a2, %a3, %s0, %t8
  
    %v1 = OR killed %a2, %zero
    %v0 = OR killed %a1, %zero
  
  bb.7 (%ir-block.21, freq 51):
    successors: %bb.8(75), %bb.9(25)
    liveins: %a3, %s0, %t8, %v0, %v1
  
    SW %v0, %sp, 23440 :: (store 4 into %ir.22, align 8, !tbaa !68)
    SW %a3, %sp, 23444 :: (store 4 into %ir.23, !tbaa !70)
    SW %v1, %sp, 23400 :: (store 4 into %ir.24, align 8, !tbaa !68)
    SW %a3, %sp, 23404 :: (store 4 into %ir.25, !tbaa !70)
    SW %v0, %sp, 23360 :: (store 4 into %ir.26, align 8, !tbaa !68)
    SW %v1, %sp, 23364 :: (store 4 into %ir.27, !tbaa !70)
    %at = SLL %v0, 2
    %a0 = SLL %v0, 3
    %a0 = ADDu killed %a0, killed %at
    %at = SLL %a3, 2
    %a1 = SLL %a3, 3
    %t0 = ADDiu %t8, 24192
    %f8 = LWXC1 %t0, %a0 :: (load 4 from %ir.30, !tbaa !67)
    %a1 = ADDu killed %a1, killed %at
    %f2 = LWXC1 %t0, %a1 :: (load 4 from %ir.28, !tbaa !67)
    %at = SLL %v1, 2
    %a2 = SLL %v1, 3
    %a2 = ADDu killed %a2, killed %at
    %at = ADDu %t0, %a1
    %t1 = ADDu %t0, %a0
    %t2 = LW %s0, target-flags(<unknown>) %const.0 :: (load 4 from got)
    %t3 = ADDu %t0, %a2
    %f0 = FSUB_S %f2, %f8
    %f12 = LWC1 killed %t2, target-flags(<unknown>) %const.0 :: (load 4 from constant-pool)
    SWC1 %f0, %sp, 23448 :: (store 4 into %ir.33, align 8, !tbaa !71)
    %f10 = LWC1 killed %t1, 4 :: (load 4 from %ir.36, !tbaa !67)
    %f11 = LWC1 killed %at, 4 :: (load 4 from %ir.34, !tbaa !67)
    %f1 = FSUB_S %f11, %f10
    SWC1 %f1, %sp, 23452 :: (store 4 into %ir.39, !tbaa !72)
    %f6 = LWXC1 killed %t0, %a2 :: (load 4 from %ir.40, !tbaa !67)
    %f5 = FSUB_S killed %f2, %f6
    SWC1 %f5, %sp, 23408 :: (store 4 into %ir.43, align 8, !tbaa !71)
    %f3 = FSUB_S %f6, %f8
    %f4 = FMUL_S %f3, %f1
    %f9 = LWC1 killed %t3, 4 :: (load 4 from %ir.44, !tbaa !67)
    %f7 = FSUB_S %f11, %f9
    SWC1 %f7, %sp, 23412 :: (store 4 into %ir.47, !tbaa !72)
    SWC1 %f3, %sp, 23368 :: (store 4 into %ir.49, align 8, !tbaa !71)
    %f2 = FSUB_S %f9, %f10
    %f4 = MSUB_S killed %f4, %f2, %f0
    FCMP_S32 %f4, killed %f12, 7, implicit-def %fcc0
    BC1T %fcc0, %bb.9, implicit-def %at {
      SWC1 %f2, %sp, 23372 :: (store 4 into %ir.51, !tbaa !72)
    }
  
  bb.8 (%ir-block.21, freq 38):
    successors: %bb.43..critedge(66), %bb.9(33)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f8, %f9, %f10, %f11, %s0, %t8, %v0, %v1
  
    %at = LW %s0, target-flags(<unknown>) %const.1 :: (load 4 from got)
    %f12 = LWC1 killed %at, target-flags(<unknown>) %const.1 :: (load 4 from constant-pool)
    FCMP_S32 %f4, killed %f12, 4, implicit-def %fcc0
    BC1T %fcc0, %bb.43..critedge, implicit-def %at {
      NOP
    }
  
  bb.9 (%ir-block.57, freq 25):
    successors: %bb.10(62), %bb.43..critedge(37)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f8, %f9, %f10, %f11, %s0, %t8, %v0, %v1
  
    %at = LW %s0, target-flags(<unknown>) %const.2 :: (load 4 from got)
    %f12 = LWC1 killed %at, target-flags(<unknown>) %const.2 :: (load 4 from constant-pool)
    %at = LW %s0, target-flags(<unknown>) %const.3 :: (load 4 from got)
    %f11 = FADD_S killed %f11, %f12
    %f10 = FADD_S killed %f10, %f12
    %f13 = LWC1 killed %at, target-flags(<unknown>) %const.3 :: (load 4 from constant-pool)
    %f10 = FMUL_S killed %f10, %f13
    %f11 = FMUL_S killed %f11, %f13
    %t6 = ADDiu %zero, -2048
    %f11 = TRUNC_W_S killed %f11
    %at = MFC1 killed %f11
    %t5 = ADDiu killed %at, 2047
    %f10 = TRUNC_W_S killed %f10
    %t7 = MFC1 killed %f10
    %at = ADDiu %t7, 2047
    %t0 = AND killed %at, %t6
    SW %t0, %sp, 23464 :: (store 4 into %ir.76, align 8, !tbaa !73)
    %at = SUBu %t5, %t0
    %at = SRA killed %at, 11
    BLEZ %at, %bb.43..critedge, implicit-def %at {
      SW %at, %sp, 23472 :: (store 4 into %ir.80, align 8, !tbaa !74)
    }
  
  bb.10 (%ir-block.82, freq 16):
    successors: %bb.11(62), %bb.12(37)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f8, %f9, %f12, %f13, %s0, %t0, %t5, %t6, %t7, %t8, %v0, %v1
  
    %at = LW %s0, target-flags(<unknown>) %const.4 :: (load 4 from got)
    %f10 = LWC1 killed %at, target-flags(<unknown>) %const.4 :: (load 4 from constant-pool)
    %t2 = LW %s0, target-flags(<unknown>) %const.5 :: (load 4 from got)
    %f9 = FADD_S killed %f9, killed %f12
    %f8 = FADD_S killed %f8, %f10
    %f30 = FMOV_S killed %f13
    %f8 = FMUL_S killed %f8, %f30
    %f9 = FMUL_S killed %f9, %f30
    %f9 = TRUNC_W_S killed %f9
    %t4 = MFC1 killed %f9
    %f8 = TRUNC_W_S killed %f8
    %t1 = MFC1 killed %f8
    %f9 = FDIV_S %f0, %f1
    %t3 = ADDiu %t4, 2047
    %t6 = AND %t3, killed %t6
    %at = SUBu %t0, killed %t7
    %f8 = MTC1 killed %at
    %f8 = CVT_S_W killed %f8
    %at = SUBu killed %t5, %t6
    %at = SRA killed %at, 11
    %f11 = FMUL_S %f9, %f8
    %f9 = FMUL_S killed %f9, %f30
    %f9 = TRUNC_W_S killed %f9
    SWC1 killed %f9, %sp, 23456 :: (store 4 into %ir.86, align 8)
    SWC1 %f8, %sp, 23468 :: (store 4 into %ir.89, !tbaa !76)
    SW %t1, %sp, 23476 :: (store 4 into %ir.90, !tbaa !77)
    %f9 = TRUNC_W_S killed %f11
    %t5 = MFC1 killed %f9
    %t5 = ADDu killed %t5, %t1
    SW killed %t5, %sp, 23460 :: (store 4 into %ir.94, !tbaa !78)
    SW %t6, %sp, 23424 :: (store 4 into %ir.97, align 8, !tbaa !73)
    BLEZ %at, %bb.12, implicit-def %at {
      SW %at, %sp, 23432 :: (store 4 into %ir.100, align 8, !tbaa !74)
    }
  
  bb.11 (%ir-block.102, freq 10):
    successors: %bb.12(100)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f8, %f10, %f30, %s0, %t0, %t1, %t2, %t3, %t4, %t6, %t8, %v0, %v1
  
    %f6 = FADD_S killed %f6, killed %f10
    %f6 = FMUL_S killed %f6, %f30
    %f6 = TRUNC_W_S killed %f6
    %at = MFC1 killed %f6
    %f5 = FDIV_S killed %f5, killed %f7
    %t4 = SUBu killed %t6, killed %t4
    %f6 = MTC1 killed %t4
    %f6 = CVT_S_W killed %f6
    %f7 = FMUL_S %f5, %f6
    %f5 = FMUL_S killed %f5, %f30
    %f5 = TRUNC_W_S killed %f5
    SWC1 killed %f5, %sp, 23416 :: (store 4 into %ir.106, align 8)
    SWC1 killed %f6, %sp, 23428 :: (store 4 into %ir.109, !tbaa !76)
    SW %at, %sp, 23436 :: (store 4 into %ir.110, !tbaa !77)
    %f5 = TRUNC_W_S killed %f7
    %t4 = MFC1 killed %f5
    %at = ADDu killed %t4, killed %at
    SW killed %at, %sp, 23420 :: (store 4 into %ir.114, !tbaa !78)
  
  bb.12 (%ir-block.115, freq 16):
    successors: %bb.13(62), %bb.14(37)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f8, %f30, %s0, %t0, %t1, %t2, %t3, %t8, %v0, %v1
  
    %f10 = LWC1 killed %t2, target-flags(<unknown>) %const.5 :: (load 4 from constant-pool)
    SW %t0, %sp, 23384 :: (store 4 into %ir.116, align 8, !tbaa !73)
    %at = SUBu killed %t3, killed %t0
    %at = SRA killed %at, 11
    BLEZ %at, %bb.14, implicit-def %at {
      SW %at, %sp, 23392 :: (store 4 into %ir.119, align 8, !tbaa !74)
    }
  
  bb.13 (%ir-block.121, freq 10):
    successors: %bb.14(100)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f8, %f10, %f30, %s0, %t1, %t8, %v0, %v1
  
    %f5 = FDIV_S %f3, %f2
    %f6 = FMUL_S %f5, %f8
    %f5 = FMUL_S killed %f5, %f30
    %f5 = TRUNC_W_S killed %f5
    SWC1 killed %f5, %sp, 23376 :: (store 4 into %ir.125, align 8)
    SWC1 killed %f8, %sp, 23388 :: (store 4 into %ir.126, !tbaa !76)
    SW %t1, %sp, 23396 :: (store 4 into %ir.127, !tbaa !77)
    %f5 = TRUNC_W_S killed %f6
    %at = MFC1 killed %f5
    %at = ADDu killed %at, killed %t1
    SW killed %at, %sp, 23380 :: (store 4 into %ir.131, !tbaa !78)
  
  bb.14 (%ir-block.132, freq 16):
    successors: %bb.15(50), %bb.16(50)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f10, %f30, %s0, %t8, %v0, %v1
  
    %f31 = FDIV_S %f10, killed %f4
    %at = ORi %zero, 43728
    %t0 = LW %sp, 180 :: (load 4 from stack)
    %at = ADDu killed %t0, killed %at
    %t0 = LW killed %at, 0 :: (load 4 from %ir.133, !tbaa !65)
    %at = ADDiu %zero, 7424
    %t1 = IMPLICIT_DEF
    SW killed %t1, %sp, 172 :: (store 4 into stack)
    %t1 = IMPLICIT_DEF
    SW killed %t1, %sp, 168 :: (store 4 into stack)
    %t1 = IMPLICIT_DEF
    SW killed %t1, %sp, 164 :: (store 4 into stack)
    %t1 = IMPLICIT_DEF
    SW killed %t1, %sp, 160 :: (store 4 into stack)
    BNE %t0, %at, %bb.16, implicit-def %at {
      SW %t0, %sp, 176 :: (store 4 into stack)
    }
  
  bb.15 (%ir-block.136, freq 8):
    successors: %bb.16(100)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f10, %f30, %f31, %s0, %t8, %v0, %v1
  
    %at = LW %sp, 23584 :: (load 4 from stack, align 8)
    %t0 = ORi %zero, 52416
    %t0 = ADDu %t8, killed %t0
    %t0 = LW killed %t0, 0 :: (load 4 from %ir.137, !tbaa !91)
    %at = SLL killed %at, 4
    %at = ADDu killed %t0, killed %at
    %t0 = LW %at, 12 :: (load 4 from %ir.145, !tbaa !93)
    SW killed %t0, %sp, 172 :: (store 4 into stack)
    %t0 = LW %at, 8 :: (load 4 from %ir.143, !tbaa !93)
    SW killed %t0, %sp, 168 :: (store 4 into stack)
    %t0 = LW %at, 4 :: (load 4 from %ir.141, !tbaa !93)
    SW killed %t0, %sp, 164 :: (store 4 into stack)
    %at = LW killed %at, 0 :: (load 4 from %ir.139, !tbaa !93)
    SW killed %at, %sp, 160 :: (store 4 into stack)
  
  bb.16 (%ir-block.147, freq 16):
    successors: %bb.19(25), %bb.17(75)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f10, %f30, %f31, %s0, %t8, %v0, %v1
  
    %at = ADDiu %t8, 24192
    %a0 = ADDu %at, killed %a0
    %a1 = ADDu %at, killed %a1
    %f5 = LWC1 killed %a0, 8 :: (load 4 from %ir.150, !tbaa !67)
    %at = ADDu killed %at, killed %a2
    %f4 = LWC1 killed %at, 8 :: (load 4 from %ir.153, !tbaa !67)
    %f4 = FSUB_S killed %f4, %f5
    %f6 = LWC1 killed %a1, 8 :: (load 4 from %ir.148, !tbaa !67)
    %at = LW %s0, target-flags(<unknown>) %const.6 :: (load 4 from got)
    %f6 = FSUB_S killed %f6, killed %f5
    %f5 = MTC1 %zero
    %f8 = LWC1 killed %at, target-flags(<unknown>) %const.6 :: (load 4 from constant-pool)
    %f7 = FMUL_S %f4, %f1
    %f7 = MSUB_S killed %f7, %f6, %f2
    %f7 = FMUL_S %f31, killed %f7
    FCMP_S32 %f7, killed %f8, 23, implicit-def %fcc0
    %f8 = FMOV_S %f5
    BC1F %fcc0, %bb.19, implicit-def %at {
      %f11 = FMOV_S %f5
    }
  
  bb.17 (%ir-block.147, freq 12):
    successors: %bb.19(33), %bb.18(66)
    liveins: %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f10, %f30, %f31, %s0, %t8, %v0, %v1
  
    %at = LW %s0, target-flags(<unknown>) %const.7 :: (load 4 from got)
    %f8 = LWC1 killed %at, target-flags(<unknown>) %const.7 :: (load 4 from constant-pool)
    FCMP_S32 %f7, killed %f8, 4, implicit-def %fcc0
    %f8 = FMOV_S %f5
    BC1T %fcc0, %bb.19, implicit-def %at {
      %f11 = FMOV_S %f5
    }
  
  bb.18 (%ir-block.162, freq 8):
    successors: %bb.19(100)
    liveins: %a3, %f0, %f1, %f2, %f3, %f4, %f5, %f6, %f7, %f10, %f30, %f31, %s0, %t8, %v0, %v1
  
    %f6 = FMUL_S killed %f6, %f3
    %f4 = MSUB_S killed %f6, killed %f4, %f0
    %f8 = FMUL_S %f31, killed %f4
    %f11 = FMOV_S killed %f7
  
  bb.19 (%ir-block.167, freq 16):
    successors: %bb.20(100)
    liveins: %a3, %f0, %f1, %f2, %f3, %f5, %f8, %f10, %f11, %f30, %f31, %s0, %t8, %v0, %v1
  
    SWC1 %f11, %sp, 124 :: (store 4 into stack)
    SWC1 killed %f8, %sp, 128 :: (store 4 into stack)
    %at = ORi %zero, 52416
    SW %t8, %sp, 140 :: (store 4 into stack)
    %at = ADDu %t8, killed %at
    SW %at, %sp, 120 :: (store 4 into stack)
    %a0 = LW killed %at, 0 :: (load 4 from %ir.171, !tbaa !91)
    %a1 = SLL killed %v0, 4
    %a2 = SLL killed %a3, 4
    %a3 = ADDiu %t8, 16128
    %at = ORi %zero, 56960
    %t0 = ADDu %a3, %a2
    %at = ADDu killed %t8, killed %at
    %t1 = ADDu %a3, %a1
    %v0 = SLL killed %v1, 4
    %t2 = ADDu %a0, %v0
    %t3 = ADDu %a0, %a1
    %v1 = ADDu killed %a0, %a2
    %a0 = LW %t3, 4 :: (load 4 from %ir.197, !tbaa !93)
    %t4 = LW %t2, 4 :: (load 4 from %ir.202, !tbaa !93)
    %f7 = LWC1 killed %t1, 12 :: (load 4 from %ir.264, !tbaa !67)
    %t1 = ADDu %at, %v0
    %f4 = LWC1 killed %t0, 12 :: (load 4 from %ir.261, !tbaa !67)
    %a3 = ADDu killed %a3, %v0
    %t0 = LW %s0, target-flags(<unknown>) %const.8 :: (load 4 from got)
    %gp = LEA_ADDiu %sp, 23440
    SW %gp, %sp, 144 :: (store 4 into stack)
    %s1 = LEA_ADDiu %sp, 23360
    %t5 = LW %t3, 0 :: (load 4 from %ir.175, !tbaa !93)
    %t6 = LW %t2, 0 :: (load 4 from %ir.180, !tbaa !93)
    SWC1 %f31, %sp, 148 :: (store 4 into stack)
    FCMP_S32 %f31, %f5, 4, implicit-def %fcc0
    %t7 = OR %gp, %zero
    %t7 = MOVT_I %s1, killed %fcc0, killed %t7
    SW killed %t7, %sp, 56 :: (store 4 into stack)
    %t4 = SUBu killed %t4, %a0
    %t7 = LW %v1, 4 :: (load 4 from %ir.195, !tbaa !93)
    %t8 = LW %t3, 8 :: (load 4 from %ir.219, !tbaa !93)
    %t9 = LW %v1, 8 :: (load 4 from %ir.217, !tbaa !93)
    %f26 = LWC1 killed %t0, target-flags(<unknown>) %const.8 :: (load 4 from constant-pool)
    SWC1 %f26, %sp, 116 :: (store 4 into stack)
    %t0 = ADDu %at, %a1
    %f9 = LWC1 killed %a3, 12 :: (load 4 from %ir.267, !tbaa !67)
    %a3 = ADDu %at, %a2
    %t6 = SUBu killed %t6, %t5
    %f6 = MTC1 killed %t6
    %f6 = CVT_S_W killed %f6
    %f13 = FMUL_S killed %f6, %f26
    %f12 = FMOV_S killed %f10
    SWC1 %f12, %sp, 132 :: (store 4 into stack)
    %f4 = FDIV_S %f12, killed %f4
    %f6 = LWC1 %t1, 8 :: (load 4 from %ir.325, !tbaa !67)
    %f8 = MTC1 killed %t4
    %f8 = CVT_S_W killed %f8
    %f14 = FMUL_S killed %f8, %f26
    %f8 = FDIV_S %f12, killed %f7
    %t4 = SUBu killed %t9, %t8
    %f7 = MTC1 killed %t4
    %f7 = CVT_S_W killed %f7
    %a0 = SUBu killed %t7, killed %a0
    %t3 = LW killed %t3, 12 :: (load 4 from %ir.241, !tbaa !93)
    %t4 = LW %t2, 12 :: (load 4 from %ir.246, !tbaa !93)
    %t2 = LW killed %t2, 8 :: (load 4 from %ir.224, !tbaa !93)
    %t6 = ADDiu %zero, 1
    %f15 = LWC1 %t1, 12 :: (load 4 from %ir.342, !tbaa !67)
    %f16 = FMUL_S killed %f11, %f30
    %f11 = LWC1 %a3, 4 :: (load 4 from %ir.299, !tbaa !67)
    %f10 = MTC1 killed %a0
    %f10 = CVT_S_W killed %f10
    %f17 = FMUL_S killed %f10, %f26
    %f18 = FMUL_S killed %f7, %f26
    %f7 = FDIV_S killed %f12, killed %f9
    %f19 = LWC1 %t0, 4 :: (load 4 from %ir.302, !tbaa !67)
    %f12 = LWC1 %a3, 8 :: (load 4 from %ir.318, !tbaa !67)
    %f20 = LWXC1 %at, killed %a1 :: (load 4 from %ir.283, !tbaa !67)
    %f9 = LWC1 killed %t1, 4 :: (load 4 from %ir.306, !tbaa !67)
    %f10 = LWXC1 %at, killed %a2 :: (load 4 from %ir.280, !tbaa !67)
    %a0 = SUBu killed %t2, killed %t8
    %f21 = LWC1 %t0, 12 :: (load 4 from %ir.339, !tbaa !67)
    FCMP_S32 %f31, killed %f5, 4, implicit-def %fcc0
    %t6 = MOVF_I %zero, %fcc0, killed %t6
    SW killed %t6, %sp, 152 :: (store 4 into stack)
    %s1 = MOVT_I killed %gp, killed %fcc0, killed %s1
    SW killed %s1, %sp, 60 :: (store 4 into stack)
    %a1 = SUBu killed %t4, %t3
    %a2 = LW %v1, 0 :: (load 4 from %ir.173, !tbaa !93)
    %a2 = SUBu killed %a2, killed %t5
    %f5 = LWC1 killed %t0, 8 :: (load 4 from %ir.321, !tbaa !67)
    %f22 = MTC1 killed %a2
    %f22 = CVT_S_W killed %f22
    %f23 = MTC1 killed %a0
    %f23 = CVT_S_W killed %f23
    %f24 = MTC1 killed %a1
    %f24 = CVT_S_W killed %f24
    %v1 = LW killed %v1, 12 :: (load 4 from %ir.239, !tbaa !93)
    %v1 = SUBu killed %v1, killed %t3
    %f25 = MTC1 killed %v1
    %f25 = CVT_S_W killed %f25
    %f25 = FMUL_S killed %f25, %f26
    %f24 = FMUL_S killed %f24, %f26
    %f23 = FMUL_S killed %f23, %f26
    %f22 = FMUL_S killed %f22, killed %f26
    %f15 = FSUB_S killed %f15, %f21
    %f26 = LWC1 killed %a3, 12 :: (load 4 from %ir.337, !tbaa !67)
    %f21 = FSUB_S killed %f26, killed %f21
    %f26 = FMUL_S %f3, %f21
    %f27 = FMUL_S %f1, %f15
    %f28 = FMUL_S %f22, %f3
    %f16 = TRUNC_W_S killed %f16
    %f29 = FMUL_S %f1, %f23
    %s4 = MFC1 killed %f16
    %f16 = FMUL_S %f1, %f24
    %f21 = MSUB_S killed %f27, %f2, killed %f21
    %f27 = FMUL_S %f3, %f25
    %f15 = MSUB_S killed %f26, %f0, killed %f15
    %f26 = FMUL_S %f1, %f13
    %f16 = MSUB_S killed %f16, %f2, killed %f25
    %f25 = FMUL_S %f3, %f18
    %f18 = MSUB_S killed %f29, %f2, killed %f18
    %f29 = FMUL_S %f1, %f14
    %f13 = MSUB_S killed %f28, %f0, killed %f13
    %f28 = FMUL_S %f3, %f17
    %f14 = MSUB_S killed %f28, %f0, killed %f14
    %f28 = LWXC1 killed %at, killed %v0 :: (load 4 from %ir.287, !tbaa !67)
    %v0 = ADDiu %zero, 0
    %f23 = MSUB_S killed %f25, %f0, killed %f23
    %f17 = MSUB_S killed %f29, %f2, killed %f17
    %f22 = MSUB_S killed %f26, %f2, killed %f22
    %f24 = MSUB_S killed %f27, %f0, killed %f24
    %f24 = FMUL_S %f31, killed %f24
    SWC1 killed %f24, %sp, 112 :: (store 4 into stack)
    %f22 = FMUL_S %f31, killed %f22
    SWC1 %f22, %sp, 108 :: (store 4 into stack)
    %f25 = FMUL_S %f31, killed %f17
    SWC1 %f25, %sp, 104 :: (store 4 into stack)
    %f17 = FMUL_S %f31, killed %f23
    SWC1 killed %f17, %sp, 100 :: (store 4 into stack)
    %f17 = FSUB_S %f4, %f8
    %f14 = FMUL_S %f31, killed %f14
    SWC1 killed %f14, %sp, 96 :: (store 4 into stack)
    %f13 = FMUL_S %f31, killed %f13
    SWC1 killed %f13, %sp, 92 :: (store 4 into stack)
    %f23 = FMUL_S %f31, killed %f18
    SWC1 %f23, %sp, 88 :: (store 4 into stack)
    %f26 = FMUL_S %f31, killed %f16
    SWC1 %f26, %sp, 84 :: (store 4 into stack)
    %f13 = FSUB_S %f7, %f8
    %f14 = FMUL_S %f8, killed %f19
    %f5 = FMUL_S %f8, killed %f5
    %f15 = FMUL_S %f31, killed %f15
    SWC1 killed %f15, %sp, 80 :: (store 4 into stack)
    %f24 = FMUL_S %f31, killed %f21
    %f8 = FMUL_S killed %f8, killed %f20
    %f6 = MSUB_S %f5, %f7, killed %f6
    %f15 = FMUL_S killed %f25, %f30
    %f16 = FMUL_S killed %f22, %f30
    %f18 = FMUL_S %f3, %f17
    %f5 = MSUB_S killed %f5, %f4, killed %f12
    %f11 = MSUB_S %f14, %f4, killed %f11
    %f12 = FMUL_S %f1, %f13
    %f19 = FMUL_S killed %f26, %f30
    %f20 = FMUL_S %f1, %f6
    %f16 = TRUNC_W_S killed %f16
    %f15 = TRUNC_W_S killed %f15
    %f21 = FMUL_S %f3, %f5
    %f12 = MSUB_S killed %f12, %f2, killed %f17
    %f13 = MSUB_S killed %f18, %f0, killed %f13
    %f17 = MSUB_S %f8, %f7, killed %f28
    %f4 = MSUB_S killed %f8, killed %f4, killed %f10
    %f7 = MSUB_S killed %f14, killed %f7, killed %f9
    %f8 = FMUL_S killed %f23, %f30
    SWC1 killed %f30, %sp, 136 :: (store 4 into stack)
    %f8 = TRUNC_W_S killed %f8
    %at = MFC1 killed %f8
    SW killed %at, %sp, 308 :: (store 4 into stack)
    %at = MFC1 killed %f15
    SW killed %at, %sp, 304 :: (store 4 into stack)
    %at = MFC1 killed %f16
    SW killed %at, %sp, 300 :: (store 4 into stack)
    %f5 = MSUB_S killed %f20, %f2, killed %f5
    %f6 = MSUB_S killed %f21, %f0, killed %f6
    %f8 = TRUNC_W_S killed %f19
    %f9 = FMUL_S %f3, %f11
    %f10 = FMUL_S %f1, %f7
    %f3 = FMUL_S killed %f3, %f4
    %f1 = FMUL_S killed %f1, %f17
    %f13 = FMUL_S %f31, killed %f13
    SWC1 killed %f13, %sp, 76 :: (store 4 into stack)
    %f30 = FMUL_S %f31, killed %f12
    %at = MFC1 killed %f8
    SW killed %at, %sp, 296 :: (store 4 into stack)
    %f1 = MSUB_S killed %f1, %f2, killed %f4
    %f3 = MSUB_S killed %f3, %f0, killed %f17
    %f2 = MSUB_S killed %f10, killed %f2, killed %f11
    %f0 = MSUB_S killed %f9, killed %f0, killed %f7
    %f4 = FMUL_S %f31, killed %f6
    SWC1 killed %f4, %sp, 72 :: (store 4 into stack)
    %f26 = FMUL_S %f31, killed %f5
    %f0 = FMUL_S %f31, killed %f0
    SWC1 killed %f0, %sp, 68 :: (store 4 into stack)
    %f27 = FMUL_S %f31, killed %f2
    %f0 = FMUL_S %f31, killed %f3
    SWC1 killed %f0, %sp, 64 :: (store 4 into stack)
    %f31 = FMUL_S killed %f31, killed %f1
    %t4 = IMPLICIT_DEF
    %t9 = IMPLICIT_DEF
    %f0 = IMPLICIT_DEF
    SWC1 killed %f0, %sp, 244 :: (store 4 into stack)
    %f25 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 224 :: (store 4 into stack)
    %f0 = IMPLICIT_DEF
    SWC1 killed %f0, %sp, 240 :: (store 4 into stack)
    %f29 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 196 :: (store 4 into stack)
    %f0 = IMPLICIT_DEF
    SWC1 killed %f0, %sp, 232 :: (store 4 into stack)
    %f20 = IMPLICIT_DEF
    %t5 = IMPLICIT_DEF
    %f0 = IMPLICIT_DEF
    SWC1 killed %f0, %sp, 236 :: (store 4 into stack)
    %f21 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 220 :: (store 4 into stack)
    %f0 = IMPLICIT_DEF
    SWC1 killed %f0, %sp, 228 :: (store 4 into stack)
    %f23 = IMPLICIT_DEF
    %s1 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 216 :: (store 4 into stack)
    %t3 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 212 :: (store 4 into stack)
    %t1 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 208 :: (store 4 into stack)
    %t6 = IMPLICIT_DEF
    %s2 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 204 :: (store 4 into stack)
    %t2 = IMPLICIT_DEF
    %at = IMPLICIT_DEF
    SW killed %at, %sp, 200 :: (store 4 into stack)
  
  bb.20 (%ir-block.353, freq 318):
    successors: %bb.24..thread(37), %bb.21(62)
    liveins: %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    BEQ %v0, %zero, %bb.24..thread, implicit-def %at {
      NOP
    }
  
  bb.21 (%ir-block.356, freq 199):
    successors: %bb.43..critedge(3), %bb.22(96)
    liveins: %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    %gp = LW %sp, 23432 :: (load 4 from %ir.sunkaddr47, align 8, !tbaa !74)
    BEQ %gp, %zero, %bb.43..critedge, implicit-def %at {
      NOP
    }
  
  bb.22 (%ir-block.359, freq 193):
    successors: %bb.23(50), %bb.25(50)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    SW killed %v0, %sp, 156 :: (store 4 into stack)
    %f0 = MTC1 %zero
    %f1 = LWC1 %sp, 148 :: (load 4 from stack)
    FCMP_S32 killed %f1, killed %f0, 4, implicit-def %fcc0
    %v1 = LW %sp, 152 :: (load 4 from stack)
    %v0 = LW %sp, 144 :: (load 4 from stack)
    BC1F killed %fcc0, %bb.25, implicit-def %at {
      %a0 = LEA_ADDiu %sp, 23400
    }
  
  bb.23 (freq 96):
    successors: %bb.27(100)
    liveins: %gp, %a0, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    %v1 = LW %sp, 152 :: (load 4 from stack)
    B %bb.27, implicit-def %at {
      %v0 = OR killed %a0, %zero
    }
  
  bb.24..thread (freq 119):
    successors: %bb.25(100)
    liveins: %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    SW killed %v0, %sp, 156 :: (store 4 into stack)
    %v1 = ADDiu %zero, 1
    %gp = LW %sp, 23392 :: (load 4 from %ir.sunkaddr44, align 8, !tbaa !74)
    %v0 = LW %sp, 56 :: (load 4 from stack)
    %a0 = LW %sp, 60 :: (load 4 from stack)
  
  bb.25 (%ir-block.361, freq 216):
    successors: %bb.26(62), %bb.27(37)
    liveins: %gp, %a0, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0, %v1
  
    %at = LW %a0, 32 :: (load 4 from %ir.362, !tbaa !74)
    BLEZ %at, %bb.27, implicit-def %at {
      NOP
    }
  
  bb.26 (%ir-block.365, freq 135):
    successors: %bb.27(100)
    liveins: %gp, %a0, %f24, %f26, %f27, %f30, %f31, %s0, %s4, %t9, %v0, %v1
  
    %at = LW %a0, 20 :: (load 4 from %ir.366, !tbaa !78)
    %a1 = ADDiu %at, 2047
    %t6 = ADDiu %zero, -2048
    %a1 = AND killed %a1, %t6
    %a2 = LW %sp, 120 :: (load 4 from stack)
    %a2 = LW killed %a2, 0 :: (load 4 from %ir.sunkaddr53, !tbaa !91)
    %t7 = LW %a0, 16 :: (load 4 from %ir.373, !tbaa !75)
    SW %t7, %sp, 224 :: (store 4 into stack)
    %a3 = ADDiu %t7, -1
    %t0 = LW %a0, 36 :: (load 4 from %ir.384, !tbaa !77)
    %t1 = LW %a0, 0 :: (load 4 from %ir.390, !tbaa !68)
    %t2 = SLL %t1, 4
    %a2 = ADDu killed %a2, %t2
    %t0 = SUBu %a1, killed %t0
    %t3 = SRA %a3, 11
    %t4 = SUBu %t6, %at
    %t5 = ADDiu %zero, 2048
    %t5 = SUBu killed %t5, killed %t7
    %a3 = AND killed %a3, killed %t6
    %t6 = LW %a0, 24 :: (load 4 from %ir.381, !tbaa !73)
    %f1 = MTC1 killed %t0
    %f1 = CVT_S_W killed %f1
    %t0 = LW %a2, 4 :: (load 4 from %ir.421, !tbaa !93)
    %t7 = LW %a2, 8 :: (load 4 from %ir.434, !tbaa !93)
    %f2 = MTC1 killed %t3
    %f2 = CVT_S_W killed %f2
    %t3 = LW %sp, 180 :: (load 4 from stack)
    %t8 = ORi %zero, 55768
    %f3 = LWXC1 killed %t3, killed %t8 :: (load 4 from %ir.sunkaddr50, !tbaa !83)
    %t3 = LW %a2, 12 :: (load 4 from %ir.447, !tbaa !93)
    %a3 = ADDu killed %t5, killed %a3
    SW killed %a3, %sp, 220 :: (store 4 into stack)
    %t5 = ADDu killed %t4, killed %a1
    %s1 = SRA killed %t6, 11
    %f0 = LWC1 killed %a0, 28 :: (load 4 from %ir.388, !tbaa !76)
    %t4 = ADDiu killed %at, -1
    %f4 = MTC1 killed %t0
    %f4 = CVT_S_W killed %f4
    %f5 = LWC1 %sp, 104 :: (load 4 from stack)
    %f4 = MADD_S killed %f4, %f5, %f1
    %f14 = LWC1 %sp, 96 :: (load 4 from stack)
    %f5 = MADD_S %f14, killed %f5, %f2
    %f16 = LWC1 %sp, 112 :: (load 4 from stack)
    %f18 = LWC1 %sp, 84 :: (load 4 from stack)
    %f6 = MADD_S %f16, %f18, %f2
    %f13 = LWC1 %sp, 108 :: (load 4 from stack)
    %f15 = LWC1 %sp, 92 :: (load 4 from stack)
    %f7 = MADD_S %f15, %f13, %f2
    %f8 = MTC1 killed %t7
    %f8 = CVT_S_W killed %f8
    %at = SLL %t1, 2
    %a0 = SLL killed %t1, 3
    %a1 = LW killed %a2, 0 :: (load 4 from %ir.408, !tbaa !93)
    %f17 = LWC1 %sp, 100 :: (load 4 from stack)
    %f12 = LWC1 %sp, 88 :: (load 4 from stack)
    %f9 = MADD_S %f17, %f12, %f2
    %f10 = MTC1 killed %t3
    %f10 = CVT_S_W killed %f10
    %at = ADDu killed %a0, killed %at
    %a0 = LW %sp, 140 :: (load 4 from stack)
    %at = ADDu %a0, killed %at
    %f11 = LWC1 killed %at, 24200 :: (load 4 from %ir.392, !tbaa !67)
    %f3 = FADD_S killed %f11, killed %f3
    %f8 = MADD_S killed %f8, killed %f12, %f1
    %f10 = MADD_S killed %f10, killed %f18, %f1
    %f23 = LWC1 %sp, 128 :: (load 4 from stack)
    %f20 = LWC1 %sp, 124 :: (load 4 from stack)
    %f11 = MADD_S %f23, %f20, %f2
    %at = ADDu killed %a0, killed %t2
    %f12 = MTC1 killed %a1
    %f12 = CVT_S_W killed %f12
    %f12 = MADD_S killed %f12, killed %f13, %f1
    %f25 = LWC1 %sp, 80 :: (load 4 from stack)
    %f13 = MADD_S %f25, %f24, %f2
    SWC1 killed %f13, %sp, 244 :: (store 4 into stack)
    %f28 = LWC1 %sp, 68 :: (load 4 from stack)
    %f13 = MADD_S %f28, %f27, %f2
    SWC1 killed %f13, %sp, 236 :: (store 4 into stack)
    %f29 = LWC1 %sp, 64 :: (load 4 from stack)
    %f13 = MADD_S %f29, %f31, %f2
    SWC1 killed %f13, %sp, 228 :: (store 4 into stack)
    %f12 = MADD_S killed %f12, killed %f15, %f0
    %f21 = LWC1 %sp, 76 :: (load 4 from stack)
    %f13 = MADD_S %f21, %f30, %f2
    SWC1 killed %f13, %sp, 232 :: (store 4 into stack)
    %f22 = LWC1 %sp, 72 :: (load 4 from stack)
    %f2 = MADD_S %f22, %f26, killed %f2
    SWC1 killed %f2, %sp, 240 :: (store 4 into stack)
    %f2 = MADD_S killed %f4, killed %f14, %f0
    %f19 = LWC1 %sp, 136 :: (load 4 from stack)
    %f4 = FMUL_S killed %f9, %f19
    %f9 = FMUL_S %f26, %f1
    %f13 = FMUL_S %f27, %f1
    %f14 = FMUL_S %f30, %f1
    %f5 = FMUL_S killed %f5, %f19
    %f7 = FMUL_S killed %f7, %f19
    %f15 = FMUL_S %f24, %f1
    %f10 = MADD_S killed %f10, killed %f16, %f0
    %f16 = LWC1 %at, 16140 :: (load 4 from %ir.460, !tbaa !67)
    %f8 = MADD_S killed %f8, killed %f17, %f0
    %f3 = FMUL_S killed %f3, %f19
    %f6 = FMUL_S killed %f6, %f19
    %f17 = FMUL_S %f31, %f1
    %f18 = LWC1 %sp, 132 :: (load 4 from stack)
    %f16 = FDIV_S killed %f18, killed %f16
    %a0 = ORi %zero, 56972
    %f18 = LWXC1 %at, killed %a0 :: (load 4 from %ir.500, !tbaa !67)
    %f11 = FMUL_S killed %f11, killed %f19
    %f11 = TRUNC_W_S killed %f11
    %f4 = TRUNC_W_S killed %f4
    %f14 = MADD_S killed %f14, killed %f21, %f0
    %a0 = ORi %zero, 56968
    %f19 = LWXC1 %at, killed %a0 :: (load 4 from %ir.490, !tbaa !67)
    %f13 = MADD_S killed %f13, killed %f28, %f0
    %a0 = ORi %zero, 56964
    %f21 = LWXC1 %at, killed %a0 :: (load 4 from %ir.480, !tbaa !67)
    %f9 = MADD_S killed %f9, killed %f22, %f0
    %a0 = ORi %zero, 56960
    %f22 = LWXC1 killed %at, killed %a0 :: (load 4 from %ir.470, !tbaa !67)
    %f2 = TRUNC_W_S killed %f2
    %f7 = TRUNC_W_S killed %f7
    %f5 = TRUNC_W_S killed %f5
    %f15 = MADD_S killed %f15, killed %f25, %f0
    %f17 = MADD_S killed %f17, killed %f29, %f0
    %f12 = TRUNC_W_S killed %f12
    %f6 = TRUNC_W_S killed %f6
    %at = MFC1 killed %f6
    SW killed %at, %sp, 216 :: (store 4 into stack)
    %at = MFC1 killed %f4
    SW killed %at, %sp, 212 :: (store 4 into stack)
    %at = MFC1 killed %f5
    SW killed %at, %sp, 208 :: (store 4 into stack)
    %at = MFC1 killed %f7
    SW killed %at, %sp, 204 :: (store 4 into stack)
    %at = MFC1 killed %f11
    SW killed %at, %sp, 200 :: (store 4 into stack)
    %f1 = MADD_S killed %f3, killed %f20, killed %f1
    %at = MFC1 killed %f12
    %a0 = MFC1 killed %f2
    %f2 = TRUNC_W_S killed %f8
    %a1 = MFC1 killed %f2
    %f2 = TRUNC_W_S killed %f10
    %f4 = LWC1 %sp, 116 :: (load 4 from stack)
    %f25 = MADD_S killed %f18, killed %f15, %f4
    %a2 = MFC1 killed %f2
    %t1 = ADDiu killed %a1, 1024
    %t6 = ADDiu killed %a0, 1024
    %t2 = ADDiu killed %at, 1024
    %f20 = MADD_S %f16, killed %f14, %f4
    %t3 = ADDiu killed %a2, 1024
    %f0 = MADD_S killed %f1, killed %f23, killed %f0
    %f1 = FMUL_S killed %f22, %f16
    %f2 = FMUL_S %f16, killed %f21
    %f3 = FMUL_S killed %f16, killed %f19
    %f29 = MADD_S killed %f3, killed %f9, %f4
    %f21 = MADD_S killed %f2, killed %f13, %f4
    %f23 = MADD_S killed %f1, killed %f17, killed %f4
    %f0 = TRUNC_W_S killed %f0
    %at = MFC1 killed %f0
    %s2 = ADDiu killed %at, 1024
  
  bb.27 (%ir-block.509, freq 312):
    successors: %bb.30(37), %bb.28(62)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0, %v1
  
    BEQ %v1, %zero, %bb.30, implicit-def %at {
      NOP
    }
  
  bb.28 (%ir-block.511, freq 195):
    successors: %bb.29(62), %bb.30(37)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    %at = LW %v0, 32 :: (load 4 from %ir.512, !tbaa !74)
    BLEZ %at, %bb.30, implicit-def %at {
      NOP
    }
  
  bb.29 (%ir-block.515, freq 122):
    successors: %bb.30(100)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %v0
  
    %at = LW %v0, 16 :: (load 4 from %ir.519, !tbaa !75)
    SW killed %at, %sp, 196 :: (store 4 into stack)
    %at = LW killed %v0, 20 :: (load 4 from %ir.516, !tbaa !78)
    %t9 = ADDiu killed %at, -1
  
  bb.30 (%ir-block.521, freq 312):
    successors: %bb.42..loopexit61(37), %bb.31(62)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    BEQ %gp, %zero, %bb.42..loopexit61, implicit-def %at {
      NOP
    }
  
  bb.31 (%ir-block.523, freq 195):
    successors: %bb.32(62), %bb.42..loopexit61(37)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    BLEZ %gp, %bb.42..loopexit61, implicit-def %at {
      NOP
    }
  
  bb.32 (freq 122):
    successors: %bb.33..lr.ph97(100)
    liveins: %gp, %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    %f0 = LWC1 %sp, 244 :: (load 4 from stack)
    %f0 = FADD_S %f24, killed %f0
    SWC1 killed %f0, %sp, 192 :: (store 4 into stack)
    %f0 = LWC1 %sp, 240 :: (load 4 from stack)
    %f0 = FADD_S %f26, killed %f0
    SWC1 killed %f0, %sp, 188 :: (store 4 into stack)
    %f0 = LWC1 %sp, 236 :: (load 4 from stack)
    %f0 = FADD_S %f27, killed %f0
    SWC1 killed %f0, %sp, 184 :: (store 4 into stack)
    %f0 = LWC1 %sp, 228 :: (load 4 from stack)
    %f22 = FADD_S %f31, killed %f0
    %f0 = LWC1 %sp, 232 :: (load 4 from stack)
    %f28 = FADD_S %f30, killed %f0
  
  bb.33..lr.ph97 (freq 3908):
    successors: %bb.34(62), %bb.41(37)
    liveins: %gp, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    %v0 = SRA %t4, 11
    %at = SRA %t9, 11
    %s3 = SUBu killed %at, %v0
    BLEZ %s3, %bb.41, implicit-def %at {
      NOP
    }
  
  bb.34 (%ir-block.542, freq 2442):
    successors: %bb.35..lr.ph80.preheader(50), %bb.38..lr.ph.preheader(50)
    liveins: %gp, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s1, %s2, %s3, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9, %v0
  
    SW killed %v0, %sp, 252 :: (store 4 into stack)
    SW killed %s1, %sp, 280 :: (store 4 into stack)
    SW killed %t5, %sp, 284 :: (store 4 into stack)
    SW killed %t4, %sp, 288 :: (store 4 into stack)
    %at = LW %sp, 176 :: (load 4 from stack)
    %v0 = ADDiu %zero, 7424
    BNE %at, %v0, %bb.38..lr.ph.preheader, implicit-def %at {
      NOP
    }
  
  bb.35..lr.ph80.preheader (freq 1221):
    successors: %bb.36..lr.ph80(100)
    liveins: %gp, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s2, %s3, %s4, %t1, %t2, %t3, %t6, %t9
  
    SW killed %gp, %sp, 256 :: (store 4 into stack)
    SW killed %t2, %sp, 264 :: (store 4 into stack)
    SW killed %t6, %sp, 268 :: (store 4 into stack)
    SW killed %t3, %sp, 272 :: (store 4 into stack)
    SW killed %t1, %sp, 276 :: (store 4 into stack)
    SW killed %t9, %sp, 292 :: (store 4 into stack)
    %t9 = LW %s0, target-flags(<unknown>) $memset :: (load 4 from call-entry $memset)
    %a0 = LEA_ADDiu %sp, 19520
    %a1 = LW %sp, 160 :: (load 4 from stack)
    %a2 = OR %s3, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %t9 = LW %s0, target-flags(<unknown>) $memset :: (load 4 from call-entry $memset)
    %a0 = LEA_ADDiu %sp, 18240
    %a1 = LW %sp, 164 :: (load 4 from stack)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit-def %sp {
      %a2 = OR %s3, %zero
    }
    %a0 = LEA_ADDiu %sp, 16960
    %t9 = LW %s0, target-flags(<unknown>) $memset :: (load 4 from call-entry $memset)
    %a1 = LW %sp, 168 :: (load 4 from stack)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit-def %sp {
      %a2 = OR %s3, %zero
    }
    %a0 = LEA_ADDiu %sp, 15680
    %t9 = LW %s0, target-flags(<unknown>) $memset :: (load 4 from call-entry $memset)
    %a1 = LW %sp, 172 :: (load 4 from stack)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit-def %sp {
      %a2 = OR %s3, %zero
    }
    %v0 = LEA_ADDiu %sp, 320
    %v1 = LEA_ADDiu %sp, 5440
    %a0 = LEA_ADDiu %sp, 10560
    %a2 = LEA_ADDiu %sp, 20800
    %a1 = OR %s3, %zero
    SW killed %s3, %sp, 248 :: (store 4 into stack)
    %f0 = FMOV_S %f25
    %f2 = FMOV_S %f29
    %f1 = FMOV_S %f20
    %f3 = FMOV_S %f21
    %f4 = FMOV_S %f23
    %a3 = OR %s2, %zero
    SW killed %s2, %sp, 260 :: (store 4 into stack)
  
  bb.36..lr.ph80 (freq 2442):
    successors: %bb.37..lr.ph80(50), %bb.36..lr.ph80(50)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s4, %v0, %v1
  
    %f5 = FMUL_S %f1, %f0
    %at = LW %s0, target-flags(<unknown>) %const.9 :: (load 4 from got)
    %t0 = ADDu %a3, %s4
    %t1 = ADDiu %a2, 2
    %t2 = ADDiu %a0, 4
    %t3 = ADDiu %v1, 4
    %t4 = ADDiu %v0, 4
    %a1 = ADDiu killed %a1, -1
    %f1 = FADD_S %f30, killed %f1
    %f0 = FADD_S %f24, killed %f0
    %f6 = FADD_S %f26, %f2
    %f7 = FADD_S %f27, %f3
    %f8 = FADD_S %f31, %f4
    %d5 = CVT_D32_S killed %f4
    %d6 = CVT_D32_S killed %f3
    %d1 = CVT_D32_S killed %f2
    %d2 = CVT_D32_S killed %f5
    %d7 = LDC1 killed %at, target-flags(<unknown>) %const.9 :: (load 8 from constant-pool)
    %at = SRL killed %a3, 11
    SH killed %at, killed %a2, 0 :: (store 2 into %ir.lsr.iv3638, !tbaa !88)
    %d2 = FDIV_D32 killed %d7, killed %d2
    %d1 = FMUL_D32 killed %d1, %d2
    %d6 = FMUL_D32 killed %d6, %d2
    %d2 = FMUL_D32 killed %d5, killed %d2
    %f4 = CVT_S_D32 killed %d2
    SWC1 killed %f4, killed %a0, 0 :: (store 4 into %ir.lsr.iv3335, !tbaa !67)
    %f4 = CVT_S_D32 killed %d6
    SWC1 killed %f4, killed %v1, 0 :: (store 4 into %ir.lsr.iv3032, !tbaa !67)
    %f2 = CVT_S_D32 killed %d1
    SWC1 killed %f2, killed %v0, 0 :: (store 4 into %ir.lsr.iv2729, !tbaa !67)
    %a2 = OR killed %t1, %zero
    %a0 = OR killed %t2, %zero
    %v1 = OR killed %t3, %zero
    %v0 = OR killed %t4, %zero
    %f2 = FMOV_S killed %f6
    %f3 = FMOV_S killed %f7
    %f4 = FMOV_S killed %f8
    BNE %a1, %zero, %bb.36..lr.ph80, implicit-def %at {
      %a3 = OR killed %t0, %zero
    }
  
  bb.37..lr.ph80 (freq 1221):
    successors: %bb.40..loopexit(100)
  
    B %bb.40..loopexit, implicit-def %at {
      NOP
    }
  
  bb.38..lr.ph.preheader (freq 1221):
    successors: %bb.39..lr.ph(100)
    liveins: %gp, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s2, %s3, %s4, %t1, %t2, %t3, %t6, %t9
  
    SW killed %gp, %sp, 256 :: (store 4 into stack)
    SW killed %t9, %sp, 292 :: (store 4 into stack)
    %at = SLTi %t3, 0
    %a0 = SLTi %t1, 0
    %a1 = SLTi %t6, 0
    %a2 = SLTi %t2, 0
    %v0 = LEA_ADDiu %sp, 320
    %v1 = LEA_ADDiu %sp, 5440
    SW %t2, %sp, 264 :: (store 4 into stack)
    %t2 = MOVN_I_I %zero, killed %a2, killed %t2
    %t4 = OR %t6, %zero
    SW killed %t6, %sp, 268 :: (store 4 into stack)
    %t4 = MOVN_I_I %zero, killed %a1, killed %t4
    %t5 = OR %t1, %zero
    SW killed %t1, %sp, 276 :: (store 4 into stack)
    %t5 = MOVN_I_I %zero, killed %a0, killed %t5
    SW %t3, %sp, 272 :: (store 4 into stack)
    %t6 = OR killed %t3, %zero
    %t6 = MOVN_I_I %zero, killed %at, killed %t6
    %a0 = LEA_ADDiu %sp, 10560
    %a2 = LEA_ADDiu %sp, 15680
    %a3 = LEA_ADDiu %sp, 16960
    %t0 = LEA_ADDiu %sp, 18240
    %t1 = LEA_ADDiu %sp, 19520
    %t7 = LEA_ADDiu %sp, 20800
    %a1 = OR %s3, %zero
    SW killed %s3, %sp, 248 :: (store 4 into stack)
    %f0 = FMOV_S %f25
    %f2 = FMOV_S %f29
    %f1 = FMOV_S %f20
    %f3 = FMOV_S %f21
    %f4 = FMOV_S %f23
    %t3 = OR %s2, %zero
    SW killed %s2, %sp, 260 :: (store 4 into stack)
  
  bb.39..lr.ph (freq 39085):
    successors: %bb.40..loopexit(3), %bb.39..lr.ph(96)
    liveins: %a0, %a1, %a2, %a3, %f0, %f1, %f2, %f3, %f4, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s4, %t0, %t1, %t2, %t3, %t4, %t5, %t6, %t7, %v0, %v1
  
    %f5 = FMUL_S %f1, %f0
    %at = LW %s0, target-flags(<unknown>) %const.9 :: (load 4 from got)
    %t8 = SRL %t3, 11
    %s1 = ADDiu %t7, 2
    %s3 = ADDiu %t1, 1
    %ra = ADDiu %t0, 1
    %t9 = LW %sp, 296 :: (load 4 from stack)
    %t9 = ADDu %t6, killed %t9
    SW killed %t9, %sp, 316 :: (store 4 into stack)
    %s5 = ADDiu %a3, 1
    %t9 = LW %sp, 308 :: (load 4 from stack)
    %t9 = ADDu %t5, killed %t9
    SW killed %t9, %sp, 312 :: (store 4 into stack)
    %s2 = ADDiu %a2, 1
    %t9 = LW %sp, 304 :: (load 4 from stack)
    %s7 = ADDu %t4, killed %t9
    %fp = ADDiu %a0, 4
    %t9 = LW %sp, 300 :: (load 4 from stack)
    %s6 = ADDu %t2, killed %t9
    %gp = OR killed %s0, %zero
    %s0 = ADDiu %v1, 4
    %t3 = ADDu killed %t3, %s4
    %a1 = ADDiu killed %a1, -1
    %d3 = CVT_D32_S killed %f5
    %t9 = OR killed %s4, %zero
    %s4 = ADDiu %v0, 4
    %d4 = LDC1 killed %at, target-flags(<unknown>) %const.9 :: (load 8 from constant-pool)
    SH killed %t8, killed %t7, 0 :: (store 2 into %ir.lsr.iv2224, !tbaa !88)
    %f0 = FADD_S %f24, killed %f0
    %f1 = FADD_S %f30, killed %f1
    %f5 = FADD_S %f26, %f2
    %f10 = FADD_S %f27, %f3
    %f11 = FADD_S %f31, %f4
    %d6 = CVT_D32_S killed %f4
    %d7 = CVT_D32_S killed %f3
    %d1 = CVT_D32_S killed %f2
    %at = SRL killed %t6, 11
    %t5 = SRL killed %t5, 11
    %t4 = SRL killed %t4, 11
    %t2 = SRL killed %t2, 11
    %d3 = FDIV_D32 killed %d4, killed %d3
    SB killed %t2, killed %t1, 0 :: (store 1 into %ir.lsr.iv1921, !tbaa !89)
    SB killed %t4, killed %t0, 0 :: (store 1 into %ir.lsr.iv1618, !tbaa !89)
    SB killed %t5, killed %a3, 0 :: (store 1 into %ir.lsr.iv1315, !tbaa !89)
    SB killed %at, killed %a2, 0 :: (store 1 into %ir.lsr.iv911, !tbaa !89)
    %d1 = FMUL_D32 killed %d1, %d3
    %d4 = FMUL_D32 killed %d7, %d3
    %d3 = FMUL_D32 killed %d6, killed %d3
    %f4 = CVT_S_D32 killed %d3
    SWC1 killed %f4, killed %a0, 0 :: (store 4 into %ir.lsr.iv68, !tbaa !67)
    %f4 = CVT_S_D32 killed %d4
    SWC1 killed %f4, killed %v1, 0 :: (store 4 into %ir.lsr.iv35, !tbaa !67)
    %f2 = CVT_S_D32 killed %d1
    SWC1 killed %f2, killed %v0, 0 :: (store 4 into %ir.lsr.iv12, !tbaa !67)
    %t7 = OR killed %s1, %zero
    %t1 = OR killed %s3, %zero
    %t0 = OR killed %ra, %zero
    %a3 = OR killed %s5, %zero
    %a2 = OR killed %s2, %zero
    %a0 = OR killed %fp, %zero
    %v1 = OR killed %s0, %zero
    %s0 = OR killed %gp, %zero
    %v0 = OR killed %s4, %zero
    %s4 = OR killed %t9, %zero
    %f2 = FMOV_S killed %f5
    %f3 = FMOV_S killed %f10
    %f4 = FMOV_S killed %f11
    %t6 = LW %sp, 316 :: (load 4 from stack)
    %t5 = LW %sp, 312 :: (load 4 from stack)
    %t4 = OR killed %s7, %zero
    BNE %a1, %zero, %bb.39..lr.ph, implicit-def %at {
      %t2 = OR killed %s6, %zero
    }
  
  bb.40..loopexit (freq 2442):
    successors: %bb.41(100)
    liveins: %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s4
  
    %at = LEA_ADDiu %sp, 320
    %v0 = LEA_ADDiu %sp, 19520
    %v1 = LEA_ADDiu %sp, 18240
    %a0 = LEA_ADDiu %sp, 16960
    %a1 = LEA_ADDiu %sp, 15680
    %a2 = ADDiu %zero, 9
    SW killed %a2, %sp, 52 :: (store 4 into unknown)
    SW killed %a1, %sp, 48 :: (store 4 into unknown)
    SW killed %a0, %sp, 44 :: (store 4 into unknown)
    SW killed %v1, %sp, 40 :: (store 4 into unknown)
    SW killed %v0, %sp, 36 :: (store 4 into unknown)
    SW killed %at, %sp, 28 :: (store 4 into unknown)
    %at = LEA_ADDiu %sp, 5440
    SW killed %at, %sp, 24 :: (store 4 into unknown)
    %at = LEA_ADDiu %sp, 10560
    SW killed %at, %sp, 20 :: (store 4 into unknown)
    %at = LEA_ADDiu %sp, 20800
    SW killed %at, %sp, 16 :: (store 4 into unknown)
    SW %zero, %sp, 32 :: (store 4 into unknown)
    %t9 = LW %s0, target-flags(<unknown>) @gl_write_texture_span :: (load 4 from call-entry @gl_write_texture_span)
    %a0 = LW %sp, 180 :: (load 4 from stack)
    %a1 = LW %sp, 248 :: (load 4 from stack)
    %a2 = LW %sp, 252 :: (load 4 from stack)
    %s1 = LW %sp, 280 :: (load 4 from stack)
    %a3 = OR %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %t9 = LW %sp, 292 :: (load 4 from stack)
    %t4 = LW %sp, 288 :: (load 4 from stack)
    %t5 = LW %sp, 284 :: (load 4 from stack)
    %t1 = LW %sp, 276 :: (load 4 from stack)
    %t3 = LW %sp, 272 :: (load 4 from stack)
    %t6 = LW %sp, 268 :: (load 4 from stack)
    %t2 = LW %sp, 264 :: (load 4 from stack)
    %s2 = LW %sp, 260 :: (load 4 from stack)
    %gp = LW %sp, 256 :: (load 4 from stack)
  
  bb.41 (%ir-block.626, freq 3908):
    successors: %bb.33..lr.ph97(96), %bb.42..loopexit61(3)
    liveins: %gp, %f20, %f21, %f22, %f23, %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    %at = LW %sp, 220 :: (load 4 from stack)
    %t5 = ADDu killed %t5, killed %at
    %at = SLTi %t5, 0
    %v0 = LW %sp, 300 :: (load 4 from stack)
    %v0 = MOVZ_I_I %zero, %at, killed %v0
    %v1 = ADDiu %t5, -2048
    %a0 = LW %sp, 308 :: (load 4 from stack)
    %a0 = MOVZ_I_I %zero, %at, killed %a0
    %a1 = LW %sp, 204 :: (load 4 from stack)
    %v0 = ADDu killed %a1, killed %v0
    %a1 = OR %s4, %zero
    %a1 = MOVZ_I_I %zero, %at, killed %a1
    %a2 = LW %sp, 304 :: (load 4 from stack)
    %a2 = MOVZ_I_I %zero, %at, killed %a2
    %a3 = LW %sp, 296 :: (load 4 from stack)
    %a3 = MOVZ_I_I %zero, %at, killed %a3
    %f0 = LWC1 %sp, 188 :: (load 4 from stack)
    %f1 = LWC1 %sp, 240 :: (load 4 from stack)
    %f0 = MOVZ_I_S killed %f1, %at, killed %f0
    %f1 = FMOV_S %f28
    %f2 = LWC1 %sp, 232 :: (load 4 from stack)
    %f1 = MOVZ_I_S killed %f2, %at, killed %f1
    %t0 = LW %sp, 212 :: (load 4 from stack)
    %a0 = ADDu killed %t0, killed %a0
    %f2 = FMOV_S %f22
    %f3 = LWC1 %sp, 228 :: (load 4 from stack)
    %f2 = MOVZ_I_S killed %f3, %at, killed %f2
    %t5 = MOVZ_I_I killed %v1, %at, killed %t5
    %v1 = LW %sp, 196 :: (load 4 from stack)
    %t9 = ADDu killed %t9, killed %v1
    %v1 = LW %sp, 224 :: (load 4 from stack)
    %t4 = ADDu killed %t4, killed %v1
    %f3 = LWC1 %sp, 192 :: (load 4 from stack)
    %f4 = LWC1 %sp, 244 :: (load 4 from stack)
    %f3 = MOVZ_I_S killed %f4, %at, killed %f3
    %v1 = LW %sp, 216 :: (load 4 from stack)
    %v1 = ADDu killed %v1, killed %a3
    %f4 = LWC1 %sp, 184 :: (load 4 from stack)
    %f5 = LWC1 %sp, 236 :: (load 4 from stack)
    %f4 = MOVZ_I_S killed %f5, killed %at, killed %f4
    %at = LW %sp, 208 :: (load 4 from stack)
    %at = ADDu killed %at, killed %a2
    %a2 = LW %sp, 200 :: (load 4 from stack)
    %a1 = ADDu killed %a2, killed %a1
    %t2 = ADDu killed %v0, killed %t2
    %s2 = ADDu killed %a1, killed %s2
    %f23 = FADD_S killed %f23, killed %f2
    %t6 = ADDu killed %at, killed %t6
    %f21 = FADD_S killed %f21, killed %f4
    %t1 = ADDu killed %a0, killed %t1
    %at = ADDiu %gp, -1
    %f20 = FADD_S killed %f20, killed %f1
    %t3 = ADDu killed %v1, killed %t3
    %s1 = ADDiu killed %s1, 1
    %f29 = FADD_S killed %f29, killed %f0
    %f25 = FADD_S killed %f25, killed %f3
    %v0 = SLTi killed %gp, 2
    BEQ %v0, %zero, %bb.33..lr.ph97, implicit-def %at {
      %gp = OR killed %at, %zero
    }
  
  bb.42..loopexit61 (freq 312):
    successors: %bb.20(96), %bb.43..critedge(3)
    liveins: %f20, %f21, %f23, %f24, %f25, %f26, %f27, %f29, %f30, %f31, %s0, %s1, %s2, %s4, %t1, %t2, %t3, %t4, %t5, %t6, %t9
  
    %v0 = LW %sp, 156 :: (load 4 from stack)
    %v0 = ADDiu killed %v0, 1
    %at = SLTi %v0, 2
    BNE %at, %zero, %bb.20, implicit-def %at {
      NOP
    }
  
  bb.43..critedge (freq 51):
    liveouts:
  
    %s0 = LW %sp, 23480 :: (load 4 from stack)
    %s1 = LW %sp, 23484 :: (load 4 from stack)
    %s2 = LW %sp, 23488 :: (load 4 from stack)
    %s3 = LW %sp, 23492 :: (load 4 from stack)
    %s4 = LW %sp, 23496 :: (load 4 from stack)
    %s5 = LW %sp, 23500 :: (load 4 from stack)
    %s6 = LW %sp, 23504 :: (load 4 from stack)
    %s7 = LW %sp, 23508 :: (load 4 from stack)
    %fp = LW %sp, 23512 :: (load 4 from stack)
    %ra = LW %sp, 23516 :: (load 4 from stack)
    %d10 = LDC1 %sp, 23520 :: (load 8 from stack)
    %d11 = LDC1 %sp, 23528 :: (load 8 from stack)
    %d12 = LDC1 %sp, 23536 :: (load 8 from stack)
    %d13 = LDC1 %sp, 23544 :: (load 8 from stack)
    %d14 = LDC1 %sp, 23552 :: (load 8 from stack)
    %d15 = LDC1 %sp, 23560 :: (load 8 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 23568
    }

...
