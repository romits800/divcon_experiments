--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_xform_points_4fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: gpr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: fgr32 }
  - { id: 53, class: fgr32 }
  - { id: 54, class: fgr32 }
  - { id: 55, class: fgr32 }
  - { id: 56, class: fgr32 }
  - { id: 57, class: fgr32 }
  - { id: 58, class: fgr32 }
  - { id: 59, class: fgr32 }
  - { id: 60, class: fgr32 }
  - { id: 61, class: fgr32 }
  - { id: 62, class: fgr32 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: fgr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: gpr32 }
  - { id: 79, class: gpr32 }
  - { id: 80, class: fgr32 }
  - { id: 81, class: fgr32 }
  - { id: 82, class: fgr32 }
  - { id: 83, class: fgr32 }
  - { id: 84, class: fgr32 }
  - { id: 85, class: fgr32 }
  - { id: 86, class: fgr32 }
  - { id: 87, class: fgr32 }
  - { id: 88, class: fgr32 }
  - { id: 89, class: fgr32 }
  - { id: 90, class: fgr32 }
  - { id: 91, class: fgr32 }
  - { id: 92, class: fgr32 }
  - { id: 93, class: fgr32 }
  - { id: 94, class: fgr32 }
  - { id: 95, class: fgr32 }
  - { id: 96, class: fgr32 }
  - { id: 97, class: fgr32 }
  - { id: 98, class: fgr32 }
  - { id: 99, class: fgr32 }
  - { id: 100, class: fgr32 }
  - { id: 101, class: gpr32 }
  - { id: 102, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%48' }
  - { reg: '%a1', virtual-reg: '%49' }
  - { reg: '%a2', virtual-reg: '%50' }
  - { reg: '%a3', virtual-reg: '%51' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.15(75), %bb.1..preheader24(25)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %78 = ADDu %v0, %t9
    %51 = COPY %a3
    %50 = COPY %a2
    %49 = COPY %a1
    %48 = COPY %a0
    %7 = LWC1 %50, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %50, 36, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %50, 20, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %50, 4, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %50, 48, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %50, 32, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %50, 16, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %50, 0, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.m, !tbaa !1)
    %52 = MTC1 %zero
    FCMP_S32 %3, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.1..preheader24, implicit-def dead %at
    B %bb.15, implicit-def dead %at
  
  bb.15 (%ir-block.0, freq 19):
    successors: %bb.3..preheader22(66), %bb.1..preheader24(33)
  
    FCMP_S32 %7, %52, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.3..preheader22, implicit-def dead %at
    B %bb.1..preheader24, implicit-def dead %at
  
  bb.1..preheader24 (freq 12):
    successors: %bb.2..lr.ph32.preheader(62), %bb.7..loopexit23(37)
  
    BEQ %48, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.2..lr.ph32.preheader, implicit-def dead %at
  
  bb.2..lr.ph32.preheader (freq 8):
    successors: %bb.6..lr.ph32(100)
  
    %9 = ADDiu %51, 8
    %8 = ADDiu %49, 4
    B %bb.6..lr.ph32, implicit-def dead %at
  
  bb.3..preheader22 (freq 12):
    successors: %bb.4..lr.ph30.preheader(62), %bb.7..loopexit23(37)
  
    BEQ %48, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.4..lr.ph30.preheader, implicit-def dead %at
  
  bb.4..lr.ph30.preheader (freq 8):
    successors: %bb.5..lr.ph30(100)
  
    %11 = ADDiu %51, 8
    %10 = ADDiu %49, 4
  
  bb.5..lr.ph30 (freq 256):
    successors: %bb.7..loopexit23(3), %bb.5..lr.ph30(96)
  
    %12 = PHI %11, %bb.4..lr.ph30.preheader, %17, %bb.5..lr.ph30
    %13 = PHI %10, %bb.4..lr.ph30.preheader, %16, %bb.5..lr.ph30
    %14 = PHI %48, %bb.4..lr.ph30.preheader, %15, %bb.5..lr.ph30
    %66 = LWC1 %12, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep44, !tbaa !1)
    %67 = FMUL_S %5, %66
    %68 = FMUL_S %1, %66
    %17 = ADDiu %12, 16
    %16 = ADDiu %13, 16
    %15 = ADDiu %14, -1
    %69 = LWC1 %12, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep45, !tbaa !1)
    %70 = LWC1 %12, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv4143, !tbaa !1)
    %71 = MADD_S killed %68, %0, %69
    %72 = MADD_S killed %67, %4, %69
    %73 = MADD_S killed %72, %6, %70
    %74 = MADD_S killed %71, %2, %70
    SWC1 killed %74, %13, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep38, !tbaa !1)
    SWC1 killed %73, %13, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3537, !tbaa !1)
    BEQ %15, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.5..lr.ph30, implicit-def dead %at
  
  bb.6..lr.ph32 (freq 256):
    successors: %bb.7..loopexit23(3), %bb.6..lr.ph32(96)
  
    %18 = PHI %9, %bb.2..lr.ph32.preheader, %23, %bb.6..lr.ph32
    %19 = PHI %8, %bb.2..lr.ph32.preheader, %22, %bb.6..lr.ph32
    %20 = PHI %48, %bb.2..lr.ph32.preheader, %21, %bb.6..lr.ph32
    %54 = LWC1 %18, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep60, !tbaa !1)
    %55 = FMUL_S %1, %54
    %56 = FMUL_S %5, %54
    %23 = ADDiu %18, 16
    %22 = ADDiu %19, 16
    %21 = ADDiu %20, -1
    %57 = LWC1 %18, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep61, !tbaa !1)
    %58 = LWC1 %18, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv5658, !tbaa !1)
    %59 = LWC1 %18, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep59, !tbaa !1)
    %60 = MADD_S killed %56, %4, %57
    %61 = MADD_S killed %55, %0, %57
    %62 = MADD_S killed %61, %2, %58
    %63 = MADD_S killed %60, %6, %58
    %64 = MADD_S killed %63, %7, %59
    %65 = MADD_S killed %62, %3, %59
    SWC1 killed %65, %19, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep53, !tbaa !1)
    SWC1 killed %64, %19, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv5052, !tbaa !1)
    BNE %21, %zero, %bb.6..lr.ph32, implicit-def dead %at
    B %bb.7..loopexit23, implicit-def dead %at
  
  bb.7..loopexit23 (freq 25):
    successors: %bb.18..loopexit23(93), %bb.8..preheader20(6)
  
    %31 = LWC1 %50, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.69, !tbaa !1)
    %30 = LWC1 %50, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.67, !tbaa !1)
    %29 = LWC1 %50, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.65, !tbaa !1)
    %28 = LWC1 %50, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.63, !tbaa !1)
    %27 = LWC1 %50, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.61, !tbaa !1)
    %26 = LWC1 %50, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.59, !tbaa !1)
    %25 = LWC1 %50, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.57, !tbaa !1)
    %24 = LWC1 %50, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.55, !tbaa !1)
    FCMP_S32 %28, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.18..loopexit23, implicit-def dead %at
  
  bb.18..loopexit23 (freq 24):
    successors: %bb.17..loopexit23(93), %bb.8..preheader20(6)
  
    FCMP_S32 %29, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.17..loopexit23, implicit-def dead %at
  
  bb.17..loopexit23 (freq 22):
    successors: %bb.16..loopexit23(85), %bb.8..preheader20(14)
  
    FCMP_S32 %30, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.16..loopexit23, implicit-def dead %at
  
  bb.16..loopexit23 (freq 19):
    successors: %bb.10..preheader(66), %bb.8..preheader20(33)
  
    %79 = LW %78, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %80 = LWC1 killed %79, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    FCMP_S32 %31, killed %80, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.10..preheader, implicit-def dead %at
    B %bb.8..preheader20, implicit-def dead %at
  
  bb.8..preheader20 (freq 12):
    successors: %bb.9..lr.ph28.preheader(62), %bb.14..loopexit(37)
  
    BEQ %48, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.9..lr.ph28.preheader, implicit-def dead %at
  
  bb.9..lr.ph28.preheader (freq 8):
    successors: %bb.13..lr.ph28(100)
  
    %33 = ADDiu %51, 8
    %32 = ADDiu %49, 12
    B %bb.13..lr.ph28, implicit-def dead %at
  
  bb.10..preheader (freq 12):
    successors: %bb.11..lr.ph.preheader(62), %bb.14..loopexit(37)
  
    BEQ %48, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.11..lr.ph.preheader, implicit-def dead %at
  
  bb.11..lr.ph.preheader (freq 8):
    successors: %bb.12..lr.ph(100)
  
    %35 = ADDiu %51, 8
    %34 = ADDiu %49, 12
  
  bb.12..lr.ph (freq 255):
    successors: %bb.14..loopexit(3), %bb.12..lr.ph(96)
  
    %36 = PHI %35, %bb.11..lr.ph.preheader, %41, %bb.12..lr.ph
    %37 = PHI %34, %bb.11..lr.ph.preheader, %40, %bb.12..lr.ph
    %38 = PHI %48, %bb.11..lr.ph.preheader, %39, %bb.12..lr.ph
    %93 = LWC1 %36, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %94 = FMUL_S %25, killed %93
    %41 = ADDiu %36, 16
    %40 = ADDiu %37, 16
    %39 = ADDiu %38, -1
    %95 = LWC1 %36, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep13, !tbaa !1)
    %96 = LWC1 %36, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv810, !tbaa !1)
    %97 = LWC1 %36, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep11, !tbaa !1)
    %98 = MADD_S killed %94, %24, killed %95
    %99 = MADD_S killed %98, %26, killed %96
    %100 = MADD_S killed %99, %27, %97
    SWC1 killed %100, %37, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SWC1 %97, %37, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BEQ %39, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.12..lr.ph, implicit-def dead %at
  
  bb.13..lr.ph28 (freq 256):
    successors: %bb.14..loopexit(3), %bb.13..lr.ph28(96)
  
    %42 = PHI %33, %bb.9..lr.ph28.preheader, %47, %bb.13..lr.ph28
    %43 = PHI %32, %bb.9..lr.ph28.preheader, %46, %bb.13..lr.ph28
    %44 = PHI %48, %bb.9..lr.ph28.preheader, %45, %bb.13..lr.ph28
    %81 = LWC1 %42, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep29, !tbaa !1)
    %82 = FMUL_S %25, %81
    %83 = FMUL_S %29, %81
    %47 = ADDiu %42, 16
    %46 = ADDiu %43, 16
    %45 = ADDiu %44, -1
    %84 = LWC1 %42, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep30, !tbaa !1)
    %85 = LWC1 %42, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv2527, !tbaa !1)
    %86 = LWC1 %42, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep28, !tbaa !1)
    %87 = MADD_S killed %83, %28, %84
    %88 = MADD_S killed %82, %24, %84
    %89 = MADD_S killed %88, %26, %85
    %90 = MADD_S killed %87, %30, %85
    %91 = MADD_S killed %90, %31, %86
    %92 = MADD_S killed %89, %27, %86
    SWC1 killed %92, %43, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep21, !tbaa !1)
    SWC1 killed %91, %43, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv1820, !tbaa !1)
    BNE %45, %zero, %bb.13..lr.ph28, implicit-def dead %at
    B %bb.14..loopexit, implicit-def dead %at
  
  bb.14..loopexit (freq 25):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_xform_points_3fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: fgr32 }
  - { id: 17, class: fgr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: fgr32 }
  - { id: 20, class: fgr32 }
  - { id: 21, class: fgr32 }
  - { id: 22, class: fgr32 }
  - { id: 23, class: fgr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: fgr32 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: fgr32 }
  - { id: 49, class: fgr32 }
  - { id: 50, class: fgr32 }
  - { id: 51, class: fgr32 }
  - { id: 52, class: fgr32 }
  - { id: 53, class: fgr32 }
  - { id: 54, class: fgr32 }
  - { id: 55, class: fgr32 }
  - { id: 56, class: fgr32 }
  - { id: 57, class: fgr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: fgr32 }
  - { id: 61, class: fgr32 }
  - { id: 62, class: fgr32 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: gpr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: fgr32 }
  - { id: 79, class: fgr32 }
  - { id: 80, class: gpr32 }
  - { id: 81, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%40' }
  - { reg: '%a1', virtual-reg: '%41' }
  - { reg: '%a2', virtual-reg: '%42' }
  - { reg: '%a3', virtual-reg: '%43' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.3.._crit_edge(37), %bb.1..lr.ph19.preheader(62)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %58 = ADDu %v0, %t9
    %43 = COPY %a3
    %42 = COPY %a2
    %41 = COPY %a1
    %40 = COPY %a0
    BEQ %40, %zero, %bb.3.._crit_edge, implicit-def dead %at
    B %bb.1..lr.ph19.preheader, implicit-def dead %at
  
  bb.1..lr.ph19.preheader (freq 16):
    successors: %bb.2..lr.ph19(100)
  
    %7 = LWC1 %42, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %42, 36, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %42, 20, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %42, 4, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %42, 48, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %42, 32, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %42, 16, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %42, 0, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.m, !tbaa !1)
    %9 = ADDiu %43, 8
    %8 = ADDiu %41, 4
  
  bb.2..lr.ph19 (freq 512):
    successors: %bb.3.._crit_edge(3), %bb.2..lr.ph19(96)
  
    %10 = PHI %9, %bb.1..lr.ph19.preheader, %15, %bb.2..lr.ph19
    %11 = PHI %8, %bb.1..lr.ph19.preheader, %14, %bb.2..lr.ph19
    %12 = PHI %40, %bb.1..lr.ph19.preheader, %13, %bb.2..lr.ph19
    %44 = LWC1 %10, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep41, !tbaa !1)
    %45 = FMUL_S %5, %44
    %46 = FMUL_S %1, %44
    %15 = ADDiu %10, 12
    %14 = ADDiu %11, 16
    %13 = ADDiu %12, -1
    %47 = LWC1 %10, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep42, !tbaa !1)
    %48 = LWC1 %10, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv3840, !tbaa !1)
    %49 = MADD_S killed %46, %0, %47
    %50 = MADD_S killed %45, %4, %47
    %51 = MADD_S killed %50, %6, %48
    %52 = MADD_S killed %49, %2, %48
    %53 = FADD_S %3, killed %52
    SWC1 killed %53, %11, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep35, !tbaa !1)
    %54 = FADD_S %7, killed %51
    SWC1 killed %54, %11, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3234, !tbaa !1)
    BNE %13, %zero, %bb.2..lr.ph19, implicit-def dead %at
    B %bb.3.._crit_edge, implicit-def dead %at
  
  bb.3.._crit_edge (freq 25):
    successors: %bb.13.._crit_edge(93), %bb.4..preheader13(6)
  
    %23 = LWC1 %42, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.48, !tbaa !1)
    %22 = LWC1 %42, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.46, !tbaa !1)
    %21 = LWC1 %42, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.44, !tbaa !1)
    %20 = LWC1 %42, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.42, !tbaa !1)
    %19 = LWC1 %42, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.40, !tbaa !1)
    %18 = LWC1 %42, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.38, !tbaa !1)
    %17 = LWC1 %42, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.36, !tbaa !1)
    %16 = LWC1 %42, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.34, !tbaa !1)
    %55 = MTC1 %zero
    FCMP_S32 %20, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.13.._crit_edge, implicit-def dead %at
  
  bb.13.._crit_edge (freq 24):
    successors: %bb.12.._crit_edge(93), %bb.4..preheader13(6)
  
    FCMP_S32 %21, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.12.._crit_edge, implicit-def dead %at
  
  bb.12.._crit_edge (freq 22):
    successors: %bb.11.._crit_edge(85), %bb.4..preheader13(14)
  
    FCMP_S32 %22, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.11.._crit_edge, implicit-def dead %at
  
  bb.11.._crit_edge (freq 19):
    successors: %bb.6..preheader(66), %bb.4..preheader13(33)
  
    %59 = LW %58, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %60 = LWC1 killed %59, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    FCMP_S32 %23, killed %60, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.6..preheader, implicit-def dead %at
    B %bb.4..preheader13, implicit-def dead %at
  
  bb.4..preheader13 (freq 12):
    successors: %bb.5..lr.ph17.preheader(62), %bb.10..loopexit(37)
  
    BEQ %40, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.5..lr.ph17.preheader, implicit-def dead %at
  
  bb.5..lr.ph17.preheader (freq 8):
    successors: %bb.9..lr.ph17(100)
  
    %25 = ADDiu %43, 8
    %24 = ADDiu %41, 12
    B %bb.9..lr.ph17, implicit-def dead %at
  
  bb.6..preheader (freq 12):
    successors: %bb.7..lr.ph.preheader(62), %bb.10..loopexit(37)
  
    BEQ %40, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.7..lr.ph.preheader, implicit-def dead %at
  
  bb.7..lr.ph.preheader (freq 8):
    successors: %bb.8..lr.ph(100)
  
    %27 = ADDiu %43, 8
    %26 = ADDiu %41, 12
    %76 = LUi 16256
  
  bb.8..lr.ph (freq 255):
    successors: %bb.10..loopexit(3), %bb.8..lr.ph(96)
  
    %28 = PHI %27, %bb.7..lr.ph.preheader, %33, %bb.8..lr.ph
    %29 = PHI %26, %bb.7..lr.ph.preheader, %32, %bb.8..lr.ph
    %30 = PHI %40, %bb.7..lr.ph.preheader, %31, %bb.8..lr.ph
    %72 = LWC1 %28, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep11, !tbaa !1)
    %73 = FMUL_S %17, killed %72
    %33 = ADDiu %28, 12
    %32 = ADDiu %29, 16
    %31 = ADDiu %30, -1
    %74 = LWC1 %28, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %75 = LWC1 %28, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv810, !tbaa !1)
    %77 = MADD_S killed %73, %16, killed %74
    %78 = MADD_S killed %77, %18, killed %75
    %79 = FADD_S %19, killed %78
    SWC1 killed %79, %29, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SW %76, %29, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BEQ %31, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.8..lr.ph, implicit-def dead %at
  
  bb.9..lr.ph17 (freq 256):
    successors: %bb.10..loopexit(3), %bb.9..lr.ph17(96)
  
    %34 = PHI %25, %bb.5..lr.ph17.preheader, %39, %bb.9..lr.ph17
    %35 = PHI %24, %bb.5..lr.ph17.preheader, %38, %bb.9..lr.ph17
    %36 = PHI %40, %bb.5..lr.ph17.preheader, %37, %bb.9..lr.ph17
    %61 = LWC1 %34, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep26, !tbaa !1)
    %62 = FMUL_S %21, %61
    %63 = FMUL_S %17, %61
    %39 = ADDiu %34, 12
    %38 = ADDiu %35, 16
    %37 = ADDiu %36, -1
    %64 = LWC1 %34, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep27, !tbaa !1)
    %65 = LWC1 %34, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv2325, !tbaa !1)
    %66 = MADD_S killed %63, %16, %64
    %67 = MADD_S killed %62, %20, %64
    %68 = MADD_S killed %67, %22, %65
    %69 = MADD_S killed %66, %18, %65
    %70 = FADD_S %19, killed %69
    SWC1 killed %70, %35, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep20, !tbaa !1)
    %71 = FADD_S %23, killed %68
    SWC1 killed %71, %35, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv1719, !tbaa !1)
    BNE %37, %zero, %bb.9..lr.ph17, implicit-def dead %at
    B %bb.10..loopexit, implicit-def dead %at
  
  bb.10..loopexit (freq 25):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_xform_normals_3fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: afgr64 }
  - { id: 17, class: afgr64 }
  - { id: 18, class: afgr64 }
  - { id: 19, class: afgr64 }
  - { id: 20, class: afgr64 }
  - { id: 21, class: afgr64 }
  - { id: 22, class: afgr64 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
  - { id: 39, class: fgr32 }
  - { id: 40, class: fgr32 }
  - { id: 41, class: fgr32 }
  - { id: 42, class: fgr32 }
  - { id: 43, class: fgr32 }
  - { id: 44, class: fgr32 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: fgr32 }
  - { id: 49, class: afgr64 }
  - { id: 50, class: afgr64 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: afgr64 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: afgr64 }
  - { id: 56, class: afgr64 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: afgr64 }
  - { id: 59, class: afgr64 }
  - { id: 60, class: afgr64 }
  - { id: 61, class: afgr64 }
  - { id: 62, class: afgr64 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: fgr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: gpr32 }
  - { id: 79, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%32' }
  - { reg: '%a1', virtual-reg: '%33' }
  - { reg: '%a2', virtual-reg: '%34' }
  - { reg: '%a3', virtual-reg: '%35' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
constants:       
  - id:              0
    value:           'double 1.000000e+00'
    alignment:       8
  - id:              1
    value:           double 1.000000e-30
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 34):
    successors: %bb.3..preheader(37), %bb.1..preheader14(62)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %51 = ADDu %v0, %t9
    %35 = COPY %a3
    %34 = COPY %a2
    %33 = COPY %a1
    %32 = COPY %a0
    %36 = LW %fixed-stack.0, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack, align 8)
    %8 = LWC1 %34, 40, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.17, !tbaa !1)
    %7 = LWC1 %34, 24, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.15, !tbaa !1)
    %6 = LWC1 %34, 8, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.13, !tbaa !1)
    %5 = LWC1 %34, 36, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.11, !tbaa !1)
    %4 = LWC1 %34, 20, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.9, !tbaa !1)
    %3 = LWC1 %34, 4, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.7, !tbaa !1)
    %2 = LWC1 %34, 32, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.5, !tbaa !1)
    %1 = LWC1 %34, 16, <0x3a15fb0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.3, !tbaa !1)
    %0 = LWC1 %34, 0, <0x3a292a0> = !{!"unison-memory-partition", i32 9} :: (load 4 from %ir.m, !tbaa !1)
    BEQ killed %36, %zero, %bb.3..preheader, implicit-def dead %at
    B %bb.1..preheader14, implicit-def dead %at
  
  bb.1..preheader14 (freq 21):
    successors: %bb.2..lr.ph18.preheader(62), %bb.9..loopexit(37)
  
    BEQ %32, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.2..lr.ph18.preheader, implicit-def dead %at
  
  bb.2..lr.ph18.preheader (freq 13):
    successors: %bb.5..lr.ph18(100)
  
    %10 = ADDiu %35, 8
    %9 = ADDiu %33, 8
    %54 = LW %51, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %55 = LDC1 %54, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 8 from constant-pool)
    %57 = LW %51, target-flags(<unknown>) %const.1, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from got)
    %58 = LDC1 %57, target-flags(<unknown>) %const.1, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 8 from constant-pool)
    B %bb.5..lr.ph18, implicit-def dead %at
  
  bb.3..preheader (freq 12):
    successors: %bb.4..lr.ph.preheader(62), %bb.9..loopexit(37)
  
    BEQ %32, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.4..lr.ph.preheader, implicit-def dead %at
  
  bb.4..lr.ph.preheader (freq 8):
    successors: %bb.8..lr.ph(100)
  
    %12 = ADDiu %35, 8
    %11 = ADDiu %33, 8
    B %bb.8..lr.ph, implicit-def dead %at
  
  bb.5..lr.ph18 (freq 426):
    successors: %bb.7..lr.ph18.split(62), %bb.6.call.sqrt(37)
  
    %13 = PHI %10, %bb.2..lr.ph18.preheader, %25, %bb.7..lr.ph18.split
    %14 = PHI %9, %bb.2..lr.ph18.preheader, %24, %bb.7..lr.ph18.split
    %15 = PHI %32, %bb.2..lr.ph18.preheader, %23, %bb.7..lr.ph18.split
    %37 = LWC1 %13, -4, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.scevgep28, !tbaa !1)
    %38 = FMUL_S %3, %37
    %39 = FMUL_S %4, %37
    %40 = FMUL_S %5, %37
    %41 = LWC1 %13, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep29, !tbaa !1)
    %42 = LWC1 %13, 0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.lsr.iv2527, !tbaa !1)
    %43 = MADD_S killed %40, %2, %41
    %44 = MADD_S killed %39, %1, %41
    %45 = MADD_S killed %38, %0, %41
    %46 = MADD_S killed %45, %6, %42
    %47 = MADD_S killed %44, %7, %42
    %48 = MADD_S killed %43, %8, %42
    %18 = CVT_D32_S killed %48
    %17 = CVT_D32_S killed %47
    %49 = FMUL_D32 %17, %17
    %16 = CVT_D32_S killed %46
    %50 = MADD_D32 killed %49, %16, %16
    %19 = MADD_D32 killed %50, %18, %18
    %20 = FSQRT_D32 %19
    FCMP_D32 %20, %20, 17, implicit-def %fcc0
    BC1F %fcc0, %bb.7..lr.ph18.split, implicit-def dead %at
    B %bb.6.call.sqrt, implicit-def dead %at
  
  bb.6.call.sqrt (freq 159):
    successors: %bb.7..lr.ph18.split(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %52 = LW %51, target-flags(<unknown>) @sqrt, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @sqrt)
    %d6 = COPY %19
    %gp = COPY %51
    %t9 = COPY %52
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %d6, implicit %gp, implicit-def %sp, implicit-def %d0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %53 = COPY %d0
    %21 = COPY %53
  
  bb.7..lr.ph18.split (freq 426):
    successors: %bb.9..loopexit(3), %bb.5..lr.ph18(96)
  
    %22 = PHI %20, %bb.5..lr.ph18, %21, %bb.6.call.sqrt
    %56 = FDIV_D32 %55, %22
    %25 = ADDiu %13, 12
    %24 = ADDiu %14, 12
    %23 = ADDiu %15, -1
    FCMP_D32 %22, %58, 23, implicit-def %fcc0
    %59 = MOVF_D32 killed %56, %fcc0, %55
    %60 = FMUL_D32 %18, %59
    %61 = FMUL_D32 %17, %59
    %62 = FMUL_D32 %16, %59
    %63 = CVT_S_D32 killed %62
    SWC1 killed %63, %14, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep22, !tbaa !1)
    %64 = CVT_S_D32 killed %61
    SWC1 killed %64, %14, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep21, !tbaa !1)
    %65 = CVT_S_D32 killed %60
    SWC1 killed %65, %14, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.51, !tbaa !1)
    BEQ %23, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.5..lr.ph18, implicit-def dead %at
  
  bb.8..lr.ph (freq 255):
    successors: %bb.9..loopexit(3), %bb.8..lr.ph(96)
  
    %26 = PHI %12, %bb.4..lr.ph.preheader, %31, %bb.8..lr.ph
    %27 = PHI %11, %bb.4..lr.ph.preheader, %30, %bb.8..lr.ph
    %28 = PHI %32, %bb.4..lr.ph.preheader, %29, %bb.8..lr.ph
    %66 = LWC1 %26, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %67 = FMUL_S %5, %66
    %68 = FMUL_S %4, %66
    %69 = FMUL_S %3, %66
    %31 = ADDiu %26, 12
    %30 = ADDiu %27, 12
    %29 = ADDiu %28, -1
    %70 = LWC1 %26, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep13, !tbaa !1)
    %71 = LWC1 %26, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv911, !tbaa !1)
    %72 = MADD_S killed %69, %0, %70
    %73 = MADD_S killed %68, %1, %70
    %74 = MADD_S killed %67, %2, %70
    %75 = MADD_S killed %74, %8, %71
    %76 = MADD_S killed %73, %7, %71
    %77 = MADD_S killed %72, %6, %71
    SWC1 killed %77, %27, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep6, !tbaa !1)
    SWC1 killed %76, %27, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SWC1 killed %75, %27, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BNE %29, %zero, %bb.8..lr.ph, implicit-def dead %at
    B %bb.9..loopexit, implicit-def dead %at
  
  bb.9..loopexit (freq 34):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_transform_vector
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: fgr32 }
  - { id: 10, class: fgr32 }
  - { id: 11, class: fgr32 }
  - { id: 12, class: fgr32 }
  - { id: 13, class: fgr32 }
  - { id: 14, class: fgr32 }
  - { id: 15, class: fgr32 }
  - { id: 16, class: fgr32 }
  - { id: 17, class: fgr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: fgr32 }
  - { id: 20, class: fgr32 }
  - { id: 21, class: fgr32 }
  - { id: 22, class: fgr32 }
  - { id: 23, class: fgr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: fgr32 }
  - { id: 33, class: fgr32 }
  - { id: 34, class: fgr32 }
  - { id: 35, class: fgr32 }
  - { id: 36, class: fgr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%a2', virtual-reg: '%2' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %a2
    liveouts:
  
    %2 = COPY %a2
    %1 = COPY %a1
    %0 = COPY %a0
    %3 = LWC1 %2, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %1, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.2, !tbaa !1)
    %5 = FMUL_S %4, killed %3
    %6 = LWC1 %2, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.m, !tbaa !1)
    %7 = LWC1 %1, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.v, !tbaa !1)
    %8 = LWC1 %2, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %9 = LWC1 %1, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.4, !tbaa !1)
    %10 = LWC1 %2, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.18, !tbaa !1)
    %11 = LWC1 %1, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.6, !tbaa !1)
    %12 = MADD_S killed %5, %7, killed %6
    %13 = MADD_S killed %12, %9, killed %8
    %14 = MADD_S killed %13, %11, killed %10
    SWC1 killed %14, %0, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.u, !tbaa !1)
    %15 = LWC1 %2, 20, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.25, !tbaa !1)
    %16 = FMUL_S %4, killed %15
    %17 = LWC1 %2, 16, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.22, !tbaa !1)
    %18 = LWC1 %2, 24, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.29, !tbaa !1)
    %19 = LWC1 %2, 28, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.33, !tbaa !1)
    %20 = MADD_S killed %16, %7, killed %17
    %21 = MADD_S killed %20, %9, killed %18
    %22 = MADD_S killed %21, %11, killed %19
    SWC1 killed %22, %0, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.37, !tbaa !1)
    %23 = LWC1 %2, 36, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.41, !tbaa !1)
    %24 = FMUL_S %4, killed %23
    %25 = LWC1 %2, 32, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.38, !tbaa !1)
    %26 = LWC1 %2, 40, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.45, !tbaa !1)
    %27 = LWC1 %2, 44, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.49, !tbaa !1)
    %28 = MADD_S killed %24, %7, killed %25
    %29 = MADD_S killed %28, %9, killed %26
    %30 = MADD_S killed %29, %11, killed %27
    SWC1 killed %30, %0, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.53, !tbaa !1)
    %31 = LWC1 %2, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.57, !tbaa !1)
    %32 = FMUL_S %4, killed %31
    %33 = LWC1 %2, 48, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.54, !tbaa !1)
    %34 = LWC1 %2, 56, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.61, !tbaa !1)
    %35 = LWC1 %2, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.65, !tbaa !1)
    %36 = MADD_S killed %32, %7, killed %33
    %37 = MADD_S killed %36, %9, killed %34
    %38 = MADD_S killed %37, %11, killed %35
    SWC1 killed %38, %0, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.69, !tbaa !1)
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_xform_texcoords_4fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: fgr32 }
  - { id: 10, class: fgr32 }
  - { id: 11, class: fgr32 }
  - { id: 12, class: fgr32 }
  - { id: 13, class: fgr32 }
  - { id: 14, class: fgr32 }
  - { id: 15, class: fgr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: fgr32 }
  - { id: 33, class: fgr32 }
  - { id: 34, class: fgr32 }
  - { id: 35, class: fgr32 }
  - { id: 36, class: fgr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
  - { id: 39, class: fgr32 }
  - { id: 40, class: fgr32 }
  - { id: 41, class: fgr32 }
  - { id: 42, class: fgr32 }
  - { id: 43, class: fgr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%21' }
  - { reg: '%a1', virtual-reg: '%22' }
  - { reg: '%a2', virtual-reg: '%23' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 12):
    successors: %bb.3.._crit_edge(37), %bb.1..lr.ph.preheader(62)
    liveins: %a0, %a1, %a2
  
    %23 = COPY %a2
    %22 = COPY %a1
    %21 = COPY %a0
    BEQ %21, %zero, %bb.3.._crit_edge, implicit-def dead %at
    B %bb.1..lr.ph.preheader, implicit-def dead %at
  
  bb.1..lr.ph.preheader (freq 8):
    successors: %bb.2..lr.ph(100)
  
    %15 = LWC1 %23, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.30, !tbaa !1)
    %14 = LWC1 %23, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.28, !tbaa !1)
    %13 = LWC1 %23, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.26, !tbaa !1)
    %12 = LWC1 %23, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.24, !tbaa !1)
    %11 = LWC1 %23, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.22, !tbaa !1)
    %10 = LWC1 %23, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.20, !tbaa !1)
    %9 = LWC1 %23, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.18, !tbaa !1)
    %8 = LWC1 %23, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.16, !tbaa !1)
    %7 = LWC1 %23, 52, <0x3a15fb0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %23, 36, <0x3a292a0> = !{!"unison-memory-partition", i32 9} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %23, 20, <0x3a57050> = !{!"unison-memory-partition", i32 10} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %23, 4, <0x39dcba0> = !{!"unison-memory-partition", i32 11} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %23, 48, <0x3a57a20> = !{!"unison-memory-partition", i32 12} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %23, 32, <0x39f4ac0> = !{!"unison-memory-partition", i32 13} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %23, 16, <0x3a29640> = !{!"unison-memory-partition", i32 14} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %23, 0, <0x39f46e0> = !{!"unison-memory-partition", i32 15} :: (load 4 from %ir.m, !tbaa !1)
    %16 = ADDiu %22, 8
  
  bb.2..lr.ph (freq 255):
    successors: %bb.3.._crit_edge(3), %bb.2..lr.ph(96)
  
    %17 = PHI %16, %bb.1..lr.ph.preheader, %20, %bb.2..lr.ph
    %18 = PHI %21, %bb.1..lr.ph.preheader, %19, %bb.2..lr.ph
    %24 = LWC1 %17, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep8, !tbaa !1)
    %25 = FMUL_S %1, %24
    %26 = FMUL_S %5, %24
    %27 = FMUL_S %9, %24
    %28 = FMUL_S %13, %24
    %20 = ADDiu %17, 16
    %19 = ADDiu %18, -1
    %29 = LWC1 %17, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep10, !tbaa !1)
    %30 = LWC1 %17, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv24, !tbaa !1)
    %31 = LWC1 %17, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep6, !tbaa !1)
    %32 = MADD_S killed %28, %12, %29
    %33 = MADD_S killed %27, %8, %29
    %34 = MADD_S killed %26, %4, %29
    %35 = MADD_S killed %25, %0, %29
    %36 = MADD_S killed %35, %2, %30
    %37 = MADD_S killed %34, %6, %30
    %38 = MADD_S killed %33, %10, %30
    %39 = MADD_S killed %32, %14, %30
    %40 = MADD_S killed %39, %15, %31
    %41 = MADD_S killed %38, %11, %31
    %42 = MADD_S killed %37, %7, %31
    %43 = MADD_S killed %36, %3, %31
    SWC1 killed %43, %17, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep9, !tbaa !1)
    SWC1 killed %42, %17, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep7, !tbaa !1)
    SWC1 killed %41, %17, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    SWC1 killed %40, %17, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    BNE %19, %zero, %bb.2..lr.ph, implicit-def dead %at
    B %bb.3.._crit_edge, implicit-def dead %at
  
  bb.3.._crit_edge (freq 12):
    liveouts:
  
    RetRA

...
--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/test-input/c/mediabench/mips_zip/build-mips/mesa/mesa.xform.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_4fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [4 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fcmp oeq float %7, 0.000000e+00
    %17 = fcmp oeq float %15, 0.000000e+00
    %or.cond = and i1 %16, %17
    br i1 %or.cond, label %.preheader22, label %.preheader24
  
  .preheader24:                                     ; preds = %0
    %18 = icmp ne i32 %n, 0
    br i1 %18, label %.lr.ph32.preheader, label %.loopexit23
  
  .lr.ph32.preheader:                               ; preds = %.preheader24
    %scevgep48 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep4849 = bitcast float* %scevgep48 to [4 x float]*
    %scevgep54 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep5455 = bitcast float* %scevgep54 to [4 x float]*
    br label %.lr.ph32
  
  .preheader22:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph30.preheader, label %.loopexit23
  
  .lr.ph30.preheader:                               ; preds = %.preheader22
    %scevgep33 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3334 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep3940 = bitcast float* %scevgep39 to [4 x float]*
    br label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %.lr.ph30, %.lr.ph30.preheader
    %lsr.iv41 = phi [4 x float]* [ %34, %.lr.ph30 ], [ %scevgep3940, %.lr.ph30.preheader ]
    %lsr.iv35 = phi [4 x float]* [ %33, %.lr.ph30 ], [ %scevgep3334, %.lr.ph30.preheader ]
    %lsr.iv31 = phi i32 [ %lsr.iv.next32, %.lr.ph30 ], [ %n, %.lr.ph30.preheader ]
    %lsr.iv4143 = bitcast [4 x float]* %lsr.iv41 to float*
    %lsr.iv3537 = bitcast [4 x float]* %lsr.iv35 to float*
    %scevgep45 = getelementptr float, float* %lsr.iv4143, i32 -2
    %20 = load float, float* %scevgep45, align 4, !tbaa !1
    %scevgep44 = getelementptr float, float* %lsr.iv4143, i32 -1
    %21 = load float, float* %scevgep44, align 4, !tbaa !1
    %22 = load float, float* %lsr.iv4143, align 4, !tbaa !1
    %23 = fmul float %1, %20
    %24 = fmul float %3, %21
    %25 = fadd float %23, %24
    %26 = fmul float %5, %22
    %27 = fadd float %25, %26
    %scevgep38 = getelementptr float, float* %lsr.iv3537, i32 -1
    store float %27, float* %scevgep38, align 4, !tbaa !1
    %28 = fmul float %9, %20
    %29 = fmul float %11, %21
    %30 = fadd float %28, %29
    %31 = fmul float %13, %22
    %32 = fadd float %30, %31
    store float %32, float* %lsr.iv3537, align 4, !tbaa !1
    %lsr.iv.next32 = add i32 %lsr.iv31, -1
    %scevgep36 = getelementptr [4 x float], [4 x float]* %lsr.iv35, i32 1, i32 0
    %33 = bitcast float* %scevgep36 to [4 x float]*
    %scevgep42 = getelementptr [4 x float], [4 x float]* %lsr.iv41, i32 1, i32 0
    %34 = bitcast float* %scevgep42 to [4 x float]*
    %exitcond36 = icmp eq i32 %lsr.iv.next32, 0
    br i1 %exitcond36, label %.loopexit23, label %.lr.ph30
  
  .lr.ph32:                                         ; preds = %.lr.ph32, %.lr.ph32.preheader
    %lsr.iv56 = phi [4 x float]* [ %54, %.lr.ph32 ], [ %scevgep5455, %.lr.ph32.preheader ]
    %lsr.iv50 = phi [4 x float]* [ %53, %.lr.ph32 ], [ %scevgep4849, %.lr.ph32.preheader ]
    %lsr.iv46 = phi i32 [ %lsr.iv.next47, %.lr.ph32 ], [ %n, %.lr.ph32.preheader ]
    %lsr.iv5658 = bitcast [4 x float]* %lsr.iv56 to float*
    %lsr.iv5052 = bitcast [4 x float]* %lsr.iv50 to float*
    %scevgep61 = getelementptr float, float* %lsr.iv5658, i32 -2
    %35 = load float, float* %scevgep61, align 4, !tbaa !1
    %scevgep60 = getelementptr float, float* %lsr.iv5658, i32 -1
    %36 = load float, float* %scevgep60, align 4, !tbaa !1
    %37 = load float, float* %lsr.iv5658, align 4, !tbaa !1
    %scevgep59 = getelementptr float, float* %lsr.iv5658, i32 1
    %38 = load float, float* %scevgep59, align 4, !tbaa !1
    %39 = fmul float %1, %35
    %40 = fmul float %3, %36
    %41 = fadd float %39, %40
    %42 = fmul float %5, %37
    %43 = fadd float %41, %42
    %44 = fmul float %7, %38
    %45 = fadd float %43, %44
    %scevgep53 = getelementptr float, float* %lsr.iv5052, i32 -1
    store float %45, float* %scevgep53, align 4, !tbaa !1
    %46 = fmul float %9, %35
    %47 = fmul float %11, %36
    %48 = fadd float %46, %47
    %49 = fmul float %13, %37
    %50 = fadd float %48, %49
    %51 = fmul float %15, %38
    %52 = fadd float %50, %51
    store float %52, float* %lsr.iv5052, align 4, !tbaa !1
    %lsr.iv.next47 = add i32 %lsr.iv46, -1
    %scevgep51 = getelementptr [4 x float], [4 x float]* %lsr.iv50, i32 1, i32 0
    %53 = bitcast float* %scevgep51 to [4 x float]*
    %scevgep57 = getelementptr [4 x float], [4 x float]* %lsr.iv56, i32 1, i32 0
    %54 = bitcast float* %scevgep57 to [4 x float]*
    %exitcond37 = icmp eq i32 %lsr.iv.next47, 0
    br i1 %exitcond37, label %.loopexit23, label %.lr.ph32
  
  .loopexit23:                                      ; preds = %.lr.ph32, %.lr.ph30, %.preheader22, %.preheader24
    %55 = getelementptr inbounds float, float* %m, i32 2
    %56 = load float, float* %55, align 4, !tbaa !1
    %57 = getelementptr inbounds float, float* %m, i32 6
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = getelementptr inbounds float, float* %m, i32 10
    %60 = load float, float* %59, align 4, !tbaa !1
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = getelementptr inbounds float, float* %m, i32 3
    %64 = load float, float* %63, align 4, !tbaa !1
    %65 = getelementptr inbounds float, float* %m, i32 7
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = getelementptr inbounds float, float* %m, i32 11
    %68 = load float, float* %67, align 4, !tbaa !1
    %69 = getelementptr inbounds float, float* %m, i32 15
    %70 = load float, float* %69, align 4, !tbaa !1
    %71 = fcmp oeq float %64, 0.000000e+00
    %72 = fcmp oeq float %66, 0.000000e+00
    %or.cond15 = and i1 %71, %72
    %73 = fcmp oeq float %68, 0.000000e+00
    %or.cond17 = and i1 %or.cond15, %73
    %74 = fcmp oeq float %70, 1.000000e+00
    %or.cond19 = and i1 %or.cond17, %74
    br i1 %or.cond19, label %.preheader, label %.preheader20
  
  .preheader20:                                     ; preds = %.loopexit23
    %75 = icmp ne i32 %n, 0
    br i1 %75, label %.lr.ph28.preheader, label %.loopexit
  
  .lr.ph28.preheader:                               ; preds = %.preheader20
    %scevgep16 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1617 = bitcast float* %scevgep16 to [4 x float]*
    %scevgep22 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep2223 = bitcast float* %scevgep22 to [4 x float]*
    br label %.lr.ph28
  
  .preheader:                                       ; preds = %.loopexit23
    %76 = icmp ne i32 %n, 0
    br i1 %76, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [4 x float], [4 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [4 x float]* [ %89, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %88, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [4 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv810, i32 -2
    %77 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -1
    %78 = load float, float* %scevgep12, align 4, !tbaa !1
    %79 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 1
    %80 = load float, float* %scevgep11, align 4, !tbaa !1
    %81 = fmul float %56, %77
    %82 = fmul float %58, %78
    %83 = fadd float %81, %82
    %84 = fmul float %60, %79
    %85 = fadd float %83, %84
    %86 = fmul float %62, %80
    %87 = fadd float %85, %86
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %87, float* %scevgep5, align 4, !tbaa !1
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %88 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [4 x float], [4 x float]* %lsr.iv8, i32 1, i32 0
    %89 = bitcast float* %scevgep9 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph28:                                         ; preds = %.lr.ph28, %.lr.ph28.preheader
    %lsr.iv25 = phi [4 x float]* [ %109, %.lr.ph28 ], [ %scevgep2223, %.lr.ph28.preheader ]
    %lsr.iv18 = phi [4 x float]* [ %108, %.lr.ph28 ], [ %scevgep1617, %.lr.ph28.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph28 ], [ %n, %.lr.ph28.preheader ]
    %lsr.iv2527 = bitcast [4 x float]* %lsr.iv25 to float*
    %lsr.iv1820 = bitcast [4 x float]* %lsr.iv18 to float*
    %scevgep30 = getelementptr float, float* %lsr.iv2527, i32 -2
    %90 = load float, float* %scevgep30, align 4, !tbaa !1
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -1
    %91 = load float, float* %scevgep29, align 4, !tbaa !1
    %92 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 1
    %93 = load float, float* %scevgep28, align 4, !tbaa !1
    %94 = fmul float %56, %90
    %95 = fmul float %58, %91
    %96 = fadd float %94, %95
    %97 = fmul float %60, %92
    %98 = fadd float %96, %97
    %99 = fmul float %62, %93
    %100 = fadd float %98, %99
    %scevgep21 = getelementptr float, float* %lsr.iv1820, i32 -1
    store float %100, float* %scevgep21, align 4, !tbaa !1
    %101 = fmul float %64, %90
    %102 = fmul float %66, %91
    %103 = fadd float %101, %102
    %104 = fmul float %68, %92
    %105 = fadd float %103, %104
    %106 = fmul float %70, %93
    %107 = fadd float %105, %106
    store float %107, float* %lsr.iv1820, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [4 x float], [4 x float]* %lsr.iv18, i32 1, i32 0
    %108 = bitcast float* %scevgep19 to [4 x float]*
    %scevgep26 = getelementptr [4 x float], [4 x float]* %lsr.iv25, i32 1, i32 0
    %109 = bitcast float* %scevgep26 to [4 x float]*
    %exitcond35 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond35, label %.loopexit, label %.lr.ph28
  
  .loopexit:                                        ; preds = %.lr.ph28, %.lr.ph, %.preheader, %.preheader20
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_points_3fv(i32 signext %n, [4 x float]* nocapture %q, float* nocapture readonly %m, [3 x float]* nocapture readonly %p) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = icmp eq i32 %n, 0
    br i1 %16, label %._crit_edge, label %.lr.ph19.preheader
  
  .lr.ph19.preheader:                               ; preds = %0
    %scevgep30 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 1
    %scevgep3031 = bitcast float* %scevgep30 to [4 x float]*
    %scevgep36 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep3637 = bitcast float* %scevgep36 to [3 x float]*
    br label %.lr.ph19
  
  .lr.ph19:                                         ; preds = %.lr.ph19, %.lr.ph19.preheader
    %lsr.iv38 = phi [3 x float]* [ %33, %.lr.ph19 ], [ %scevgep3637, %.lr.ph19.preheader ]
    %lsr.iv32 = phi [4 x float]* [ %32, %.lr.ph19 ], [ %scevgep3031, %.lr.ph19.preheader ]
    %lsr.iv28 = phi i32 [ %lsr.iv.next29, %.lr.ph19 ], [ %n, %.lr.ph19.preheader ]
    %lsr.iv3840 = bitcast [3 x float]* %lsr.iv38 to float*
    %lsr.iv3234 = bitcast [4 x float]* %lsr.iv32 to float*
    %scevgep42 = getelementptr float, float* %lsr.iv3840, i32 -2
    %17 = load float, float* %scevgep42, align 4, !tbaa !1
    %scevgep41 = getelementptr float, float* %lsr.iv3840, i32 -1
    %18 = load float, float* %scevgep41, align 4, !tbaa !1
    %19 = load float, float* %lsr.iv3840, align 4, !tbaa !1
    %20 = fmul float %1, %17
    %21 = fmul float %3, %18
    %22 = fadd float %20, %21
    %23 = fmul float %5, %19
    %24 = fadd float %22, %23
    %25 = fadd float %7, %24
    %scevgep35 = getelementptr float, float* %lsr.iv3234, i32 -1
    store float %25, float* %scevgep35, align 4, !tbaa !1
    %26 = fmul float %9, %17
    %27 = fmul float %11, %18
    %28 = fadd float %26, %27
    %29 = fmul float %13, %19
    %30 = fadd float %28, %29
    %31 = fadd float %15, %30
    store float %31, float* %lsr.iv3234, align 4, !tbaa !1
    %lsr.iv.next29 = add i32 %lsr.iv28, -1
    %scevgep33 = getelementptr [4 x float], [4 x float]* %lsr.iv32, i32 1, i32 0
    %32 = bitcast float* %scevgep33 to [4 x float]*
    %scevgep39 = getelementptr [3 x float], [3 x float]* %lsr.iv38, i32 1, i32 0
    %33 = bitcast float* %scevgep39 to [3 x float]*
    %exitcond22 = icmp eq i32 %lsr.iv.next29, 0
    br i1 %exitcond22, label %._crit_edge, label %.lr.ph19
  
  ._crit_edge:                                      ; preds = %.lr.ph19, %0
    %34 = getelementptr inbounds float, float* %m, i32 2
    %35 = load float, float* %34, align 4, !tbaa !1
    %36 = getelementptr inbounds float, float* %m, i32 6
    %37 = load float, float* %36, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 10
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = getelementptr inbounds float, float* %m, i32 14
    %41 = load float, float* %40, align 4, !tbaa !1
    %42 = getelementptr inbounds float, float* %m, i32 3
    %43 = load float, float* %42, align 4, !tbaa !1
    %44 = getelementptr inbounds float, float* %m, i32 7
    %45 = load float, float* %44, align 4, !tbaa !1
    %46 = getelementptr inbounds float, float* %m, i32 11
    %47 = load float, float* %46, align 4, !tbaa !1
    %48 = getelementptr inbounds float, float* %m, i32 15
    %49 = load float, float* %48, align 4, !tbaa !1
    %50 = fcmp oeq float %43, 0.000000e+00
    %51 = fcmp oeq float %45, 0.000000e+00
    %or.cond = and i1 %50, %51
    %52 = fcmp oeq float %47, 0.000000e+00
    %or.cond10 = and i1 %or.cond, %52
    %53 = fcmp oeq float %49, 1.000000e+00
    %or.cond12 = and i1 %or.cond10, %53
    br i1 %or.cond12, label %.preheader, label %.preheader13
  
  .preheader13:                                     ; preds = %._crit_edge
    %54 = icmp ne i32 %n, 0
    br i1 %54, label %.lr.ph17.preheader, label %.loopexit
  
  .lr.ph17.preheader:                               ; preds = %.preheader13
    %scevgep15 = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1516 = bitcast float* %scevgep15 to [4 x float]*
    %scevgep21 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep2122 = bitcast float* %scevgep21 to [3 x float]*
    br label %.lr.ph17
  
  .preheader:                                       ; preds = %._crit_edge
    %55 = icmp ne i32 %n, 0
    br i1 %55, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [4 x float], [4 x float]* %q, i32 0, i32 3
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    %scevgep6 = getelementptr [3 x float], [3 x float]* %p, i32 0, i32 2
    %scevgep67 = bitcast float* %scevgep6 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv8 = phi [3 x float]* [ %66, %.lr.ph ], [ %scevgep67, %.lr.ph.preheader ]
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv810 = bitcast [3 x float]* %lsr.iv8 to float*
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep12 = getelementptr float, float* %lsr.iv810, i32 -2
    %56 = load float, float* %scevgep12, align 4, !tbaa !1
    %scevgep11 = getelementptr float, float* %lsr.iv810, i32 -1
    %57 = load float, float* %scevgep11, align 4, !tbaa !1
    %58 = load float, float* %lsr.iv810, align 4, !tbaa !1
    %59 = fmul float %35, %56
    %60 = fmul float %37, %57
    %61 = fadd float %59, %60
    %62 = fmul float %39, %58
    %63 = fadd float %61, %62
    %64 = fadd float %41, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    store float 1.000000e+00, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %scevgep9 = getelementptr [3 x float], [3 x float]* %lsr.iv8, i32 1, i32 0
    %66 = bitcast float* %scevgep9 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .lr.ph17:                                         ; preds = %.lr.ph17, %.lr.ph17.preheader
    %lsr.iv23 = phi [3 x float]* [ %83, %.lr.ph17 ], [ %scevgep2122, %.lr.ph17.preheader ]
    %lsr.iv17 = phi [4 x float]* [ %82, %.lr.ph17 ], [ %scevgep1516, %.lr.ph17.preheader ]
    %lsr.iv13 = phi i32 [ %lsr.iv.next14, %.lr.ph17 ], [ %n, %.lr.ph17.preheader ]
    %lsr.iv2325 = bitcast [3 x float]* %lsr.iv23 to float*
    %lsr.iv1719 = bitcast [4 x float]* %lsr.iv17 to float*
    %scevgep27 = getelementptr float, float* %lsr.iv2325, i32 -2
    %67 = load float, float* %scevgep27, align 4, !tbaa !1
    %scevgep26 = getelementptr float, float* %lsr.iv2325, i32 -1
    %68 = load float, float* %scevgep26, align 4, !tbaa !1
    %69 = load float, float* %lsr.iv2325, align 4, !tbaa !1
    %70 = fmul float %35, %67
    %71 = fmul float %37, %68
    %72 = fadd float %70, %71
    %73 = fmul float %39, %69
    %74 = fadd float %72, %73
    %75 = fadd float %41, %74
    %scevgep20 = getelementptr float, float* %lsr.iv1719, i32 -1
    store float %75, float* %scevgep20, align 4, !tbaa !1
    %76 = fmul float %43, %67
    %77 = fmul float %45, %68
    %78 = fadd float %76, %77
    %79 = fmul float %47, %69
    %80 = fadd float %78, %79
    %81 = fadd float %49, %80
    store float %81, float* %lsr.iv1719, align 4, !tbaa !1
    %lsr.iv.next14 = add i32 %lsr.iv13, -1
    %scevgep18 = getelementptr [4 x float], [4 x float]* %lsr.iv17, i32 1, i32 0
    %82 = bitcast float* %scevgep18 to [4 x float]*
    %scevgep24 = getelementptr [3 x float], [3 x float]* %lsr.iv23, i32 1, i32 0
    %83 = bitcast float* %scevgep24 to [3 x float]*
    %exitcond21 = icmp eq i32 %lsr.iv.next14, 0
    br i1 %exitcond21, label %.loopexit, label %.lr.ph17
  
  .loopexit:                                        ; preds = %.lr.ph17, %.lr.ph, %.preheader, %.preheader13
    ret void
  }
  
  ; Function Attrs: nounwind
  define void @gl_xform_normals_3fv(i32 signext %n, [3 x float]* nocapture %v, float* nocapture readonly %m, [3 x float]* nocapture readonly %u, i8 zeroext %normalize) #1 {
    %1 = icmp eq i8 %normalize, 0
    %2 = load float, float* %m, align 4, !tbaa !1
    %3 = getelementptr inbounds float, float* %m, i32 4
    %4 = load float, float* %3, align 4, !tbaa !1
    %5 = getelementptr inbounds float, float* %m, i32 8
    %6 = load float, float* %5, align 4, !tbaa !1
    %7 = getelementptr inbounds float, float* %m, i32 1
    %8 = load float, float* %7, align 4, !tbaa !1
    %9 = getelementptr inbounds float, float* %m, i32 5
    %10 = load float, float* %9, align 4, !tbaa !1
    %11 = getelementptr inbounds float, float* %m, i32 9
    %12 = load float, float* %11, align 4, !tbaa !1
    %13 = getelementptr inbounds float, float* %m, i32 2
    %14 = load float, float* %13, align 4, !tbaa !1
    %15 = getelementptr inbounds float, float* %m, i32 6
    %16 = load float, float* %15, align 4, !tbaa !1
    %17 = getelementptr inbounds float, float* %m, i32 10
    %18 = load float, float* %17, align 4, !tbaa !1
    br i1 %1, label %.preheader, label %.preheader14
  
  .preheader14:                                     ; preds = %0
    %19 = icmp ne i32 %n, 0
    br i1 %19, label %.lr.ph18.preheader, label %.loopexit
  
  .lr.ph18.preheader:                               ; preds = %.preheader14
    %scevgep16 = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1617 = bitcast float* %scevgep16 to [3 x float]*
    %scevgep23 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep2324 = bitcast float* %scevgep23 to [3 x float]*
    br label %.lr.ph18
  
  .preheader:                                       ; preds = %0
    %20 = icmp ne i32 %n, 0
    br i1 %20, label %.lr.ph.preheader, label %.loopexit
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr [3 x float], [3 x float]* %v, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [3 x float]*
    %scevgep7 = getelementptr [3 x float], [3 x float]* %u, i32 0, i32 2
    %scevgep78 = bitcast float* %scevgep7 to [3 x float]*
    br label %.lr.ph
  
  .lr.ph18:                                         ; preds = %.lr.ph18.split, %.lr.ph18.preheader
    %lsr.iv25 = phi [3 x float]* [ %62, %.lr.ph18.split ], [ %scevgep2324, %.lr.ph18.preheader ]
    %lsr.iv18 = phi [3 x float]* [ %61, %.lr.ph18.split ], [ %scevgep1617, %.lr.ph18.preheader ]
    %lsr.iv14 = phi i32 [ %lsr.iv.next15, %.lr.ph18.split ], [ %n, %.lr.ph18.preheader ]
    %lsr.iv2527 = bitcast [3 x float]* %lsr.iv25 to float*
    %scevgep29 = getelementptr float, float* %lsr.iv2527, i32 -2
    %21 = load float, float* %scevgep29, align 4, !tbaa !1
    %scevgep28 = getelementptr float, float* %lsr.iv2527, i32 -1
    %22 = load float, float* %scevgep28, align 4, !tbaa !1
    %23 = load float, float* %lsr.iv2527, align 4, !tbaa !1
    %24 = fmul float %2, %21
    %25 = fmul float %8, %22
    %26 = fadd float %24, %25
    %27 = fmul float %14, %23
    %28 = fadd float %26, %27
    %29 = fpext float %28 to double
    %30 = fmul float %4, %21
    %31 = fmul float %10, %22
    %32 = fadd float %30, %31
    %33 = fmul float %16, %23
    %34 = fadd float %32, %33
    %35 = fpext float %34 to double
    %36 = fmul float %6, %21
    %37 = fmul float %12, %22
    %38 = fadd float %36, %37
    %39 = fmul float %18, %23
    %40 = fadd float %38, %39
    %41 = fpext float %40 to double
    %42 = fmul double %29, %29
    %43 = fmul double %35, %35
    %44 = fadd double %42, %43
    %45 = fmul double %41, %41
    %46 = fadd double %45, %44
    %47 = tail call double @sqrt(double %46) #2
    %48 = fcmp oeq double %47, %47
    br i1 %48, label %.lr.ph18.split, label %call.sqrt
  
  call.sqrt:                                        ; preds = %.lr.ph18
    %49 = tail call double @sqrt(double %46) #3
    br label %.lr.ph18.split
  
  .lr.ph18.split:                                   ; preds = %.lr.ph18, %call.sqrt
    %50 = phi double [ %47, %.lr.ph18 ], [ %49, %call.sqrt ]
    %51 = bitcast [3 x float]* %lsr.iv18 to float*
    %52 = fcmp ogt double %50, 1.000000e-30
    %53 = fdiv double 1.000000e+00, %50
    %54 = select i1 %52, double %53, double 1.000000e+00
    %55 = fmul double %29, %54
    %56 = fptrunc double %55 to float
    %scevgep22 = getelementptr float, float* %51, i32 -2
    store float %56, float* %scevgep22, align 4, !tbaa !1
    %57 = fmul double %35, %54
    %58 = fptrunc double %57 to float
    %scevgep21 = getelementptr float, float* %51, i32 -1
    store float %58, float* %scevgep21, align 4, !tbaa !1
    %59 = fmul double %41, %54
    %60 = fptrunc double %59 to float
    store float %60, float* %51, align 4, !tbaa !1
    %lsr.iv.next15 = add i32 %lsr.iv14, -1
    %scevgep19 = getelementptr [3 x float], [3 x float]* %lsr.iv18, i32 1, i32 0
    %61 = bitcast float* %scevgep19 to [3 x float]*
    %scevgep26 = getelementptr [3 x float], [3 x float]* %lsr.iv25, i32 1, i32 0
    %62 = bitcast float* %scevgep26 to [3 x float]*
    %exitcond20 = icmp eq i32 %lsr.iv.next15, 0
    br i1 %exitcond20, label %.loopexit, label %.lr.ph18
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv9 = phi [3 x float]* [ %82, %.lr.ph ], [ %scevgep78, %.lr.ph.preheader ]
    %lsr.iv2 = phi [3 x float]* [ %81, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv911 = bitcast [3 x float]* %lsr.iv9 to float*
    %lsr.iv24 = bitcast [3 x float]* %lsr.iv2 to float*
    %scevgep13 = getelementptr float, float* %lsr.iv911, i32 -2
    %63 = load float, float* %scevgep13, align 4, !tbaa !1
    %scevgep12 = getelementptr float, float* %lsr.iv911, i32 -1
    %64 = load float, float* %scevgep12, align 4, !tbaa !1
    %65 = load float, float* %lsr.iv911, align 4, !tbaa !1
    %66 = fmul float %2, %63
    %67 = fmul float %8, %64
    %68 = fadd float %66, %67
    %69 = fmul float %14, %65
    %70 = fadd float %68, %69
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %70, float* %scevgep6, align 4, !tbaa !1
    %71 = fmul float %4, %63
    %72 = fmul float %10, %64
    %73 = fadd float %71, %72
    %74 = fmul float %16, %65
    %75 = fadd float %73, %74
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %75, float* %scevgep5, align 4, !tbaa !1
    %76 = fmul float %6, %63
    %77 = fmul float %12, %64
    %78 = fadd float %76, %77
    %79 = fmul float %18, %65
    %80 = fadd float %78, %79
    store float %80, float* %lsr.iv24, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [3 x float], [3 x float]* %lsr.iv2, i32 1, i32 0
    %81 = bitcast float* %scevgep3 to [3 x float]*
    %scevgep10 = getelementptr [3 x float], [3 x float]* %lsr.iv9, i32 1, i32 0
    %82 = bitcast float* %scevgep10 to [3 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %.loopexit, label %.lr.ph
  
  .loopexit:                                        ; preds = %.lr.ph18.split, %.lr.ph, %.preheader, %.preheader14
    ret void
  }
  
  ; Function Attrs: nounwind
  declare double @sqrt(double) #1
  
  ; Function Attrs: norecurse nounwind
  define void @gl_transform_vector(float* nocapture %u, float* nocapture readonly %v, float* nocapture readonly %m) #0 {
    %1 = load float, float* %v, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %v, i32 1
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %v, i32 2
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %v, i32 3
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = load float, float* %m, align 4, !tbaa !1
    %9 = fmul float %1, %8
    %10 = getelementptr inbounds float, float* %m, i32 1
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = fmul float %3, %11
    %13 = fadd float %9, %12
    %14 = getelementptr inbounds float, float* %m, i32 2
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = fmul float %5, %15
    %17 = fadd float %13, %16
    %18 = getelementptr inbounds float, float* %m, i32 3
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = fmul float %7, %19
    %21 = fadd float %17, %20
    store float %21, float* %u, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 4
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = fmul float %1, %23
    %25 = getelementptr inbounds float, float* %m, i32 5
    %26 = load float, float* %25, align 4, !tbaa !1
    %27 = fmul float %3, %26
    %28 = fadd float %24, %27
    %29 = getelementptr inbounds float, float* %m, i32 6
    %30 = load float, float* %29, align 4, !tbaa !1
    %31 = fmul float %5, %30
    %32 = fadd float %28, %31
    %33 = getelementptr inbounds float, float* %m, i32 7
    %34 = load float, float* %33, align 4, !tbaa !1
    %35 = fmul float %7, %34
    %36 = fadd float %32, %35
    %37 = getelementptr inbounds float, float* %u, i32 1
    store float %36, float* %37, align 4, !tbaa !1
    %38 = getelementptr inbounds float, float* %m, i32 8
    %39 = load float, float* %38, align 4, !tbaa !1
    %40 = fmul float %1, %39
    %41 = getelementptr inbounds float, float* %m, i32 9
    %42 = load float, float* %41, align 4, !tbaa !1
    %43 = fmul float %3, %42
    %44 = fadd float %40, %43
    %45 = getelementptr inbounds float, float* %m, i32 10
    %46 = load float, float* %45, align 4, !tbaa !1
    %47 = fmul float %5, %46
    %48 = fadd float %44, %47
    %49 = getelementptr inbounds float, float* %m, i32 11
    %50 = load float, float* %49, align 4, !tbaa !1
    %51 = fmul float %7, %50
    %52 = fadd float %48, %51
    %53 = getelementptr inbounds float, float* %u, i32 2
    store float %52, float* %53, align 4, !tbaa !1
    %54 = getelementptr inbounds float, float* %m, i32 12
    %55 = load float, float* %54, align 4, !tbaa !1
    %56 = fmul float %1, %55
    %57 = getelementptr inbounds float, float* %m, i32 13
    %58 = load float, float* %57, align 4, !tbaa !1
    %59 = fmul float %3, %58
    %60 = fadd float %56, %59
    %61 = getelementptr inbounds float, float* %m, i32 14
    %62 = load float, float* %61, align 4, !tbaa !1
    %63 = fmul float %5, %62
    %64 = fadd float %60, %63
    %65 = getelementptr inbounds float, float* %m, i32 15
    %66 = load float, float* %65, align 4, !tbaa !1
    %67 = fmul float %7, %66
    %68 = fadd float %64, %67
    %69 = getelementptr inbounds float, float* %u, i32 3
    store float %68, float* %69, align 4, !tbaa !1
    ret void
  }
  
  ; Function Attrs: norecurse nounwind
  define void @gl_xform_texcoords_4fv(i32 signext %n, [4 x float]* nocapture %tc, float* nocapture readonly %m) #0 {
    %1 = load float, float* %m, align 4, !tbaa !1
    %2 = getelementptr inbounds float, float* %m, i32 4
    %3 = load float, float* %2, align 4, !tbaa !1
    %4 = getelementptr inbounds float, float* %m, i32 8
    %5 = load float, float* %4, align 4, !tbaa !1
    %6 = getelementptr inbounds float, float* %m, i32 12
    %7 = load float, float* %6, align 4, !tbaa !1
    %8 = getelementptr inbounds float, float* %m, i32 1
    %9 = load float, float* %8, align 4, !tbaa !1
    %10 = getelementptr inbounds float, float* %m, i32 5
    %11 = load float, float* %10, align 4, !tbaa !1
    %12 = getelementptr inbounds float, float* %m, i32 9
    %13 = load float, float* %12, align 4, !tbaa !1
    %14 = getelementptr inbounds float, float* %m, i32 13
    %15 = load float, float* %14, align 4, !tbaa !1
    %16 = getelementptr inbounds float, float* %m, i32 2
    %17 = load float, float* %16, align 4, !tbaa !1
    %18 = getelementptr inbounds float, float* %m, i32 6
    %19 = load float, float* %18, align 4, !tbaa !1
    %20 = getelementptr inbounds float, float* %m, i32 10
    %21 = load float, float* %20, align 4, !tbaa !1
    %22 = getelementptr inbounds float, float* %m, i32 14
    %23 = load float, float* %22, align 4, !tbaa !1
    %24 = getelementptr inbounds float, float* %m, i32 3
    %25 = load float, float* %24, align 4, !tbaa !1
    %26 = getelementptr inbounds float, float* %m, i32 7
    %27 = load float, float* %26, align 4, !tbaa !1
    %28 = getelementptr inbounds float, float* %m, i32 11
    %29 = load float, float* %28, align 4, !tbaa !1
    %30 = getelementptr inbounds float, float* %m, i32 15
    %31 = load float, float* %30, align 4, !tbaa !1
    %32 = icmp eq i32 %n, 0
    br i1 %32, label %._crit_edge, label %.lr.ph.preheader
  
  .lr.ph.preheader:                                 ; preds = %0
    %scevgep = getelementptr [4 x float], [4 x float]* %tc, i32 0, i32 2
    %scevgep1 = bitcast float* %scevgep to [4 x float]*
    br label %.lr.ph
  
  .lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
    %lsr.iv2 = phi [4 x float]* [ %65, %.lr.ph ], [ %scevgep1, %.lr.ph.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.lr.ph ], [ %n, %.lr.ph.preheader ]
    %lsr.iv24 = bitcast [4 x float]* %lsr.iv2 to float*
    %scevgep10 = getelementptr float, float* %lsr.iv24, i32 -2
    %33 = load float, float* %scevgep10, align 4, !tbaa !1
    %scevgep8 = getelementptr float, float* %lsr.iv24, i32 -1
    %34 = load float, float* %scevgep8, align 4, !tbaa !1
    %35 = load float, float* %lsr.iv24, align 4, !tbaa !1
    %scevgep6 = getelementptr float, float* %lsr.iv24, i32 1
    %36 = load float, float* %scevgep6, align 4, !tbaa !1
    %37 = fmul float %1, %33
    %38 = fmul float %3, %34
    %39 = fadd float %37, %38
    %40 = fmul float %5, %35
    %41 = fadd float %39, %40
    %42 = fmul float %7, %36
    %43 = fadd float %41, %42
    %scevgep9 = getelementptr float, float* %lsr.iv24, i32 -2
    store float %43, float* %scevgep9, align 4, !tbaa !1
    %44 = fmul float %9, %33
    %45 = fmul float %11, %34
    %46 = fadd float %44, %45
    %47 = fmul float %13, %35
    %48 = fadd float %46, %47
    %49 = fmul float %15, %36
    %50 = fadd float %48, %49
    %scevgep7 = getelementptr float, float* %lsr.iv24, i32 -1
    store float %50, float* %scevgep7, align 4, !tbaa !1
    %51 = fmul float %17, %33
    %52 = fmul float %19, %34
    %53 = fadd float %51, %52
    %54 = fmul float %21, %35
    %55 = fadd float %53, %54
    %56 = fmul float %23, %36
    %57 = fadd float %55, %56
    store float %57, float* %lsr.iv24, align 4, !tbaa !1
    %58 = fmul float %25, %33
    %59 = fmul float %27, %34
    %60 = fadd float %58, %59
    %61 = fmul float %29, %35
    %62 = fadd float %60, %61
    %63 = fmul float %31, %36
    %64 = fadd float %62, %63
    %scevgep5 = getelementptr float, float* %lsr.iv24, i32 1
    store float %64, float* %scevgep5, align 4, !tbaa !1
    %lsr.iv.next = add i32 %lsr.iv, -1
    %scevgep3 = getelementptr [4 x float], [4 x float]* %lsr.iv2, i32 1, i32 0
    %65 = bitcast float* %scevgep3 to [4 x float]*
    %exitcond = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond, label %._crit_edge, label %.lr.ph
  
  ._crit_edge:                                      ; preds = %.lr.ph, %0
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}
  !1 = !{!2, !2, i64 0}
  !2 = !{!"float", !3, i64 0}
  !3 = !{!"omnipotent char", !4, i64 0}
  !4 = !{!"Simple C/C++ TBAA"}

...
---
name:            gl_xform_points_4fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: gpr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: fgr32 }
  - { id: 53, class: fgr32 }
  - { id: 54, class: fgr32 }
  - { id: 55, class: fgr32 }
  - { id: 56, class: fgr32 }
  - { id: 57, class: fgr32 }
  - { id: 58, class: fgr32 }
  - { id: 59, class: fgr32 }
  - { id: 60, class: fgr32 }
  - { id: 61, class: fgr32 }
  - { id: 62, class: fgr32 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: fgr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: gpr32 }
  - { id: 79, class: gpr32 }
  - { id: 80, class: fgr32 }
  - { id: 81, class: fgr32 }
  - { id: 82, class: fgr32 }
  - { id: 83, class: fgr32 }
  - { id: 84, class: fgr32 }
  - { id: 85, class: fgr32 }
  - { id: 86, class: fgr32 }
  - { id: 87, class: fgr32 }
  - { id: 88, class: fgr32 }
  - { id: 89, class: fgr32 }
  - { id: 90, class: fgr32 }
  - { id: 91, class: fgr32 }
  - { id: 92, class: fgr32 }
  - { id: 93, class: fgr32 }
  - { id: 94, class: fgr32 }
  - { id: 95, class: fgr32 }
  - { id: 96, class: fgr32 }
  - { id: 97, class: fgr32 }
  - { id: 98, class: fgr32 }
  - { id: 99, class: fgr32 }
  - { id: 100, class: fgr32 }
  - { id: 101, class: gpr32 }
  - { id: 102, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%48' }
  - { reg: '%a1', virtual-reg: '%49' }
  - { reg: '%a2', virtual-reg: '%50' }
  - { reg: '%a3', virtual-reg: '%51' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.15(75), %bb.1..preheader24(25)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %78 = ADDu %v0, %t9
    %51 = COPY %a3
    %50 = COPY %a2
    %49 = COPY %a1
    %48 = COPY %a0
    %7 = LWC1 %50, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %50, 36, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %50, 20, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %50, 4, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %50, 48, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %50, 32, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %50, 16, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %50, 0, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.m, !tbaa !1)
    %52 = MTC1 %zero
    FCMP_S32 %3, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.1..preheader24, implicit-def dead %at
    B %bb.15, implicit-def dead %at
  
  bb.15 (%ir-block.0, freq 19):
    successors: %bb.3..preheader22(66), %bb.1..preheader24(33)
  
    FCMP_S32 %7, %52, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.3..preheader22, implicit-def dead %at
    B %bb.1..preheader24, implicit-def dead %at
  
  bb.1..preheader24 (freq 12):
    successors: %bb.2..lr.ph32.preheader(62), %bb.7..loopexit23(37)
  
    BEQ %48, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.2..lr.ph32.preheader, implicit-def dead %at
  
  bb.2..lr.ph32.preheader (freq 8):
    successors: %bb.6..lr.ph32(100)
  
    %9 = ADDiu %51, 8
    %8 = ADDiu %49, 4
    B %bb.6..lr.ph32, implicit-def dead %at
  
  bb.3..preheader22 (freq 12):
    successors: %bb.4..lr.ph30.preheader(62), %bb.7..loopexit23(37)
  
    BEQ %48, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.4..lr.ph30.preheader, implicit-def dead %at
  
  bb.4..lr.ph30.preheader (freq 8):
    successors: %bb.5..lr.ph30(100)
  
    %11 = ADDiu %51, 8
    %10 = ADDiu %49, 4
  
  bb.5..lr.ph30 (freq 256):
    successors: %bb.7..loopexit23(3), %bb.5..lr.ph30(96)
  
    %12 = PHI %11, %bb.4..lr.ph30.preheader, %17, %bb.5..lr.ph30
    %13 = PHI %10, %bb.4..lr.ph30.preheader, %16, %bb.5..lr.ph30
    %14 = PHI %48, %bb.4..lr.ph30.preheader, %15, %bb.5..lr.ph30
    %66 = LWC1 %12, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep44, !tbaa !1)
    %67 = FMUL_S %5, %66
    %68 = FMUL_S %1, %66
    %17 = ADDiu %12, 16
    %16 = ADDiu %13, 16
    %15 = ADDiu %14, -1
    %69 = LWC1 %12, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep45, !tbaa !1)
    %70 = LWC1 %12, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv4143, !tbaa !1)
    %71 = MADD_S killed %68, %0, %69
    %72 = MADD_S killed %67, %4, %69
    %73 = MADD_S killed %72, %6, %70
    %74 = MADD_S killed %71, %2, %70
    SWC1 killed %74, %13, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep38, !tbaa !1)
    SWC1 killed %73, %13, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3537, !tbaa !1)
    BEQ %15, %zero, %bb.7..loopexit23, implicit-def dead %at
    B %bb.5..lr.ph30, implicit-def dead %at
  
  bb.6..lr.ph32 (freq 256):
    successors: %bb.7..loopexit23(3), %bb.6..lr.ph32(96)
  
    %18 = PHI %9, %bb.2..lr.ph32.preheader, %23, %bb.6..lr.ph32
    %19 = PHI %8, %bb.2..lr.ph32.preheader, %22, %bb.6..lr.ph32
    %20 = PHI %48, %bb.2..lr.ph32.preheader, %21, %bb.6..lr.ph32
    %54 = LWC1 %18, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep60, !tbaa !1)
    %55 = FMUL_S %1, %54
    %56 = FMUL_S %5, %54
    %23 = ADDiu %18, 16
    %22 = ADDiu %19, 16
    %21 = ADDiu %20, -1
    %57 = LWC1 %18, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep61, !tbaa !1)
    %58 = LWC1 %18, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv5658, !tbaa !1)
    %59 = LWC1 %18, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep59, !tbaa !1)
    %60 = MADD_S killed %56, %4, %57
    %61 = MADD_S killed %55, %0, %57
    %62 = MADD_S killed %61, %2, %58
    %63 = MADD_S killed %60, %6, %58
    %64 = MADD_S killed %63, %7, %59
    %65 = MADD_S killed %62, %3, %59
    SWC1 killed %65, %19, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep53, !tbaa !1)
    SWC1 killed %64, %19, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv5052, !tbaa !1)
    BNE %21, %zero, %bb.6..lr.ph32, implicit-def dead %at
    B %bb.7..loopexit23, implicit-def dead %at
  
  bb.7..loopexit23 (freq 25):
    successors: %bb.18..loopexit23(93), %bb.8..preheader20(6)
  
    %31 = LWC1 %50, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.69, !tbaa !1)
    %30 = LWC1 %50, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.67, !tbaa !1)
    %29 = LWC1 %50, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.65, !tbaa !1)
    %28 = LWC1 %50, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.63, !tbaa !1)
    %27 = LWC1 %50, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.61, !tbaa !1)
    %26 = LWC1 %50, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.59, !tbaa !1)
    %25 = LWC1 %50, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.57, !tbaa !1)
    %24 = LWC1 %50, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.55, !tbaa !1)
    FCMP_S32 %28, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.18..loopexit23, implicit-def dead %at
  
  bb.18..loopexit23 (freq 24):
    successors: %bb.17..loopexit23(93), %bb.8..preheader20(6)
  
    FCMP_S32 %29, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.17..loopexit23, implicit-def dead %at
  
  bb.17..loopexit23 (freq 22):
    successors: %bb.16..loopexit23(85), %bb.8..preheader20(14)
  
    FCMP_S32 %30, %52, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.8..preheader20, implicit-def dead %at
    B %bb.16..loopexit23, implicit-def dead %at
  
  bb.16..loopexit23 (freq 19):
    successors: %bb.10..preheader(66), %bb.8..preheader20(33)
  
    %79 = LW %78, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %80 = LWC1 killed %79, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    FCMP_S32 %31, killed %80, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.10..preheader, implicit-def dead %at
    B %bb.8..preheader20, implicit-def dead %at
  
  bb.8..preheader20 (freq 12):
    successors: %bb.9..lr.ph28.preheader(62), %bb.14..loopexit(37)
  
    BEQ %48, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.9..lr.ph28.preheader, implicit-def dead %at
  
  bb.9..lr.ph28.preheader (freq 8):
    successors: %bb.13..lr.ph28(100)
  
    %33 = ADDiu %51, 8
    %32 = ADDiu %49, 12
    B %bb.13..lr.ph28, implicit-def dead %at
  
  bb.10..preheader (freq 12):
    successors: %bb.11..lr.ph.preheader(62), %bb.14..loopexit(37)
  
    BEQ %48, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.11..lr.ph.preheader, implicit-def dead %at
  
  bb.11..lr.ph.preheader (freq 8):
    successors: %bb.12..lr.ph(100)
  
    %35 = ADDiu %51, 8
    %34 = ADDiu %49, 12
  
  bb.12..lr.ph (freq 255):
    successors: %bb.14..loopexit(3), %bb.12..lr.ph(96)
  
    %36 = PHI %35, %bb.11..lr.ph.preheader, %41, %bb.12..lr.ph
    %37 = PHI %34, %bb.11..lr.ph.preheader, %40, %bb.12..lr.ph
    %38 = PHI %48, %bb.11..lr.ph.preheader, %39, %bb.12..lr.ph
    %93 = LWC1 %36, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %94 = FMUL_S %25, killed %93
    %41 = ADDiu %36, 16
    %40 = ADDiu %37, 16
    %39 = ADDiu %38, -1
    %95 = LWC1 %36, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep13, !tbaa !1)
    %96 = LWC1 %36, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv810, !tbaa !1)
    %97 = LWC1 %36, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep11, !tbaa !1)
    %98 = MADD_S killed %94, %24, killed %95
    %99 = MADD_S killed %98, %26, killed %96
    %100 = MADD_S killed %99, %27, %97
    SWC1 killed %100, %37, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SWC1 %97, %37, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BEQ %39, %zero, %bb.14..loopexit, implicit-def dead %at
    B %bb.12..lr.ph, implicit-def dead %at
  
  bb.13..lr.ph28 (freq 256):
    successors: %bb.14..loopexit(3), %bb.13..lr.ph28(96)
  
    %42 = PHI %33, %bb.9..lr.ph28.preheader, %47, %bb.13..lr.ph28
    %43 = PHI %32, %bb.9..lr.ph28.preheader, %46, %bb.13..lr.ph28
    %44 = PHI %48, %bb.9..lr.ph28.preheader, %45, %bb.13..lr.ph28
    %81 = LWC1 %42, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep29, !tbaa !1)
    %82 = FMUL_S %25, %81
    %83 = FMUL_S %29, %81
    %47 = ADDiu %42, 16
    %46 = ADDiu %43, 16
    %45 = ADDiu %44, -1
    %84 = LWC1 %42, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep30, !tbaa !1)
    %85 = LWC1 %42, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv2527, !tbaa !1)
    %86 = LWC1 %42, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep28, !tbaa !1)
    %87 = MADD_S killed %83, %28, %84
    %88 = MADD_S killed %82, %24, %84
    %89 = MADD_S killed %88, %26, %85
    %90 = MADD_S killed %87, %30, %85
    %91 = MADD_S killed %90, %31, %86
    %92 = MADD_S killed %89, %27, %86
    SWC1 killed %92, %43, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep21, !tbaa !1)
    SWC1 killed %91, %43, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv1820, !tbaa !1)
    BNE %45, %zero, %bb.13..lr.ph28, implicit-def dead %at
    B %bb.14..loopexit, implicit-def dead %at
  
  bb.14..loopexit (freq 25):
    liveouts:
  
    RetRA

...
---
name:            gl_xform_points_3fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: fgr32 }
  - { id: 17, class: fgr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: fgr32 }
  - { id: 20, class: fgr32 }
  - { id: 21, class: fgr32 }
  - { id: 22, class: fgr32 }
  - { id: 23, class: fgr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: fgr32 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: fgr32 }
  - { id: 49, class: fgr32 }
  - { id: 50, class: fgr32 }
  - { id: 51, class: fgr32 }
  - { id: 52, class: fgr32 }
  - { id: 53, class: fgr32 }
  - { id: 54, class: fgr32 }
  - { id: 55, class: fgr32 }
  - { id: 56, class: fgr32 }
  - { id: 57, class: fgr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: fgr32 }
  - { id: 61, class: fgr32 }
  - { id: 62, class: fgr32 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: gpr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: fgr32 }
  - { id: 79, class: fgr32 }
  - { id: 80, class: gpr32 }
  - { id: 81, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%40' }
  - { reg: '%a1', virtual-reg: '%41' }
  - { reg: '%a2', virtual-reg: '%42' }
  - { reg: '%a3', virtual-reg: '%43' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
constants:       
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.3.._crit_edge(37), %bb.1..lr.ph19.preheader(62)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %58 = ADDu %v0, %t9
    %43 = COPY %a3
    %42 = COPY %a2
    %41 = COPY %a1
    %40 = COPY %a0
    BEQ %40, %zero, %bb.3.._crit_edge, implicit-def dead %at
    B %bb.1..lr.ph19.preheader, implicit-def dead %at
  
  bb.1..lr.ph19.preheader (freq 16):
    successors: %bb.2..lr.ph19(100)
  
    %7 = LWC1 %42, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %42, 36, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %42, 20, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %42, 4, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %42, 48, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %42, 32, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %42, 16, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %42, 0, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.m, !tbaa !1)
    %9 = ADDiu %43, 8
    %8 = ADDiu %41, 4
  
  bb.2..lr.ph19 (freq 512):
    successors: %bb.3.._crit_edge(3), %bb.2..lr.ph19(96)
  
    %10 = PHI %9, %bb.1..lr.ph19.preheader, %15, %bb.2..lr.ph19
    %11 = PHI %8, %bb.1..lr.ph19.preheader, %14, %bb.2..lr.ph19
    %12 = PHI %40, %bb.1..lr.ph19.preheader, %13, %bb.2..lr.ph19
    %44 = LWC1 %10, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep41, !tbaa !1)
    %45 = FMUL_S %5, %44
    %46 = FMUL_S %1, %44
    %15 = ADDiu %10, 12
    %14 = ADDiu %11, 16
    %13 = ADDiu %12, -1
    %47 = LWC1 %10, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep42, !tbaa !1)
    %48 = LWC1 %10, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv3840, !tbaa !1)
    %49 = MADD_S killed %46, %0, %47
    %50 = MADD_S killed %45, %4, %47
    %51 = MADD_S killed %50, %6, %48
    %52 = MADD_S killed %49, %2, %48
    %53 = FADD_S %3, killed %52
    SWC1 killed %53, %11, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep35, !tbaa !1)
    %54 = FADD_S %7, killed %51
    SWC1 killed %54, %11, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3234, !tbaa !1)
    BNE %13, %zero, %bb.2..lr.ph19, implicit-def dead %at
    B %bb.3.._crit_edge, implicit-def dead %at
  
  bb.3.._crit_edge (freq 25):
    successors: %bb.13.._crit_edge(93), %bb.4..preheader13(6)
  
    %23 = LWC1 %42, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.48, !tbaa !1)
    %22 = LWC1 %42, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.46, !tbaa !1)
    %21 = LWC1 %42, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.44, !tbaa !1)
    %20 = LWC1 %42, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.42, !tbaa !1)
    %19 = LWC1 %42, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.40, !tbaa !1)
    %18 = LWC1 %42, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.38, !tbaa !1)
    %17 = LWC1 %42, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.36, !tbaa !1)
    %16 = LWC1 %42, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.34, !tbaa !1)
    %55 = MTC1 %zero
    FCMP_S32 %20, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.13.._crit_edge, implicit-def dead %at
  
  bb.13.._crit_edge (freq 24):
    successors: %bb.12.._crit_edge(93), %bb.4..preheader13(6)
  
    FCMP_S32 %21, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.12.._crit_edge, implicit-def dead %at
  
  bb.12.._crit_edge (freq 22):
    successors: %bb.11.._crit_edge(85), %bb.4..preheader13(14)
  
    FCMP_S32 %22, %55, 18, implicit-def %fcc0
    BC1F %fcc0, %bb.4..preheader13, implicit-def dead %at
    B %bb.11.._crit_edge, implicit-def dead %at
  
  bb.11.._crit_edge (freq 19):
    successors: %bb.6..preheader(66), %bb.4..preheader13(33)
  
    %59 = LW %58, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %60 = LWC1 killed %59, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from constant-pool)
    FCMP_S32 %23, killed %60, 2, implicit-def %fcc0
    BC1T %fcc0, %bb.6..preheader, implicit-def dead %at
    B %bb.4..preheader13, implicit-def dead %at
  
  bb.4..preheader13 (freq 12):
    successors: %bb.5..lr.ph17.preheader(62), %bb.10..loopexit(37)
  
    BEQ %40, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.5..lr.ph17.preheader, implicit-def dead %at
  
  bb.5..lr.ph17.preheader (freq 8):
    successors: %bb.9..lr.ph17(100)
  
    %25 = ADDiu %43, 8
    %24 = ADDiu %41, 12
    B %bb.9..lr.ph17, implicit-def dead %at
  
  bb.6..preheader (freq 12):
    successors: %bb.7..lr.ph.preheader(62), %bb.10..loopexit(37)
  
    BEQ %40, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.7..lr.ph.preheader, implicit-def dead %at
  
  bb.7..lr.ph.preheader (freq 8):
    successors: %bb.8..lr.ph(100)
  
    %27 = ADDiu %43, 8
    %26 = ADDiu %41, 12
    %76 = LUi 16256
  
  bb.8..lr.ph (freq 255):
    successors: %bb.10..loopexit(3), %bb.8..lr.ph(96)
  
    %28 = PHI %27, %bb.7..lr.ph.preheader, %33, %bb.8..lr.ph
    %29 = PHI %26, %bb.7..lr.ph.preheader, %32, %bb.8..lr.ph
    %30 = PHI %40, %bb.7..lr.ph.preheader, %31, %bb.8..lr.ph
    %72 = LWC1 %28, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep11, !tbaa !1)
    %73 = FMUL_S %17, killed %72
    %33 = ADDiu %28, 12
    %32 = ADDiu %29, 16
    %31 = ADDiu %30, -1
    %74 = LWC1 %28, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %75 = LWC1 %28, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv810, !tbaa !1)
    %77 = MADD_S killed %73, %16, killed %74
    %78 = MADD_S killed %77, %18, killed %75
    %79 = FADD_S %19, killed %78
    SWC1 killed %79, %29, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SW %76, %29, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BEQ %31, %zero, %bb.10..loopexit, implicit-def dead %at
    B %bb.8..lr.ph, implicit-def dead %at
  
  bb.9..lr.ph17 (freq 256):
    successors: %bb.10..loopexit(3), %bb.9..lr.ph17(96)
  
    %34 = PHI %25, %bb.5..lr.ph17.preheader, %39, %bb.9..lr.ph17
    %35 = PHI %24, %bb.5..lr.ph17.preheader, %38, %bb.9..lr.ph17
    %36 = PHI %40, %bb.5..lr.ph17.preheader, %37, %bb.9..lr.ph17
    %61 = LWC1 %34, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep26, !tbaa !1)
    %62 = FMUL_S %21, %61
    %63 = FMUL_S %17, %61
    %39 = ADDiu %34, 12
    %38 = ADDiu %35, 16
    %37 = ADDiu %36, -1
    %64 = LWC1 %34, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep27, !tbaa !1)
    %65 = LWC1 %34, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv2325, !tbaa !1)
    %66 = MADD_S killed %63, %16, %64
    %67 = MADD_S killed %62, %20, %64
    %68 = MADD_S killed %67, %22, %65
    %69 = MADD_S killed %66, %18, %65
    %70 = FADD_S %19, killed %69
    SWC1 killed %70, %35, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep20, !tbaa !1)
    %71 = FADD_S %23, killed %68
    SWC1 killed %71, %35, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv1719, !tbaa !1)
    BNE %37, %zero, %bb.9..lr.ph17, implicit-def dead %at
    B %bb.10..loopexit, implicit-def dead %at
  
  bb.10..loopexit (freq 25):
    liveouts:
  
    RetRA

...
---
name:            gl_xform_normals_3fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: afgr64 }
  - { id: 17, class: afgr64 }
  - { id: 18, class: afgr64 }
  - { id: 19, class: afgr64 }
  - { id: 20, class: afgr64 }
  - { id: 21, class: afgr64 }
  - { id: 22, class: afgr64 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
  - { id: 39, class: fgr32 }
  - { id: 40, class: fgr32 }
  - { id: 41, class: fgr32 }
  - { id: 42, class: fgr32 }
  - { id: 43, class: fgr32 }
  - { id: 44, class: fgr32 }
  - { id: 45, class: fgr32 }
  - { id: 46, class: fgr32 }
  - { id: 47, class: fgr32 }
  - { id: 48, class: fgr32 }
  - { id: 49, class: afgr64 }
  - { id: 50, class: afgr64 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: afgr64 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: afgr64 }
  - { id: 56, class: afgr64 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: afgr64 }
  - { id: 59, class: afgr64 }
  - { id: 60, class: afgr64 }
  - { id: 61, class: afgr64 }
  - { id: 62, class: afgr64 }
  - { id: 63, class: fgr32 }
  - { id: 64, class: fgr32 }
  - { id: 65, class: fgr32 }
  - { id: 66, class: fgr32 }
  - { id: 67, class: fgr32 }
  - { id: 68, class: fgr32 }
  - { id: 69, class: fgr32 }
  - { id: 70, class: fgr32 }
  - { id: 71, class: fgr32 }
  - { id: 72, class: fgr32 }
  - { id: 73, class: fgr32 }
  - { id: 74, class: fgr32 }
  - { id: 75, class: fgr32 }
  - { id: 76, class: fgr32 }
  - { id: 77, class: fgr32 }
  - { id: 78, class: gpr32 }
  - { id: 79, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%32' }
  - { reg: '%a1', virtual-reg: '%33' }
  - { reg: '%a2', virtual-reg: '%34' }
  - { reg: '%a3', virtual-reg: '%35' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
constants:       
  - id:              0
    value:           'double 1.000000e+00'
    alignment:       8
  - id:              1
    value:           double 1.000000e-30
    alignment:       8
body:             |
  bb.0 (%ir-block.0, freq 34):
    successors: %bb.3..preheader(37), %bb.1..preheader14(62)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %51 = ADDu %v0, %t9
    %35 = COPY %a3
    %34 = COPY %a2
    %33 = COPY %a1
    %32 = COPY %a0
    %36 = LW %fixed-stack.0, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack, align 8)
    %8 = LWC1 %34, 40, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.17, !tbaa !1)
    %7 = LWC1 %34, 24, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.15, !tbaa !1)
    %6 = LWC1 %34, 8, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.13, !tbaa !1)
    %5 = LWC1 %34, 36, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.11, !tbaa !1)
    %4 = LWC1 %34, 20, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.9, !tbaa !1)
    %3 = LWC1 %34, 4, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.7, !tbaa !1)
    %2 = LWC1 %34, 32, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.5, !tbaa !1)
    %1 = LWC1 %34, 16, <0x3a15fb0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.3, !tbaa !1)
    %0 = LWC1 %34, 0, <0x3a292a0> = !{!"unison-memory-partition", i32 9} :: (load 4 from %ir.m, !tbaa !1)
    BEQ killed %36, %zero, %bb.3..preheader, implicit-def dead %at
    B %bb.1..preheader14, implicit-def dead %at
  
  bb.1..preheader14 (freq 21):
    successors: %bb.2..lr.ph18.preheader(62), %bb.9..loopexit(37)
  
    BEQ %32, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.2..lr.ph18.preheader, implicit-def dead %at
  
  bb.2..lr.ph18.preheader (freq 13):
    successors: %bb.5..lr.ph18(100)
  
    %10 = ADDiu %35, 8
    %9 = ADDiu %33, 8
    %54 = LW %51, target-flags(<unknown>) %const.0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %55 = LDC1 %54, target-flags(<unknown>) %const.0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 8 from constant-pool)
    %57 = LW %51, target-flags(<unknown>) %const.1, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from got)
    %58 = LDC1 %57, target-flags(<unknown>) %const.1, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 8 from constant-pool)
    B %bb.5..lr.ph18, implicit-def dead %at
  
  bb.3..preheader (freq 12):
    successors: %bb.4..lr.ph.preheader(62), %bb.9..loopexit(37)
  
    BEQ %32, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.4..lr.ph.preheader, implicit-def dead %at
  
  bb.4..lr.ph.preheader (freq 8):
    successors: %bb.8..lr.ph(100)
  
    %12 = ADDiu %35, 8
    %11 = ADDiu %33, 8
    B %bb.8..lr.ph, implicit-def dead %at
  
  bb.5..lr.ph18 (freq 426):
    successors: %bb.7..lr.ph18.split(62), %bb.6.call.sqrt(37)
  
    %13 = PHI %10, %bb.2..lr.ph18.preheader, %25, %bb.7..lr.ph18.split
    %14 = PHI %9, %bb.2..lr.ph18.preheader, %24, %bb.7..lr.ph18.split
    %15 = PHI %32, %bb.2..lr.ph18.preheader, %23, %bb.7..lr.ph18.split
    %37 = LWC1 %13, -4, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.scevgep28, !tbaa !1)
    %38 = FMUL_S %3, %37
    %39 = FMUL_S %4, %37
    %40 = FMUL_S %5, %37
    %41 = LWC1 %13, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep29, !tbaa !1)
    %42 = LWC1 %13, 0, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.lsr.iv2527, !tbaa !1)
    %43 = MADD_S killed %40, %2, %41
    %44 = MADD_S killed %39, %1, %41
    %45 = MADD_S killed %38, %0, %41
    %46 = MADD_S killed %45, %6, %42
    %47 = MADD_S killed %44, %7, %42
    %48 = MADD_S killed %43, %8, %42
    %18 = CVT_D32_S killed %48
    %17 = CVT_D32_S killed %47
    %49 = FMUL_D32 %17, %17
    %16 = CVT_D32_S killed %46
    %50 = MADD_D32 killed %49, %16, %16
    %19 = MADD_D32 killed %50, %18, %18
    %20 = FSQRT_D32 %19
    FCMP_D32 %20, %20, 17, implicit-def %fcc0
    BC1F %fcc0, %bb.7..lr.ph18.split, implicit-def dead %at
    B %bb.6.call.sqrt, implicit-def dead %at
  
  bb.6.call.sqrt (freq 159):
    successors: %bb.7..lr.ph18.split(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %52 = LW %51, target-flags(<unknown>) @sqrt, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @sqrt)
    %d6 = COPY %19
    %gp = COPY %51
    %t9 = COPY %52
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %d6, implicit %gp, implicit-def %sp, implicit-def %d0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %53 = COPY %d0
    %21 = COPY %53
  
  bb.7..lr.ph18.split (freq 426):
    successors: %bb.9..loopexit(3), %bb.5..lr.ph18(96)
  
    %22 = PHI %20, %bb.5..lr.ph18, %21, %bb.6.call.sqrt
    %56 = FDIV_D32 %55, %22
    %25 = ADDiu %13, 12
    %24 = ADDiu %14, 12
    %23 = ADDiu %15, -1
    FCMP_D32 %22, %58, 23, implicit-def %fcc0
    %59 = MOVF_D32 killed %56, %fcc0, %55
    %60 = FMUL_D32 %18, %59
    %61 = FMUL_D32 %17, %59
    %62 = FMUL_D32 %16, %59
    %63 = CVT_S_D32 killed %62
    SWC1 killed %63, %14, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep22, !tbaa !1)
    %64 = CVT_S_D32 killed %61
    SWC1 killed %64, %14, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep21, !tbaa !1)
    %65 = CVT_S_D32 killed %60
    SWC1 killed %65, %14, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.51, !tbaa !1)
    BEQ %23, %zero, %bb.9..loopexit, implicit-def dead %at
    B %bb.5..lr.ph18, implicit-def dead %at
  
  bb.8..lr.ph (freq 255):
    successors: %bb.9..loopexit(3), %bb.8..lr.ph(96)
  
    %26 = PHI %12, %bb.4..lr.ph.preheader, %31, %bb.8..lr.ph
    %27 = PHI %11, %bb.4..lr.ph.preheader, %30, %bb.8..lr.ph
    %28 = PHI %32, %bb.4..lr.ph.preheader, %29, %bb.8..lr.ph
    %66 = LWC1 %26, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep12, !tbaa !1)
    %67 = FMUL_S %5, %66
    %68 = FMUL_S %4, %66
    %69 = FMUL_S %3, %66
    %31 = ADDiu %26, 12
    %30 = ADDiu %27, 12
    %29 = ADDiu %28, -1
    %70 = LWC1 %26, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep13, !tbaa !1)
    %71 = LWC1 %26, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv911, !tbaa !1)
    %72 = MADD_S killed %69, %0, %70
    %73 = MADD_S killed %68, %1, %70
    %74 = MADD_S killed %67, %2, %70
    %75 = MADD_S killed %74, %8, %71
    %76 = MADD_S killed %73, %7, %71
    %77 = MADD_S killed %72, %6, %71
    SWC1 killed %77, %27, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep6, !tbaa !1)
    SWC1 killed %76, %27, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    SWC1 killed %75, %27, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    BNE %29, %zero, %bb.8..lr.ph, implicit-def dead %at
    B %bb.9..loopexit, implicit-def dead %at
  
  bb.9..loopexit (freq 34):
    liveouts:
  
    RetRA

...
---
name:            gl_transform_vector
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: fgr32 }
  - { id: 10, class: fgr32 }
  - { id: 11, class: fgr32 }
  - { id: 12, class: fgr32 }
  - { id: 13, class: fgr32 }
  - { id: 14, class: fgr32 }
  - { id: 15, class: fgr32 }
  - { id: 16, class: fgr32 }
  - { id: 17, class: fgr32 }
  - { id: 18, class: fgr32 }
  - { id: 19, class: fgr32 }
  - { id: 20, class: fgr32 }
  - { id: 21, class: fgr32 }
  - { id: 22, class: fgr32 }
  - { id: 23, class: fgr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: fgr32 }
  - { id: 33, class: fgr32 }
  - { id: 34, class: fgr32 }
  - { id: 35, class: fgr32 }
  - { id: 36, class: fgr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%a2', virtual-reg: '%2' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %a2
    liveouts:
  
    %2 = COPY %a2
    %1 = COPY %a1
    %0 = COPY %a0
    %3 = LWC1 %2, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %1, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.2, !tbaa !1)
    %5 = FMUL_S %4, killed %3
    %6 = LWC1 %2, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.m, !tbaa !1)
    %7 = LWC1 %1, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.v, !tbaa !1)
    %8 = LWC1 %2, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.14, !tbaa !1)
    %9 = LWC1 %1, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.4, !tbaa !1)
    %10 = LWC1 %2, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.18, !tbaa !1)
    %11 = LWC1 %1, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.6, !tbaa !1)
    %12 = MADD_S killed %5, %7, killed %6
    %13 = MADD_S killed %12, %9, killed %8
    %14 = MADD_S killed %13, %11, killed %10
    SWC1 killed %14, %0, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.u, !tbaa !1)
    %15 = LWC1 %2, 20, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.25, !tbaa !1)
    %16 = FMUL_S %4, killed %15
    %17 = LWC1 %2, 16, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.22, !tbaa !1)
    %18 = LWC1 %2, 24, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.29, !tbaa !1)
    %19 = LWC1 %2, 28, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.33, !tbaa !1)
    %20 = MADD_S killed %16, %7, killed %17
    %21 = MADD_S killed %20, %9, killed %18
    %22 = MADD_S killed %21, %11, killed %19
    SWC1 killed %22, %0, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.37, !tbaa !1)
    %23 = LWC1 %2, 36, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.41, !tbaa !1)
    %24 = FMUL_S %4, killed %23
    %25 = LWC1 %2, 32, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.38, !tbaa !1)
    %26 = LWC1 %2, 40, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.45, !tbaa !1)
    %27 = LWC1 %2, 44, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.49, !tbaa !1)
    %28 = MADD_S killed %24, %7, killed %25
    %29 = MADD_S killed %28, %9, killed %26
    %30 = MADD_S killed %29, %11, killed %27
    SWC1 killed %30, %0, 8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.53, !tbaa !1)
    %31 = LWC1 %2, 52, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.57, !tbaa !1)
    %32 = FMUL_S %4, killed %31
    %33 = LWC1 %2, 48, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.54, !tbaa !1)
    %34 = LWC1 %2, 56, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.61, !tbaa !1)
    %35 = LWC1 %2, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.65, !tbaa !1)
    %36 = MADD_S killed %32, %7, killed %33
    %37 = MADD_S killed %36, %9, killed %34
    %38 = MADD_S killed %37, %11, killed %35
    SWC1 killed %38, %0, 12, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.69, !tbaa !1)
    RetRA

...
---
name:            gl_xform_texcoords_4fv
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: fgr32 }
  - { id: 1, class: fgr32 }
  - { id: 2, class: fgr32 }
  - { id: 3, class: fgr32 }
  - { id: 4, class: fgr32 }
  - { id: 5, class: fgr32 }
  - { id: 6, class: fgr32 }
  - { id: 7, class: fgr32 }
  - { id: 8, class: fgr32 }
  - { id: 9, class: fgr32 }
  - { id: 10, class: fgr32 }
  - { id: 11, class: fgr32 }
  - { id: 12, class: fgr32 }
  - { id: 13, class: fgr32 }
  - { id: 14, class: fgr32 }
  - { id: 15, class: fgr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: fgr32 }
  - { id: 25, class: fgr32 }
  - { id: 26, class: fgr32 }
  - { id: 27, class: fgr32 }
  - { id: 28, class: fgr32 }
  - { id: 29, class: fgr32 }
  - { id: 30, class: fgr32 }
  - { id: 31, class: fgr32 }
  - { id: 32, class: fgr32 }
  - { id: 33, class: fgr32 }
  - { id: 34, class: fgr32 }
  - { id: 35, class: fgr32 }
  - { id: 36, class: fgr32 }
  - { id: 37, class: fgr32 }
  - { id: 38, class: fgr32 }
  - { id: 39, class: fgr32 }
  - { id: 40, class: fgr32 }
  - { id: 41, class: fgr32 }
  - { id: 42, class: fgr32 }
  - { id: 43, class: fgr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%21' }
  - { reg: '%a1', virtual-reg: '%22' }
  - { reg: '%a2', virtual-reg: '%23' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 12):
    successors: %bb.3.._crit_edge(37), %bb.1..lr.ph.preheader(62)
    liveins: %a0, %a1, %a2
  
    %23 = COPY %a2
    %22 = COPY %a1
    %21 = COPY %a0
    BEQ %21, %zero, %bb.3.._crit_edge, implicit-def dead %at
    B %bb.1..lr.ph.preheader, implicit-def dead %at
  
  bb.1..lr.ph.preheader (freq 8):
    successors: %bb.2..lr.ph(100)
  
    %15 = LWC1 %23, 60, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.30, !tbaa !1)
    %14 = LWC1 %23, 44, <0x39fcb00> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.28, !tbaa !1)
    %13 = LWC1 %23, 28, <0x3a180f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.26, !tbaa !1)
    %12 = LWC1 %23, 12, <0x3a182f0> = !{!"unison-memory-partition", i32 3} :: (load 4 from %ir.24, !tbaa !1)
    %11 = LWC1 %23, 56, <0x39d7b20> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.22, !tbaa !1)
    %10 = LWC1 %23, 40, <0x3a015b0> = !{!"unison-memory-partition", i32 5} :: (load 4 from %ir.20, !tbaa !1)
    %9 = LWC1 %23, 24, <0x39d7b50> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.18, !tbaa !1)
    %8 = LWC1 %23, 8, <0x3a142c0> = !{!"unison-memory-partition", i32 7} :: (load 4 from %ir.16, !tbaa !1)
    %7 = LWC1 %23, 52, <0x3a15fb0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.14, !tbaa !1)
    %6 = LWC1 %23, 36, <0x3a292a0> = !{!"unison-memory-partition", i32 9} :: (load 4 from %ir.12, !tbaa !1)
    %5 = LWC1 %23, 20, <0x3a57050> = !{!"unison-memory-partition", i32 10} :: (load 4 from %ir.10, !tbaa !1)
    %4 = LWC1 %23, 4, <0x39dcba0> = !{!"unison-memory-partition", i32 11} :: (load 4 from %ir.8, !tbaa !1)
    %3 = LWC1 %23, 48, <0x3a57a20> = !{!"unison-memory-partition", i32 12} :: (load 4 from %ir.6, !tbaa !1)
    %2 = LWC1 %23, 32, <0x39f4ac0> = !{!"unison-memory-partition", i32 13} :: (load 4 from %ir.4, !tbaa !1)
    %1 = LWC1 %23, 16, <0x3a29640> = !{!"unison-memory-partition", i32 14} :: (load 4 from %ir.2, !tbaa !1)
    %0 = LWC1 %23, 0, <0x39f46e0> = !{!"unison-memory-partition", i32 15} :: (load 4 from %ir.m, !tbaa !1)
    %16 = ADDiu %22, 8
  
  bb.2..lr.ph (freq 255):
    successors: %bb.3.._crit_edge(3), %bb.2..lr.ph(96)
  
    %17 = PHI %16, %bb.1..lr.ph.preheader, %20, %bb.2..lr.ph
    %18 = PHI %21, %bb.1..lr.ph.preheader, %19, %bb.2..lr.ph
    %24 = LWC1 %17, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep8, !tbaa !1)
    %25 = FMUL_S %1, %24
    %26 = FMUL_S %5, %24
    %27 = FMUL_S %9, %24
    %28 = FMUL_S %13, %24
    %20 = ADDiu %17, 16
    %19 = ADDiu %18, -1
    %29 = LWC1 %17, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep10, !tbaa !1)
    %30 = LWC1 %17, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv24, !tbaa !1)
    %31 = LWC1 %17, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep6, !tbaa !1)
    %32 = MADD_S killed %28, %12, %29
    %33 = MADD_S killed %27, %8, %29
    %34 = MADD_S killed %26, %4, %29
    %35 = MADD_S killed %25, %0, %29
    %36 = MADD_S killed %35, %2, %30
    %37 = MADD_S killed %34, %6, %30
    %38 = MADD_S killed %33, %10, %30
    %39 = MADD_S killed %32, %14, %30
    %40 = MADD_S killed %39, %15, %31
    %41 = MADD_S killed %38, %11, %31
    %42 = MADD_S killed %37, %7, %31
    %43 = MADD_S killed %36, %3, %31
    SWC1 killed %43, %17, -8, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep9, !tbaa !1)
    SWC1 killed %42, %17, -4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep7, !tbaa !1)
    SWC1 killed %41, %17, 0, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv24, !tbaa !1)
    SWC1 killed %40, %17, 4, <0x39fccd0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5, !tbaa !1)
    BNE %19, %zero, %bb.2..lr.ph, implicit-def dead %at
    B %bb.3.._crit_edge, implicit-def dead %at
  
  bb.3.._crit_edge (freq 12):
    liveouts:
  
    RetRA

...
