--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cfgbuild.control_flow_insn_p.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.function.501 = type { %struct.eh_status.502*, %struct.stmt_status.503*, %struct.expr_status.504*, %struct.emit_status.505*, %struct.varasm_status.506*, i8*, %union.tree_node.507*, %struct.function.501*, i32, i32, i32, i32, %struct.rtx_def.499*, %struct.ix86_args.508, %struct.rtx_def.499*, %struct.rtx_def.499*, i8*, %struct.initial_value_struct.509*, i32, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %union.tree_node.507*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %struct.rtx_def.499**, %struct.temp_slot.510*, i32, i32, i32, %struct.var_refs_queue.511*, i32, i32, i8*, %union.tree_node.507*, %struct.rtx_def.499*, i32, i32, %struct.machine_function.512*, i32, i32, %struct.language_function.513*, %struct.rtx_def.499*, i24 }
  %struct.eh_status.502 = type opaque
  %struct.stmt_status.503 = type opaque
  %struct.expr_status.504 = type { i32, i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499* }
  %struct.emit_status.505 = type { i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514*, i32, i32, i8*, i32, i8*, %union.tree_node.507**, %struct.rtx_def.499** }
  %struct.sequence_stack.514 = type { %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514* }
  %struct.varasm_status.506 = type opaque
  %struct.ix86_args.508 = type { i32, i32, i32, i32, i32, i32, i32 }
  %struct.initial_value_struct.509 = type opaque
  %struct.temp_slot.510 = type opaque
  %struct.var_refs_queue.511 = type { %struct.rtx_def.499*, i32, i32, %struct.var_refs_queue.511* }
  %union.tree_node.507 = type { %struct.tree_type.515, [24 x i8] }
  %struct.tree_type.515 = type { %struct.tree_common.516, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, i32, i32, %union.tree_node.507*, %union.tree_node.507*, %union.anon.2.517, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, %struct.lang_type.518* }
  %struct.tree_common.516 = type { %union.tree_node.507*, %union.tree_node.507*, i32 }
  %union.anon.2.517 = type { i32 }
  %struct.lang_type.518 = type opaque
  %struct.machine_function.512 = type opaque
  %struct.language_function.513 = type opaque
  %struct.rtx_def.499 = type { i32, [1 x %union.rtunion_def.500] }
  %union.rtunion_def.500 = type { i32 }
  
  @.str.1 = external hidden unnamed_addr constant [11 x i8], align 1
  @cfun = external global %struct.function.501*, align 4
  @flag_non_call_exceptions = external global i32, align 4
  @__FUNCTION__.control_flow_insn_p = external hidden unnamed_addr constant [20 x i8], align 1
  
  ; Function Attrs: nounwind
  define hidden fastcc zeroext i1 @control_flow_insn_p(%struct.rtx_def.499* %insn) unnamed_addr #0 {
    %1 = bitcast %struct.rtx_def.499* %insn to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %32 [
      i32 37, label %33
      i32 36, label %33
      i32 33, label %4
      i32 34, label %10
      i32 32, label %27
      i32 35, label %33
    ]
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %insn, i32 0, i32 1, i32 3
    %6 = bitcast %union.rtunion_def.500* %5 to i32**
    %7 = load i32*, i32** %6, align 4
    %8 = load i32, i32* %7, align 4
    %9 = and i32 %8, -131072
    %.cmp = icmp ne i32 %9, 2883584
    br label %33
  
  ; <label>:10                                      ; preds = %0
    %11 = load %struct.function.501*, %struct.function.501** @cfun, align 4
    %12 = getelementptr inbounds %struct.function.501, %struct.function.501* %11, i32 0, i32 21
    %13 = load %struct.rtx_def.499*, %struct.rtx_def.499** %12, align 4
    %14 = icmp eq %struct.rtx_def.499* %13, null
    br i1 %14, label %25, label %15
  
  ; <label>:15                                      ; preds = %10
    %16 = tail call %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499* nonnull %insn, i32 signext 23, %struct.rtx_def.499* null) #3
    %17 = icmp eq %struct.rtx_def.499* %16, null
    br i1 %17, label %33, label %18
  
  ; <label>:18                                      ; preds = %15
    %19 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %16, i32 0, i32 1, i32 0
    %20 = bitcast %union.rtunion_def.500* %19 to %struct.rtx_def.499**
    %21 = load %struct.rtx_def.499*, %struct.rtx_def.499** %20, align 4
    %22 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %21, i32 0, i32 1, i32 0, i32 0
    %23 = load i32, i32* %22, align 4
    %24 = icmp sgt i32 %23, -1
    br i1 %24, label %33, label %25
  
  ; <label>:25                                      ; preds = %18, %10
    %26 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:27                                      ; preds = %0
    %28 = load i32, i32* @flag_non_call_exceptions, align 4
    %29 = icmp eq i32 %28, 0
    br i1 %29, label %33, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:32                                      ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 signext 134, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.control_flow_insn_p, i32 0, i32 0)) #4
    unreachable
  
  ; <label>:33                                      ; preds = %30, %27, %25, %18, %15, %4, %0, %0, %0
    %.0 = phi i1 [ %.cmp, %4 ], [ false, %0 ], [ false, %0 ], [ true, %18 ], [ true, %15 ], [ %26, %25 ], [ false, %27 ], [ %31, %30 ], [ false, %0 ]
    ret i1 %.0
  }
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #1
  
  declare %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499*, i32 signext, %struct.rtx_def.499*) #2
  
  declare zeroext i1 @can_throw_internal(%struct.rtx_def.499*) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  attributes #4 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            control_flow_insn_p
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       32
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 1, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 2, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s0' }
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.2', '%bb.4', '%bb.5', '%bb.9', '%bb.9', '%bb.9' ]
body:             |
  bb.0 (%ir-block.0, freq 8388607):
    successors: %bb.10(0), %bb.1(99)
    liveins: %a0, %t9, %ra, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -32
    CFI_INSTRUCTION .cfi_def_cfa_offset 32
    SW killed %ra, %sp, 28 :: (store 4 into stack)
    SW killed %s1, %sp, 24 :: (store 4 into stack)
    SW killed %s0, %sp, 20 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s1_64, -8
    CFI_INSTRUCTION .cfi_offset %s0_64, -12
    %s1 = OR %a0, %zero
    %at = LHu %s1, 0 :: (load 2 from %ir.1, align 4)
    %v1 = ADDiu killed %at, -32
    %at = SLTiu %v1, 6
    BEQ killed %at, %zero, %bb.10, implicit-def dead %at {
      %s0 = ADDu %v0, %t9
    }
  
  bb.1 (%ir-block.0, freq 8388599):
    successors: %bb.2(16), %bb.4(16), %bb.5(16), %bb.9(50)
    liveins: %s0, %s1, %v1
  
    %at = SLL killed %v1, 2
    %v1 = LW %s0, target-flags(<unknown>) %jump-table.0 :: (load 4 from got)
    %at = ADDu killed %at, killed %v1
    %at = LW killed %at, target-flags(<unknown>) %jump-table.0 :: (load 4 from jump-table)
    %at = ADDu killed %at, %s0
    PseudoIndirectBranch killed %at {
      %v0 = ADDiu %zero, 0
    }
  
  bb.2 (%ir-block.27, freq 1398100):
    successors: %bb.9(37), %bb.3(62)
    liveins: %s0, %s1, %v0
  
    %at = LW %s0, target-flags(<unknown>) @flag_non_call_exceptions :: (load 4 from got)
    %at = LW killed %at, 0 :: (load 4 from @flag_non_call_exceptions)
    BEQ %at, %zero, %bb.9, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.30, freq 873812):
    successors: %bb.9(100)
    liveins: %s0, %s1
  
    %t9 = LW %s0, target-flags(<unknown>) @can_throw_internal :: (load 4 from call-entry @can_throw_internal)
    %a0 = OR killed %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR killed %s0, %zero
    }
    B %bb.9, implicit-def dead %at {
      NOP
    }
  
  bb.4 (%ir-block.4, freq 1398099):
    successors: %bb.9(100)
    liveins: %s1
  
    %at = LW killed %s1, 16 :: (load 4 from %ir.6)
    %at = LW killed %at, 0 :: (load 4 from %ir.7)
    %v0 = LUi 65534
    %at = AND killed %at, killed %v0
    %v0 = LUi 44
    %at = XOR killed %at, killed %v0
    B %bb.9, implicit-def %at {
      %v0 = SLTu %zero, killed %at
    }
  
  bb.5 (%ir-block.10, freq 1398099):
    successors: %bb.8(37), %bb.6(62)
    liveins: %s0, %s1
  
    %at = LW %s0, target-flags(<unknown>) @cfun :: (load 4 from got)
    %at = LW killed %at, 0 :: (load 4 from @cfun)
    %at = LW killed %at, 108 :: (load 4 from %ir.12)
    BEQ %at, %zero, %bb.8, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.15, freq 873812):
    successors: %bb.9(37), %bb.7(62)
    liveins: %s0, %s1
  
    %t9 = LW %s0, target-flags(<unknown>) @find_reg_note :: (load 4 from call-entry @find_reg_note)
    %a0 = OR %s1, %zero
    %a1 = ADDiu %zero, 23
    %a2 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %v1 = OR %v0, %zero
    BEQ %v1, %zero, %bb.9, implicit-def %at {
      %v0 = ADDiu %zero, 1
    }
  
  bb.7 (%ir-block.18, freq 546132):
    successors: %bb.9(62), %bb.8(37)
    liveins: %s0, %s1, %v0, %v1
  
    %at = LW killed %v1, 4 :: (load 4 from %ir.20)
    %at = LW killed %at, 4 :: (load 4 from %ir.22)
    BGEZ %at, %bb.9, implicit-def %at {
      NOP
    }
  
  bb.8 (%ir-block.25, freq 729087):
    successors: %bb.9(100)
    liveins: %s0, %s1
  
    %t9 = LW %s0, target-flags(<unknown>) @can_throw_internal :: (load 4 from call-entry @can_throw_internal)
    %a0 = OR killed %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR killed %s0, %zero
    }
  
  bb.9 (%ir-block.33, freq 8388599):
    liveins: %v0
    liveouts:
  
    %s0 = LW %sp, 20 :: (load 4 from stack)
    %s1 = LW %sp, 24 :: (load 4 from stack)
    %ra = LW %sp, 28 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 32
    }
  
  bb.10 (%ir-block.32, freq 8):
    liveins: %s0
    exit
  
    %a0 = LW %s0, target-flags(<unknown>) @.str.1 :: (load 4 from got)
    %a2 = LW %s0, target-flags(<unknown>) @__FUNCTION__.control_flow_insn_p :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @fancy_abort :: (load 4 from call-entry @fancy_abort)
    %a1 = ADDiu %zero, 134
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit killed %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }

...
