--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cfgbuild.control_flow_insn_p.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.function.501 = type { %struct.eh_status.502*, %struct.stmt_status.503*, %struct.expr_status.504*, %struct.emit_status.505*, %struct.varasm_status.506*, i8*, %union.tree_node.507*, %struct.function.501*, i32, i32, i32, i32, %struct.rtx_def.499*, %struct.ix86_args.508, %struct.rtx_def.499*, %struct.rtx_def.499*, i8*, %struct.initial_value_struct.509*, i32, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %union.tree_node.507*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %struct.rtx_def.499**, %struct.temp_slot.510*, i32, i32, i32, %struct.var_refs_queue.511*, i32, i32, i8*, %union.tree_node.507*, %struct.rtx_def.499*, i32, i32, %struct.machine_function.512*, i32, i32, %struct.language_function.513*, %struct.rtx_def.499*, i24 }
  %struct.eh_status.502 = type opaque
  %struct.stmt_status.503 = type opaque
  %struct.expr_status.504 = type { i32, i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499* }
  %struct.emit_status.505 = type { i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514*, i32, i32, i8*, i32, i8*, %union.tree_node.507**, %struct.rtx_def.499** }
  %struct.sequence_stack.514 = type { %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514* }
  %struct.varasm_status.506 = type opaque
  %struct.ix86_args.508 = type { i32, i32, i32, i32, i32, i32, i32 }
  %struct.initial_value_struct.509 = type opaque
  %struct.temp_slot.510 = type opaque
  %struct.var_refs_queue.511 = type { %struct.rtx_def.499*, i32, i32, %struct.var_refs_queue.511* }
  %union.tree_node.507 = type { %struct.tree_type.515, [24 x i8] }
  %struct.tree_type.515 = type { %struct.tree_common.516, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, i32, i32, %union.tree_node.507*, %union.tree_node.507*, %union.anon.2.517, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, %struct.lang_type.518* }
  %struct.tree_common.516 = type { %union.tree_node.507*, %union.tree_node.507*, i32 }
  %union.anon.2.517 = type { i32 }
  %struct.lang_type.518 = type opaque
  %struct.machine_function.512 = type opaque
  %struct.language_function.513 = type opaque
  %struct.rtx_def.499 = type { i32, [1 x %union.rtunion_def.500] }
  %union.rtunion_def.500 = type { i32 }
  
  @.str.1 = external hidden unnamed_addr constant [11 x i8], align 1
  @cfun = external global %struct.function.501*, align 4
  @flag_non_call_exceptions = external global i32, align 4
  @__FUNCTION__.control_flow_insn_p = external hidden unnamed_addr constant [20 x i8], align 1
  
  ; Function Attrs: nounwind
  define hidden fastcc zeroext i1 @control_flow_insn_p(%struct.rtx_def.499* %insn) unnamed_addr #0 {
    %1 = bitcast %struct.rtx_def.499* %insn to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %32 [
      i32 37, label %33
      i32 36, label %33
      i32 33, label %4
      i32 34, label %10
      i32 32, label %27
      i32 35, label %33
    ]
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %insn, i32 0, i32 1, i32 3
    %6 = bitcast %union.rtunion_def.500* %5 to i32**
    %7 = load i32*, i32** %6, align 4
    %8 = load i32, i32* %7, align 4
    %9 = and i32 %8, -131072
    %.cmp = icmp ne i32 %9, 2883584
    br label %33
  
  ; <label>:10                                      ; preds = %0
    %11 = load %struct.function.501*, %struct.function.501** @cfun, align 4
    %12 = getelementptr inbounds %struct.function.501, %struct.function.501* %11, i32 0, i32 21
    %13 = load %struct.rtx_def.499*, %struct.rtx_def.499** %12, align 4
    %14 = icmp eq %struct.rtx_def.499* %13, null
    br i1 %14, label %25, label %15
  
  ; <label>:15                                      ; preds = %10
    %16 = tail call %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499* nonnull %insn, i32 signext 23, %struct.rtx_def.499* null) #3
    %17 = icmp eq %struct.rtx_def.499* %16, null
    br i1 %17, label %33, label %18
  
  ; <label>:18                                      ; preds = %15
    %19 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %16, i32 0, i32 1, i32 0
    %20 = bitcast %union.rtunion_def.500* %19 to %struct.rtx_def.499**
    %21 = load %struct.rtx_def.499*, %struct.rtx_def.499** %20, align 4
    %22 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %21, i32 0, i32 1, i32 0, i32 0
    %23 = load i32, i32* %22, align 4
    %24 = icmp sgt i32 %23, -1
    br i1 %24, label %33, label %25
  
  ; <label>:25                                      ; preds = %18, %10
    %26 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:27                                      ; preds = %0
    %28 = load i32, i32* @flag_non_call_exceptions, align 4
    %29 = icmp eq i32 %28, 0
    br i1 %29, label %33, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:32                                      ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 signext 134, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.control_flow_insn_p, i32 0, i32 0)) #4
    unreachable
  
  ; <label>:33                                      ; preds = %30, %27, %25, %18, %15, %4, %0, %0, %0
    %.0 = phi i1 [ %.cmp, %4 ], [ false, %0 ], [ false, %0 ], [ true, %18 ], [ true, %15 ], [ %26, %25 ], [ false, %27 ], [ %31, %30 ], [ false, %0 ]
    ret i1 %.0
  }
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #1
  
  declare %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499*, i32 signext, %struct.rtx_def.499*) #2
  
  declare zeroext i1 @can_throw_internal(%struct.rtx_def.499*) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  attributes #4 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            control_flow_insn_p
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%5' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.6', '%bb.1', '%bb.2', '%bb.9', '%bb.9', '%bb.9' ]
body:             |
  bb.0 (%ir-block.0, freq 8388607):
    successors: %bb.8(0), %bb.10(99)
    liveins: %a0, %t9, %v0
  
    %10 = ADDu %v0, %t9
    %5 = COPY %a0
    %8 = LHu %5, 0, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.1, align 4)
    %7 = ADDiu killed %8, -32
    %9 = SLTiu %7, 6
    BEQ killed %9, %zero, %bb.8, implicit-def dead %at
  
  bb.10 (%ir-block.0, freq 8388599):
    successors: %bb.6(16), %bb.1(16), %bb.2(16), %bb.9(50)
  
    %6 = ADDiu %zero, 0
    %11 = SLL %7, 2
    %12 = LW %10, target-flags(<unknown>) %jump-table.0, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %13 = ADDu killed %11, killed %12
    %14 = LW killed %13, target-flags(<unknown>) %jump-table.0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from jump-table)
    %15 = ADDu killed %14, %10
    PseudoIndirectBranch killed %15
  
  bb.1 (%ir-block.4, freq 1398099):
    successors: %bb.9(100)
  
    %34 = LW %5, 16, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.6)
    %35 = LW killed %34, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.7)
    %36 = LUi 65534
    %37 = AND killed %35, killed %36
    %38 = LUi 44
    %39 = XOR killed %37, killed %38
    %0 = SLTu %zero, killed %39
    B %bb.9, implicit-def dead %at
  
  bb.2 (%ir-block.10, freq 1398099):
    successors: %bb.5(37), %bb.3(62)
  
    %21 = LW %10, target-flags(<unknown>) @cfun, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %22 = LW killed %21, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from @cfun)
    %23 = LW killed %22, 108, <0x5610d7752210> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.12)
    BEQ killed %23, %zero, %bb.5, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.15, freq 873812):
    successors: %bb.9(37), %bb.4(62)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %25 = LW %10, target-flags(<unknown>) @find_reg_note, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @find_reg_note)
    %26 = ADDiu %zero, 23
    %27 = ADDiu %zero, 0
    %a0 = COPY %5
    %a1 = COPY %26
    %a2 = COPY %27
    %gp = COPY %10
    %t9 = COPY %25
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %28 = COPY %v0
    %24 = ADDiu %zero, 1
    BEQ %28, %zero, %bb.9, implicit-def dead %at
    B %bb.4, implicit-def dead %at
  
  bb.4 (%ir-block.18, freq 546132):
    successors: %bb.9(62), %bb.5(37)
  
    %1 = COPY %28
    %30 = LW %1, 4, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.20)
    %31 = LW killed %30, 4, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.22)
    BGEZ killed %31, %bb.9, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.25, freq 729087):
    successors: %bb.9(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %32 = LW %10, target-flags(<unknown>) @can_throw_internal, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @can_throw_internal)
    %a0 = COPY %5
    %gp = COPY %10
    %t9 = COPY %32
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %33 = COPY %v0
    %2 = COPY %33
    B %bb.9, implicit-def dead %at
  
  bb.6 (%ir-block.27, freq 1398100):
    successors: %bb.9(37), %bb.7(62)
  
    %17 = LW %10, target-flags(<unknown>) @flag_non_call_exceptions, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %18 = LW killed %17, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from @flag_non_call_exceptions)
    BEQ killed %18, %zero, %bb.9, implicit-def dead %at
    B %bb.7, implicit-def dead %at
  
  bb.7 (%ir-block.30, freq 873812):
    successors: %bb.9(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %19 = LW %10, target-flags(<unknown>) @can_throw_internal, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @can_throw_internal)
    %a0 = COPY %5
    %gp = COPY %10
    %t9 = COPY %19
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %20 = COPY %v0
    %3 = COPY %20
    B %bb.9, implicit-def dead %at
  
  bb.8 (%ir-block.32, freq 8):
    exit
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %40 = LW %10, target-flags(<unknown>) @.str.1, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %41 = LW %10, target-flags(<unknown>) @__FUNCTION__.control_flow_insn_p, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %42 = LW %10, target-flags(<unknown>) @fancy_abort, <0x5610d7752210> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @fancy_abort)
    %43 = ADDiu %zero, 134
    %a0 = COPY %40
    %a1 = COPY %43
    %a2 = COPY %41
    %gp = COPY %10
    %t9 = COPY %42
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.9 (%ir-block.33, freq 8388599):
    liveouts: %v0
  
    %4 = PHI %6, %bb.10, %6, %bb.6, %3, %bb.7, %24, %bb.3, %24, %bb.4, %2, %bb.5, %0, %bb.1
    %v0 = COPY %4
    RetRA implicit %v0

...
--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cfgbuild.control_flow_insn_p.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.function.501 = type { %struct.eh_status.502*, %struct.stmt_status.503*, %struct.expr_status.504*, %struct.emit_status.505*, %struct.varasm_status.506*, i8*, %union.tree_node.507*, %struct.function.501*, i32, i32, i32, i32, %struct.rtx_def.499*, %struct.ix86_args.508, %struct.rtx_def.499*, %struct.rtx_def.499*, i8*, %struct.initial_value_struct.509*, i32, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %union.tree_node.507*, %union.tree_node.507*, %struct.rtx_def.499*, %struct.rtx_def.499*, i32, %struct.rtx_def.499**, %struct.temp_slot.510*, i32, i32, i32, %struct.var_refs_queue.511*, i32, i32, i8*, %union.tree_node.507*, %struct.rtx_def.499*, i32, i32, %struct.machine_function.512*, i32, i32, %struct.language_function.513*, %struct.rtx_def.499*, i24 }
  %struct.eh_status.502 = type opaque
  %struct.stmt_status.503 = type opaque
  %struct.expr_status.504 = type { i32, i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499*, %struct.rtx_def.499* }
  %struct.emit_status.505 = type { i32, i32, %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514*, i32, i32, i8*, i32, i8*, %union.tree_node.507**, %struct.rtx_def.499** }
  %struct.sequence_stack.514 = type { %struct.rtx_def.499*, %struct.rtx_def.499*, %union.tree_node.507*, %struct.sequence_stack.514* }
  %struct.varasm_status.506 = type opaque
  %struct.ix86_args.508 = type { i32, i32, i32, i32, i32, i32, i32 }
  %struct.initial_value_struct.509 = type opaque
  %struct.temp_slot.510 = type opaque
  %struct.var_refs_queue.511 = type { %struct.rtx_def.499*, i32, i32, %struct.var_refs_queue.511* }
  %union.tree_node.507 = type { %struct.tree_type.515, [24 x i8] }
  %struct.tree_type.515 = type { %struct.tree_common.516, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, i32, i32, %union.tree_node.507*, %union.tree_node.507*, %union.anon.2.517, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, %union.tree_node.507*, i32, %struct.lang_type.518* }
  %struct.tree_common.516 = type { %union.tree_node.507*, %union.tree_node.507*, i32 }
  %union.anon.2.517 = type { i32 }
  %struct.lang_type.518 = type opaque
  %struct.machine_function.512 = type opaque
  %struct.language_function.513 = type opaque
  %struct.rtx_def.499 = type { i32, [1 x %union.rtunion_def.500] }
  %union.rtunion_def.500 = type { i32 }
  
  @.str.1 = external hidden unnamed_addr constant [11 x i8], align 1
  @cfun = external global %struct.function.501*, align 4
  @flag_non_call_exceptions = external global i32, align 4
  @__FUNCTION__.control_flow_insn_p = external hidden unnamed_addr constant [20 x i8], align 1
  
  ; Function Attrs: nounwind
  define hidden fastcc zeroext i1 @control_flow_insn_p(%struct.rtx_def.499* %insn) unnamed_addr #0 {
    %1 = bitcast %struct.rtx_def.499* %insn to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %32 [
      i32 37, label %33
      i32 36, label %33
      i32 33, label %4
      i32 34, label %10
      i32 32, label %27
      i32 35, label %33
    ]
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %insn, i32 0, i32 1, i32 3
    %6 = bitcast %union.rtunion_def.500* %5 to i32**
    %7 = load i32*, i32** %6, align 4
    %8 = load i32, i32* %7, align 4
    %9 = and i32 %8, -131072
    %.cmp = icmp ne i32 %9, 2883584
    br label %33
  
  ; <label>:10                                      ; preds = %0
    %11 = load %struct.function.501*, %struct.function.501** @cfun, align 4
    %12 = getelementptr inbounds %struct.function.501, %struct.function.501* %11, i32 0, i32 21
    %13 = load %struct.rtx_def.499*, %struct.rtx_def.499** %12, align 4
    %14 = icmp eq %struct.rtx_def.499* %13, null
    br i1 %14, label %25, label %15
  
  ; <label>:15                                      ; preds = %10
    %16 = tail call %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499* nonnull %insn, i32 signext 23, %struct.rtx_def.499* null) #3
    %17 = icmp eq %struct.rtx_def.499* %16, null
    br i1 %17, label %33, label %18
  
  ; <label>:18                                      ; preds = %15
    %19 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %16, i32 0, i32 1, i32 0
    %20 = bitcast %union.rtunion_def.500* %19 to %struct.rtx_def.499**
    %21 = load %struct.rtx_def.499*, %struct.rtx_def.499** %20, align 4
    %22 = getelementptr inbounds %struct.rtx_def.499, %struct.rtx_def.499* %21, i32 0, i32 1, i32 0, i32 0
    %23 = load i32, i32* %22, align 4
    %24 = icmp sgt i32 %23, -1
    br i1 %24, label %33, label %25
  
  ; <label>:25                                      ; preds = %18, %10
    %26 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:27                                      ; preds = %0
    %28 = load i32, i32* @flag_non_call_exceptions, align 4
    %29 = icmp eq i32 %28, 0
    br i1 %29, label %33, label %30
  
  ; <label>:30                                      ; preds = %27
    %31 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def.499* nonnull %insn) #3
    br label %33
  
  ; <label>:32                                      ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 signext 134, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.control_flow_insn_p, i32 0, i32 0)) #4
    unreachable
  
  ; <label>:33                                      ; preds = %30, %27, %25, %18, %15, %4, %0, %0, %0
    %.0 = phi i1 [ %.cmp, %4 ], [ false, %0 ], [ false, %0 ], [ true, %18 ], [ true, %15 ], [ %26, %25 ], [ false, %27 ], [ %31, %30 ], [ false, %0 ]
    ret i1 %.0
  }
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #1
  
  declare %struct.rtx_def.499* @find_reg_note(%struct.rtx_def.499*, i32 signext, %struct.rtx_def.499*) #2
  
  declare zeroext i1 @can_throw_internal(%struct.rtx_def.499*) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  attributes #4 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            control_flow_insn_p
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%5' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.6', '%bb.1', '%bb.2', '%bb.9', '%bb.9', '%bb.9' ]
body:             |
  bb.0 (%ir-block.0, freq 8388607):
    successors: %bb.8(0), %bb.10(99)
    liveins: %a0, %t9, %v0
  
    %10 = ADDu %v0, %t9
    %5 = COPY %a0
    %8 = LHu %5, 0, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 2 from %ir.1, align 4)
    %7 = ADDiu killed %8, -32
    %9 = SLTiu %7, 6
    BEQ killed %9, %zero, %bb.8, implicit-def dead %at
  
  bb.10 (%ir-block.0, freq 8388599):
    successors: %bb.6(16), %bb.1(16), %bb.2(16), %bb.9(50)
  
    %6 = ADDiu %zero, 0
    %11 = SLL %7, 2
    %12 = LW %10, target-flags(<unknown>) %jump-table.0, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %13 = ADDu killed %11, killed %12
    %14 = LW killed %13, target-flags(<unknown>) %jump-table.0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from jump-table)
    %15 = ADDu killed %14, %10
    PseudoIndirectBranch killed %15
  
  bb.1 (%ir-block.4, freq 1398099):
    successors: %bb.9(100)
  
    %34 = LW %5, 16, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.6)
    %35 = LW killed %34, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.7)
    %36 = LUi 65534
    %37 = AND killed %35, killed %36
    %38 = LUi 44
    %39 = XOR killed %37, killed %38
    %0 = SLTu %zero, killed %39
    B %bb.9, implicit-def dead %at
  
  bb.2 (%ir-block.10, freq 1398099):
    successors: %bb.5(37), %bb.3(62)
  
    %21 = LW %10, target-flags(<unknown>) @cfun, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %22 = LW killed %21, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from @cfun)
    %23 = LW killed %22, 108, <0x5610d7752210> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.12)
    BEQ killed %23, %zero, %bb.5, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.15, freq 873812):
    successors: %bb.9(37), %bb.4(62)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %25 = LW %10, target-flags(<unknown>) @find_reg_note, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @find_reg_note)
    %26 = ADDiu %zero, 23
    %27 = ADDiu %zero, 0
    %a0 = COPY %5
    %a1 = COPY %26
    %a2 = COPY %27
    %gp = COPY %10
    %t9 = COPY %25
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %28 = COPY %v0
    %24 = ADDiu %zero, 1
    BEQ %28, %zero, %bb.9, implicit-def dead %at
    B %bb.4, implicit-def dead %at
  
  bb.4 (%ir-block.18, freq 546132):
    successors: %bb.9(62), %bb.5(37)
  
    %1 = COPY %28
    %30 = LW %1, 4, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.20)
    %31 = LW killed %30, 4, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.22)
    BGEZ killed %31, %bb.9, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.25, freq 729087):
    successors: %bb.9(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %32 = LW %10, target-flags(<unknown>) @can_throw_internal, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @can_throw_internal)
    %a0 = COPY %5
    %gp = COPY %10
    %t9 = COPY %32
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %33 = COPY %v0
    %2 = COPY %33
    B %bb.9, implicit-def dead %at
  
  bb.6 (%ir-block.27, freq 1398100):
    successors: %bb.9(37), %bb.7(62)
  
    %17 = LW %10, target-flags(<unknown>) @flag_non_call_exceptions, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %18 = LW killed %17, 0, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from @flag_non_call_exceptions)
    BEQ killed %18, %zero, %bb.9, implicit-def dead %at
    B %bb.7, implicit-def dead %at
  
  bb.7 (%ir-block.30, freq 873812):
    successors: %bb.9(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %19 = LW %10, target-flags(<unknown>) @can_throw_internal, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @can_throw_internal)
    %a0 = COPY %5
    %gp = COPY %10
    %t9 = COPY %19
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %20 = COPY %v0
    %3 = COPY %20
    B %bb.9, implicit-def dead %at
  
  bb.8 (%ir-block.32, freq 8):
    exit
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %40 = LW %10, target-flags(<unknown>) @.str.1, <0x5610d77521e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %41 = LW %10, target-flags(<unknown>) @__FUNCTION__.control_flow_insn_p, <0x5610d774bfb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from got)
    %42 = LW %10, target-flags(<unknown>) @fancy_abort, <0x5610d7752210> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @fancy_abort)
    %43 = ADDiu %zero, 134
    %a0 = COPY %40
    %a1 = COPY %43
    %a2 = COPY %41
    %gp = COPY %10
    %t9 = COPY %42
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
  
  bb.9 (%ir-block.33, freq 8388599):
    liveouts: %v0
  
    %4 = PHI %6, %bb.10, %6, %bb.6, %3, %bb.7, %24, %bb.3, %24, %bb.4, %2, %bb.5, %0, %bb.1
    %v0 = COPY %4
    RetRA implicit %v0

...
