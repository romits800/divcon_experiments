--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cfgrtl.insert_insn_on_edge.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.rtx_def.1822 = type { i32, [1 x %union.rtunion_def.1834] }
  %union.rtunion_def.1834 = type { i32 }
  %struct.edge_def.1841 = type { %struct.edge_def.1841*, %struct.edge_def.1841*, %struct.basic_block_def.1840*, %struct.basic_block_def.1840*, %struct.rtx_def.1822*, i8*, i32, i32, i32 }
  %struct.basic_block_def.1840 = type { %struct.rtx_def.1822*, %struct.rtx_def.1822*, %union.tree_node.1821*, %union.tree_node.1821*, %struct.edge_def.1841*, %struct.edge_def.1841*, %struct.bitmap_head_def.1842*, %struct.bitmap_head_def.1842*, %struct.bitmap_head_def.1842*, %struct.bitmap_head_def.1842*, i8*, i32, i32, i32, i32, i32 }
  %union.tree_node.1821 = type { %struct.tree_type.1830, [24 x i8] }
  %struct.tree_type.1830 = type { %struct.tree_common.1831, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, i32, i32, i32, %union.tree_node.1821*, %union.tree_node.1821*, %union.anon.2.1832, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, %union.tree_node.1821*, i32, %struct.lang_type.1833* }
  %struct.tree_common.1831 = type { %union.tree_node.1821*, %union.tree_node.1821*, i32 }
  %union.anon.2.1832 = type { i32 }
  %struct.lang_type.1833 = type opaque
  %struct.bitmap_head_def.1842 = type { %struct.bitmap_element_def.1843*, %struct.bitmap_element_def.1843*, i32 }
  %struct.bitmap_element_def.1843 = type { %struct.bitmap_element_def.1843*, %struct.bitmap_element_def.1843*, i32, [2 x i32] }
  
  @.str = external hidden unnamed_addr constant [9 x i8], align 1
  @__FUNCTION__.insert_insn_on_edge = external hidden unnamed_addr constant [20 x i8], align 1
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #0
  
  ; Function Attrs: nounwind
  define void @insert_insn_on_edge(%struct.rtx_def.1822* %pattern, %struct.edge_def.1841* nocapture %e) #1 {
    %1 = getelementptr inbounds %struct.edge_def.1841, %struct.edge_def.1841* %e, i32 0, i32 6
    %2 = load i32, i32* %1, align 4
    %3 = and i32 %2, 2
    %4 = icmp eq i32 %3, 0
    br i1 %4, label %22, label %5
  
  ; <label>:5                                       ; preds = %0
    %6 = getelementptr inbounds %struct.edge_def.1841, %struct.edge_def.1841* %e, i32 0, i32 2
    %7 = load %struct.basic_block_def.1840*, %struct.basic_block_def.1840** %6, align 4
    %8 = getelementptr inbounds %struct.basic_block_def.1840, %struct.basic_block_def.1840* %7, i32 0, i32 5
    %9 = load %struct.edge_def.1841*, %struct.edge_def.1841** %8, align 4
    %10 = getelementptr inbounds %struct.edge_def.1841, %struct.edge_def.1841* %9, i32 0, i32 1
    %11 = load %struct.edge_def.1841*, %struct.edge_def.1841** %10, align 4
    %12 = icmp eq %struct.edge_def.1841* %11, null
    br i1 %12, label %22, label %13
  
  ; <label>:13                                      ; preds = %5
    %14 = getelementptr inbounds %struct.edge_def.1841, %struct.edge_def.1841* %e, i32 0, i32 3
    %15 = load %struct.basic_block_def.1840*, %struct.basic_block_def.1840** %14, align 4
    %16 = getelementptr inbounds %struct.basic_block_def.1840, %struct.basic_block_def.1840* %15, i32 0, i32 4
    %17 = load %struct.edge_def.1841*, %struct.edge_def.1841** %16, align 4
    %18 = bitcast %struct.edge_def.1841* %17 to %struct.edge_def.1841**
    %19 = load %struct.edge_def.1841*, %struct.edge_def.1841** %18, align 4
    %20 = icmp eq %struct.edge_def.1841* %19, null
    br i1 %20, label %22, label %21
  
  ; <label>:21                                      ; preds = %13
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 signext 1280, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @__FUNCTION__.insert_insn_on_edge, i32 0, i32 0)) #3
    unreachable
  
  ; <label>:22                                      ; preds = %13, %5, %0
    %23 = getelementptr inbounds %struct.edge_def.1841, %struct.edge_def.1841* %e, i32 0, i32 4
    %24 = load %struct.rtx_def.1822*, %struct.rtx_def.1822** %23, align 4
    %25 = icmp eq %struct.rtx_def.1822* %24, null
    br i1 %25, label %26, label %27
  
  ; <label>:26                                      ; preds = %22
    tail call void @start_sequence() #4
    br label %28
  
  ; <label>:27                                      ; preds = %22
    tail call void @push_to_sequence(%struct.rtx_def.1822* nonnull %24) #4
    br label %28
  
  ; <label>:28                                      ; preds = %27, %26
    %29 = tail call %struct.rtx_def.1822* @emit_insn(%struct.rtx_def.1822* %pattern) #4
    %30 = tail call %struct.rtx_def.1822* @get_insns() #4
    %sunkaddr = ptrtoint %struct.edge_def.1841* %e to i32
    %sunkaddr1 = add i32 %sunkaddr, 16
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to %struct.rtx_def.1822**
    store %struct.rtx_def.1822* %30, %struct.rtx_def.1822** %sunkaddr2, align 4
    tail call void @end_sequence() #4
    ret void
  }
  
  declare void @start_sequence() #2
  
  declare void @push_to_sequence(%struct.rtx_def.1822*) #2
  
  declare %struct.rtx_def.1822* @emit_insn(%struct.rtx_def.1822*) #2
  
  declare %struct.rtx_def.1822* @get_insns() #2
  
  declare void @end_sequence() #2
  
  attributes #0 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { noreturn nounwind }
  attributes #4 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            insert_insn_on_edge
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       32
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 1, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 2, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 3, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 26843545):
    successors: %bb.3(50), %bb.1(50)
    liveins: %a0, %a1, %t9, %ra, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -32
    CFI_INSTRUCTION .cfi_def_cfa_offset 32
    SW killed %ra, %sp, 28 :: (store 4 into stack)
    SW killed %s2, %sp, 24 :: (store 4 into stack)
    SW killed %s1, %sp, 20 :: (store 4 into stack)
    SW killed %s0, %sp, 16 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s2_64, -8
    CFI_INSTRUCTION .cfi_offset %s1_64, -12
    CFI_INSTRUCTION .cfi_offset %s0_64, -16
    %s0 = ADDu %v0, %t9
    %s1 = OR %a1, %zero
    %at = LBu %s1, 27 :: (load 1 from %ir.1 + 3)
    %at = ANDi killed %at, 2
    BEQ %at, %zero, %bb.3, implicit-def %at {
      %s2 = OR %a0, %zero
    }
  
  bb.1 (%ir-block.5, freq 13421772):
    successors: %bb.3(37), %bb.2(62)
    liveins: %s0, %s1, %s2
  
    %at = LW %s1, 8 :: (load 4 from %ir.6)
    %at = LW killed %at, 20 :: (load 4 from %ir.8)
    %at = LW killed %at, 4 :: (load 4 from %ir.10)
    BEQ %at, %zero, %bb.3, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.13, freq 8388608):
    successors: %bb.3(99), %bb.7(0)
    liveins: %s0, %s1, %s2
  
    %at = LW %s1, 12 :: (load 4 from %ir.14)
    %at = LW killed %at, 16 :: (load 4 from %ir.16)
    %at = LW killed %at, 0 :: (load 4 from %ir.18)
    BNE %at, %zero, %bb.7, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.22, freq 26843537):
    successors: %bb.5(37), %bb.4(62)
    liveins: %s0, %s1, %s2
  
    %a0 = LW %s1, 16 :: (load 4 from %ir.23)
    BEQ %a0, %zero, %bb.5, implicit-def %at {
      NOP
    }
  
  bb.4 (%ir-block.27, freq 16777211):
    successors: %bb.6(100)
    liveins: %a0, %s0, %s1, %s2
  
    %t9 = LW %s0, target-flags(<unknown>) @push_to_sequence :: (load 4 from call-entry @push_to_sequence)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    B %bb.6, implicit-def %at {
      NOP
    }
  
  bb.5 (%ir-block.26, freq 10066326):
    successors: %bb.6(100)
    liveins: %s0, %s1, %s2
  
    %t9 = LW %s0, target-flags(<unknown>) @start_sequence :: (load 4 from call-entry @start_sequence)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit killed %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.6 (%ir-block.28, freq 26843537):
    liveins: %s0, %s1, %s2
    liveouts:
  
    %t9 = LW %s0, target-flags(<unknown>) @emit_insn :: (load 4 from call-entry @emit_insn)
    %a0 = OR killed %s2, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %gp, implicit-def %sp, implicit-def dead %v0 {
      %gp = OR %s0, %zero
    }
    %t9 = LW %s0, target-flags(<unknown>) @get_insns :: (load 4 from call-entry @get_insns)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    SW killed %v0, killed %s1, 16 :: (store 4 into %ir.sunkaddr2)
    %t9 = LW %s0, target-flags(<unknown>) @end_sequence :: (load 4 from call-entry @end_sequence)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit killed %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }
    %s0 = LW %sp, 16 :: (load 4 from stack)
    %s1 = LW %sp, 20 :: (load 4 from stack)
    %s2 = LW %sp, 24 :: (load 4 from stack)
    %ra = LW %sp, 28 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 32
    }
  
  bb.7 (%ir-block.21, freq 8):
    liveins: %s0
    exit
  
    %a0 = LW %s0, target-flags(<unknown>) @.str :: (load 4 from got)
    %a2 = LW %s0, target-flags(<unknown>) @__FUNCTION__.insert_insn_on_edge :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @fancy_abort :: (load 4 from call-entry @fancy_abort)
    %a1 = ADDiu %zero, 1280
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit killed %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }

...
