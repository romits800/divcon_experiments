--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cpplib._cpp_init_internal_pragmas.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.cpp_reader.541 = type { %struct.cpp_buffer.542*, %struct.lexer_state.543, %struct.line_maps.544, %struct.line_map.545*, i32, i32, %struct._cpp_buff.546*, %struct._cpp_buff.546*, %struct._cpp_buff.546*, %struct.cpp_context.547, %struct.cpp_context.547*, %struct.directive.540*, %struct.cpp_hashnode.548*, %struct.cpp_hashnode.548*, i8, %struct.cpp_token.549*, %struct.tokenrun.550, %struct.tokenrun.550*, i32, i32, i32, i32, i32, i8*, i32, %struct.splay_tree_s.551*, i32, %struct.cpp_token.549, %struct.cpp_token.549, %struct.cpp_token.549, %struct.cpp_token.549, %struct.deps.552*, %struct.obstack.553, %struct.obstack.553, %struct.pragma_entry.554*, %struct.cpp_callbacks.555, %struct.ht.556*, %struct.cpp_options.557, %struct.spec_nodes.558, i8, i8 }
  %struct.cpp_buffer.542 = type { i8*, i8*, i8*, i8*, %struct.cpp_buffer.542*, i8*, %struct.include_file.559*, %struct.if_stack.560*, i32, i8, i8*, i8, i8, i8, i8, %struct.search_path.561 }
  %struct.include_file.559 = type opaque
  %struct.if_stack.560 = type { %struct.if_stack.560*, i32, %struct.cpp_hashnode.548*, i8, i8, i32 }
  %struct.search_path.561 = type { %struct.search_path.561*, i8*, i32, i32, i64, i32, %struct.file_name_map.562* }
  %struct.file_name_map.562 = type opaque
  %struct.lexer_state.543 = type { i8, i8, i8, i8, i8, i8, i8, i8, i8 }
  %struct.line_maps.544 = type { %struct.line_map.545*, i32, i32, i32, i32, i8 }
  %struct.line_map.545 = type { i8*, i32, i32, i32, i8, i8 }
  %struct._cpp_buff.546 = type { %struct._cpp_buff.546*, i8*, i8*, i8* }
  %struct.cpp_context.547 = type { %struct.cpp_context.547*, %struct.cpp_context.547*, %union.utoken.563, %union.utoken.563, %struct._cpp_buff.546*, %struct.cpp_hashnode.548*, i8 }
  %union.utoken.563 = type { %struct.cpp_token.549* }
  %struct.directive.540 = type { void (%struct.cpp_reader.541*)*, i8*, i16, i8, i8 }
  %struct.cpp_hashnode.548 = type { %struct.ht_identifier.564, i16, i8, i8, i8, i8, %union.anon.565 }
  %struct.ht_identifier.564 = type { i32, i8* }
  %union.anon.565 = type { %struct.cpp_macro.566* }
  %struct.cpp_macro.566 = type opaque
  %struct.tokenrun.550 = type { %struct.tokenrun.550*, %struct.tokenrun.550*, %struct.cpp_token.549*, %struct.cpp_token.549* }
  %struct.splay_tree_s.551 = type opaque
  %struct.cpp_token.549 = type { i32, i16, i8, i8, %union.anon.0.567 }
  %union.anon.0.567 = type { %struct.cpp_string.568 }
  %struct.cpp_string.568 = type { i32, i8* }
  %struct.deps.552 = type opaque
  %struct.obstack.553 = type { i32, %struct._obstack_chunk.569*, i8*, i8*, i8*, i32, i32, %struct._obstack_chunk.569* (i8*, i32)*, void (i8*, %struct._obstack_chunk.569*)*, i8*, i8 }
  %struct._obstack_chunk.569 = type { i8*, %struct._obstack_chunk.569*, [4 x i8] }
  %struct.pragma_entry.554 = type { %struct.pragma_entry.554*, %struct.cpp_hashnode.548*, i32, %union.anon.1.570 }
  %union.anon.1.570 = type { void (%struct.cpp_reader.541*)* }
  %struct.cpp_callbacks.555 = type { void (%struct.cpp_reader.541*, %struct.cpp_token.549*, i32)*, void (%struct.cpp_reader.541*, %struct.line_map.545*)*, void (%struct.cpp_reader.541*, i32, i8*, %struct.cpp_token.549*)*, void (%struct.cpp_reader.541*, i32, %struct.cpp_hashnode.548*)*, void (%struct.cpp_reader.541*, i32, %struct.cpp_hashnode.548*)*, void (%struct.cpp_reader.541*, i32, %struct.cpp_string.568*)*, void (%struct.cpp_reader.541*, i32)* }
  %struct.ht.556 = type { %struct.obstack.553, %struct.ht_identifier.564**, %struct.ht_identifier.564* (%struct.ht.556*)*, i32, i32, %struct.cpp_reader.541*, i32, i32 }
  %struct.cpp_options.557 = type { i8*, i8*, i32, %struct.cpp_pending.571*, i8*, %struct.search_path.561*, %struct.search_path.561*, %struct.file_name_map_list.572*, i8*, i32, i8*, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
  %struct.cpp_pending.571 = type opaque
  %struct.file_name_map_list.572 = type opaque
  %struct.spec_nodes.558 = type { %struct.cpp_hashnode.548*, %struct.cpp_hashnode.548*, %struct.cpp_hashnode.548*, %struct.cpp_hashnode.548*, %struct.cpp_hashnode.548* }
  
  @.str.5 = external hidden unnamed_addr constant [7 x i8], align 1
  @.str.6 = external hidden unnamed_addr constant [5 x i8], align 1
  @.str.7 = external hidden unnamed_addr constant [4 x i8], align 1
  @.str.8 = external hidden unnamed_addr constant [14 x i8], align 1
  @.str.9 = external hidden unnamed_addr constant [11 x i8], align 1
  
  ; Function Attrs: nounwind
  declare void @cpp_register_pragma(%struct.cpp_reader.541*, i8*, i8*, void (%struct.cpp_reader.541*)*) #0
  
  ; Function Attrs: nounwind
  define void @_cpp_init_internal_pragmas(%struct.cpp_reader.541* %pfile) #0 {
    tail call void @cpp_register_pragma(%struct.cpp_reader.541* %pfile, i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), void (%struct.cpp_reader.541*)* nonnull @do_pragma_poison)
    tail call void @cpp_register_pragma(%struct.cpp_reader.541* %pfile, i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), void (%struct.cpp_reader.541*)* nonnull @do_pragma_once)
    tail call void @cpp_register_pragma(%struct.cpp_reader.541* %pfile, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), void (%struct.cpp_reader.541*)* nonnull @do_pragma_poison)
    tail call void @cpp_register_pragma(%struct.cpp_reader.541* %pfile, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0), void (%struct.cpp_reader.541*)* nonnull @do_pragma_system_header)
    tail call void @cpp_register_pragma(%struct.cpp_reader.541* %pfile, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), void (%struct.cpp_reader.541*)* nonnull @do_pragma_dependency)
    ret void
  }
  
  ; Function Attrs: nounwind
  declare hidden void @do_pragma_poison(%struct.cpp_reader.541*) #0
  
  ; Function Attrs: nounwind
  declare hidden void @do_pragma_once(%struct.cpp_reader.541*) #0
  
  ; Function Attrs: nounwind
  declare hidden void @do_pragma_system_header(%struct.cpp_reader.541*) #0
  
  ; Function Attrs: nounwind
  declare hidden void @do_pragma_dependency(%struct.cpp_reader.541*) #0
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            _cpp_init_internal_pragmas
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       40
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 1, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s4' }
  - { id: 2, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 3, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 4, type: spill-slot, offset: -20, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 5, type: spill-slot, offset: -24, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %t9, %ra, %s4, %s3, %s2, %s1, %s0
    liveouts:
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -40
    CFI_INSTRUCTION .cfi_def_cfa_offset 40
    SW killed %ra, %sp, 36 :: (store 4 into stack)
    SW killed %s4, %sp, 32 :: (store 4 into stack)
    SW killed %s3, %sp, 28 :: (store 4 into stack)
    SW killed %s2, %sp, 24 :: (store 4 into stack)
    SW killed %s1, %sp, 20 :: (store 4 into stack)
    SW killed %s0, %sp, 16 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s4_64, -8
    CFI_INSTRUCTION .cfi_offset %s3_64, -12
    CFI_INSTRUCTION .cfi_offset %s2_64, -16
    CFI_INSTRUCTION .cfi_offset %s1_64, -20
    CFI_INSTRUCTION .cfi_offset %s0_64, -24
    %s0 = ADDu %v0, %t9
    %s1 = OR %a0, %zero
    %s2 = LW %s0, target-flags(<unknown>) @.str.5 :: (load 4 from got)
    %s3 = LW %s0, target-flags(<unknown>) @do_pragma_poison :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @cpp_register_pragma :: (load 4 from call-entry @cpp_register_pragma)
    %a1 = ADDiu %zero, 0
    %a2 = OR %s2, %zero
    %a3 = OR %s3, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %a3, implicit killed %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %a2 = LW %s0, target-flags(<unknown>) @.str.6 :: (load 4 from got)
    %a3 = LW %s0, target-flags(<unknown>) @do_pragma_once :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @cpp_register_pragma :: (load 4 from call-entry @cpp_register_pragma)
    %a0 = OR %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %a3, implicit-def %sp {
      %a1 = ADDiu %zero, 0
    }
    %s4 = LW %s0, target-flags(<unknown>) @.str.7 :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @cpp_register_pragma :: (load 4 from call-entry @cpp_register_pragma)
    %a0 = OR %s1, %zero
    %a1 = OR %s4, %zero
    %a2 = OR killed %s2, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %a3, implicit-def %sp {
      %a3 = OR killed %s3, %zero
    }
    %a2 = LW %s0, target-flags(<unknown>) @.str.8 :: (load 4 from got)
    %a3 = LW %s0, target-flags(<unknown>) @do_pragma_system_header :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @cpp_register_pragma :: (load 4 from call-entry @cpp_register_pragma)
    %a0 = OR %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %a3, implicit-def %sp {
      %a1 = OR %s4, %zero
    }
    %a2 = LW %s0, target-flags(<unknown>) @.str.9 :: (load 4 from got)
    %a3 = LW %s0, target-flags(<unknown>) @do_pragma_dependency :: (load 4 from got)
    %t9 = LW killed %s0, target-flags(<unknown>) @cpp_register_pragma :: (load 4 from call-entry @cpp_register_pragma)
    %a0 = OR killed %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %a3, implicit-def %sp {
      %a1 = OR killed %s4, %zero
    }
    %s0 = LW %sp, 16 :: (load 4 from stack)
    %s1 = LW %sp, 20 :: (load 4 from stack)
    %s2 = LW %sp, 24 :: (load 4 from stack)
    %s3 = LW %sp, 28 :: (load 4 from stack)
    %s4 = LW %sp, 32 :: (load 4 from stack)
    %ra = LW %sp, 36 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 40
    }

...
