--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cse.cse_basic_block.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.qty_table_elem.1035 = type { %struct.rtx_def.1033*, %struct.rtx_def.1033*, %struct.rtx_def.1033*, i32, i32, i32, i32, i32 }
  %struct.rtx_def.1033 = type { i32, [1 x %union.rtunion_def.1034] }
  %union.rtunion_def.1034 = type { i32 }
  %struct.cse_reg_info.1036 = type { %struct.cse_reg_info.1036*, %struct.cse_reg_info.1036*, i32, i32, i32, i32 }
  %struct.table_elt.1037 = type { %struct.rtx_def.1033*, %struct.rtx_def.1033*, %struct.table_elt.1037*, %struct.table_elt.1037*, %struct.table_elt.1037*, %struct.table_elt.1037*, %struct.table_elt.1037*, %struct.table_elt.1037*, i32, i32, i32, i8, i8, i8 }
  %struct.cse_basic_block_data.1055 = type { i32, i32, i32, %struct.rtx_def.1033*, i32, [10 x %struct.branch_path.1056] }
  %struct.branch_path.1056 = type { %struct.rtx_def.1033*, i32 }
  %struct.rtvec_def.1054 = type { i32, [1 x %struct.rtx_def.1033*] }
  
  @rtx_class = external constant [153 x i8], align 1
  @cse_jumps_altered = external hidden unnamed_addr global i32, align 4
  @recorded_label_ref = external hidden unnamed_addr global i1
  @max_reg = external hidden unnamed_addr global i32, align 4
  @max_insn_uid = external hidden unnamed_addr global i32, align 4
  @flag_cse_follow_jumps = external global i32, align 4
  @flag_cse_skip_blocks = external global i32, align 4
  @cse_basic_block_start = external hidden unnamed_addr global i32, align 4
  @cse_basic_block_end = external hidden unnamed_addr global i32, align 4
  @max_qty = external hidden unnamed_addr global i32, align 4
  @qty_table = external hidden unnamed_addr global %struct.qty_table_elem.1035*, align 4
  @prev_insn = external hidden unnamed_addr global %struct.rtx_def.1033*, align 4
  @next_qty = external hidden unnamed_addr global i32, align 4
  @.str.4 = external hidden unnamed_addr constant [6 x i8], align 1
  @__FUNCTION__.cse_basic_block = external hidden unnamed_addr constant [16 x i8], align 1
  @reg_hash = external hidden unnamed_addr global [128 x %struct.cse_reg_info.1036*], align 4
  @cse_reg_info_used_list = external hidden unnamed_addr global %struct.cse_reg_info.1036*, align 4
  @cse_reg_info_free_list = external hidden unnamed_addr global %struct.cse_reg_info.1036*, align 4
  @cse_reg_info_used_list_end = external hidden unnamed_addr global %struct.cse_reg_info.1036*, align 4
  @cached_cse_reg_info = external hidden unnamed_addr global %struct.cse_reg_info.1036*, align 4
  @hard_regs_in_table = external hidden unnamed_addr global i32, align 4
  @table = external hidden unnamed_addr global [32 x %struct.table_elt.1037*], align 4
  @free_element_chain = external hidden unnamed_addr global %struct.table_elt.1037*, align 4
  @last_jump_equiv_class = external hidden unnamed_addr global %struct.table_elt.1037*, align 4
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #0
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #0
  
  ; Function Attrs: nounwind
  declare void @cse_end_of_basic_block(%struct.rtx_def.1033*, %struct.cse_basic_block_data.1055* nocapture, i32 signext, i32 signext, i32 signext) #1
  
  declare %struct.rtx_def.1033* @find_reg_note(%struct.rtx_def.1033*, i32 signext, %struct.rtx_def.1033*) #2
  
  declare noalias i8* @xmalloc(i32 signext) #2
  
  ; Function Attrs: nounwind
  define hidden fastcc %struct.rtx_def.1033* @cse_basic_block(%struct.rtx_def.1033* %from, %struct.rtx_def.1033* %to, %struct.branch_path.1056* nocapture readonly %next_branch, i32 signext %around_loop) unnamed_addr #1 {
    %val = alloca %struct.cse_basic_block_data.1055, align 4
    %1 = load i32, i32* @max_qty, align 4
    %2 = load i32, i32* @max_reg, align 4
    %3 = sub nsw i32 %1, %2
    %4 = shl i32 %3, 5
    %5 = tail call noalias i8* @xmalloc(i32 signext %4) #5
    %6 = bitcast i8* %5 to %struct.qty_table_elem.1035*
    %7 = load i32, i32* @max_reg, align 4
    %8 = sub i32 0, %7
    %9 = getelementptr inbounds %struct.qty_table_elem.1035, %struct.qty_table_elem.1035* %6, i32 %8
    store %struct.qty_table_elem.1035* %9, %struct.qty_table_elem.1035** @qty_table, align 4
    store i32 %7, i32* @next_qty, align 4
    tail call void @llvm.memset.p0i8.i32(i8* bitcast ([128 x %struct.cse_reg_info.1036*]* @reg_hash to i8*), i8 0, i32 512, i32 4, i1 false) #5
    %10 = load %struct.cse_reg_info.1036*, %struct.cse_reg_info.1036** @cse_reg_info_used_list, align 4
    %11 = icmp eq %struct.cse_reg_info.1036* %10, null
    br i1 %11, label %18, label %12
  
  ; <label>:12                                      ; preds = %0
    %13 = ptrtoint %struct.cse_reg_info.1036* %10 to i32
    %14 = load i32, i32* bitcast (%struct.cse_reg_info.1036** @cse_reg_info_free_list to i32*), align 4
    %15 = load %struct.cse_reg_info.1036*, %struct.cse_reg_info.1036** @cse_reg_info_used_list_end, align 4
    %16 = getelementptr inbounds %struct.cse_reg_info.1036, %struct.cse_reg_info.1036* %15, i32 0, i32 1
    %17 = bitcast %struct.cse_reg_info.1036** %16 to i32*
    store i32 %14, i32* %17, align 4
    store i32 %13, i32* bitcast (%struct.cse_reg_info.1036** @cse_reg_info_free_list to i32*), align 4
    store %struct.cse_reg_info.1036* null, %struct.cse_reg_info.1036** @cse_reg_info_used_list_end, align 4
    store %struct.cse_reg_info.1036* null, %struct.cse_reg_info.1036** @cse_reg_info_used_list, align 4
    br label %18
  
  ; <label>:18                                      ; preds = %12, %0
    store %struct.cse_reg_info.1036* null, %struct.cse_reg_info.1036** @cached_cse_reg_info, align 4
    store i32 0, i32* @hard_regs_in_table, align 4
    br label %19
  
  ; <label>:19                                      ; preds = %30, %18
    %i.01.i = phi i32 [ 0, %18 ], [ %31, %30 ]
    %20 = getelementptr inbounds [32 x %struct.table_elt.1037*], [32 x %struct.table_elt.1037*]* @table, i32 0, i32 %i.01.i
    %21 = load %struct.table_elt.1037*, %struct.table_elt.1037** %20, align 4
    %22 = icmp eq %struct.table_elt.1037* %21, null
    br i1 %22, label %30, label %23
  
  ; <label>:23                                      ; preds = %19
    store %struct.table_elt.1037* null, %struct.table_elt.1037** %20, align 4
    br label %24
  
  ; <label>:24                                      ; preds = %24, %23
    %last.0.i = phi %struct.table_elt.1037* [ %21, %23 ], [ %26, %24 ]
    %25 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %last.0.i, i32 0, i32 2
    %26 = load %struct.table_elt.1037*, %struct.table_elt.1037** %25, align 4
    %27 = icmp eq %struct.table_elt.1037* %26, null
    br i1 %27, label %28, label %24
  
  ; <label>:28                                      ; preds = %24
    %29 = load i32, i32* bitcast (%struct.table_elt.1037** @free_element_chain to i32*), align 4
    %sunkaddr = ptrtoint %struct.table_elt.1037* %last.0.i to i32
    %sunkaddr4 = add i32 %sunkaddr, 8
    %sunkaddr5 = inttoptr i32 %sunkaddr4 to i32*
    store i32 %29, i32* %sunkaddr5, align 4
    store %struct.table_elt.1037* %21, %struct.table_elt.1037** @free_element_chain, align 4
    br label %30
  
  ; <label>:30                                      ; preds = %28, %19
    %31 = add nuw nsw i32 %i.01.i, 1
    %exitcond.i = icmp eq i32 %31, 32
    br i1 %exitcond.i, label %new_basic_block.exit, label %19
  
  new_basic_block.exit:                             ; preds = %30
    %32 = icmp eq %struct.rtx_def.1033* %to, null
    br i1 %32, label %.preheader57, label %33
  
  ; <label>:33                                      ; preds = %new_basic_block.exit
    %34 = bitcast %struct.rtx_def.1033* %to to i32*
    %35 = load i32, i32* %34, align 4
    %.mask30 = and i32 %35, -65536
    %36 = icmp eq i32 %.mask30, 2359296
    br i1 %36, label %37, label %.preheader57
  
  ; <label>:37                                      ; preds = %33
    %38 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %to, i32 0, i32 1, i32 3, i32 0
    %39 = load i32, i32* %38, align 4
    %40 = add nsw i32 %39, 1
    store i32 %40, i32* %38, align 4
    br label %.preheader57
  
  .preheader57:                                     ; preds = %37, %33, %new_basic_block.exit
    %.014.ph = phi %struct.rtx_def.1033* [ %to, %33 ], [ %to, %37 ], [ null, %new_basic_block.exit ]
    %41 = icmp eq %struct.rtx_def.1033* %.014.ph, %from
    br i1 %41, label %.thread53, label %.lr.ph
  
  .lr.ph:                                           ; preds = %.preheader57
    br label %42
  
  ; <label>:42                                      ; preds = %241, %.lr.ph
    %.01475 = phi %struct.rtx_def.1033* [ %.014.ph, %.lr.ph ], [ %.317.ph, %241 ]
    %.02274 = phi %struct.branch_path.1056* [ %next_branch, %.lr.ph ], [ %.224.ph, %241 ]
    %insn.073 = phi %struct.rtx_def.1033* [ %from, %.lr.ph ], [ %244, %241 ]
    %num_insns.072 = phi i32 [ 0, %.lr.ph ], [ %num_insns.1, %241 ]
    %libcall_insn.071 = phi %struct.rtx_def.1033* [ null, %.lr.ph ], [ %libcall_insn.3.ph, %241 ]
    %to_usage.070 = phi i32 [ 0, %.lr.ph ], [ %to_usage.5.ph, %241 ]
    %43 = bitcast %struct.rtx_def.1033* %insn.073 to i32*
    %44 = load i32, i32* %43, align 4
    %45 = lshr i32 %44, 16
    %46 = icmp eq i32 %45, 37
    br i1 %46, label %flush_hash_table.exit, label %47
  
  ; <label>:47                                      ; preds = %42
    %48 = add nsw i32 %num_insns.072, 1
    %49 = icmp sgt i32 %num_insns.072, 1000
    br i1 %49, label %.preheader56, label %flush_hash_table.exit
  
  .preheader56:                                     ; preds = %47, %._crit_edge.i
    %i.03.i = phi i32 [ %62, %._crit_edge.i ], [ 0, %47 ]
    %50 = getelementptr inbounds [32 x %struct.table_elt.1037*], [32 x %struct.table_elt.1037*]* @table, i32 0, i32 %i.03.i
    %p.01.i = load %struct.table_elt.1037*, %struct.table_elt.1037** %50, align 4
    %51 = icmp eq %struct.table_elt.1037* %p.01.i, null
    br i1 %51, label %._crit_edge.i, label %.lr.ph.i31
  
  .lr.ph.i31:                                       ; preds = %.preheader56, %.backedge.i33
    %p.02.i = phi %struct.table_elt.1037* [ %p.0.i32, %.backedge.i33 ], [ %p.01.i, %.preheader56 ]
    %52 = bitcast %struct.table_elt.1037* %p.02.i to %struct.rtx_def.1033**
    %53 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %52, align 4
    %54 = bitcast %struct.rtx_def.1033* %53 to i32*
    %55 = load i32, i32* %54, align 4
    %.mask.i = and i32 %55, -65536
    %56 = icmp eq i32 %.mask.i, 3997696
    br i1 %56, label %57, label %61
  
  ; <label>:57                                      ; preds = %.lr.ph.i31
    %58 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %p.02.i, i32 0, i32 10
    %59 = load i32, i32* %58, align 4
    tail call fastcc void @invalidate(%struct.rtx_def.1033* %53, i32 signext %59) #5
    br label %.backedge.i33
  
  .backedge.i33:                                    ; preds = %61, %57
    %p.0.i32 = load %struct.table_elt.1037*, %struct.table_elt.1037** %50, align 4
    %60 = icmp eq %struct.table_elt.1037* %p.0.i32, null
    br i1 %60, label %._crit_edge.i, label %.lr.ph.i31
  
  ; <label>:61                                      ; preds = %.lr.ph.i31
    tail call fastcc void @remove_from_table(%struct.table_elt.1037* nonnull %p.02.i, i32 signext %i.03.i) #5
    br label %.backedge.i33
  
  ._crit_edge.i:                                    ; preds = %.backedge.i33, %.preheader56
    %62 = add nuw nsw i32 %i.03.i, 1
    %exitcond.i34 = icmp eq i32 %62, 32
    br i1 %exitcond.i34, label %flush_hash_table.exit, label %.preheader56
  
  flush_hash_table.exit:                            ; preds = %._crit_edge.i, %47, %42
    %num_insns.1 = phi i32 [ %48, %47 ], [ %num_insns.072, %42 ], [ 0, %._crit_edge.i ]
    %63 = bitcast %struct.branch_path.1056* %.02274 to %struct.rtx_def.1033**
    %64 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %63, align 4
    %65 = icmp eq %struct.rtx_def.1033* %64, %insn.073
    br i1 %65, label %66, label %.thread
  
  ; <label>:66                                      ; preds = %flush_hash_table.exit
    %67 = getelementptr inbounds %struct.branch_path.1056, %struct.branch_path.1056* %.02274, i32 1
    %68 = getelementptr inbounds %struct.branch_path.1056, %struct.branch_path.1056* %.02274, i32 0, i32 1
    %69 = load i32, i32* %68, align 4
    switch i32 %69, label %71 [
      i32 1, label %.thread
      i32 0, label %70
    ]
  
  ; <label>:70                                      ; preds = %66
    tail call fastcc void @record_jump_equiv(%struct.rtx_def.1033* %insn.073, i32 signext 1)
    br label %.loopexit
  
  ; <label>:71                                      ; preds = %66
    %72 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.073, i32 0, i32 1, i32 2
    %73 = bitcast %union.rtunion_def.1034* %72 to %struct.rtx_def.1033**
    %74 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %73, align 4
    %75 = icmp eq %struct.rtx_def.1033* %74, null
    br i1 %75, label %.loopexit, label %.lr.ph.i35
  
  .lr.ph.i35:                                       ; preds = %71, %105
    %insn.01.i = phi %struct.rtx_def.1033* [ %108, %105 ], [ %74, %71 ]
    %76 = bitcast %struct.rtx_def.1033* %insn.01.i to i32*
    %77 = load i32, i32* %76, align 4
    %78 = lshr i32 %77, 16
    %79 = icmp eq i32 %78, 36
    br i1 %79, label %.loopexit, label %80
  
  ; <label>:80                                      ; preds = %.lr.ph.i35
    %81 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i32 %78
    %82 = load i8, i8* %81, align 1
    %83 = icmp eq i8 %82, 105
    br i1 %83, label %84, label %105
  
  ; <label>:84                                      ; preds = %80
    %85 = icmp eq i32 %78, 34
    br i1 %85, label %86, label %100
  
  ; <label>:86                                      ; preds = %84
    %87 = and i32 %77, 32
    %88 = icmp eq i32 %87, 0
    br i1 %88, label %.preheader.i36, label %invalidate_memory.exit.i
  
  .preheader.i36:                                   ; preds = %86, %._crit_edge.i.i
    %i.02.i.i = phi i32 [ %99, %._crit_edge.i.i ], [ 0, %86 ]
    %89 = getelementptr inbounds [32 x %struct.table_elt.1037*], [32 x %struct.table_elt.1037*]* @table, i32 0, i32 %i.02.i.i
    %90 = load %struct.table_elt.1037*, %struct.table_elt.1037** %89, align 4
    %91 = icmp eq %struct.table_elt.1037* %90, null
    br i1 %91, label %._crit_edge.i.i, label %.lr.ph.i.i
  
  .lr.ph.i.i:                                       ; preds = %.preheader.i36, %.backedge.i.i
    %p.01.i.i = phi %struct.table_elt.1037* [ %93, %.backedge.i.i ], [ %90, %.preheader.i36 ]
    %92 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %p.01.i.i, i32 0, i32 2
    %93 = load %struct.table_elt.1037*, %struct.table_elt.1037** %92, align 4
    %94 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %p.01.i.i, i32 0, i32 11
    %95 = load i8, i8* %94, align 4
    %96 = icmp eq i8 %95, 0
    br i1 %96, label %.backedge.i.i, label %98
  
  .backedge.i.i:                                    ; preds = %98, %.lr.ph.i.i
    %97 = icmp eq %struct.table_elt.1037* %93, null
    br i1 %97, label %._crit_edge.i.i, label %.lr.ph.i.i
  
  ; <label>:98                                      ; preds = %.lr.ph.i.i
    tail call fastcc void @remove_from_table(%struct.table_elt.1037* nonnull %p.01.i.i, i32 signext %i.02.i.i) #5
    br label %.backedge.i.i
  
  ._crit_edge.i.i:                                  ; preds = %.backedge.i.i, %.preheader.i36
    %99 = add nuw nsw i32 %i.02.i.i, 1
    %exitcond.i.i = icmp eq i32 %99, 32
    br i1 %exitcond.i.i, label %invalidate_memory.exit.i, label %.preheader.i36
  
  invalidate_memory.exit.i:                         ; preds = %._crit_edge.i.i, %86
    tail call fastcc void @invalidate_for_call() #5
    br label %100
  
  ; <label>:100                                     ; preds = %invalidate_memory.exit.i, %84
    %101 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.01.i, i32 0, i32 1, i32 3
    %102 = bitcast %union.rtunion_def.1034* %101 to %struct.rtx_def.1033**
    %103 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %102, align 4
    tail call fastcc void @invalidate_from_clobbers(%struct.rtx_def.1033* %103) #5
    %104 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %102, align 4
    tail call void @note_stores(%struct.rtx_def.1033* %104, void (%struct.rtx_def.1033*, %struct.rtx_def.1033*, i8*)* nonnull @invalidate_skipped_set, i8* null) #5
    br label %105
  
  ; <label>:105                                     ; preds = %100, %80
    %106 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.01.i, i32 0, i32 1, i32 2
    %107 = bitcast %union.rtunion_def.1034* %106 to %struct.rtx_def.1033**
    %108 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %107, align 4
    %109 = icmp eq %struct.rtx_def.1033* %108, null
    br i1 %109, label %.loopexit, label %.lr.ph.i35
  
  .loopexit:                                        ; preds = %.lr.ph.i35, %105, %71, %70
    store %struct.rtx_def.1033* %insn.073, %struct.rtx_def.1033** @prev_insn, align 4
    %110 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.073, i32 0, i32 1, i32 7
    %111 = bitcast %union.rtunion_def.1034* %110 to %struct.rtx_def.1033**
    %112 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %111, align 4
    br label %241
  
  .thread:                                          ; preds = %66, %flush_hash_table.exit
    %.123 = phi %struct.branch_path.1056* [ %.02274, %flush_hash_table.exit ], [ %67, %66 ]
    %113 = bitcast %struct.rtx_def.1033* %insn.073 to i32*
    %114 = load i32, i32* %113, align 4
    %115 = and i32 %114, 65280
    %116 = icmp eq i32 %115, 512
    br i1 %116, label %117, label %120
  
  ; <label>:117                                     ; preds = %.thread
    %118 = bitcast %struct.rtx_def.1033* %insn.073 to i32*
    %119 = and i32 %114, -65281
    store i32 %119, i32* %118, align 4
    br label %120
  
  ; <label>:120                                     ; preds = %117, %.thread
    %121 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i32 %45
    %122 = load i8, i8* %121, align 1
    %123 = icmp eq i8 %122, 105
    br i1 %123, label %124, label %152
  
  ; <label>:124                                     ; preds = %120
    %125 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.073, i32 0, i32 1, i32 6
    %126 = bitcast %union.rtunion_def.1034* %125 to %struct.rtx_def.1033**
    %127 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %126, align 4
    %128 = icmp eq %struct.rtx_def.1033* %127, null
    br i1 %128, label %.thread38, label %129
  
  ; <label>:129                                     ; preds = %124
    %130 = tail call fastcc %struct.rtx_def.1033* @cse_process_notes(%struct.rtx_def.1033* nonnull %127, %struct.rtx_def.1033* null)
    %sunkaddr6 = ptrtoint %struct.rtx_def.1033* %insn.073 to i32
    %sunkaddr7 = add i32 %sunkaddr6, 28
    %sunkaddr8 = inttoptr i32 %sunkaddr7 to %struct.rtx_def.1033**
    store %struct.rtx_def.1033* %130, %struct.rtx_def.1033** %sunkaddr8, align 4
    %131 = icmp eq %struct.rtx_def.1033* %130, null
    br i1 %131, label %.thread38, label %132
  
  ; <label>:132                                     ; preds = %129
    %133 = tail call %struct.rtx_def.1033* @find_reg_note(%struct.rtx_def.1033* nonnull %insn.073, i32 signext 7, %struct.rtx_def.1033* null) #5
    %134 = icmp eq %struct.rtx_def.1033* %133, null
    br i1 %134, label %139, label %135
  
  ; <label>:135                                     ; preds = %132
    %136 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %133, i32 0, i32 1, i32 0
    %137 = bitcast %union.rtunion_def.1034* %136 to %struct.rtx_def.1033**
    %138 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %137, align 4
    br label %.thread38
  
  ; <label>:139                                     ; preds = %132
    %140 = tail call %struct.rtx_def.1033* @find_reg_note(%struct.rtx_def.1033* nonnull %insn.073, i32 signext 6, %struct.rtx_def.1033* null) #5
    %141 = icmp eq %struct.rtx_def.1033* %140, null
    %libcall_insn.0. = select i1 %141, %struct.rtx_def.1033* %libcall_insn.071, %struct.rtx_def.1033* null
    br label %.thread38
  
  .thread38:                                        ; preds = %139, %135, %129, %124
    %libcall_insn.1 = phi %struct.rtx_def.1033* [ %138, %135 ], [ %libcall_insn.071, %129 ], [ %libcall_insn.0., %139 ], [ %libcall_insn.071, %124 ]
    %142 = bitcast %struct.rtx_def.1033* %insn.073 to i32*
    tail call fastcc void @cse_insn(%struct.rtx_def.1033* nonnull %insn.073, %struct.rtx_def.1033* %libcall_insn.1)
    %143 = load i32, i32* %142, align 4
    %.mask29 = and i32 %143, -65536
    %144 = icmp ne i32 %.mask29, 2097152
    %.b = load i1, i1* @recorded_label_ref, align 1
    %or.cond = or i1 %.b, %144
    br i1 %or.cond, label %152, label %145
  
  ; <label>:145                                     ; preds = %.thread38
    %146 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.073, i32 0, i32 1, i32 3
    %147 = bitcast %union.rtunion_def.1034* %146 to %struct.rtx_def.1033**
    %148 = bitcast %struct.rtx_def.1033* %insn.073 to i8*
    %149 = tail call i32 @for_each_rtx(%struct.rtx_def.1033** %147, i32 (%struct.rtx_def.1033**, i8*)* nonnull @check_for_label_ref, i8* %148) #5
    %150 = icmp eq i32 %149, 0
    br i1 %150, label %152, label %151
  
  ; <label>:151                                     ; preds = %145
    store i1 true, i1* @recorded_label_ref, align 1
    br label %152
  
  ; <label>:152                                     ; preds = %151, %145, %.thread38, %120
    %libcall_insn.2 = phi %struct.rtx_def.1033* [ %libcall_insn.071, %120 ], [ %libcall_insn.1, %145 ], [ %libcall_insn.1, %.thread38 ], [ %libcall_insn.1, %151 ]
    %153 = tail call i32 @any_uncondjump_p(%struct.rtx_def.1033* nonnull %insn.073) #5
    %154 = icmp eq i32 %153, 0
    br i1 %154, label %173, label %155
  
  ; <label>:155                                     ; preds = %152
    %156 = icmp eq %struct.rtx_def.1033* %.01475, null
    br i1 %156, label %.thread52, label %161
  
  .thread52:                                        ; preds = %155
    %157 = load %struct.qty_table_elem.1035*, %struct.qty_table_elem.1035** @qty_table, align 4
    %158 = load i32, i32* @max_reg, align 4
    %159 = getelementptr inbounds %struct.qty_table_elem.1035, %struct.qty_table_elem.1035* %157, i32 %158
    %160 = bitcast %struct.qty_table_elem.1035* %159 to i8*
    tail call void @free(i8* %160) #5
    br label %372
  
  ; <label>:161                                     ; preds = %155
    %162 = bitcast %struct.rtx_def.1033* %.01475 to i32*
    %163 = load i32, i32* %162, align 4
    %164 = and i32 %163, 16
    %165 = icmp eq i32 %164, 0
    br i1 %165, label %.thread39, label %.thread53
  
  .thread39:                                        ; preds = %161
    %166 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.073, i32 0, i32 1, i32 7
    %167 = bitcast %union.rtunion_def.1034* %166 to %struct.rtx_def.1033**
    %168 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %167, align 4
    %169 = icmp eq %struct.rtx_def.1033* %168, %.01475
    %.to_usage.0 = select i1 %169, i32 1, i32 %to_usage.070
    %170 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.01475, i32 0, i32 1, i32 1
    %171 = bitcast %union.rtunion_def.1034* %170 to %struct.rtx_def.1033**
    %172 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %171, align 4
    br label %175
  
  ; <label>:173                                     ; preds = %152
    %174 = icmp eq %struct.rtx_def.1033* %.01475, null
    br i1 %174, label %241, label %175
  
  ; <label>:175                                     ; preds = %173, %.thread39
    %insn.341 = phi %struct.rtx_def.1033* [ %172, %.thread39 ], [ %insn.073, %173 ]
    %to_usage.240 = phi i32 [ %.to_usage.0, %.thread39 ], [ %to_usage.070, %173 ]
    %176 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.341, i32 0, i32 1, i32 2
    %177 = bitcast %union.rtunion_def.1034* %176 to %struct.rtx_def.1033**
    %178 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %177, align 4
    %179 = icmp eq %struct.rtx_def.1033* %178, %.01475
    br i1 %179, label %180, label %241
  
  ; <label>:180                                     ; preds = %175
    %181 = bitcast %struct.rtx_def.1033* %.01475 to i32*
    %182 = load i32, i32* %181, align 4
    %.mask26 = and i32 %182, -65536
    %183 = icmp eq i32 %.mask26, 2359296
    br i1 %183, label %184, label %241
  
  ; <label>:184                                     ; preds = %180
    %185 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.01475, i32 0, i32 1, i32 3, i32 0
    %186 = load i32, i32* %185, align 4
    %187 = add nsw i32 %186, -1
    store i32 %187, i32* %185, align 4
    %188 = icmp eq i32 %187, %to_usage.240
    br i1 %188, label %189, label %241
  
  ; <label>:189                                     ; preds = %184
    %190 = bitcast %struct.cse_basic_block_data.1055* %val to i8*
    call void @llvm.lifetime.start(i64 100, i8* %190) #5
    %191 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.01475, i32 0, i32 1, i32 2
    %192 = bitcast %union.rtunion_def.1034* %191 to %struct.rtx_def.1033**
    %193 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %192, align 4
    %194 = icmp eq %struct.rtx_def.1033* %193, null
    br i1 %194, label %195, label %200
  
  ; <label>:195                                     ; preds = %189
    %196 = load %struct.qty_table_elem.1035*, %struct.qty_table_elem.1035** @qty_table, align 4
    %197 = load i32, i32* @max_reg, align 4
    %198 = getelementptr inbounds %struct.qty_table_elem.1035, %struct.qty_table_elem.1035* %196, i32 %197
    %199 = bitcast %struct.qty_table_elem.1035* %198 to i8*
    tail call void @free(i8* %199) #5
    br label %.thread54
  
  ; <label>:200                                     ; preds = %189
    %201 = tail call %struct.rtx_def.1033* @prev_nonnote_insn(%struct.rtx_def.1033* nonnull %.01475) #5
    %202 = icmp eq %struct.rtx_def.1033* %201, null
    br i1 %202, label %212, label %203
  
  ; <label>:203                                     ; preds = %200
    %204 = bitcast %struct.rtx_def.1033* %201 to i32*
    %205 = load i32, i32* %204, align 4
    %.mask28 = and i32 %205, -65536
    %206 = icmp eq i32 %.mask28, 2293760
    br i1 %206, label %207, label %212
  
  ; <label>:207                                     ; preds = %203
    %208 = load %struct.qty_table_elem.1035*, %struct.qty_table_elem.1035** @qty_table, align 4
    %209 = load i32, i32* @max_reg, align 4
    %210 = getelementptr inbounds %struct.qty_table_elem.1035, %struct.qty_table_elem.1035* %208, i32 %209
    %211 = bitcast %struct.qty_table_elem.1035* %210 to i8*
    tail call void @free(i8* %211) #5
    br label %.thread54
  
  ; <label>:212                                     ; preds = %203, %200
    %sunkaddr9 = ptrtoint %struct.cse_basic_block_data.1055* %val to i32
    %sunkaddr10 = add i32 %sunkaddr9, 16
    %sunkaddr11 = inttoptr i32 %sunkaddr10 to i32*
    store i32 0, i32* %sunkaddr11, align 4
    call void @cse_end_of_basic_block(%struct.rtx_def.1033* nonnull %193, %struct.cse_basic_block_data.1055* nonnull %val, i32 signext 0, i32 signext 0, i32 signext 0)
    %sunkaddr12 = ptrtoint %struct.cse_basic_block_data.1055* %val to i32
    %sunkaddr13 = add i32 %sunkaddr12, 8
    %sunkaddr14 = inttoptr i32 %sunkaddr13 to i32*
    %213 = load i32, i32* %sunkaddr14, align 4
    %214 = shl i32 %213, 1
    %215 = load i32, i32* @next_qty, align 4
    %216 = add nsw i32 %214, %215
    %217 = load i32, i32* @max_qty, align 4
    %218 = icmp sgt i32 %216, %217
    br i1 %218, label %239, label %219
  
  ; <label>:219                                     ; preds = %212
    %220 = bitcast %struct.cse_basic_block_data.1055* %val to i32*
    %221 = load i32, i32* %220, align 4
    store i32 %221, i32* @cse_basic_block_start, align 4
    %sunkaddr15 = ptrtoint %struct.cse_basic_block_data.1055* %val to i32
    %sunkaddr16 = add i32 %sunkaddr15, 4
    %sunkaddr17 = inttoptr i32 %sunkaddr16 to i32*
    %222 = load i32, i32* %sunkaddr17, align 4
    store i32 %222, i32* @cse_basic_block_end, align 4
    %sunkaddr18 = ptrtoint %struct.cse_basic_block_data.1055* %val to i32
    %sunkaddr19 = add i32 %sunkaddr18, 12
    %sunkaddr20 = inttoptr i32 %sunkaddr19 to %struct.rtx_def.1033**
    %223 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %sunkaddr20, align 4
    %224 = icmp eq %struct.rtx_def.1033* %223, null
    br i1 %224, label %233, label %225
  
  ; <label>:225                                     ; preds = %219
    %226 = bitcast %struct.rtx_def.1033* %223 to i32*
    %227 = load i32, i32* %226, align 4
    %.mask27 = and i32 %227, -65536
    %228 = icmp eq i32 %.mask27, 2359296
    br i1 %228, label %229, label %233
  
  ; <label>:229                                     ; preds = %225
    %230 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %223, i32 0, i32 1, i32 3, i32 0
    %231 = load i32, i32* %230, align 4
    %232 = add nsw i32 %231, 1
    store i32 %232, i32* %230, align 4
    br label %233
  
  ; <label>:233                                     ; preds = %229, %225, %219
    %234 = bitcast %struct.cse_basic_block_data.1055* %val to i8*
    %235 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %193, i32 0, i32 1, i32 1
    %236 = bitcast %union.rtunion_def.1034* %235 to %struct.rtx_def.1033**
    %237 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %236, align 4
    call void @llvm.lifetime.end(i64 100, i8* nonnull %234) #5
    br label %241
  
  .thread54:                                        ; preds = %207, %195
    %.1.ph.ph = phi %struct.rtx_def.1033* [ null, %195 ], [ %193, %207 ]
    %238 = bitcast %struct.cse_basic_block_data.1055* %val to i8*
    call void @llvm.lifetime.end(i64 100, i8* %238) #5
    br label %372
  
  ; <label>:239                                     ; preds = %212
    %240 = bitcast %struct.cse_basic_block_data.1055* %val to i8*
    call void @llvm.lifetime.end(i64 100, i8* nonnull %240) #5
    br label %.thread53
  
  ; <label>:241                                     ; preds = %233, %184, %180, %175, %173, %.loopexit
    %to_usage.5.ph = phi i32 [ %to_usage.070, %173 ], [ %to_usage.240, %175 ], [ %to_usage.240, %180 ], [ %to_usage.240, %184 ], [ 0, %233 ], [ %to_usage.070, %.loopexit ]
    %libcall_insn.3.ph = phi %struct.rtx_def.1033* [ %libcall_insn.2, %173 ], [ %libcall_insn.2, %175 ], [ %libcall_insn.2, %180 ], [ %libcall_insn.2, %184 ], [ %libcall_insn.2, %233 ], [ %libcall_insn.071, %.loopexit ]
    %insn.6.ph = phi %struct.rtx_def.1033* [ %insn.073, %173 ], [ %insn.341, %175 ], [ %insn.341, %180 ], [ %insn.341, %184 ], [ %237, %233 ], [ %112, %.loopexit ]
    %.224.ph = phi %struct.branch_path.1056* [ %.123, %173 ], [ %.123, %175 ], [ %.123, %180 ], [ %.123, %184 ], [ %.123, %233 ], [ %67, %.loopexit ]
    %.317.ph = phi %struct.rtx_def.1033* [ null, %173 ], [ %.01475, %175 ], [ %.01475, %180 ], [ %.01475, %184 ], [ %223, %233 ], [ %.01475, %.loopexit ]
    %242 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.6.ph, i32 0, i32 1, i32 2
    %243 = bitcast %union.rtunion_def.1034* %242 to %struct.rtx_def.1033**
    %244 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %243, align 4
    %245 = icmp eq %struct.rtx_def.1033* %244, %.317.ph
    br i1 %245, label %.thread53, label %42
  
  .thread53:                                        ; preds = %161, %241, %239, %.preheader57
    %.01462 = phi %struct.rtx_def.1033* [ %.01475, %239 ], [ %from, %.preheader57 ], [ %.317.ph, %241 ], [ %.01475, %161 ]
    %246 = load i32, i32* @next_qty, align 4
    %247 = load i32, i32* @max_qty, align 4
    %248 = icmp sgt i32 %246, %247
    br i1 %248, label %249, label %250
  
  ; <label>:249                                     ; preds = %.thread53
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i32 signext 7379, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @__FUNCTION__.cse_basic_block, i32 0, i32 0)) #6
    unreachable
  
  ; <label>:250                                     ; preds = %.thread53
    %251 = tail call %struct.rtx_def.1033* @prev_nonnote_insn(%struct.rtx_def.1033* %.01462) #5
    %252 = load i32, i32* @cse_jumps_altered, align 4
    %253 = icmp eq i32 %252, 0
    br i1 %253, label %261, label %254
  
  ; <label>:254                                     ; preds = %250
    %255 = load i32, i32* @flag_cse_follow_jumps, align 4
    %256 = load i32, i32* @flag_cse_skip_blocks, align 4
    %257 = or i32 %256, %255
    %258 = icmp eq i32 %257, 0
    %259 = icmp ne i32 %around_loop, 0
    %or.cond8 = and i1 %259, %258
    %260 = icmp ne %struct.rtx_def.1033* %.01462, null
    %or.cond11 = and i1 %260, %or.cond8
    br i1 %or.cond11, label %262, label %cse_around_loop.exit
  
  ; <label>:261                                     ; preds = %250
    %.old7 = icmp ne i32 %around_loop, 0
    %.old10 = icmp ne %struct.rtx_def.1033* %.01462, null
    %or.cond13 = and i1 %.old7, %.old10
    br i1 %or.cond13, label %262, label %cse_around_loop.exit
  
  ; <label>:262                                     ; preds = %261, %254
    %263 = bitcast %struct.rtx_def.1033* %.01462 to i32*
    %264 = load i32, i32* %263, align 4
    %.mask = and i32 %264, -65536
    %265 = icmp eq i32 %.mask, 2424832
    br i1 %265, label %266, label %cse_around_loop.exit
  
  ; <label>:266                                     ; preds = %262
    %267 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.01462, i32 0, i32 1, i32 4, i32 0
    %268 = load i32, i32* %267, align 4
    %269 = icmp eq i32 %268, -95
    br i1 %269, label %270, label %cse_around_loop.exit
  
  ; <label>:270                                     ; preds = %266
    %271 = bitcast %struct.rtx_def.1033* %251 to i32*
    %272 = load i32, i32* %271, align 4
    %.mask25 = and i32 %272, -65536
    %273 = icmp eq i32 %.mask25, 2162688
    br i1 %273, label %274, label %cse_around_loop.exit
  
  ; <label>:274                                     ; preds = %270
    %275 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %251, i32 0, i32 1, i32 7
    %276 = bitcast %union.rtunion_def.1034* %275 to %struct.rtx_def.1033**
    %277 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %276, align 4
    %278 = icmp eq %struct.rtx_def.1033* %277, null
    br i1 %278, label %cse_around_loop.exit, label %279
  
  ; <label>:279                                     ; preds = %274
    %280 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %277, i32 0, i32 1, i32 3, i32 0
    %281 = load i32, i32* %280, align 4
    %282 = icmp eq i32 %281, 1
    br i1 %282, label %.preheader, label %cse_around_loop.exit
  
  .preheader:                                       ; preds = %279, %287
    %loop_start.pn.i = phi %struct.rtx_def.1033* [ %insn.0.i, %287 ], [ %277, %279 ]
    %insn.0.in.in.i = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %loop_start.pn.i, i32 0, i32 1, i32 1
    %insn.0.in.i = bitcast %union.rtunion_def.1034* %insn.0.in.in.i to %struct.rtx_def.1033**
    %insn.0.i = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %insn.0.in.i, align 4
    %cond.i = icmp eq %struct.rtx_def.1033* %insn.0.i, null
    br i1 %cond.i, label %cse_around_loop.exit, label %283
  
  ; <label>:283                                     ; preds = %.preheader
    %284 = bitcast %struct.rtx_def.1033* %insn.0.i to i32*
    %285 = load i32, i32* %284, align 4
    %.mask7.i = and i32 %285, -65536
    %286 = icmp eq i32 %.mask7.i, 2424832
    br i1 %286, label %287, label %cse_around_loop.exit
  
  ; <label>:287                                     ; preds = %283
    %288 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.0.i, i32 0, i32 1, i32 4, i32 0
    %289 = load i32, i32* %288, align 4
    %290 = icmp sgt i32 %289, -1
    br i1 %290, label %.preheader, label %291
  
  ; <label>:291                                     ; preds = %287
    %292 = icmp eq i32 %289, -96
    br i1 %292, label %293, label %cse_around_loop.exit
  
  ; <label>:293                                     ; preds = %291
    %294 = load %struct.table_elt.1037*, %struct.table_elt.1037** @last_jump_equiv_class, align 4
    %295 = icmp eq %struct.table_elt.1037* %294, null
    br i1 %295, label %.preheader.i, label %296
  
  ; <label>:296                                     ; preds = %293
    %297 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %294, i32 0, i32 6
    %p.015.i = load %struct.table_elt.1037*, %struct.table_elt.1037** %297, align 4
    %298 = icmp eq %struct.table_elt.1037* %p.015.i, null
    br i1 %298, label %.preheader.i, label %.lr.ph18.i
  
  .lr.ph18.i:                                       ; preds = %296, %.thread87
    %p.016.i = phi %struct.table_elt.1037* [ %p.0.i, %.thread87 ], [ %p.015.i, %296 ]
    %299 = bitcast %struct.table_elt.1037* %p.016.i to %struct.rtx_def.1033**
    %300 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %299, align 4
    %301 = bitcast %struct.rtx_def.1033* %300 to i32*
    %302 = load i32, i32* %301, align 4
    %303 = lshr i32 %302, 16
    switch i32 %303, label %.thread87 [
      i32 66, label %310
      i32 61, label %310
      i32 63, label %304
      i32 64, label %311
      i32 133, label %311
    ]
  
  ; <label>:304                                     ; preds = %.lr.ph18.i
    %305 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %300, i32 0, i32 1, i32 0
    %306 = bitcast %union.rtunion_def.1034* %305 to i32**
    %307 = load i32*, i32** %306, align 4
    %308 = load i32, i32* %307, align 4
    %.mask6.i = and i32 %308, -65536
    %309 = icmp eq i32 %.mask6.i, 3997696
    br i1 %309, label %310, label %.thread87
  
  ; <label>:310                                     ; preds = %304, %.lr.ph18.i, %.lr.ph18.i
    tail call fastcc void @invalidate(%struct.rtx_def.1033* %300, i32 signext 0) #5
    br label %.thread87
  
  ; <label>:311                                     ; preds = %.lr.ph18.i, %.lr.ph18.i
    %312 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %300, i32 0, i32 1, i32 0
    %313 = bitcast %union.rtunion_def.1034* %312 to %struct.rtx_def.1033**
    %314 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %313, align 4
    %315 = lshr i32 %302, 8
    %316 = and i32 %315, 255
    tail call fastcc void @invalidate(%struct.rtx_def.1033* %314, i32 signext %316) #5
    br label %.thread87
  
  .thread87:                                        ; preds = %311, %310, %304, %.lr.ph18.i
    %317 = getelementptr inbounds %struct.table_elt.1037, %struct.table_elt.1037* %p.016.i, i32 0, i32 4
    %p.0.i = load %struct.table_elt.1037*, %struct.table_elt.1037** %317, align 4
    %318 = icmp eq %struct.table_elt.1037* %p.0.i, null
    br i1 %318, label %.preheader.i, label %.lr.ph18.i
  
  .preheader.i:                                     ; preds = %.critedge9.i, %342, %344, %346, %.backedge.i, %293, %296, %.thread87
    %loop_start.pn8.i = phi %struct.rtx_def.1033* [ %277, %.thread87 ], [ %277, %296 ], [ %277, %293 ], [ %insn.1.i, %.backedge.i ], [ %insn.1.i, %346 ], [ %insn.1.i, %344 ], [ %insn.1.i, %342 ], [ %insn.1.i, %.critedge9.i ]
    %insn.1.in.in.i = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %loop_start.pn8.i, i32 0, i32 1, i32 2
    %insn.1.in.i = bitcast %union.rtunion_def.1034* %insn.1.in.in.i to %struct.rtx_def.1033**
    %insn.1.i = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %insn.1.in.i, align 4
    %319 = bitcast %struct.rtx_def.1033* %insn.1.i to i32*
    %320 = load i32, i32* %319, align 4
    %321 = lshr i32 %320, 16
    switch i32 %321, label %322 [
      i32 34, label %cse_around_loop.exit
      i32 36, label %cse_around_loop.exit
    ]
  
  ; <label>:322                                     ; preds = %.preheader.i
    %323 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.1.i, i32 0, i32 1, i32 0, i32 0
    %324 = load i32, i32* %323, align 4
    %325 = load i32, i32* @max_insn_uid, align 4
    %326 = icmp slt i32 %324, %325
    br i1 %326, label %327, label %cse_around_loop.exit
  
  ; <label>:327                                     ; preds = %322
    %328 = icmp eq i32 %321, 37
    br i1 %328, label %329, label %.critedge9.i
  
  ; <label>:329                                     ; preds = %327
    %330 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.1.i, i32 0, i32 1, i32 4, i32 0
    %331 = load i32, i32* %330, align 4
    %332 = icmp eq i32 %331, -95
    br i1 %332, label %cse_around_loop.exit, label %.critedge9.i
  
  .critedge9.i:                                     ; preds = %329, %327
    %333 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_class, i32 0, i32 %321
    %334 = load i8, i8* %333, align 1
    %335 = icmp eq i8 %334, 105
    br i1 %335, label %336, label %.preheader.i
  
  ; <label>:336                                     ; preds = %.critedge9.i
    %337 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %insn.1.i, i32 0, i32 1, i32 3
    %338 = bitcast %union.rtunion_def.1034* %337 to i32**
    %339 = load i32*, i32** %338, align 4
    %340 = load i32, i32* %339, align 4
    %341 = lshr i32 %340, 16
    switch i32 %341, label %344 [
      i32 47, label %342
      i32 49, label %342
    ]
  
  ; <label>:342                                     ; preds = %336, %336
    %343 = bitcast i32* %339 to %struct.rtx_def.1033*
    tail call fastcc void @cse_set_around_loop(%struct.rtx_def.1033* %343, %struct.rtx_def.1033* nonnull %insn.1.i, %struct.rtx_def.1033* nonnull %277) #5
    br label %.preheader.i
  
  ; <label>:344                                     ; preds = %336
    %.mask5.i = and i32 %340, -65536
    %345 = icmp eq i32 %.mask5.i, 2555904
    br i1 %345, label %346, label %.preheader.i
  
  ; <label>:346                                     ; preds = %344
    %347 = getelementptr inbounds i32, i32* %339, i32 1
    %348 = bitcast i32* %347 to %struct.rtvec_def.1054**
    %349 = load %struct.rtvec_def.1054*, %struct.rtvec_def.1054** %348, align 4
    %350 = bitcast %struct.rtvec_def.1054* %349 to i32*
    %351 = load i32, i32* %350, align 4
    %352 = icmp sgt i32 %351, 0
    br i1 %352, label %.lr.ph.i.preheader, label %.preheader.i
  
  .lr.ph.i.preheader:                               ; preds = %346
    %353 = add i32 %351, 1
    %354 = shl i32 %351, 2
    br label %.lr.ph.i
  
  .lr.ph.i:                                         ; preds = %.backedge..lr.ph_crit_edge.i, %.lr.ph.i.preheader
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %.backedge..lr.ph_crit_edge.i ], [ %354, %.lr.ph.i.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %.backedge..lr.ph_crit_edge.i ], [ %353, %.lr.ph.i.preheader ]
    %355 = phi %struct.rtvec_def.1054* [ %.pre22.i, %.backedge..lr.ph_crit_edge.i ], [ %349, %.lr.ph.i.preheader ]
    %356 = bitcast %struct.rtvec_def.1054* %355 to i8*
    %uglygep = getelementptr i8, i8* %356, i32 %lsr.iv1
    %uglygep3 = bitcast i8* %uglygep to i32**
    %357 = load i32*, i32** %uglygep3, align 4
    %358 = load i32, i32* %357, align 4
    %359 = lshr i32 %358, 16
    switch i32 %359, label %.backedge.i [
      i32 47, label %361
      i32 49, label %361
    ]
  
  .backedge.i:                                      ; preds = %361, %.lr.ph.i
    %lsr.iv.next = add i32 %lsr.iv, -1
    %lsr.iv.next2 = add i32 %lsr.iv1, -4
    %360 = icmp sgt i32 %lsr.iv.next, 1
    br i1 %360, label %.backedge..lr.ph_crit_edge.i, label %.preheader.i
  
  .backedge..lr.ph_crit_edge.i:                     ; preds = %.backedge.i
    %sunkaddr21 = ptrtoint %struct.rtx_def.1033* %insn.1.i to i32
    %sunkaddr22 = add i32 %sunkaddr21, 16
    %sunkaddr23 = inttoptr i32 %sunkaddr22 to %struct.rtx_def.1033**
    %.pre.i = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %sunkaddr23, align 4
    %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.pre.i, i32 0, i32 1, i32 0
    %.phi.trans.insert21.i = bitcast %union.rtunion_def.1034* %.phi.trans.insert.i to %struct.rtvec_def.1054**
    %.pre22.i = load %struct.rtvec_def.1054*, %struct.rtvec_def.1054** %.phi.trans.insert21.i, align 4
    br label %.lr.ph.i
  
  ; <label>:361                                     ; preds = %.lr.ph.i, %.lr.ph.i
    %362 = bitcast i32* %357 to %struct.rtx_def.1033*
    tail call fastcc void @cse_set_around_loop(%struct.rtx_def.1033* %362, %struct.rtx_def.1033* nonnull %insn.1.i, %struct.rtx_def.1033* nonnull %277) #5
    br label %.backedge.i
  
  cse_around_loop.exit:                             ; preds = %.preheader, %283, %.preheader.i, %.preheader.i, %322, %329, %291, %279, %274, %270, %266, %262, %261, %254
    %363 = load %struct.qty_table_elem.1035*, %struct.qty_table_elem.1035** @qty_table, align 4
    %364 = load i32, i32* @max_reg, align 4
    %365 = getelementptr inbounds %struct.qty_table_elem.1035, %struct.qty_table_elem.1035* %363, i32 %364
    %366 = bitcast %struct.qty_table_elem.1035* %365 to i8*
    tail call void @free(i8* %366) #5
    %367 = icmp eq %struct.rtx_def.1033* %.01462, null
    br i1 %367, label %372, label %368
  
  ; <label>:368                                     ; preds = %cse_around_loop.exit
    %369 = getelementptr inbounds %struct.rtx_def.1033, %struct.rtx_def.1033* %.01462, i32 0, i32 1, i32 2
    %370 = bitcast %union.rtunion_def.1034* %369 to %struct.rtx_def.1033**
    %371 = load %struct.rtx_def.1033*, %struct.rtx_def.1033** %370, align 4
    br label %372
  
  ; <label>:372                                     ; preds = %368, %cse_around_loop.exit, %.thread54, %.thread52
    %.4 = phi %struct.rtx_def.1033* [ %371, %368 ], [ null, %cse_around_loop.exit ], [ null, %.thread52 ], [ %.1.ph.ph, %.thread54 ]
    ret %struct.rtx_def.1033* %.4
  }
  
  ; Function Attrs: nounwind
  declare void @free(i8* nocapture) #1
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @record_jump_equiv(%struct.rtx_def.1033*, i32 signext) unnamed_addr #1
  
  ; Function Attrs: nounwind
  declare hidden fastcc %struct.rtx_def.1033* @cse_process_notes(%struct.rtx_def.1033*, %struct.rtx_def.1033*) unnamed_addr #1
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @cse_insn(%struct.rtx_def.1033*, %struct.rtx_def.1033* readonly) unnamed_addr #1
  
  declare i32 @for_each_rtx(%struct.rtx_def.1033**, i32 (%struct.rtx_def.1033**, i8*)*, i8*) #2
  
  ; Function Attrs: nounwind
  declare hidden i32 @check_for_label_ref(%struct.rtx_def.1033** nocapture readonly, i8*) #1
  
  declare i32 @any_uncondjump_p(%struct.rtx_def.1033*) #2
  
  declare %struct.rtx_def.1033* @prev_nonnote_insn(%struct.rtx_def.1033*) #2
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #3
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @invalidate(%struct.rtx_def.1033*, i32 signext) unnamed_addr #1
  
  ; Function Attrs: norecurse nounwind
  declare hidden fastcc void @remove_from_table(%struct.table_elt.1037*, i32 signext) unnamed_addr #4
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @invalidate_for_call() unnamed_addr #1
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @invalidate_from_clobbers(%struct.rtx_def.1033* nocapture readonly) unnamed_addr #1
  
  declare void @note_stores(%struct.rtx_def.1033*, void (%struct.rtx_def.1033*, %struct.rtx_def.1033*, i8*)*, i8*) #2
  
  ; Function Attrs: nounwind
  declare hidden void @invalidate_skipped_set(%struct.rtx_def.1033*, %struct.rtx_def.1033* nocapture readonly, i8* nocapture readnone) #1
  
  ; Function Attrs: nounwind
  declare hidden fastcc void @cse_set_around_loop(%struct.rtx_def.1033*, %struct.rtx_def.1033*, %struct.rtx_def.1033*) unnamed_addr #1
  
  attributes #0 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #5 = { nounwind }
  attributes #6 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            cse_basic_block
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%a3' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       240
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 24
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: val, offset: -144, size: 100, alignment: 8 }
  - { id: 1, type: spill-slot, offset: -148, size: 4, alignment: 4 }
  - { id: 2, type: spill-slot, offset: -152, size: 4, alignment: 4 }
  - { id: 3, type: spill-slot, offset: -156, size: 4, alignment: 4 }
  - { id: 4, type: spill-slot, offset: -160, size: 4, alignment: 4 }
  - { id: 5, type: spill-slot, offset: -164, size: 4, alignment: 4 }
  - { id: 6, type: spill-slot, offset: -168, size: 4, alignment: 4 }
  - { id: 7, type: spill-slot, offset: -172, size: 4, alignment: 4 }
  - { id: 8, type: spill-slot, offset: -176, size: 4, alignment: 4 }
  - { id: 9, type: spill-slot, offset: -180, size: 4, alignment: 4 }
  - { id: 10, type: spill-slot, offset: -184, size: 4, alignment: 4 }
  - { id: 11, type: spill-slot, offset: -188, size: 4, alignment: 4 }
  - { id: 12, type: spill-slot, offset: -192, size: 4, alignment: 4 }
  - { id: 13, type: spill-slot, offset: -196, size: 4, alignment: 4 }
  - { id: 14, type: spill-slot, offset: -200, size: 4, alignment: 4 }
  - { id: 15, type: spill-slot, offset: -204, size: 4, alignment: 4 }
  - { id: 16, type: spill-slot, offset: -208, size: 4, alignment: 4 }
  - { id: 17, type: spill-slot, offset: -212, size: 4, alignment: 4 }
  - { id: 18, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 19, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%fp' }
  - { id: 20, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s7' }
  - { id: 21, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s6' }
  - { id: 22, type: spill-slot, offset: -20, size: 4, alignment: 4, callee-saved-register: '%s5' }
  - { id: 23, type: spill-slot, offset: -24, size: 4, alignment: 4, callee-saved-register: '%s4' }
  - { id: 24, type: spill-slot, offset: -28, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 25, type: spill-slot, offset: -32, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 26, type: spill-slot, offset: -36, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 27, type: spill-slot, offset: -40, size: 4, alignment: 4, callee-saved-register: '%s0' }
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.100', '%bb.103..thread87', '%bb.99', '%bb.102', 
                         '%bb.103..thread87', '%bb.100' ]
body:             |
  bb.0 (%ir-block.0, freq 8570479):
    successors: %bb.2(37), %bb.1(62)
    liveins: %a0, %a1, %a2, %a3, %t9, %ra, %fp, %s7, %s6, %s5, %s4, %s3, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -240
    CFI_INSTRUCTION .cfi_def_cfa_offset 240
    SW killed %ra, %sp, 236 :: (store 4 into stack)
    SW killed %fp, %sp, 232 :: (store 4 into stack)
    SW killed %s7, %sp, 228 :: (store 4 into stack)
    SW killed %s6, %sp, 224 :: (store 4 into stack)
    SW killed %s5, %sp, 220 :: (store 4 into stack)
    SW killed %s4, %sp, 216 :: (store 4 into stack)
    SW killed %s3, %sp, 212 :: (store 4 into stack)
    SW killed %s2, %sp, 208 :: (store 4 into stack)
    SW killed %s1, %sp, 204 :: (store 4 into stack)
    SW killed %s0, %sp, 200 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %fp_64, -8
    CFI_INSTRUCTION .cfi_offset %s7_64, -12
    CFI_INSTRUCTION .cfi_offset %s6_64, -16
    CFI_INSTRUCTION .cfi_offset %s5_64, -20
    CFI_INSTRUCTION .cfi_offset %s4_64, -24
    CFI_INSTRUCTION .cfi_offset %s3_64, -28
    CFI_INSTRUCTION .cfi_offset %s2_64, -32
    CFI_INSTRUCTION .cfi_offset %s1_64, -36
    CFI_INSTRUCTION .cfi_offset %s0_64, -40
    %s0 = ADDu %v0, %t9
    SW %a3, %sp, 36 :: (store 4 into stack)
    SW %a2, %sp, 92 :: (store 4 into stack)
    %s5 = OR %a1, %zero
    %s4 = OR %a0, %zero
    %s3 = LW %s0, target-flags(<unknown>) @max_reg :: (load 4 from got)
    %at = LW %s3, 0 :: (load 4 from @max_reg)
    %v0 = LW %s0, target-flags(<unknown>) @max_qty :: (load 4 from got)
    SW %v0, %sp, 52 :: (store 4 into stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_qty)
    %at = SUBu killed %v0, killed %at
    %a0 = SLL killed %at, 5
    %t9 = LW %s0, target-flags(<unknown>) @xmalloc :: (load 4 from call-entry @xmalloc)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %a0 = LW %s0, target-flags(<unknown>) @reg_hash :: (load 4 from got)
    %a2 = LW %s0, target-flags(<unknown>) @next_qty :: (load 4 from got)
    SW %a2, %sp, 48 :: (store 4 into stack)
    %a1 = LW %s0, target-flags(<unknown>) @qty_table :: (load 4 from got)
    SW %a1, %sp, 40 :: (store 4 into stack)
    %s1 = ADDiu %zero, 0
    %at = LW %s3, 0 :: (load 4 from @max_reg)
    %v1 = SLL %at, 5
    %v0 = SUBu killed %v0, killed %v1
    SW killed %v0, killed %a1, 0 :: (store 4 into @qty_table)
    SW killed %at, killed %a2, 0 :: (store 4 into @next_qty)
    %t9 = LW %s0, target-flags(<unknown>) $memset :: (load 4 from call-entry $memset)
    %a1 = ADDiu %zero, 0
    %a2 = ADDiu %zero, 512
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %v0 = LW %s0, target-flags(<unknown>) @cse_reg_info_used_list :: (load 4 from got)
    %v1 = LW %v0, 0 :: (load 4 from @cse_reg_info_used_list)
    BEQ %v1, %zero, %bb.2, implicit-def %at {
      NOP
    }
  
  bb.1 (%ir-block.12, freq 5356549):
    successors: %bb.2(100)
    liveins: %s0, %s1, %s3, %s4, %s5, %v0, %v1
  
    %at = LW %s0, target-flags(<unknown>) @cse_reg_info_used_list_end :: (load 4 from got)
    %a0 = LW %at, 0 :: (load 4 from @cse_reg_info_used_list_end)
    %a1 = LW %s0, target-flags(<unknown>) @cse_reg_info_free_list :: (load 4 from got)
    %a2 = LW %a1, 0 :: (load 4 from `i32* bitcast (%struct.cse_reg_info.1036** @cse_reg_info_free_list to i32*)`)
    SW killed %a2, killed %a0, 4 :: (store 4 into %ir.17)
    SW killed %v1, killed %a1, 0 :: (store 4 into `i32* bitcast (%struct.cse_reg_info.1036** @cse_reg_info_free_list to i32*)`)
    SW %zero, killed %at, 0 :: (store 4 into @cse_reg_info_used_list_end)
    SW %zero, killed %v0, 0 :: (store 4 into @cse_reg_info_used_list)
  
  bb.2 (%ir-block.18, freq 8570479):
    successors: %bb.3(100)
    liveins: %s0, %s1, %s3, %s4, %s5
  
    %at = LW %s0, target-flags(<unknown>) @cached_cse_reg_info :: (load 4 from got)
    SW %zero, killed %at, 0 :: (store 4 into @cached_cse_reg_info)
    %at = LW %s0, target-flags(<unknown>) @hard_regs_in_table :: (load 4 from got)
    SW %zero, killed %at, 0 :: (store 4 into @hard_regs_in_table)
    %s2 = LW %s0, target-flags(<unknown>) @table :: (load 4 from got)
    %v0 = ADDiu %zero, 32
    %v1 = LW %s0, target-flags(<unknown>) @free_element_chain :: (load 4 from got)
  
  bb.3 (%ir-block.19, freq 274255333):
    successors: %bb.7(37), %bb.4(62)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %v0, %v1
  
    %at = SLL %s1, 2
    %a1 = ADDu %s2, killed %at
    %a0 = LW %a1, 0 :: (load 4 from %ir.20)
    BEQ %a0, %zero, %bb.7, implicit-def %at {
      NOP
    }
  
  bb.4 (%ir-block.23, freq 171409583):
    successors: %bb.5(100)
    liveins: %a0, %a1, %s0, %s1, %s2, %s3, %s4, %s5, %v0, %v1
  
    SW %zero, killed %a1, 0 :: (store 4 into %ir.20)
    %a2 = OR %a0, %zero
  
  bb.5 (%ir-block.24, freq 5485106668):
    successors: %bb.6(3), %bb.5(96)
    liveins: %a0, %a2, %s0, %s1, %s2, %s3, %s4, %s5, %v0, %v1
  
    %a1 = OR killed %a2, %zero
    %a2 = LW %a1, 8 :: (load 4 from %ir.25)
    BNE %a2, %zero, %bb.5, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.28, freq 171409583):
    successors: %bb.7(100)
    liveins: %a0, %a1, %s0, %s1, %s2, %s3, %s4, %s5, %v0, %v1
  
    %at = LW %v1, 0 :: (load 4 from `i32* bitcast (%struct.table_elt.1037** @free_element_chain to i32*)`)
    SW killed %at, killed %a1, 8 :: (store 4 into %ir.sunkaddr5)
    SW killed %a0, %v1, 0 :: (store 4 into @free_element_chain)
  
  bb.7 (%ir-block.30, freq 274255333):
    successors: %bb.8.new_basic_block.exit(3), %bb.3(96)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %v0, %v1
  
    %s1 = ADDiu killed %s1, 1
    BNE %s1, %v0, %bb.3, implicit-def %at {
      NOP
    }
  
  bb.8.new_basic_block.exit (freq 8570479):
    successors: %bb.12..preheader57(37), %bb.9(62)
    liveins: %s0, %s2, %s3, %s4, %s5
  
    BEQ %s5, %zero, %bb.12..preheader57, implicit-def %at {
      %v0 = ADDiu %zero, 0
    }
  
  bb.9 (%ir-block.33, freq 5356549):
    successors: %bb.10(50), %bb.11(50)
    liveins: %s0, %s2, %s3, %s4, %s5
  
    %at = LW %s5, 0 :: (load 4 from %ir.34)
    %v0 = LUi 65535
    %at = AND killed %at, killed %v0
    %v0 = LUi 36
    BNE %at, %v0, %bb.11, implicit-def %at {
      NOP
    }
  
  bb.10 (%ir-block.37, freq 2678274):
    successors: %bb.12..preheader57(100)
    liveins: %s0, %s2, %s3, %s4, %s5
  
    %at = LW %s5, 16 :: (load 4 from %ir.38)
    %at = ADDiu killed %at, 1
    SW killed %at, %s5, 16 :: (store 4 into %ir.38)
    B %bb.12..preheader57, implicit-def %at {
      %v0 = OR killed %s5, %zero
    }
  
  bb.11 (freq 2678274):
    successors: %bb.12..preheader57(100)
    liveins: %s0, %s2, %s3, %s4, %s5
  
    %v0 = OR killed %s5, %zero
  
  bb.12..preheader57 (freq 8570479):
    successors: %bb.75(37), %bb.13..lr.ph(62)
    liveins: %s0, %s2, %s3, %s4, %v0
  
    %s5 = OR killed %v0, %zero
    BEQ %s5, %s4, %bb.75, implicit-def %at {
      NOP
    }
  
  bb.13..lr.ph (freq 5356549):
    successors: %bb.14(100)
    liveins: %s0, %s2, %s3, %s4, %s5
  
    SW killed %s3, %sp, 44 :: (store 4 into stack)
    %s6 = ADDiu %zero, 0
    %at = LW %s0, target-flags(<unknown>) @prev_insn :: (load 4 from got)
    SW killed %at, %sp, 60 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) @rtx_class :: (load 4 from got)
    SW killed %at, %sp, 88 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) @invalidate_skipped_set :: (load 4 from got)
    SW killed %at, %sp, 76 :: (store 4 into stack)
    %fp = LUi 65535
    %at = ORi %fp, 255
    SW killed %at, %sp, 64 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) @recorded_label_ref :: (load 4 from got)
    SW killed %at, %sp, 68 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) @check_for_label_ref :: (load 4 from got)
    SW killed %at, %sp, 56 :: (store 4 into stack)
    %at = LEA_ADDiu %sp, 96
    SW killed %at, %sp, 32 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) @cse_basic_block_start :: (load 4 from got)
    SW killed %at, %sp, 28 :: (store 4 into stack)
    %s3 = LUi 61
    %at = ADDiu %zero, 0
    SW killed %at, %sp, 84 :: (store 4 into stack)
    %at = ADDiu %zero, 0
    SW killed %at, %sp, 80 :: (store 4 into stack)
  
  bb.14 (%ir-block.42, freq 10366361):
    successors: %bb.22.flush_hash_table.exit(50), %bb.15(50)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s4, 0 :: (load 4 from %ir.43)
    %s1 = SRL killed %at, 16
    %at = ADDiu %zero, 37
    BEQ %s1, %at, %bb.22.flush_hash_table.exit, implicit-def %at {
      NOP
    }
  
  bb.15 (%ir-block.47, freq 5183180):
    successors: %bb.16..preheader56(50), %bb.22.flush_hash_table.exit(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = ADDiu %s6, 1
    %v0 = SLTi killed %s6, 1001
    %s7 = ADDiu %zero, 0
    BNE %v0, %zero, %bb.22.flush_hash_table.exit, implicit-def %at {
      %s6 = OR killed %at, %zero
    }
  
  bb.16..preheader56 (freq 82930892):
    successors: %bb.21.._crit_edge.i(37), %bb.17..lr.ph.i31(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s7
  
    %at = SLL %s7, 2
    %s6 = ADDu %s2, killed %at
    %a0 = LW %s6, 0 :: (load 4 from %ir.50)
    BEQ %a0, %zero, %bb.21.._crit_edge.i, implicit-def %at {
      NOP
    }
  
  bb.17..lr.ph.i31 (freq 1658617851):
    successors: %bb.18(50), %bb.19(50)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %v0 = LW %a0, 0 :: (load 4 from %ir.52)
    %at = LW %v0, 0 :: (load 4 from %ir.54)
    %at = AND killed %at, %fp
    BNE %at, %s3, %bb.19, implicit-def %at {
      NOP
    }
  
  bb.18 (%ir-block.57, freq 829308925):
    successors: %bb.20..backedge.i33(100)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0
  
    %a1 = LW killed %a0, 40 :: (load 4 from %ir.58)
    %t9 = LW %s0, target-flags(<unknown>) @invalidate :: (load 4 from call-entry @invalidate)
    %a0 = OR killed %v0, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    B %bb.20..backedge.i33, implicit-def %at {
      NOP
    }
  
  bb.19 (%ir-block.61, freq 829308925):
    successors: %bb.20..backedge.i33(100)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %t9 = LW %s0, target-flags(<unknown>) @remove_from_table :: (load 4 from call-entry @remove_from_table)
    %a1 = OR %s7, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.20..backedge.i33 (freq 1658617851):
    successors: %bb.21.._crit_edge.i(3), %bb.17..lr.ph.i31(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %a0 = LW %s6, 0 :: (load 4 from %ir.50)
    BNE %a0, %zero, %bb.17..lr.ph.i31, implicit-def %at {
      NOP
    }
  
  bb.21.._crit_edge.i (freq 82930892):
    successors: %bb.22.flush_hash_table.exit(3), %bb.16..preheader56(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s7
  
    %s7 = ADDiu killed %s7, 1
    %at = ADDiu %zero, 32
    BNE %s7, %at, %bb.16..preheader56, implicit-def %at {
      %s6 = ADDiu %zero, 0
    }
  
  bb.22.flush_hash_table.exit (freq 10366361):
    successors: %bb.23(37), %bb.26..thread(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %v1 = LW %sp, 92 :: (load 4 from stack)
    %at = LW %v1, 0 :: (load 4 from %ir.63)
    BNE %at, %s4, %bb.26..thread, implicit-def %at {
      NOP
    }
  
  bb.23 (%ir-block.66, freq 3887385):
    successors: %bb.26..thread(33), %bb.24(66)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v1
  
    %v0 = LW %v1, 4 :: (load 4 from %ir.68)
    %at = ADDiu %zero, 1
    BEQ %v0, %at, %bb.26..thread, implicit-def %at {
      %v1 = ADDiu killed %v1, 8
    }
  
  bb.24 (%ir-block.66, freq 2591590):
    successors: %bb.25(50), %bb.34(49)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6, %v0, %v1
  
    BNE %v0, %zero, %bb.34, implicit-def %at {
      NOP
    }
  
  bb.25 (%ir-block.70, freq 1295795):
    successors: %bb.47..loopexit(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6, %v1
  
    SW killed %v1, %sp, 92 :: (store 4 into stack)
    %t9 = LW %s0, target-flags(<unknown>) @record_jump_equiv :: (load 4 from call-entry @record_jump_equiv)
    %a0 = OR %s4, %zero
    %a1 = ADDiu %zero, 1
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    B %bb.47..loopexit, implicit-def dead %at {
      NOP
    }
  
  bb.26..thread (freq 7774771):
    successors: %bb.27(50), %bb.28(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v1
  
    %v0 = LW %s4, 0 :: (load 4 from %ir.113)
    %at = ANDi %v0, 65280
    %a0 = ADDiu %zero, 512
    BNE %at, %a0, %bb.28, implicit-def %at {
      NOP
    }
  
  bb.27 (%ir-block.117, freq 3887385):
    successors: %bb.28(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v0, %v1
  
    %at = LW %sp, 64 :: (load 4 from stack)
    %at = AND killed %v0, killed %at
    SW killed %at, %s4, 0 :: (store 4 into %ir.118)
  
  bb.28 (%ir-block.120, freq 7774771):
    successors: %bb.29(50), %bb.33(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v1
  
    SW killed %v1, %sp, 92 :: (store 4 into stack)
    %at = LW %sp, 88 :: (load 4 from stack)
    %at = ADDu killed %at, killed %s1
    %at = LBu killed %at, 0 :: (load 1 from %ir.121)
    %v0 = ADDiu %zero, 105
    BNE %at, %v0, %bb.33, implicit-def %at {
      NOP
    }
  
  bb.29 (%ir-block.124, freq 3887385):
    successors: %bb.49..thread38(37), %bb.30(62)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %a0 = LW %s4, 28 :: (load 4 from %ir.126)
    %s1 = LW %sp, 84 :: (load 4 from stack)
    BEQ %a0, %zero, %bb.49..thread38, implicit-def %at {
      NOP
    }
  
  bb.30 (%ir-block.129, freq 2429615):
    successors: %bb.49..thread38(37), %bb.31(62)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @cse_process_notes :: (load 4 from call-entry @cse_process_notes)
    %a1 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.49..thread38, implicit-def %at {
      SW %v0, %s4, 28 :: (store 4 into %ir.sunkaddr8)
    }
  
  bb.31 (%ir-block.132, freq 1518509):
    successors: %bb.48(37), %bb.32(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @find_reg_note :: (load 4 from call-entry @find_reg_note)
    %a0 = OR %s4, %zero
    %a1 = ADDiu %zero, 7
    %a2 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.48, implicit-def %at {
      NOP
    }
  
  bb.32 (%ir-block.135, freq 949068):
    successors: %bb.49..thread38(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6, %v0
  
    %s1 = LW killed %v0, 4 :: (load 4 from %ir.137)
    B %bb.49..thread38, implicit-def dead %at {
      NOP
    }
  
  bb.33 (freq 3887385):
    successors: %bb.53(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %s1 = LW %sp, 84 :: (load 4 from stack)
    B %bb.53, implicit-def %at {
      NOP
    }
  
  bb.34 (%ir-block.71, freq 1295795):
    successors: %bb.47..loopexit(37), %bb.35..lr.ph.i35(62)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6, %v1
  
    SW killed %v1, %sp, 92 :: (store 4 into stack)
    %s1 = LW %s4, 12 :: (load 4 from %ir.73)
    BEQ %s1, %zero, %bb.47..loopexit, implicit-def %at {
      NOP
    }
  
  bb.35..lr.ph.i35 (freq 13163633):
    successors: %bb.47..loopexit(3), %bb.36(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %v0 = LW %s1, 0 :: (load 4 from %ir.76)
    %v1 = SRL %v0, 16
    %at = ADDiu %zero, 36
    BEQ %v1, %at, %bb.47..loopexit, implicit-def %at {
      NOP
    }
  
  bb.36 (%ir-block.80, freq 12752270):
    successors: %bb.37(50), %bb.46(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v0, %v1
  
    %at = LW %sp, 88 :: (load 4 from stack)
    %at = ADDu killed %at, %v1
    %at = LBu killed %at, 0 :: (load 1 from %ir.81)
    %a0 = ADDiu %zero, 105
    BNE %at, %a0, %bb.46, implicit-def %at {
      NOP
    }
  
  bb.37 (%ir-block.84, freq 6376135):
    successors: %bb.38(50), %bb.45(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v0, %v1
  
    %at = ADDiu %zero, 34
    BNE %v1, %at, %bb.45, implicit-def %at {
      NOP
    }
  
  bb.38 (%ir-block.86, freq 3188067):
    successors: %bb.39..preheader.i36(50), %bb.44.invalidate_memory.exit.i(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v0
  
    SW killed %s5, %sp, 72 :: (store 4 into stack)
    %at = ANDi killed %v0, 32
    BNE %at, %zero, %bb.44.invalidate_memory.exit.i, implicit-def %at {
      %s7 = ADDiu %zero, 0
    }
  
  bb.39..preheader.i36 (freq 51009080):
    successors: %bb.43.._crit_edge.i.i(37), %bb.40..lr.ph.i.i(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s6, %s7
  
    %at = SLL %s7, 2
    %at = ADDu %s2, killed %at
    %a0 = LW killed %at, 0 :: (load 4 from %ir.89)
    BEQ %a0, %zero, %bb.43.._crit_edge.i.i, implicit-def %at {
      NOP
    }
  
  bb.40..lr.ph.i.i (freq 1020181614):
    successors: %bb.42..backedge.i.i(37), %bb.41(62)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s6, %s7
  
    %s5 = LW %a0, 8 :: (load 4 from %ir.92)
    %at = LBu %a0, 44 :: (load 1 from %ir.94, align 4)
    BEQ %at, %zero, %bb.42..backedge.i.i, implicit-def %at {
      NOP
    }
  
  bb.41 (%ir-block.98, freq 637613508):
    successors: %bb.42..backedge.i.i(100)
    liveins: %fp, %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %t9 = LW %s0, target-flags(<unknown>) @remove_from_table :: (load 4 from call-entry @remove_from_table)
    %a1 = OR %s7, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.42..backedge.i.i (freq 1020181614):
    successors: %bb.43.._crit_edge.i.i(3), %bb.40..lr.ph.i.i(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    BNE %s5, %zero, %bb.40..lr.ph.i.i, implicit-def %at {
      %a0 = OR %s5, %zero
    }
  
  bb.43.._crit_edge.i.i (freq 51009080):
    successors: %bb.44.invalidate_memory.exit.i(3), %bb.39..preheader.i36(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s6, %s7
  
    %s7 = ADDiu killed %s7, 1
    %at = ADDiu %zero, 32
    BNE %s7, %at, %bb.39..preheader.i36, implicit-def %at {
      NOP
    }
  
  bb.44.invalidate_memory.exit.i (freq 3188067):
    successors: %bb.45(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @invalidate_for_call :: (load 4 from call-entry @invalidate_for_call)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %s5 = LW %sp, 72 :: (load 4 from stack)
  
  bb.45 (%ir-block.100, freq 6376135):
    successors: %bb.46(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %a0 = LW %s1, 16 :: (load 4 from %ir.102)
    %t9 = LW %s0, target-flags(<unknown>) @invalidate_from_clobbers :: (load 4 from call-entry @invalidate_from_clobbers)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %a0 = LW %s1, 16 :: (load 4 from %ir.102)
    %t9 = LW %s0, target-flags(<unknown>) @note_stores :: (load 4 from call-entry @note_stores)
    %a1 = LW %sp, 76 :: (load 4 from stack)
    %a2 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.46 (%ir-block.105, freq 12752270):
    successors: %bb.47..loopexit(3), %bb.35..lr.ph.i35(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %s1 = LW killed %s1, 12 :: (load 4 from %ir.107)
    BNE %s1, %zero, %bb.35..lr.ph.i35, implicit-def %at {
      NOP
    }
  
  bb.47..loopexit (freq 2591590):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %sp, 60 :: (load 4 from stack)
    SW %s4, killed %at, 0 :: (store 4 into @prev_insn)
    %s4 = LW killed %s4, 32 :: (load 4 from %ir.111)
    B %bb.73, implicit-def dead %at {
      NOP
    }
  
  bb.48 (%ir-block.139, freq 569441):
    successors: %bb.49..thread38(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @find_reg_note :: (load 4 from call-entry @find_reg_note)
    %a0 = OR %s4, %zero
    %a1 = ADDiu %zero, 6
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit-def %sp, implicit-def %v0 {
      %a2 = ADDiu %zero, 0
    }
    %s1 = MOVN_I_I %zero, killed %v0, killed %s1
  
  bb.49..thread38 (freq 3887385):
    successors: %bb.53(25), %bb.50..thread38(75)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @cse_insn :: (load 4 from call-entry @cse_insn)
    %a0 = OR %s4, %zero
    %a1 = OR %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %at = LW %sp, 68 :: (load 4 from stack)
    %at = LBu killed %at, 0 :: (load 1 from @recorded_label_ref)
    BNE %at, %zero, %bb.53, implicit-def %at {
      NOP
    }
  
  bb.50..thread38 (freq 2915539):
    successors: %bb.53(33), %bb.51(66)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s4, 0 :: (load 4 from %ir.142)
    %at = AND killed %at, %fp
    %v0 = LUi 32
    BNE %at, %v0, %bb.53, implicit-def %at {
      NOP
    }
  
  bb.51 (%ir-block.145, freq 1943692):
    successors: %bb.53(37), %bb.52(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %a0 = ADDiu %s4, 16
    %t9 = LW %s0, target-flags(<unknown>) @for_each_rtx :: (load 4 from call-entry @for_each_rtx)
    %a1 = LW %sp, 56 :: (load 4 from stack)
    %a2 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.53, implicit-def %at {
      NOP
    }
  
  bb.52 (%ir-block.151, freq 1214807):
    successors: %bb.53(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = ADDiu %zero, 1
    %v0 = LW %sp, 68 :: (load 4 from stack)
    SB killed %at, killed %v0, 0 :: (store 1 into @recorded_label_ref)
  
  bb.53 (%ir-block.152, freq 7774771):
    successors: %bb.57(37), %bb.54(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @any_uncondjump_p :: (load 4 from call-entry @any_uncondjump_p)
    %a0 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.57, implicit-def %at {
      NOP
    }
  
  bb.54 (%ir-block.155, freq 4859231):
    successors: %bb.105..thread52(3), %bb.55(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    BEQ %s5, %zero, %bb.105..thread52, implicit-def %at {
      NOP
    }
  
  bb.55 (%ir-block.161, freq 4707380):
    successors: %bb.56..thread39(96), %bb.76..thread53(3)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LBu %s5, 3 :: (load 1 from %ir.162 + 3)
    %at = ANDi killed %at, 16
    BNE %at, %zero, %bb.76..thread53, implicit-def %at {
      NOP
    }
  
  bb.56..thread39 (freq 4560275):
    successors: %bb.58(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LW killed %s4, 32 :: (load 4 from %ir.167)
    %at = XOR killed %at, %s5
    %v0 = ADDiu %zero, 1
    %v1 = LW %sp, 80 :: (load 4 from stack)
    %v1 = MOVZ_I_I killed %v0, killed %at, killed %v1
    SW killed %v1, %sp, 80 :: (store 4 into stack)
    %s4 = LW %s5, 8 :: (load 4 from %ir.171)
    B %bb.58, implicit-def %at {
      NOP
    }
  
  bb.57 (%ir-block.173, freq 2915539):
    successors: %bb.71(37), %bb.58(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    BEQ %s5, %zero, %bb.71, implicit-def %at {
      NOP
    }
  
  bb.58 (%ir-block.175, freq 6382487):
    successors: %bb.60(37), %bb.59(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s4, 12 :: (load 4 from %ir.177)
    BEQ %at, %s5, %bb.60, implicit-def %at {
      NOP
    }
  
  bb.59 (freq 3989054):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    B %bb.73, implicit-def %at {
      SW killed %s1, %sp, 84 :: (store 4 into stack)
    }
  
  bb.60 (%ir-block.180, freq 2393432):
    successors: %bb.61(50), %bb.70(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s5, 0 :: (load 4 from %ir.181)
    %at = AND killed %at, %fp
    %v0 = LUi 36
    BNE %at, %v0, %bb.70, implicit-def %at {
      NOP
    }
  
  bb.61 (%ir-block.184, freq 1196716):
    successors: %bb.62(50), %bb.72(50)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s5, 16 :: (load 4 from %ir.185)
    %at = ADDiu killed %at, -1
    SW %at, %s5, 16 :: (store 4 into %ir.185)
    %v0 = LW %sp, 80 :: (load 4 from stack)
    BNE %at, %v0, %bb.72, implicit-def %at {
      NOP
    }
  
  bb.62 (%ir-block.189, freq 598358):
    successors: %bb.106(3), %bb.63(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s5, %s6
  
    %s4 = LW %s5, 12 :: (load 4 from %ir.192)
    BEQ %s4, %zero, %bb.106, implicit-def %at {
      NOP
    }
  
  bb.63 (%ir-block.200, freq 579659):
    successors: %bb.65(37), %bb.64(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    %t9 = LW %s0, target-flags(<unknown>) @prev_nonnote_insn :: (load 4 from call-entry @prev_nonnote_insn)
    %a0 = OR %s5, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.65, implicit-def %at {
      NOP
    }
  
  bb.64 (%ir-block.203, freq 362287):
    successors: %bb.107(3), %bb.65(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %v0
  
    %at = LW killed %v0, 0 :: (load 4 from %ir.204)
    %at = AND killed %at, %fp
    %v0 = LUi 35
    BEQ %at, %v0, %bb.107, implicit-def %at {
      NOP
    }
  
  bb.65 (%ir-block.212, freq 568338):
    successors: %bb.76..thread53(3), %bb.66(96)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    SW %zero, %sp, 112 :: (store 4 into %ir.sunkaddr11, align 8)
    SW %zero, %sp, 16 :: (store 4 into unknown)
    %t9 = LW %s0, target-flags(<unknown>) @cse_end_of_basic_block :: (load 4 from call-entry @cse_end_of_basic_block)
    %a0 = OR %s4, %zero
    %a1 = LW %sp, 32 :: (load 4 from stack)
    %a2 = ADDiu %zero, 0
    %a3 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    %at = LW %sp, 48 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @next_qty)
    %v0 = LW %sp, 104 :: (load 4 from %ir.sunkaddr14, align 8)
    %v0 = SLL killed %v0, 1
    %at = ADDu killed %v0, killed %at
    %v0 = LW %sp, 52 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_qty)
    %at = SLT killed %v0, killed %at
    BNE %at, %zero, %bb.76..thread53, implicit-def %at {
      NOP
    }
  
  bb.66 (%ir-block.219, freq 550577):
    successors: %bb.69(37), %bb.67(62)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s6
  
    SW killed %s1, %sp, 84 :: (store 4 into stack)
    %at = LW %sp, 96 :: (load 4 from %ir.220, align 8)
    %v0 = LW %sp, 28 :: (load 4 from stack)
    SW killed %at, killed %v0, 0 :: (store 4 into @cse_basic_block_start)
    %at = LW %s0, target-flags(<unknown>) @cse_basic_block_end :: (load 4 from got)
    %v0 = LW %sp, 100 :: (load 4 from %ir.sunkaddr17)
    SW killed %v0, killed %at, 0 :: (store 4 into @cse_basic_block_end)
    %s5 = LW %sp, 108 :: (load 4 from %ir.sunkaddr20)
    BEQ %s5, %zero, %bb.69, implicit-def %at {
      NOP
    }
  
  bb.67 (%ir-block.225, freq 344110):
    successors: %bb.68(50), %bb.69(50)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s5, 0 :: (load 4 from %ir.226)
    %at = AND killed %at, %fp
    %v0 = LUi 36
    BNE %at, %v0, %bb.69, implicit-def %at {
      NOP
    }
  
  bb.68 (%ir-block.229, freq 172055):
    successors: %bb.69(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %at = LW %s5, 16 :: (load 4 from %ir.230)
    %at = ADDiu killed %at, 1
    SW killed %at, %s5, 16 :: (store 4 into %ir.230)
  
  bb.69 (%ir-block.233, freq 550577):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %s4 = LW killed %s4, 8 :: (load 4 from %ir.236)
    %at = ADDiu %zero, 0
    B %bb.73, implicit-def %at {
      SW killed %at, %sp, 80 :: (store 4 into stack)
    }
  
  bb.70 (freq 1196716):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    B %bb.73, implicit-def %at {
      SW killed %s1, %sp, 84 :: (store 4 into stack)
    }
  
  bb.71 (freq 1093327):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s6
  
    SW killed %s1, %sp, 84 :: (store 4 into stack)
    B %bb.73, implicit-def %at {
      %s5 = ADDiu %zero, 0
    }
  
  bb.72 (freq 598358):
    successors: %bb.73(100)
    liveins: %fp, %s0, %s1, %s2, %s3, %s4, %s5, %s6
  
    SW killed %s1, %sp, 84 :: (store 4 into stack)
  
  bb.73 (%ir-block.241, freq 10019624):
    successors: %bb.74(50), %bb.14(50)
    liveins: %fp, %s0, %s2, %s3, %s4, %s5, %s6
  
    %s4 = LW killed %s4, 12 :: (load 4 from %ir.243)
    BNE %s4, %s5, %bb.14, implicit-def %at {
      NOP
    }
  
  bb.74 (%ir-block.241, freq 5009812):
    successors: %bb.76..thread53(100)
  
    B %bb.76..thread53, implicit-def %at {
      NOP
    }
  
  bb.75 (freq 3213929):
    successors: %bb.76..thread53(100)
    liveins: %s0, %s3, %s4
  
    SW killed %s3, %sp, 44 :: (store 4 into stack)
    %s5 = OR killed %s4, %zero
  
  bb.76..thread53 (freq 8388607):
    successors: %bb.129(0), %bb.77(99)
    liveins: %s0, %s5
  
    %at = LW %sp, 48 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @next_qty)
    %v0 = LW %sp, 52 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_qty)
    %at = SLT killed %v0, killed %at
    BNE %at, %zero, %bb.129, implicit-def %at {
      NOP
    }
  
  bb.77 (%ir-block.250, freq 8388599):
    successors: %bb.82(37), %bb.78(62)
    liveins: %s0, %s5
  
    %t9 = LW %s0, target-flags(<unknown>) @prev_nonnote_insn :: (load 4 from call-entry @prev_nonnote_insn)
    %a0 = OR %s5, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    %at = LW %s0, target-flags(<unknown>) @cse_jumps_altered :: (load 4 from got)
    %at = LW killed %at, 0 :: (load 4 from @cse_jumps_altered)
    BEQ %at, %zero, %bb.82, implicit-def %at {
      NOP
    }
  
  bb.78 (%ir-block.254, freq 5242874):
    successors: %bb.79(75), %bb.126.cse_around_loop.exit(25)
    liveins: %s0, %s5, %v0
  
    BEQ %s5, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.79 (%ir-block.254, freq 3932156):
    successors: %bb.80(83), %bb.126.cse_around_loop.exit(16)
    liveins: %s0, %s5, %v0
  
    %at = LW %sp, 36 :: (load 4 from stack)
    BEQ %at, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.80 (%ir-block.254, freq 3276796):
    successors: %bb.81(50), %bb.84(50)
    liveins: %s0, %s5, %v0
  
    %at = LW %s0, target-flags(<unknown>) @flag_cse_follow_jumps :: (load 4 from got)
    %at = LW killed %at, 0 :: (load 4 from @flag_cse_follow_jumps)
    %v1 = LW %s0, target-flags(<unknown>) @flag_cse_skip_blocks :: (load 4 from got)
    %v1 = LW killed %v1, 0 :: (load 4 from @flag_cse_skip_blocks)
    %at = OR killed %v1, killed %at
    BEQ %at, %zero, %bb.84, implicit-def %at {
      NOP
    }
  
  bb.81 (%ir-block.254, freq 1638398):
    successors: %bb.126.cse_around_loop.exit(100)
  
    B %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.82 (%ir-block.261, freq 3145724):
    successors: %bb.83(75), %bb.126.cse_around_loop.exit(25)
    liveins: %s0, %s5, %v0
  
    %at = LW %sp, 36 :: (load 4 from stack)
    BEQ %at, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.83 (%ir-block.261, freq 2359293):
    successors: %bb.84(66), %bb.126.cse_around_loop.exit(33)
    liveins: %s0, %s5, %v0
  
    BEQ %s5, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.84 (%ir-block.262, freq 3211260):
    successors: %bb.85(50), %bb.126.cse_around_loop.exit(50)
    liveins: %s0, %s5, %v0
  
    %at = LW %s5, 0 :: (load 4 from %ir.263)
    %v1 = LUi 65535
    %at = AND killed %at, killed %v1
    %v1 = LUi 37
    BNE %at, %v1, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.85 (%ir-block.266, freq 1605630):
    successors: %bb.86(50), %bb.126.cse_around_loop.exit(50)
    liveins: %s0, %s5, %v0
  
    %at = LW %s5, 20 :: (load 4 from %ir.267)
    %v1 = ADDiu %zero, -95
    BNE %at, %v1, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.86 (%ir-block.270, freq 802815):
    successors: %bb.87(50), %bb.126.cse_around_loop.exit(50)
    liveins: %s0, %s5, %v0
  
    %at = LW %v0, 0 :: (load 4 from %ir.271)
    %v1 = LUi 65535
    %at = AND killed %at, killed %v1
    %v1 = LUi 33
    BNE %at, %v1, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.87 (%ir-block.274, freq 401407):
    successors: %bb.126.cse_around_loop.exit(37), %bb.88(62)
    liveins: %s0, %s5, %v0
  
    %s4 = LW killed %v0, 32 :: (load 4 from %ir.276)
    BEQ %s4, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.88 (%ir-block.279, freq 250879):
    successors: %bb.89(50), %bb.126.cse_around_loop.exit(50)
    liveins: %s0, %s4, %s5
  
    %at = LW %s4, 16 :: (load 4 from %ir.280)
    %v0 = ADDiu %zero, 1
    BNE killed %at, killed %v0, %bb.126.cse_around_loop.exit, implicit-def dead %at {
      NOP
    }
  
  bb.89 (freq 125439):
    successors: %bb.90..preheader(100)
    liveins: %s0, %s4, %s5
  
    %v0 = LUi 65535
    %v1 = LUi 37
    %a0 = OR %s4, %zero
  
  bb.90..preheader (freq 1380723):
    successors: %bb.126.cse_around_loop.exit(3), %bb.91(96)
    liveins: %a0, %s0, %s4, %s5, %v0, %v1
  
    %a0 = LW killed %a0, 8 :: (load 4 from %ir.insn.0.in.i)
    BEQ %a0, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.91 (%ir-block.283, freq 1337575):
    successors: %bb.92(96), %bb.126.cse_around_loop.exit(3)
    liveins: %a0, %s0, %s4, %s5, %v0, %v1
  
    %at = LW %a0, 0 :: (load 4 from %ir.284)
    %at = AND killed %at, %v0
    BNE %at, %v1, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.92 (%ir-block.287, freq 1295776):
    successors: %bb.90..preheader(96), %bb.93(3)
    liveins: %a0, %s0, %s4, %s5, %v0, %v1
  
    %a1 = LW %a0, 20 :: (load 4 from %ir.288)
    BGEZ %a1, %bb.90..preheader, implicit-def %at {
      NOP
    }
  
  bb.93 (%ir-block.291, freq 40493):
    successors: %bb.94(50), %bb.126.cse_around_loop.exit(50)
    liveins: %a1, %s0, %s4, %s5
  
    %at = ADDiu %zero, -96
    BNE %a1, %at, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.94 (%ir-block.293, freq 20246):
    successors: %bb.109..preheader.i(37), %bb.95(62)
    liveins: %s0, %s4, %s5
  
    %at = LW %s0, target-flags(<unknown>) @last_jump_equiv_class :: (load 4 from got)
    %v0 = LW killed %at, 0 :: (load 4 from @last_jump_equiv_class)
    BEQ %v0, %zero, %bb.109..preheader.i, implicit-def %at {
      %s3 = OR %s4, %zero
    }
  
  bb.95 (%ir-block.296, freq 12654):
    successors: %bb.109..preheader.i(37), %bb.96(62)
    liveins: %s0, %s4, %s5, %v0
  
    %s1 = LW killed %v0, 24 :: (load 4 from %ir.297)
    BEQ %s1, %zero, %bb.109..preheader.i, implicit-def dead %at {
      %s3 = OR %s4, %zero
    }
  
  bb.96 (freq 7908):
    successors: %bb.97..lr.ph18.i(100)
    liveins: %s0, %s1, %s4, %s5
  
    %s7 = OR killed %s5, %zero
    %s2 = ADDiu %zero, 133
    %s3 = LW %s0, target-flags(<unknown>) %jump-table.0 :: (load 4 from got)
    %s5 = LUi 65535
    %s6 = LUi 61
  
  bb.97..lr.ph18.i (freq 253081):
    successors: %bb.101..lr.ph18.i(25), %bb.98..lr.ph18.i(74)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %a0 = LW %s1, 0 :: (load 4 from %ir.299)
    %v0 = LW %a0, 0 :: (load 4 from %ir.301)
    %v1 = SRL %v0, 16
    %a1 = ADDiu %v1, -61
    %at = SLTiu %a1, 6
    BEQ %at, %zero, %bb.101..lr.ph18.i, implicit-def %at {
      NOP
    }
  
  bb.98..lr.ph18.i (freq 189811):
    successors: %bb.100(45), %bb.103..thread87(9), %bb.99(22), %bb.102(22)
    liveins: %a0, %a1, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0
  
    %at = SLL killed %a1, 2
    %at = ADDu killed %at, %s3
    %at = LW killed %at, target-flags(<unknown>) %jump-table.0 :: (load 4 from jump-table)
    %at = ADDu killed %at, %s0
    PseudoIndirectBranch killed %at {
      NOP
    }
  
  bb.99 (%ir-block.304, freq 42976):
    successors: %bb.100(50), %bb.103..thread87(50)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %at = LW %a0, 4 :: (load 4 from %ir.306)
    %at = LW killed %at, 0 :: (load 4 from %ir.307)
    %at = AND killed %at, %s5
    BNE %at, %s6, %bb.103..thread87, implicit-def %at {
      NOP
    }
  
  bb.100 (%ir-block.310, freq 107440):
    successors: %bb.103..thread87(100)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %t9 = LW %s0, target-flags(<unknown>) @invalidate :: (load 4 from call-entry @invalidate)
    %a1 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
    B %bb.103..thread87, implicit-def %at {
      NOP
    }
  
  bb.101..lr.ph18.i (freq 63270):
    successors: %bb.102(50), %bb.103..thread87(50)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0, %v1
  
    BNE %v1, %s2, %bb.103..thread87, implicit-def %at {
      NOP
    }
  
  bb.102 (%ir-block.311, freq 74611):
    successors: %bb.103..thread87(100)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0
  
    %a0 = LW killed %a0, 4 :: (load 4 from %ir.313)
    %a1 = EXT killed %v0, 8, 8
    %t9 = LW %s0, target-flags(<unknown>) @invalidate :: (load 4 from call-entry @invalidate)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.103..thread87 (freq 253081):
    successors: %bb.104(3), %bb.97..lr.ph18.i(96)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %s1 = LW killed %s1, 16 :: (load 4 from %ir.317)
    BNE %s1, %zero, %bb.97..lr.ph18.i, implicit-def %at {
      NOP
    }
  
  bb.104 (freq 7908):
    successors: %bb.109..preheader.i(100)
    liveins: %s0, %s4, %s7
  
    %s3 = OR %s4, %zero
    B %bb.109..preheader.i, implicit-def %at {
      %s5 = OR killed %s7, %zero
    }
  
  bb.105..thread52 (freq 151851):
    successors: %bb.128(100)
    liveins: %s0
  
    %at = LW %sp, 40 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @qty_table)
    %v0 = LW %sp, 44 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_reg)
    %v0 = SLL killed %v0, 5
    %a0 = ADDu killed %at, killed %v0
    %t9 = LW %s0, target-flags(<unknown>) @free :: (load 4 from call-entry @free)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }
    B %bb.128, implicit-def %at {
      %s4 = ADDiu %zero, 0
    }
  
  bb.106 (%ir-block.195, freq 18698):
    successors: %bb.128(100)
    liveins: %s0
  
    %at = LW %sp, 40 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @qty_table)
    %v0 = LW %sp, 44 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_reg)
    %v0 = SLL killed %v0, 5
    %a0 = ADDu killed %at, killed %v0
    %t9 = LW %s0, target-flags(<unknown>) @free :: (load 4 from call-entry @free)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }
    B %bb.128, implicit-def dead %at {
      %s4 = ADDiu %zero, 0
    }
  
  bb.107 (%ir-block.207, freq 11321):
    successors: %bb.128(100)
    liveins: %s0, %s4
  
    %at = LW %sp, 40 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @qty_table)
    %v0 = LW %sp, 44 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_reg)
    %v0 = SLL killed %v0, 5
    %a0 = ADDu killed %at, killed %v0
    %t9 = LW %s0, target-flags(<unknown>) @free :: (load 4 from call-entry @free)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }
    B %bb.128, implicit-def dead %at {
      NOP
    }
  
  bb.108 (%ir-block.342, freq 81833):
    successors: %bb.109..preheader.i(100)
    liveins: %a0, %s0, %s3, %s4, %s5
  
    %t9 = LW %s0, target-flags(<unknown>) @cse_set_around_loop :: (load 4 from call-entry @cse_set_around_loop)
    %a1 = OR %s3, %zero
    %a2 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.109..preheader.i (freq 265747):
    successors: %bb.126.cse_around_loop.exit(1), %bb.110..preheader.i(98)
    liveins: %s0, %s3, %s4, %s5
  
    %s3 = LW killed %s3, 12 :: (load 4 from %ir.insn.1.in.i)
    %at = LW %s3, 0 :: (load 4 from %ir.319)
    %v0 = SRL killed %at, 16
    %at = ADDiu %zero, 34
    BEQ %v0, %at, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.110..preheader.i (freq 261594):
    successors: %bb.126.cse_around_loop.exit(1), %bb.111(98)
    liveins: %s0, %s3, %s4, %s5, %v0
  
    %at = ADDiu %zero, 36
    BEQ %v0, %at, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.111 (%ir-block.322, freq 257442):
    successors: %bb.112(96), %bb.126.cse_around_loop.exit(3)
    liveins: %s0, %s3, %s4, %s5, %v0
  
    %at = LW %s3, 4 :: (load 4 from %ir.323)
    %v1 = LW %s0, target-flags(<unknown>) @max_insn_uid :: (load 4 from got)
    %v1 = LW killed %v1, 0 :: (load 4 from @max_insn_uid)
    %at = SLT killed %at, killed %v1
    BEQ %at, %zero, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.112 (%ir-block.327, freq 249397):
    successors: %bb.113(50), %bb.114..critedge9.i(50)
    liveins: %s0, %s3, %s4, %s5, %v0
  
    %at = ADDiu %zero, 37
    BNE %v0, %at, %bb.114..critedge9.i, implicit-def %at {
      NOP
    }
  
  bb.113 (%ir-block.329, freq 124698):
    successors: %bb.126.cse_around_loop.exit(3), %bb.114..critedge9.i(96)
    liveins: %s0, %s3, %s4, %s5, %v0
  
    %at = LW %s3, 20 :: (load 4 from %ir.330)
    %v1 = ADDiu %zero, -95
    BEQ %at, %v1, %bb.126.cse_around_loop.exit, implicit-def %at {
      NOP
    }
  
  bb.114..critedge9.i (freq 245500):
    successors: %bb.115(50), %bb.109..preheader.i(50)
    liveins: %s0, %s3, %s4, %s5, %v0
  
    %at = LW %s0, target-flags(<unknown>) @rtx_class :: (load 4 from got)
    %at = ADDu killed %at, killed %v0
    %at = LBu killed %at, 0 :: (load 1 from %ir.333)
    %v0 = ADDiu %zero, 105
    BNE %at, %v0, %bb.109..preheader.i, implicit-def %at {
      NOP
    }
  
  bb.115 (%ir-block.336, freq 122750):
    successors: %bb.108(33), %bb.116(66)
    liveins: %s0, %s3, %s4, %s5
  
    %a0 = LW %s3, 16 :: (load 4 from %ir.338)
    %v0 = LW %a0, 0 :: (load 4 from %ir.339)
    %v1 = SRL %v0, 16
    %at = ADDiu %zero, 49
    BEQ %v1, %at, %bb.108, implicit-def %at {
      NOP
    }
  
  bb.116 (%ir-block.336, freq 81833):
    successors: %bb.108(50), %bb.117(49)
    liveins: %a0, %s0, %s3, %s4, %s5, %v0, %v1
  
    %at = ADDiu %zero, 47
    BEQ %v1, %at, %bb.108, implicit-def %at {
      NOP
    }
  
  bb.117 (%ir-block.344, freq 40916):
    successors: %bb.118(50), %bb.109..preheader.i(50)
    liveins: %a0, %s0, %s3, %s4, %s5, %v0
  
    %at = LUi 65535
    %at = AND killed %v0, killed %at
    %v0 = LUi 39
    BNE %at, %v0, %bb.109..preheader.i, implicit-def %at {
      NOP
    }
  
  bb.118 (%ir-block.346, freq 20458):
    successors: %bb.119..lr.ph.i.preheader(50), %bb.109..preheader.i(50)
    liveins: %a0, %s0, %s3, %s4, %s5
  
    %v0 = LW killed %a0, 4 :: (load 4 from %ir.348)
    %v1 = LW %v0, 0 :: (load 4 from %ir.350)
    BLEZ %v1, %bb.109..preheader.i, implicit-def %at {
      NOP
    }
  
  bb.119..lr.ph.i.preheader (freq 10229):
    successors: %bb.121..lr.ph.i(100)
    liveins: %s0, %s3, %s4, %s5, %v0, %v1
  
    %s7 = OR killed %s5, %zero
    %s1 = SLL %v1, 2
    %s2 = ADDiu killed %v1, 1
    %s5 = ADDiu %zero, 47
    B %bb.121..lr.ph.i, implicit-def %at {
      %s6 = ADDiu %zero, 49
    }
  
  bb.120..backedge..lr.ph_crit_edge.i (freq 317104):
    successors: %bb.121..lr.ph.i(100)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %at = LW %s3, 16 :: (load 4 from %ir.sunkaddr23)
    %v0 = LW killed %at, 4 :: (load 4 from %ir..phi.trans.insert21.i)
  
  bb.121..lr.ph.i (freq 327334):
    successors: %bb.123(33), %bb.122..lr.ph.i(66)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0
  
    %at = ADDu killed %v0, %s1
    %a0 = LW killed %at, 0 :: (load 4 from %ir.uglygep3)
    %at = LW %a0, 0 :: (load 4 from %ir.357)
    %v0 = SRL killed %at, 16
    BEQ %v0, %s5, %bb.123, implicit-def %at {
      NOP
    }
  
  bb.122..lr.ph.i (freq 218222):
    successors: %bb.123(50), %bb.124..backedge.i(49)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7, %v0
  
    BNE %v0, %s6, %bb.124..backedge.i, implicit-def %at {
      NOP
    }
  
  bb.123 (%ir-block.361, freq 218222):
    successors: %bb.124..backedge.i(100)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %t9 = LW %s0, target-flags(<unknown>) @cse_set_around_loop :: (load 4 from call-entry @cse_set_around_loop)
    %a1 = OR %s3, %zero
    %a2 = OR %s4, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR %s0, %zero
    }
  
  bb.124..backedge.i (freq 327334):
    successors: %bb.120..backedge..lr.ph_crit_edge.i(96), %bb.125(3)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5, %s6, %s7
  
    %s2 = ADDiu killed %s2, -1
    %at = SLTi %s2, 2
    BEQ killed %at, %zero, %bb.120..backedge..lr.ph_crit_edge.i, implicit-def %at {
      %s1 = ADDiu killed %s1, -4
    }
  
  bb.125 (freq 10229):
    successors: %bb.109..preheader.i(100)
    liveins: %s0, %s3, %s4, %s7
  
    B %bb.109..preheader.i, implicit-def %at {
      %s5 = OR killed %s7, %zero
    }
  
  bb.126.cse_around_loop.exit (freq 8388599):
    successors: %bb.128(37), %bb.127(62)
    liveins: %s0, %s5
  
    %at = LW %sp, 40 :: (load 4 from stack)
    %at = LW killed %at, 0 :: (load 4 from @qty_table)
    %v0 = LW %sp, 44 :: (load 4 from stack)
    %v0 = LW killed %v0, 0 :: (load 4 from @max_reg)
    %v0 = SLL killed %v0, 5
    %a0 = ADDu killed %at, killed %v0
    %t9 = LW %s0, target-flags(<unknown>) @free :: (load 4 from call-entry @free)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }
    BEQ %s5, %zero, %bb.128, implicit-def %at {
      %s4 = ADDiu %zero, 0
    }
  
  bb.127 (%ir-block.368, freq 5242874):
    successors: %bb.128(100)
    liveins: %s5
  
    %s4 = LW killed %s5, 12 :: (load 4 from %ir.370)
  
  bb.128 (%ir-block.372, freq 8570471):
    liveins: %s4
    liveouts:
  
    %v0 = OR killed %s4, %zero
    %s0 = LW %sp, 200 :: (load 4 from stack)
    %s1 = LW %sp, 204 :: (load 4 from stack)
    %s2 = LW %sp, 208 :: (load 4 from stack)
    %s3 = LW %sp, 212 :: (load 4 from stack)
    %s4 = LW %sp, 216 :: (load 4 from stack)
    %s5 = LW %sp, 220 :: (load 4 from stack)
    %s6 = LW %sp, 224 :: (load 4 from stack)
    %s7 = LW %sp, 228 :: (load 4 from stack)
    %fp = LW %sp, 232 :: (load 4 from stack)
    %ra = LW %sp, 236 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 240
    }
  
  bb.129 (%ir-block.249, freq 8):
    liveins: %s0
    exit
  
    %a0 = LW %s0, target-flags(<unknown>) @.str.4 :: (load 4 from got)
    %a2 = LW %s0, target-flags(<unknown>) @__FUNCTION__.cse_basic_block :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @fancy_abort :: (load 4 from call-entry @fancy_abort)
    %a1 = ADDiu %zero, 7379
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }

...
