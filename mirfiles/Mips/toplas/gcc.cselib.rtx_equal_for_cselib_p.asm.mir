--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.cselib.rtx_equal_for_cselib_p.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.rtx_def.45 = type { i32, [1 x %union.rtunion_def.46] }
  %union.rtunion_def.46 = type { i32 }
  %struct.cselib_val_struct.50 = type { i32, %union.anon.51, %struct.elt_loc_list.52*, %struct.elt_list.53* }
  %union.anon.51 = type { %struct.rtx_def.45* }
  %struct.elt_loc_list.52 = type { %struct.elt_loc_list.52*, %struct.rtx_def.45*, %struct.rtx_def.45* }
  %struct.elt_list.53 = type { %struct.elt_list.53*, %struct.cselib_val_struct.50* }
  %struct.rtvec_def.54 = type { i32, [1 x %struct.rtx_def.45*] }
  
  @rtx_format = external constant [153 x i8*], align 4
  @rtx_length = external constant [153 x i8], align 1
  @.str = external hidden unnamed_addr constant [9 x i8], align 1
  @__FUNCTION__.rtx_equal_for_cselib_p = external hidden unnamed_addr constant [23 x i8], align 1
  
  ; Function Attrs: nounwind
  define i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %x, %struct.rtx_def.45* %y) #0 {
    %1 = bitcast %struct.rtx_def.45* %x to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %12 [
      i32 61, label %4
      i32 66, label %4
    ]
  
  ; <label>:4                                       ; preds = %0, %0
    %5 = lshr i32 %2, 8
    %6 = and i32 %5, 255
    %7 = tail call %struct.cselib_val_struct.50* @cselib_lookup(%struct.rtx_def.45* nonnull %x, i32 signext %6, i32 signext 0)
    %8 = icmp eq %struct.cselib_val_struct.50* %7, null
    br i1 %8, label %12, label %9
  
  ; <label>:9                                       ; preds = %4
    %10 = getelementptr inbounds %struct.cselib_val_struct.50, %struct.cselib_val_struct.50* %7, i32 0, i32 1, i32 0
    %11 = load %struct.rtx_def.45*, %struct.rtx_def.45** %10, align 4
    br label %12
  
  ; <label>:12                                      ; preds = %9, %4, %0
    %.19 = phi %struct.rtx_def.45* [ %x, %0 ], [ %11, %9 ], [ %x, %4 ]
    %13 = bitcast %struct.rtx_def.45* %y to i32*
    %14 = load i32, i32* %13, align 4
    %15 = lshr i32 %14, 16
    switch i32 %15, label %24 [
      i32 61, label %16
      i32 66, label %16
    ]
  
  ; <label>:16                                      ; preds = %12, %12
    %17 = lshr i32 %14, 8
    %18 = and i32 %17, 255
    %19 = tail call %struct.cselib_val_struct.50* @cselib_lookup(%struct.rtx_def.45* nonnull %y, i32 signext %18, i32 signext 0)
    %20 = icmp eq %struct.cselib_val_struct.50* %19, null
    br i1 %20, label %24, label %21
  
  ; <label>:21                                      ; preds = %16
    %22 = getelementptr inbounds %struct.cselib_val_struct.50, %struct.cselib_val_struct.50* %19, i32 0, i32 1, i32 0
    %23 = load %struct.rtx_def.45*, %struct.rtx_def.45** %22, align 4
    br label %24
  
  ; <label>:24                                      ; preds = %21, %16, %12
    %.111 = phi %struct.rtx_def.45* [ %y, %12 ], [ %23, %21 ], [ %y, %16 ]
    %25 = icmp eq %struct.rtx_def.45* %.19, %.111
    br i1 %25, label %.loopexit, label %26
  
  ; <label>:26                                      ; preds = %24
    %27 = bitcast %struct.rtx_def.45* %.19 to i32*
    %28 = load i32, i32* %27, align 4
    %.mask = and i32 %28, -65536
    %29 = icmp eq i32 %.mask, 3932160
    br i1 %29, label %30, label %42
  
  ; <label>:30                                      ; preds = %26
    %31 = bitcast %struct.rtx_def.45* %.111 to i32*
    %32 = load i32, i32* %31, align 4
    %.mask15 = and i32 %32, -65536
    %33 = icmp eq i32 %.mask15, 3932160
    br i1 %33, label %34, label %42
  
  ; <label>:34                                      ; preds = %30
    %35 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 0
    %36 = bitcast %union.rtunion_def.46* %35 to %struct.cselib_val_struct.50**
    %37 = load %struct.cselib_val_struct.50*, %struct.cselib_val_struct.50** %36, align 4
    %38 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 0
    %39 = bitcast %union.rtunion_def.46* %38 to %struct.cselib_val_struct.50**
    %40 = load %struct.cselib_val_struct.50*, %struct.cselib_val_struct.50** %39, align 4
    %41 = icmp eq %struct.cselib_val_struct.50* %37, %40
    br label %.loopexit
  
  ; <label>:42                                      ; preds = %30, %26
    %43 = lshr i32 %28, 16
    %44 = icmp eq i32 %43, 60
    br i1 %44, label %45, label %61
  
  ; <label>:45                                      ; preds = %42
    %46 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 0
    %47 = bitcast %union.rtunion_def.46* %46 to %struct.cselib_val_struct.50**
    %48 = load %struct.cselib_val_struct.50*, %struct.cselib_val_struct.50** %47, align 4
    %49 = getelementptr inbounds %struct.cselib_val_struct.50, %struct.cselib_val_struct.50* %48, i32 0, i32 2
    %l.024 = load %struct.elt_loc_list.52*, %struct.elt_loc_list.52** %49, align 4
    %50 = icmp eq %struct.elt_loc_list.52* %l.024, null
    br i1 %50, label %.loopexit, label %.lr.ph
  
  .lr.ph:                                           ; preds = %45, %.thread
    %l.025 = phi %struct.elt_loc_list.52* [ %l.0, %.thread ], [ %l.024, %45 ]
    %51 = getelementptr inbounds %struct.elt_loc_list.52, %struct.elt_loc_list.52* %l.025, i32 0, i32 1
    %52 = load %struct.rtx_def.45*, %struct.rtx_def.45** %51, align 4
    %53 = bitcast %struct.rtx_def.45* %52 to i32*
    %54 = load i32, i32* %53, align 4
    %55 = lshr i32 %54, 16
    switch i32 %55, label %56 [
      i32 61, label %.thread
      i32 66, label %.thread
    ]
  
  ; <label>:56                                      ; preds = %.lr.ph
    %57 = tail call i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %52, %struct.rtx_def.45* %.111)
    %58 = icmp eq i32 %57, 0
    br i1 %58, label %.thread, label %.loopexit
  
  .thread:                                          ; preds = %56, %.lr.ph, %.lr.ph
    %59 = bitcast %struct.elt_loc_list.52* %l.025 to %struct.elt_loc_list.52**
    %l.0 = load %struct.elt_loc_list.52*, %struct.elt_loc_list.52** %59, align 4
    %60 = icmp eq %struct.elt_loc_list.52* %l.0, null
    br i1 %60, label %.loopexit, label %.lr.ph
  
  ; <label>:61                                      ; preds = %42
    %62 = bitcast %struct.rtx_def.45* %.111 to i32*
    %63 = load i32, i32* %62, align 4
    %64 = lshr i32 %63, 16
    %65 = icmp eq i32 %64, 60
    br i1 %65, label %66, label %82
  
  ; <label>:66                                      ; preds = %61
    %67 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 0
    %68 = bitcast %union.rtunion_def.46* %67 to %struct.cselib_val_struct.50**
    %69 = load %struct.cselib_val_struct.50*, %struct.cselib_val_struct.50** %68, align 4
    %70 = getelementptr inbounds %struct.cselib_val_struct.50, %struct.cselib_val_struct.50* %69, i32 0, i32 2
    %l4.028 = load %struct.elt_loc_list.52*, %struct.elt_loc_list.52** %70, align 4
    %71 = icmp eq %struct.elt_loc_list.52* %l4.028, null
    br i1 %71, label %.loopexit, label %.lr.ph30
  
  .lr.ph30:                                         ; preds = %66, %.thread18
    %l4.029 = phi %struct.elt_loc_list.52* [ %l4.0, %.thread18 ], [ %l4.028, %66 ]
    %72 = getelementptr inbounds %struct.elt_loc_list.52, %struct.elt_loc_list.52* %l4.029, i32 0, i32 1
    %73 = load %struct.rtx_def.45*, %struct.rtx_def.45** %72, align 4
    %74 = bitcast %struct.rtx_def.45* %73 to i32*
    %75 = load i32, i32* %74, align 4
    %76 = lshr i32 %75, 16
    switch i32 %76, label %77 [
      i32 61, label %.thread18
      i32 66, label %.thread18
    ]
  
  ; <label>:77                                      ; preds = %.lr.ph30
    %78 = tail call i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %.19, %struct.rtx_def.45* %73)
    %79 = icmp eq i32 %78, 0
    br i1 %79, label %.thread18, label %.loopexit
  
  .thread18:                                        ; preds = %77, %.lr.ph30, %.lr.ph30
    %80 = bitcast %struct.elt_loc_list.52* %l4.029 to %struct.elt_loc_list.52**
    %l4.0 = load %struct.elt_loc_list.52*, %struct.elt_loc_list.52** %80, align 4
    %81 = icmp eq %struct.elt_loc_list.52* %l4.0, null
    br i1 %81, label %.loopexit, label %.lr.ph30
  
  ; <label>:82                                      ; preds = %61
    %83 = icmp eq i32 %43, %64
    br i1 %83, label %84, label %.loopexit
  
  ; <label>:84                                      ; preds = %82
    %85 = xor i32 %63, %28
    %86 = and i32 %85, 65280
    %87 = icmp eq i32 %86, 0
    br i1 %87, label %88, label %.loopexit
  
  ; <label>:88                                      ; preds = %84
    %89 = icmp eq i32 %43, 67
    br i1 %89, label %90, label %98
  
  ; <label>:90                                      ; preds = %88
    %91 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 0
    %92 = bitcast %union.rtunion_def.46* %91 to %struct.rtx_def.45**
    %93 = load %struct.rtx_def.45*, %struct.rtx_def.45** %92, align 4
    %94 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 0
    %95 = bitcast %union.rtunion_def.46* %94 to %struct.rtx_def.45**
    %96 = load %struct.rtx_def.45*, %struct.rtx_def.45** %95, align 4
    %97 = icmp eq %struct.rtx_def.45* %93, %96
    br label %.loopexit
  
  ; <label>:98                                      ; preds = %88
    %99 = getelementptr inbounds [153 x i8*], [153 x i8*]* @rtx_format, i32 0, i32 %43
    %100 = load i8*, i8** %99, align 4
    %101 = getelementptr inbounds [153 x i8], [153 x i8]* @rtx_length, i32 0, i32 %43
    %102 = load i8, i8* %101, align 1
    %103 = zext i8 %102 to i32
    %104 = icmp eq i8 %102, 0
    br i1 %104, label %.loopexit, label %.lr.ph38.preheader
  
  .lr.ph38.preheader:                               ; preds = %98
    br label %.lr.ph38
  
  .lr.ph38:                                         ; preds = %.critedge.backedge, %.lr.ph38.preheader
    %i.037.in = phi i32 [ %i.037, %.critedge.backedge ], [ %103, %.lr.ph38.preheader ]
    %i.037 = add nsw i32 %i.037.in, -1
    %105 = getelementptr inbounds i8, i8* %100, i32 %i.037
    %106 = load i8, i8* %105, align 1
    %107 = sext i8 %106 to i32
    switch i32 %107, label %169 [
      i32 119, label %109
      i32 110, label %115
      i32 105, label %115
      i32 86, label %121
      i32 69, label %121
      i32 101, label %151
      i32 83, label %160
      i32 115, label %160
      i32 117, label %.critedge.backedge
      i32 48, label %.critedge.backedge
      i32 116, label %.critedge.backedge
    ]
  
  .critedge.backedge:                               ; preds = %.lr.ph64, %160, %151, %.preheader, %115, %109, %.lr.ph38, %.lr.ph38, %.lr.ph38
    %108 = icmp sgt i32 %i.037.in, 1
    br i1 %108, label %.lr.ph38, label %.loopexit
  
  ; <label>:109                                     ; preds = %.lr.ph38
    %110 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 %i.037, i32 0
    %111 = load i32, i32* %110, align 4
    %112 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 %i.037, i32 0
    %113 = load i32, i32* %112, align 4
    %114 = icmp eq i32 %111, %113
    br i1 %114, label %.critedge.backedge, label %.loopexit
  
  ; <label>:115                                     ; preds = %.lr.ph38, %.lr.ph38
    %116 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 %i.037, i32 0
    %117 = load i32, i32* %116, align 4
    %118 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 %i.037, i32 0
    %119 = load i32, i32* %118, align 4
    %120 = icmp eq i32 %117, %119
    br i1 %120, label %.critedge.backedge, label %.loopexit
  
  ; <label>:121                                     ; preds = %.lr.ph38, %.lr.ph38
    %122 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 %i.037
    %123 = bitcast %union.rtunion_def.46* %122 to %struct.rtvec_def.54**
    %124 = load %struct.rtvec_def.54*, %struct.rtvec_def.54** %123, align 4
    %125 = bitcast %struct.rtvec_def.54* %124 to i32*
    %126 = load i32, i32* %125, align 4
    %127 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 %i.037
    %128 = bitcast %union.rtunion_def.46* %127 to %struct.rtvec_def.54**
    %129 = load %struct.rtvec_def.54*, %struct.rtvec_def.54** %128, align 4
    %130 = bitcast %struct.rtvec_def.54* %129 to i32*
    %131 = load i32, i32* %130, align 4
    %132 = icmp eq i32 %126, %131
    br i1 %132, label %.preheader, label %.loopexit
  
  .preheader:                                       ; preds = %121
    %133 = icmp sgt i32 %126, 0
    br i1 %133, label %.lr.ph35.preheader, label %.critedge.backedge
  
  .lr.ph35.preheader:                               ; preds = %.preheader
    %134 = getelementptr inbounds %struct.rtvec_def.54, %struct.rtvec_def.54* %124, i32 0, i32 1, i32 0
    %135 = load %struct.rtx_def.45*, %struct.rtx_def.45** %134, align 4
    %136 = getelementptr inbounds %struct.rtvec_def.54, %struct.rtvec_def.54* %129, i32 0, i32 1, i32 0
    %137 = load %struct.rtx_def.45*, %struct.rtx_def.45** %136, align 4
    %138 = tail call i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %135, %struct.rtx_def.45* %137)
    %139 = icmp eq i32 %138, 0
    br i1 %139, label %.loopexit, label %.lr.ph64
  
  .lr.ph64:                                         ; preds = %.lr.ph35.preheader, %..lr.ph35_crit_edge
    %lsr.iv5 = phi i32 [ %lsr.iv.next6, %..lr.ph35_crit_edge ], [ 0, %.lr.ph35.preheader ]
    %lsr.iv = phi i32 [ %lsr.iv.next, %..lr.ph35_crit_edge ], [ 8, %.lr.ph35.preheader ]
    %140 = bitcast %union.rtunion_def.46* %122 to %struct.rtvec_def.54**
    %141 = load %struct.rtvec_def.54*, %struct.rtvec_def.54** %140, align 4
    %142 = bitcast %struct.rtvec_def.54* %141 to i32*
    %143 = load i32, i32* %142, align 4
    %lsr.iv.next = add i32 %lsr.iv, 4
    %lsr.iv.next6 = add nuw nsw i32 %lsr.iv5, 1
    %144 = icmp slt i32 %lsr.iv.next6, %143
    br i1 %144, label %..lr.ph35_crit_edge, label %.critedge.backedge
  
  ..lr.ph35_crit_edge:                              ; preds = %.lr.ph64
    %145 = bitcast %struct.rtvec_def.54* %141 to i8*
    %146 = bitcast %union.rtunion_def.46* %127 to %struct.rtvec_def.54**
    %.pre = load %struct.rtvec_def.54*, %struct.rtvec_def.54** %146, align 4
    %.pre1 = bitcast %struct.rtvec_def.54* %.pre to i8*
    %uglygep3 = getelementptr i8, i8* %145, i32 %lsr.iv
    %uglygep34 = bitcast i8* %uglygep3 to %struct.rtx_def.45**
    %147 = load %struct.rtx_def.45*, %struct.rtx_def.45** %uglygep34, align 4
    %uglygep = getelementptr i8, i8* %.pre1, i32 %lsr.iv
    %uglygep2 = bitcast i8* %uglygep to %struct.rtx_def.45**
    %148 = load %struct.rtx_def.45*, %struct.rtx_def.45** %uglygep2, align 4
    %149 = tail call i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %147, %struct.rtx_def.45* %148)
    %150 = icmp eq i32 %149, 0
    br i1 %150, label %.loopexit, label %.lr.ph64
  
  ; <label>:151                                     ; preds = %.lr.ph38
    %152 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 %i.037
    %153 = bitcast %union.rtunion_def.46* %152 to %struct.rtx_def.45**
    %154 = load %struct.rtx_def.45*, %struct.rtx_def.45** %153, align 4
    %155 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 %i.037
    %156 = bitcast %union.rtunion_def.46* %155 to %struct.rtx_def.45**
    %157 = load %struct.rtx_def.45*, %struct.rtx_def.45** %156, align 4
    %158 = tail call i32 @rtx_equal_for_cselib_p(%struct.rtx_def.45* %154, %struct.rtx_def.45* %157)
    %159 = icmp eq i32 %158, 0
    br i1 %159, label %.loopexit, label %.critedge.backedge
  
  ; <label>:160                                     ; preds = %.lr.ph38, %.lr.ph38
    %161 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.19, i32 0, i32 1, i32 %i.037
    %162 = bitcast %union.rtunion_def.46* %161 to i8**
    %163 = load i8*, i8** %162, align 4
    %164 = getelementptr inbounds %struct.rtx_def.45, %struct.rtx_def.45* %.111, i32 0, i32 1, i32 %i.037
    %165 = bitcast %union.rtunion_def.46* %164 to i8**
    %166 = load i8*, i8** %165, align 4
    %167 = tail call i32 @strcmp(i8* %163, i8* %166) #3
    %168 = icmp eq i32 %167, 0
    br i1 %168, label %.critedge.backedge, label %.loopexit
  
  ; <label>:169                                     ; preds = %.lr.ph38
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 signext 530, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @__FUNCTION__.rtx_equal_for_cselib_p, i32 0, i32 0)) #4
    unreachable
  
  .loopexit:                                        ; preds = %.critedge.backedge, %109, %115, %121, %.lr.ph35.preheader, %151, %160, %..lr.ph35_crit_edge, %77, %.thread18, %56, %.thread, %98, %90, %84, %82, %66, %45, %34, %24
    %.8.shrunk = phi i1 [ %41, %34 ], [ %97, %90 ], [ true, %24 ], [ false, %84 ], [ false, %82 ], [ false, %45 ], [ false, %66 ], [ true, %98 ], [ false, %.thread ], [ true, %56 ], [ false, %.thread18 ], [ true, %77 ], [ false, %..lr.ph35_crit_edge ], [ false, %160 ], [ false, %151 ], [ false, %121 ], [ false, %115 ], [ false, %109 ], [ true, %.critedge.backedge ], [ false, %.lr.ph35.preheader ]
    %.8 = zext i1 %.8.shrunk to i32
    ret i32 %.8
  }
  
  ; Function Attrs: nounwind
  declare %struct.cselib_val_struct.50* @cselib_lookup(%struct.rtx_def.45*, i32 signext, i32 signext) #0
  
  ; Function Attrs: nounwind readonly
  declare i32 @strcmp(i8* nocapture, i8* nocapture) #1
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #2
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  attributes #4 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            rtx_equal_for_cselib_p
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       72
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -44, size: 4, alignment: 4 }
  - { id: 1, type: spill-slot, offset: -48, size: 4, alignment: 4 }
  - { id: 2, type: spill-slot, offset: -52, size: 4, alignment: 4 }
  - { id: 3, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 4, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%fp' }
  - { id: 5, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s7' }
  - { id: 6, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s6' }
  - { id: 7, type: spill-slot, offset: -20, size: 4, alignment: 4, callee-saved-register: '%s5' }
  - { id: 8, type: spill-slot, offset: -24, size: 4, alignment: 4, callee-saved-register: '%s4' }
  - { id: 9, type: spill-slot, offset: -28, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 10, type: spill-slot, offset: -32, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 11, type: spill-slot, offset: -36, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 12, type: spill-slot, offset: -40, size: 4, alignment: 4, callee-saved-register: '%s0' }
jumpTable:       
  kind:            gp-rel32-block-address
  entries:         
    - id:              0
      blocks:          [ '%bb.43', '%bb.70', '%bb.70', '%bb.70', '%bb.70', 
                         '%bb.43', '%bb.70', '%bb.70', '%bb.70', '%bb.70', 
                         '%bb.48', '%bb.62..critedge.backedge', '%bb.62..critedge.backedge', 
                         '%bb.70', '%bb.61' ]
body:             |
  bb.0 (%ir-block.0, freq 341870197):
    successors: %bb.2(33), %bb.1(66)
    liveins: %a0, %a1, %t9, %ra, %fp, %s7, %s6, %s5, %s4, %s3, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -72
    CFI_INSTRUCTION .cfi_def_cfa_offset 72
    SW killed %ra, %sp, 68 :: (store 4 into stack)
    SW killed %fp, %sp, 64 :: (store 4 into stack)
    SW killed %s7, %sp, 60 :: (store 4 into stack)
    SW killed %s6, %sp, 56 :: (store 4 into stack)
    SW killed %s5, %sp, 52 :: (store 4 into stack)
    SW killed %s4, %sp, 48 :: (store 4 into stack)
    SW killed %s3, %sp, 44 :: (store 4 into stack)
    SW killed %s2, %sp, 40 :: (store 4 into stack)
    SW killed %s1, %sp, 36 :: (store 4 into stack)
    SW killed %s0, %sp, 32 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %fp_64, -8
    CFI_INSTRUCTION .cfi_offset %s7_64, -12
    CFI_INSTRUCTION .cfi_offset %s6_64, -16
    CFI_INSTRUCTION .cfi_offset %s5_64, -20
    CFI_INSTRUCTION .cfi_offset %s4_64, -24
    CFI_INSTRUCTION .cfi_offset %s3_64, -28
    CFI_INSTRUCTION .cfi_offset %s2_64, -32
    CFI_INSTRUCTION .cfi_offset %s1_64, -36
    CFI_INSTRUCTION .cfi_offset %s0_64, -40
    %s0 = ADDu %v0, %t9
    %s1 = OR %a0, %zero
    %v0 = LW %s1, 0 :: (load 4 from %ir.1)
    %v1 = SRL %v0, 16
    %at = ADDiu %zero, 66
    BEQ %v1, %at, %bb.2, implicit-def %at {
      %s2 = OR %a1, %zero
    }
  
  bb.1 (%ir-block.0, freq 227913464):
    successors: %bb.2(50), %bb.4(49)
    liveins: %s0, %s1, %s2, %v0, %v1
  
    %at = ADDiu %zero, 61
    BNE %v1, %at, %bb.4, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.4, freq 227913465):
    successors: %bb.4(37), %bb.3(62)
    liveins: %s0, %s1, %s2, %v0
  
    %a1 = EXT killed %v0, 8, 8
    %t9 = LW %s0, target-flags(<unknown>) @cselib_lookup :: (load 4 from call-entry @cselib_lookup)
    %a0 = OR %s1, %zero
    %a2 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.4, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.9, freq 142445915):
    successors: %bb.4(100)
    liveins: %s0, %s2, %v0
  
    %s1 = LW killed %v0, 4 :: (load 4 from %ir.10)
  
  bb.4 (%ir-block.12, freq 341870197):
    successors: %bb.6(33), %bb.5(66)
    liveins: %s0, %s1, %s2
  
    %v0 = LW %s2, 0 :: (load 4 from %ir.13)
    %v1 = SRL %v0, 16
    %at = ADDiu %zero, 66
    BEQ %v1, %at, %bb.6, implicit-def %at {
      NOP
    }
  
  bb.5 (%ir-block.12, freq 227913464):
    successors: %bb.6(50), %bb.8(49)
    liveins: %s0, %s1, %s2, %v0, %v1
  
    %at = ADDiu %zero, 61
    BNE %v1, %at, %bb.8, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.16, freq 227913465):
    successors: %bb.8(37), %bb.7(62)
    liveins: %s0, %s1, %s2, %v0
  
    %a1 = EXT killed %v0, 8, 8
    %t9 = LW %s0, target-flags(<unknown>) @cselib_lookup :: (load 4 from call-entry @cselib_lookup)
    %a0 = OR %s2, %zero
    %a2 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.8, implicit-def %at {
      NOP
    }
  
  bb.7 (%ir-block.21, freq 142445915):
    successors: %bb.8(100)
    liveins: %s0, %s1, %v0
  
    %s2 = LW killed %v0, 4 :: (load 4 from %ir.22)
  
  bb.8 (%ir-block.24, freq 341870197):
    successors: %bb.20(37), %bb.9(62)
    liveins: %s0, %s1, %s2
  
    BEQ %s1, %s2, %bb.20, implicit-def %at {
      NOP
    }
  
  bb.9 (%ir-block.26, freq 213668873):
    successors: %bb.10(50), %bb.12(50)
    liveins: %s0, %s1, %s2
  
    %v1 = LW %s1, 0 :: (load 4 from %ir.27)
    %v0 = LUi 65535
    %at = AND %v1, %v0
    %a0 = LUi 60
    BNE %at, %a0, %bb.12, implicit-def %at {
      NOP
    }
  
  bb.10 (%ir-block.30, freq 106834436):
    successors: %bb.11(50), %bb.12(50)
    liveins: %a0, %s0, %s1, %s2, %v0, %v1
  
    %at = LW %s2, 0 :: (load 4 from %ir.31)
    %at = AND killed %at, killed %v0
    BNE %at, %a0, %bb.12, implicit-def %at {
      NOP
    }
  
  bb.11 (%ir-block.34, freq 53417218):
    successors: %bb.21..loopexit(100)
    liveins: %s1, %s2
  
    %at = LW killed %s2, 4 :: (load 4 from %ir.39)
    %v0 = LW killed %s1, 4 :: (load 4 from %ir.36)
    %at = XOR killed %v0, killed %at
    B %bb.21..loopexit, implicit-def dead %at {
      %s3 = SLTiu killed %at, 1
    }
  
  bb.12 (%ir-block.42, freq 160251655):
    successors: %bb.13(50), %bb.22(50)
    liveins: %s0, %s1, %s2, %v1
  
    %v0 = SRL %v1, 16
    %a1 = ADDiu %zero, 60
    BNE %v0, %a1, %bb.22, implicit-def %at {
      NOP
    }
  
  bb.13 (%ir-block.45, freq 80125827):
    successors: %bb.21..loopexit(37), %bb.14(62)
    liveins: %s0, %s1, %s2
  
    %at = LW killed %s1, 4 :: (load 4 from %ir.47)
    %s1 = LW killed %at, 8 :: (load 4 from %ir.49)
    BEQ %s1, %zero, %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.14 (freq 50078642):
    successors: %bb.15..lr.ph(100)
    liveins: %s0, %s1, %s2, %s3
  
    %s4 = ADDiu %zero, 61
    %s5 = ADDiu %zero, 66
  
  bb.15..lr.ph (freq 99124735):
    successors: %bb.18..thread(33), %bb.16..lr.ph(66)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5
  
    %a0 = LW %s1, 4 :: (load 4 from %ir.51)
    %at = LW %a0, 0 :: (load 4 from %ir.53)
    %v0 = SRL killed %at, 16
    BEQ %v0, %s4, %bb.18..thread, implicit-def %at {
      NOP
    }
  
  bb.16..lr.ph (freq 66083156):
    successors: %bb.18..thread(50), %bb.17(49)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5, %v0
  
    BEQ %v0, %s5, %bb.18..thread, implicit-def %at {
      NOP
    }
  
  bb.17 (%ir-block.56, freq 33041578):
    successors: %bb.18..thread(96), %bb.34(3)
    liveins: %a0, %s0, %s1, %s2, %s3, %s4, %s5
  
    %t9 = LW %s0, target-flags(<unknown>) @rtx_equal_for_cselib_p :: (load 4 from call-entry @rtx_equal_for_cselib_p)
    %a1 = OR %s2, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BNE %v0, %zero, %bb.34, implicit-def %at {
      NOP
    }
  
  bb.18..thread (freq 98092185):
    successors: %bb.19..thread(50), %bb.15..lr.ph(50)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5
  
    %s1 = LW killed %s1, 0 :: (load 4 from %ir.59)
    BNE %s1, %zero, %bb.15..lr.ph, implicit-def %at {
      NOP
    }
  
  bb.19..thread (freq 49046092):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      NOP
    }
  
  bb.20 (freq 128201324):
    successors: %bb.21..loopexit(100)
  
    %s3 = ADDiu %zero, 1
  
  bb.21..loopexit (freq 341870189):
    liveins: %s3
    liveouts:
  
    %v0 = OR killed %s3, %zero
    %s0 = LW %sp, 32 :: (load 4 from stack)
    %s1 = LW %sp, 36 :: (load 4 from stack)
    %s2 = LW %sp, 40 :: (load 4 from stack)
    %s3 = LW %sp, 44 :: (load 4 from stack)
    %s4 = LW %sp, 48 :: (load 4 from stack)
    %s5 = LW %sp, 52 :: (load 4 from stack)
    %s6 = LW %sp, 56 :: (load 4 from stack)
    %s7 = LW %sp, 60 :: (load 4 from stack)
    %fp = LW %sp, 64 :: (load 4 from stack)
    %ra = LW %sp, 68 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 72
    }
  
  bb.22 (%ir-block.61, freq 80125827):
    successors: %bb.23(50), %bb.30(50)
    liveins: %a1, %s0, %s1, %s2, %v0, %v1
  
    %a0 = LW %s2, 0 :: (load 4 from %ir.62)
    %a2 = SRL %a0, 16
    BNE %a2, %a1, %bb.30, implicit-def %at {
      NOP
    }
  
  bb.23 (%ir-block.66, freq 40062913):
    successors: %bb.21..loopexit(37), %bb.24(62)
    liveins: %s0, %s1, %s2
  
    %at = LW killed %s2, 4 :: (load 4 from %ir.68)
    %s2 = LW killed %at, 8 :: (load 4 from %ir.70)
    BEQ %s2, %zero, %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.24 (freq 25039321):
    successors: %bb.25..lr.ph30(100)
    liveins: %s0, %s1, %s2, %s3
  
    %s4 = ADDiu %zero, 61
    %s5 = ADDiu %zero, 66
  
  bb.25..lr.ph30 (freq 49562367):
    successors: %bb.28..thread18(33), %bb.26..lr.ph30(66)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5
  
    %a1 = LW %s2, 4 :: (load 4 from %ir.72)
    %at = LW %a1, 0 :: (load 4 from %ir.74)
    %v0 = SRL killed %at, 16
    BEQ %v0, %s4, %bb.28..thread18, implicit-def %at {
      NOP
    }
  
  bb.26..lr.ph30 (freq 33041578):
    successors: %bb.28..thread18(50), %bb.27(49)
    liveins: %a1, %s0, %s1, %s2, %s3, %s4, %s5, %v0
  
    BEQ %v0, %s5, %bb.28..thread18, implicit-def %at {
      NOP
    }
  
  bb.27 (%ir-block.77, freq 16520789):
    successors: %bb.28..thread18(96), %bb.37(3)
    liveins: %a1, %s0, %s1, %s2, %s3, %s4, %s5
  
    %t9 = LW %s0, target-flags(<unknown>) @rtx_equal_for_cselib_p :: (load 4 from call-entry @rtx_equal_for_cselib_p)
    %a0 = OR %s1, %zero
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BNE %v0, %zero, %bb.37, implicit-def %at {
      NOP
    }
  
  bb.28..thread18 (freq 49046092):
    successors: %bb.29..thread18(50), %bb.25..lr.ph30(50)
    liveins: %s0, %s1, %s2, %s3, %s4, %s5
  
    %s2 = LW killed %s2, 0 :: (load 4 from %ir.80)
    BNE %s2, %zero, %bb.25..lr.ph30, implicit-def %at {
      NOP
    }
  
  bb.29..thread18 (freq 24523046):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      NOP
    }
  
  bb.30 (%ir-block.82, freq 40062913):
    successors: %bb.31(50), %bb.33(50)
    liveins: %a0, %a2, %s0, %s1, %s2, %v0, %v1
  
    BNE %v0, %a2, %bb.33, implicit-def %at {
      NOP
    }
  
  bb.31 (%ir-block.84, freq 20031456):
    successors: %bb.35(37), %bb.32(62)
    liveins: %a0, %s0, %s1, %s2, %v0, %v1
  
    %at = XOR killed %a0, killed %v1
    %at = ANDi killed %at, 65280
    BEQ killed %at, %zero, %bb.35, implicit-def %at {
      NOP
    }
  
  bb.32 (freq 12519660):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.33 (freq 20031456):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.34 (freq 1032549):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 1
    }
  
  bb.35 (%ir-block.88, freq 7511796):
    successors: %bb.36(50), %bb.38(50)
    liveins: %s0, %s1, %s2, %v0
  
    %at = ADDiu %zero, 67
    BNE %v0, %at, %bb.38, implicit-def %at {
      NOP
    }
  
  bb.36 (%ir-block.90, freq 3755898):
    successors: %bb.21..loopexit(100)
    liveins: %s1, %s2
  
    %at = LW killed %s2, 4 :: (load 4 from %ir.95)
    %v0 = LW killed %s1, 4 :: (load 4 from %ir.92)
    %at = XOR killed %v0, killed %at
    B %bb.21..loopexit, implicit-def dead %at {
      %s3 = SLTiu killed %at, 1
    }
  
  bb.37 (freq 516274):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 1
    }
  
  bb.38 (%ir-block.98, freq 3755898):
    successors: %bb.64(37), %bb.39..lr.ph38.preheader(62)
    liveins: %s0, %s1, %s2, %v0
  
    %at = LW %s0, target-flags(<unknown>) @rtx_length :: (load 4 from got)
    %at = ADDu killed %at, %v0
    %s4 = LBu killed %at, 0 :: (load 1 from %ir.101)
    BEQ %s4, %zero, %bb.64, implicit-def %at {
      NOP
    }
  
  bb.39..lr.ph38.preheader (freq 2347436):
    successors: %bb.40..lr.ph38(100)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = SLL killed %v0, 2
    %v0 = LW %s0, target-flags(<unknown>) @rtx_format :: (load 4 from got)
    %at = ADDu killed %v0, killed %at
    %at = LW killed %at, 0 :: (load 4 from %ir.99)
    SW killed %at, %sp, 24 :: (store 4 into stack)
    %at = LW %s0, target-flags(<unknown>) %jump-table.0 :: (load 4 from got)
    SW killed %at, %sp, 20 :: (store 4 into stack)
  
  bb.40..lr.ph38 (freq 6400553):
    successors: %bb.45..lr.ph38(45), %bb.41..lr.ph38(54)
    liveins: %s0, %s1, %s2, %s4
  
    SW %s4, %sp, 28 :: (store 4 into stack)
    %s4 = ADDiu killed %s4, -1
    %at = LW %sp, 24 :: (load 4 from stack)
    %at = ADDu killed %at, %s4
    %v0 = LB killed %at, 0 :: (load 1 from %ir.105)
    %at = SLTi %v0, 86
    BNE %at, %zero, %bb.45..lr.ph38, implicit-def %at {
      NOP
    }
  
  bb.41..lr.ph38 (freq 3491210):
    successors: %bb.50..lr.ph38(25), %bb.42..lr.ph38(74)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %v1 = ADDiu %v0, -105
    %at = SLTiu %v1, 15
    BEQ %at, %zero, %bb.50..lr.ph38, implicit-def %at {
      NOP
    }
  
  bb.42..lr.ph38 (freq 2618407):
    successors: %bb.43(33), %bb.70(0), %bb.48(16), %bb.62..critedge.backedge(33), %bb.61(16)
    liveins: %s0, %s1, %s2, %s4, %v1
  
    %at = SLL killed %v1, 2
    %v0 = LW %sp, 20 :: (load 4 from stack)
    %at = ADDu killed %at, killed %v0
    %at = LW killed %at, target-flags(<unknown>) %jump-table.0 :: (load 4 from jump-table)
    %at = ADDu killed %at, %s0
    PseudoIndirectBranch killed %at {
      NOP
    }
  
  bb.43 (%ir-block.115, freq 872802):
    successors: %bb.44(50), %bb.62..critedge.backedge(50)
    liveins: %s0, %s1, %s2, %s4
  
    %at = SLL %s4, 2
    %v0 = ADDu %s2, %at
    %v0 = LW killed %v0, 4 :: (load 4 from %ir.118)
    %at = ADDu %s1, killed %at
    %at = LW killed %at, 4 :: (load 4 from %ir.116)
    BEQ %at, %v0, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.44 (%ir-block.115, freq 436401):
    successors: %bb.67(100)
  
    B %bb.67, implicit-def %at {
      NOP
    }
  
  bb.45..lr.ph38 (freq 2909342):
    successors: %bb.62..critedge.backedge(33), %bb.46..lr.ph38(66)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = ADDiu %zero, 48
    BEQ %v0, %at, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.46..lr.ph38 (freq 1939563):
    successors: %bb.54(49), %bb.47..lr.ph38(50)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = ADDiu %zero, 69
    BEQ %v0, %at, %bb.54, implicit-def %at {
      NOP
    }
  
  bb.47..lr.ph38 (freq 969784):
    successors: %bb.48(99), %bb.70(0)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = ADDiu %zero, 83
    BNE %v0, %at, %bb.70, implicit-def %at {
      NOP
    }
  
  bb.48 (%ir-block.160, freq 1406180):
    successors: %bb.49(50), %bb.62..critedge.backedge(50)
    liveins: %s0, %s1, %s2, %s4
  
    %at = SLL %s4, 2
    %v0 = ADDu %s2, %at
    %a1 = LW killed %v0, 4 :: (load 4 from %ir.165)
    %at = ADDu %s1, killed %at
    %a0 = LW killed %at, 4 :: (load 4 from %ir.162)
    %t9 = LW %s0, target-flags(<unknown>) @strcmp :: (load 4 from call-entry @strcmp)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ %v0, %zero, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.49 (%ir-block.160, freq 703090):
    successors: %bb.65(100)
  
    B %bb.65, implicit-def %at {
      NOP
    }
  
  bb.50..lr.ph38 (freq 872803):
    successors: %bb.54(49), %bb.51..lr.ph38(50)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = ADDiu %zero, 86
    BEQ %v0, %at, %bb.54, implicit-def %at {
      NOP
    }
  
  bb.51..lr.ph38 (freq 436402):
    successors: %bb.52(99), %bb.70(0)
    liveins: %s0, %s1, %s2, %s4, %v0
  
    %at = ADDiu %zero, 101
    BNE %v0, %at, %bb.70, implicit-def %at {
      NOP
    }
  
  bb.52 (%ir-block.151, freq 436400):
    successors: %bb.53(50), %bb.62..critedge.backedge(50)
    liveins: %s0, %s1, %s2, %s4
  
    %at = SLL %s4, 2
    %v0 = ADDu %s2, %at
    %a1 = LW killed %v0, 4 :: (load 4 from %ir.156)
    %at = ADDu %s1, killed %at
    %a0 = LW killed %at, 4 :: (load 4 from %ir.153)
    %t9 = LW %s0, target-flags(<unknown>) @rtx_equal_for_cselib_p :: (load 4 from call-entry @rtx_equal_for_cselib_p)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BNE %v0, %zero, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.53 (%ir-block.151, freq 218200):
    successors: %bb.68(100)
  
    B %bb.68, implicit-def %at {
      NOP
    }
  
  bb.54 (%ir-block.121, freq 1406179):
    successors: %bb.55..preheader(96), %bb.66(3)
    liveins: %s0, %s1, %s2, %s4
  
    %at = SLL %s4, 2
    %s5 = ADDu %s1, %at
    %s6 = ADDu %s2, killed %at
    %v1 = LW %s6, 4 :: (load 4 from %ir.128)
    %v0 = LW %s5, 4 :: (load 4 from %ir.123)
    %a0 = LW %v0, 0 :: (load 4 from %ir.125)
    %at = LW %v1, 0 :: (load 4 from %ir.130)
    BNE %a0, %at, %bb.66, implicit-def %at {
      NOP
    }
  
  bb.55..preheader (freq 1362236):
    successors: %bb.56..lr.ph35.preheader(62), %bb.62..critedge.backedge(37)
    liveins: %a0, %s0, %s1, %s2, %s4, %s5, %s6, %v0, %v1
  
    BLEZ %a0, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.56..lr.ph35.preheader (freq 851397):
    successors: %bb.21..loopexit(3), %bb.57(96)
    liveins: %s0, %s1, %s2, %s4, %s5, %s6, %v0, %v1
  
    %a1 = LW killed %v1, 4 :: (load 4 from %ir.136)
    %a0 = LW killed %v0, 4 :: (load 4 from %ir.134)
    %t9 = LW %s0, target-flags(<unknown>) @rtx_equal_for_cselib_p :: (load 4 from call-entry @rtx_equal_for_cselib_p)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s0, %zero
    }
    BEQ killed %v0, %zero, %bb.21..loopexit, implicit-def dead %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.57 (freq 824791):
    successors: %bb.58..lr.ph64(100)
    liveins: %s0, %s1, %s2, %s4, %s5, %s6
  
    %s6 = ADDiu killed %s6, 4
    %fp = ADDiu killed %s5, 4
    %v1 = ADDiu %zero, 8
    %s5 = ADDiu %zero, 0
  
  bb.58..lr.ph64 (freq 1599595):
    successors: %bb.59...lr.ph35_crit_edge(96), %bb.62..critedge.backedge(3)
    liveins: %fp, %s0, %s1, %s2, %s4, %s5, %s6, %v1
  
    %v0 = LW %fp, 0 :: (load 4 from %ir.140)
    %at = LW %v0, 0 :: (load 4 from %ir.142)
    %s5 = ADDiu killed %s5, 1
    %at = SLT %s5, killed %at
    BEQ %at, %zero, %bb.62..critedge.backedge, implicit-def %at {
      NOP
    }
  
  bb.59...lr.ph35_crit_edge (freq 1549608):
    successors: %bb.60...lr.ph35_crit_edge(50), %bb.58..lr.ph64(50)
    liveins: %fp, %s0, %s1, %s2, %s4, %s5, %s6, %v0, %v1
  
    %at = ADDu killed %v0, %v1
    %a0 = LW killed %at, 0 :: (load 4 from %ir.uglygep34)
    %at = LW %s6, 0 :: (load 4 from %ir.146)
    %at = ADDu killed %at, killed %v1
    %a1 = LW killed %at, 0 :: (load 4 from %ir.uglygep2)
    %t9 = LW %s0, target-flags(<unknown>) @rtx_equal_for_cselib_p :: (load 4 from call-entry @rtx_equal_for_cselib_p)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0 {
      %s7 = ADDiu %v1, 4
    }
    %s3 = ADDiu %zero, 0
    BNE %v0, %zero, %bb.58..lr.ph64, implicit-def %at {
      %v1 = OR killed %s7, %zero
    }
  
  bb.60...lr.ph35_crit_edge (freq 774804):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      NOP
    }
  
  bb.61 (%ir-block.109, freq 436401):
    successors: %bb.62..critedge.backedge(96), %bb.69(3)
    liveins: %s0, %s1, %s2, %s4
  
    %at = SLL %s4, 2
    %v0 = ADDu %s2, %at
    %v0 = LW killed %v0, 4 :: (load 4 from %ir.112)
    %at = ADDu %s1, killed %at
    %at = LW killed %at, 4 :: (load 4 from %ir.110)
    BNE %at, %v0, %bb.69, implicit-def %at {
      NOP
    }
  
  bb.62..critedge.backedge (freq 4183862):
    successors: %bb.40..lr.ph38(96), %bb.63(3)
    liveins: %s0, %s1, %s2, %s4
  
    %at = LW %sp, 28 :: (load 4 from stack)
    %at = SLTi killed %at, 2
    BEQ killed %at, %zero, %bb.40..lr.ph38, implicit-def %at {
      NOP
    }
  
  bb.63 (freq 130745):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 1
    }
  
  bb.64 (freq 1408461):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 1
    }
  
  bb.65 (freq 703090):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.66 (freq 43943):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.67 (freq 436401):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.68 (freq 218200):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.69 (freq 13637):
    successors: %bb.21..loopexit(100)
  
    B %bb.21..loopexit, implicit-def %at {
      %s3 = ADDiu %zero, 0
    }
  
  bb.70 (%ir-block.169, freq 7):
    liveins: %s0
    exit
  
    %a0 = LW %s0, target-flags(<unknown>) @.str :: (load 4 from got)
    %a2 = LW %s0, target-flags(<unknown>) @__FUNCTION__.rtx_equal_for_cselib_p :: (load 4 from got)
    %t9 = LW %s0, target-flags(<unknown>) @fancy_abort :: (load 4 from call-entry @fancy_abort)
    %a1 = ADDiu %zero, 530
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %gp = OR killed %s0, %zero
    }

...
