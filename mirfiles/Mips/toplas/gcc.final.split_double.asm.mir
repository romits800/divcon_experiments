--- |
  ; ModuleID = '/home/romi/didaktoriko/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.final.split_double.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.rtx_def.4508 = type { i32, [1 x %union.rtunion_def.4509] }
  %union.rtunion_def.4509 = type { i32 }
  
  @target_flags = external global i32, align 4
  @const_int_rtx = external global [129 x %struct.rtx_def.4508*], align 4
  @mode_class = external constant [59 x i32], align 4
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #0
  
  declare %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext, i32 signext) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #0
  
  ; Function Attrs: nounwind
  define void @split_double(%struct.rtx_def.4508* %value, %struct.rtx_def.4508** nocapture %first, %struct.rtx_def.4508** nocapture %second) #2 {
    %l = alloca [2 x i32], align 4
    %1 = bitcast %struct.rtx_def.4508* %value to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %20 [
      i32 54, label %4
      i32 55, label %23
    ]
  
  ; <label>:4                                       ; preds = %0
    %5 = load i32, i32* @target_flags, align 4
    %6 = lshr i32 %5, 19
    %7 = and i32 %6, 64
    %8 = add nuw nsw i32 %7, 64
    %9 = icmp ult i32 %8, 65
    %10 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 0, i32 0
    %11 = load i32, i32* %10, align 4
    br i1 %9, label %12, label %15
  
  ; <label>:12                                      ; preds = %4
    %13 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %11) #3
    store %struct.rtx_def.4508* %13, %struct.rtx_def.4508** %first, align 4
    %14 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext 0) #3
    store %struct.rtx_def.4508* %14, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:15                                      ; preds = %4
    %16 = icmp slt i32 %11, 0
    %17 = load %struct.rtx_def.4508*, %struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 63), align 4
    %18 = load %struct.rtx_def.4508*, %struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64), align 4
    %19 = select i1 %16, %struct.rtx_def.4508* %17, %struct.rtx_def.4508* %18
    store %struct.rtx_def.4508* %value, %struct.rtx_def.4508** %first, align 4
    store %struct.rtx_def.4508* %19, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:20                                      ; preds = %0
    store %struct.rtx_def.4508* %value, %struct.rtx_def.4508** %first, align 4
    %21 = load i32, i32* bitcast (%struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64) to i32*), align 4
    %22 = bitcast %struct.rtx_def.4508** %second to i32*
    store i32 %21, i32* %22, align 4
    br label %74
  
  ; <label>:23                                      ; preds = %0
    %24 = lshr i32 %2, 8
    %25 = and i32 %24, 255
    %26 = icmp eq i32 %25, 0
    br i1 %26, label %31, label %27
  
  ; <label>:27                                      ; preds = %23
    %28 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i32 %25
    %29 = load i32, i32* %28, align 4
    %30 = icmp eq i32 %29, 1
    br i1 %30, label %31, label %38
  
  ; <label>:31                                      ; preds = %27, %23
    %32 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 1, i32 0
    %33 = load i32, i32* %32, align 4
    %34 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %33) #3
    store %struct.rtx_def.4508* %34, %struct.rtx_def.4508** %first, align 4
    %35 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 2, i32 0
    %36 = load i32, i32* %35, align 4
    %37 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %36) #3
    store %struct.rtx_def.4508* %37, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:38                                      ; preds = %27
    %39 = bitcast [2 x i32]* %l to i8*
    call void @llvm.lifetime.start(i64 8, i8* %39) #3
    %40 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 1, i32 0
    %41 = load i32, i32* %40, align 4
    %42 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 1, i32 1, i32 0, i32 0
    %43 = load i32, i32* %42, align 4
    %44 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 2, i32 0
    %45 = load i32, i32* %44, align 4
    %46 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 2, i32 1, i32 0, i32 0
    %47 = load i32, i32* %46, align 4
    %48 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 3, i32 0
    %49 = load i32, i32* %48, align 4
    %50 = bitcast [2 x i32]* %l to i32*
    call void @etardouble(i32 inreg %41, i32 inreg %43, i32 inreg %45, i32 inreg %47, i32 inreg %49, i32* %50) #3
    %51 = load i32, i32* @target_flags, align 4
    %52 = lshr i32 %51, 20
    %53 = and i32 %52, 32
    %54 = add nuw nsw i32 %53, 32
    %55 = icmp ult i32 %54, 64
    %56 = icmp eq i32 %53, 0
    %or.cond = and i1 %56, %55
    %57 = load i32, i32* %50, align 4
    br i1 %or.cond, label %58, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %38
    %.pre2 = getelementptr inbounds [2 x i32], [2 x i32]* %l, i32 0, i32 1
    br label %68
  
  ; <label>:58                                      ; preds = %38
    %59 = icmp slt i32 %57, 0
    br i1 %59, label %60, label %62
  
  ; <label>:60                                      ; preds = %58
    %61 = bitcast [2 x i32]* %l to i32*
    store i32 -1, i32* %61, align 4
    br label %62
  
  ; <label>:62                                      ; preds = %60, %58
    %63 = phi i32 [ -1, %60 ], [ %57, %58 ]
    %64 = getelementptr inbounds [2 x i32], [2 x i32]* %l, i32 0, i32 1
    %65 = load i32, i32* %64, align 4
    %66 = icmp slt i32 %65, 0
    br i1 %66, label %67, label %68
  
  ; <label>:67                                      ; preds = %62
    %sunkaddr = ptrtoint [2 x i32]* %l to i32
    %sunkaddr1 = add i32 %sunkaddr, 4
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 -1, i32* %sunkaddr2, align 4
    br label %68
  
  ; <label>:68                                      ; preds = %67, %62, %._crit_edge
    %.pre-phi = phi i32* [ %.pre2, %._crit_edge ], [ %64, %62 ], [ %64, %67 ]
    %69 = phi i32 [ %57, %._crit_edge ], [ %63, %62 ], [ %63, %67 ]
    %70 = bitcast [2 x i32]* %l to i8*
    %71 = call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %69) #3
    store %struct.rtx_def.4508* %71, %struct.rtx_def.4508** %first, align 4
    %72 = load i32, i32* %.pre-phi, align 4
    %73 = call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %72) #3
    store %struct.rtx_def.4508* %73, %struct.rtx_def.4508** %second, align 4
    call void @llvm.lifetime.end(i64 8, i8* nonnull %70) #3
    br label %74
  
  ; <label>:74                                      ; preds = %68, %31, %20, %15, %12
    ret void
  }
  
  declare void @etardouble(i32 inreg, i32 inreg, i32 inreg, i32 inreg, i32 inreg, i32*) #1
  
  attributes #0 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            split_double
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%a1' }
  - { reg: '%a2' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       56
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 24
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: l, offset: -28, size: 8, alignment: 4 }
  - { id: 1, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 2, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s3' }
  - { id: 3, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s2' }
  - { id: 4, type: spill-slot, offset: -16, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 5, type: spill-slot, offset: -20, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 409):
    successors: %bb.4(33), %bb.1(66)
    liveins: %a0, %a1, %a2, %t9, %ra, %s3, %s2, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -56
    CFI_INSTRUCTION .cfi_def_cfa_offset 56
    SW killed %ra, %sp, 52 :: (store 4 into stack)
    SW killed %s3, %sp, 48 :: (store 4 into stack)
    SW killed %s2, %sp, 44 :: (store 4 into stack)
    SW killed %s1, %sp, 40 :: (store 4 into stack)
    SW killed %s0, %sp, 36 :: (store 4 into stack)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s3_64, -8
    CFI_INSTRUCTION .cfi_offset %s2_64, -12
    CFI_INSTRUCTION .cfi_offset %s1_64, -16
    CFI_INSTRUCTION .cfi_offset %s0_64, -20
    %s1 = ADDu %v0, %t9
    %s0 = OR %a2, %zero
    %s3 = OR %a0, %zero
    %v0 = LW %s3, 0 :: (load 4 from %ir.1)
    %v1 = SRL %v0, 16
    %at = ADDiu %zero, 55
    BEQ %v1, %at, %bb.4, implicit-def %at {
      %s2 = OR %a1, %zero
    }
  
  bb.1 (%ir-block.0, freq 273):
    successors: %bb.2(50), %bb.7(49)
    liveins: %s0, %s1, %s2, %s3, %v1
  
    %at = ADDiu %zero, 54
    BNE %v1, %at, %bb.7, implicit-def %at {
      NOP
    }
  
  bb.2 (%ir-block.4, freq 136):
    successors: %bb.3(50), %bb.8(50)
    liveins: %s0, %s1, %s2, %s3
  
    %at = LW %s1, target-flags(<unknown>) @target_flags :: (load 4 from got)
    %a1 = LW %s3, 4 :: (load 4 from %ir.10)
    %at = LW killed %at, 0 :: (load 4 from @target_flags)
    %at = SRL killed %at, 19
    %at = ANDi killed %at, 64
    %at = ADDiu killed %at, 64
    %at = SLTiu killed %at, 65
    BEQ %at, %zero, %bb.8, implicit-def %at {
      NOP
    }
  
  bb.3 (%ir-block.12, freq 68):
    successors: %bb.17(100)
    liveins: %a1, %s0, %s1, %s2
  
    %t9 = LW %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s1, %zero
    }
    SW killed %v0, killed %s2, 0 :: (store 4 into %ir.first)
    %t9 = LW killed %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0 {
      %a1 = ADDiu %zero, 0
    }
    B %bb.17, implicit-def dead %at {
      SW killed %v0, killed %s0, 0 :: (store 4 into %ir.second)
    }
  
  bb.4 (%ir-block.23, freq 136):
    successors: %bb.6(37), %bb.5(62)
    liveins: %s0, %s1, %s2, %s3, %v0
  
    %v0 = EXT killed %v0, 8, 8
    BEQ %v0, %zero, %bb.6, implicit-def %at {
      NOP
    }
  
  bb.5 (%ir-block.27, freq 85):
    successors: %bb.6(50), %bb.9(50)
    liveins: %s0, %s1, %s2, %s3, %v0
  
    %at = SLL killed %v0, 2
    %v0 = LW %s1, target-flags(<unknown>) @mode_class :: (load 4 from got)
    %at = ADDu killed %v0, killed %at
    %at = LW killed %at, 0 :: (load 4 from %ir.28)
    %v0 = ADDiu %zero, 1
    BNE %at, %v0, %bb.9, implicit-def %at {
      NOP
    }
  
  bb.6 (%ir-block.31, freq 93):
    successors: %bb.17(100)
    liveins: %s0, %s1, %s2, %s3
  
    %a1 = LW %s3, 8 :: (load 4 from %ir.32)
    %t9 = LW %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s1, %zero
    }
    SW killed %v0, killed %s2, 0 :: (store 4 into %ir.first)
    %a1 = LW killed %s3, 12 :: (load 4 from %ir.35)
    %t9 = LW killed %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0 {
      %a0 = ADDiu %zero, 0
    }
    B %bb.17, implicit-def dead %at {
      SW killed %v0, killed %s0, 0 :: (store 4 into %ir.second)
    }
  
  bb.7 (%ir-block.20, freq 136):
    successors: %bb.17(100)
    liveins: %s0, %s1, %s2, %s3
  
    SW killed %s3, killed %s2, 0 :: (store 4 into %ir.first)
    %at = LW killed %s1, target-flags(<unknown>) @const_int_rtx :: (load 4 from got)
    %at = LW killed %at, 256 :: (load 4 from `i32* bitcast (%struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64) to i32*)`)
    B %bb.17, implicit-def dead %at {
      SW killed %at, killed %s0, 0 :: (store 4 into %ir.22)
    }
  
  bb.8 (%ir-block.15, freq 68):
    successors: %bb.17(100)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    %at = LW killed %s1, target-flags(<unknown>) @const_int_rtx :: (load 4 from got)
    %v0 = ADDiu %at, 256
    %at = ADDiu killed %at, 252
    %v1 = SLTi killed %a1, 0
    %v0 = MOVN_I_I killed %at, killed %v1, killed %v0
    %at = LW killed %v0, 0 :: (load 4 from unknown)
    SW killed %s3, killed %s2, 0 :: (store 4 into %ir.first)
    B %bb.17, implicit-def dead %at {
      SW killed %at, killed %s0, 0 :: (store 4 into %ir.second)
    }
  
  bb.9 (%ir-block.38, freq 42):
    successors: %bb.10(75), %bb.15.._crit_edge(25)
    liveins: %s0, %s1, %s2, %s3
  
    %a3 = LW %s3, 20 :: (load 4 from %ir.46)
    %a2 = LW %s3, 16 :: (load 4 from %ir.44)
    %a1 = LW %s3, 12 :: (load 4 from %ir.42)
    %a0 = LW %s3, 8 :: (load 4 from %ir.40)
    %at = LW killed %s3, 24 :: (load 4 from %ir.48)
    %s3 = LEA_ADDiu %sp, 28
    SW %s3, %sp, 20 :: (store 4 into unknown)
    SW killed %at, %sp, 16 :: (store 4 into unknown)
    %t9 = LW %s1, target-flags(<unknown>) @etardouble :: (load 4 from call-entry @etardouble)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit killed %gp, implicit-def %sp {
      %gp = OR %s1, %zero
    }
    %at = LW %s1, target-flags(<unknown>) @target_flags :: (load 4 from got)
    %at = LW killed %at, 0 :: (load 4 from @target_flags)
    %at = SRL killed %at, 20
    %v0 = ANDi killed %at, 32
    %a1 = LW %sp, 28 :: (load 4 from %ir.50)
    BNE %v0, %zero, %bb.15.._crit_edge, implicit-def %at {
      NOP
    }
  
  bb.10 (%ir-block.38, freq 32):
    successors: %bb.11(66), %bb.15.._crit_edge(33)
    liveins: %a1, %s0, %s1, %s2, %s3, %v0
  
    %at = ADDiu killed %v0, 32
    %at = SLTiu killed %at, 64
    BEQ %at, %zero, %bb.15.._crit_edge, implicit-def %at {
      NOP
    }
  
  bb.11 (%ir-block.58, freq 21):
    successors: %bb.12(37), %bb.13(62)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    BGEZ %a1, %bb.13, implicit-def %at {
      NOP
    }
  
  bb.12 (%ir-block.60, freq 8):
    successors: %bb.13(100)
    liveins: %s0, %s1, %s2, %s3
  
    %a1 = ADDiu %zero, -1
    SW %a1, %sp, 28 :: (store 4 into %ir.61)
  
  bb.13 (%ir-block.62, freq 21):
    successors: %bb.14(37), %bb.16(62)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    %at = LW %sp, 32 :: (load 4 from %ir.64)
    BGEZ %at, %bb.16, implicit-def %at {
      %s3 = ADDiu killed %s3, 4
    }
  
  bb.14 (%ir-block.67, freq 8):
    successors: %bb.16(100)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    %at = ADDiu %zero, -1
    B %bb.16, implicit-def %at {
      SW killed %at, %sp, 32 :: (store 4 into %ir.sunkaddr2)
    }
  
  bb.15.._crit_edge (freq 21):
    successors: %bb.16(100)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    %s3 = ADDiu killed %s3, 4
  
  bb.16 (%ir-block.68, freq 42):
    successors: %bb.17(100)
    liveins: %a1, %s0, %s1, %s2, %s3
  
    %t9 = LW %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = ADDiu %zero, 0
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit killed %gp, implicit-def %sp, implicit-def %v0 {
      %gp = OR %s1, %zero
    }
    SW killed %v0, killed %s2, 0 :: (store 4 into %ir.first)
    %a1 = LW killed %s3, 0 :: (load 4 from %ir..pre-phi)
    %t9 = LW killed %s1, target-flags(<unknown>) @gen_rtx_CONST_INT :: (load 4 from call-entry @gen_rtx_CONST_INT)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0 {
      %a0 = ADDiu %zero, 0
    }
    SW killed %v0, killed %s0, 0 :: (store 4 into %ir.second)
  
  bb.17 (%ir-block.74, freq 409):
    liveouts:
  
    %s0 = LW %sp, 36 :: (load 4 from stack)
    %s1 = LW %sp, 40 :: (load 4 from stack)
    %s2 = LW %sp, 44 :: (load 4 from stack)
    %s3 = LW %sp, 48 :: (load 4 from stack)
    %ra = LW %sp, 52 :: (load 4 from stack)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 56
    }

...
