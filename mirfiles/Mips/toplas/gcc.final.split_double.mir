--- |
  ; ModuleID = '/home/romi/unison/unison-experiments/experiments/mips/selected-functions/size-toplas/gcc.final.split_double.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.rtx_def.4508 = type { i32, [1 x %union.rtunion_def.4509] }
  %union.rtunion_def.4509 = type { i32 }
  
  @target_flags = external global i32, align 4
  @const_int_rtx = external global [129 x %struct.rtx_def.4508*], align 4
  @mode_class = external constant [59 x i32], align 4
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.start(i64, i8* nocapture) #0
  
  declare %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext, i32 signext) #1
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.lifetime.end(i64, i8* nocapture) #0
  
  ; Function Attrs: nounwind
  define void @split_double(%struct.rtx_def.4508* %value, %struct.rtx_def.4508** nocapture %first, %struct.rtx_def.4508** nocapture %second) #2 {
    %l = alloca [2 x i32], align 4
    %1 = bitcast %struct.rtx_def.4508* %value to i32*
    %2 = load i32, i32* %1, align 4
    %3 = lshr i32 %2, 16
    switch i32 %3, label %20 [
      i32 54, label %4
      i32 55, label %23
    ]
  
  ; <label>:4                                       ; preds = %0
    %5 = load i32, i32* @target_flags, align 4
    %6 = lshr i32 %5, 19
    %7 = and i32 %6, 64
    %8 = add nuw nsw i32 %7, 64
    %9 = icmp ult i32 %8, 65
    %10 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 0, i32 0
    %11 = load i32, i32* %10, align 4
    br i1 %9, label %12, label %15
  
  ; <label>:12                                      ; preds = %4
    %13 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %11) #3
    store %struct.rtx_def.4508* %13, %struct.rtx_def.4508** %first, align 4
    %14 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext 0) #3
    store %struct.rtx_def.4508* %14, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:15                                      ; preds = %4
    %16 = icmp slt i32 %11, 0
    %17 = load %struct.rtx_def.4508*, %struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 63), align 4
    %18 = load %struct.rtx_def.4508*, %struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64), align 4
    %19 = select i1 %16, %struct.rtx_def.4508* %17, %struct.rtx_def.4508* %18
    store %struct.rtx_def.4508* %value, %struct.rtx_def.4508** %first, align 4
    store %struct.rtx_def.4508* %19, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:20                                      ; preds = %0
    store %struct.rtx_def.4508* %value, %struct.rtx_def.4508** %first, align 4
    %21 = load i32, i32* bitcast (%struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64) to i32*), align 4
    %22 = bitcast %struct.rtx_def.4508** %second to i32*
    store i32 %21, i32* %22, align 4
    br label %74
  
  ; <label>:23                                      ; preds = %0
    %24 = lshr i32 %2, 8
    %25 = and i32 %24, 255
    %26 = icmp eq i32 %25, 0
    br i1 %26, label %31, label %27
  
  ; <label>:27                                      ; preds = %23
    %28 = getelementptr inbounds [59 x i32], [59 x i32]* @mode_class, i32 0, i32 %25
    %29 = load i32, i32* %28, align 4
    %30 = icmp eq i32 %29, 1
    br i1 %30, label %31, label %38
  
  ; <label>:31                                      ; preds = %27, %23
    %32 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 1, i32 0
    %33 = load i32, i32* %32, align 4
    %34 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %33) #3
    store %struct.rtx_def.4508* %34, %struct.rtx_def.4508** %first, align 4
    %35 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 0, i32 1, i32 2, i32 0
    %36 = load i32, i32* %35, align 4
    %37 = tail call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %36) #3
    store %struct.rtx_def.4508* %37, %struct.rtx_def.4508** %second, align 4
    br label %74
  
  ; <label>:38                                      ; preds = %27
    %39 = bitcast [2 x i32]* %l to i8*
    call void @llvm.lifetime.start(i64 8, i8* %39) #3
    %40 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 1, i32 0
    %41 = load i32, i32* %40, align 4
    %42 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 1, i32 1, i32 0, i32 0
    %43 = load i32, i32* %42, align 4
    %44 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 2, i32 0
    %45 = load i32, i32* %44, align 4
    %46 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 2, i32 1, i32 0, i32 0
    %47 = load i32, i32* %46, align 4
    %48 = getelementptr inbounds %struct.rtx_def.4508, %struct.rtx_def.4508* %value, i32 3, i32 0
    %49 = load i32, i32* %48, align 4
    %50 = bitcast [2 x i32]* %l to i32*
    call void @etardouble(i32 inreg %41, i32 inreg %43, i32 inreg %45, i32 inreg %47, i32 inreg %49, i32* %50) #3
    %51 = load i32, i32* @target_flags, align 4
    %52 = lshr i32 %51, 20
    %53 = and i32 %52, 32
    %54 = add nuw nsw i32 %53, 32
    %55 = icmp ult i32 %54, 64
    %56 = icmp eq i32 %53, 0
    %or.cond = and i1 %56, %55
    %57 = load i32, i32* %50, align 4
    br i1 %or.cond, label %58, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %38
    %.pre2 = getelementptr inbounds [2 x i32], [2 x i32]* %l, i32 0, i32 1
    br label %68
  
  ; <label>:58                                      ; preds = %38
    %59 = icmp slt i32 %57, 0
    br i1 %59, label %60, label %62
  
  ; <label>:60                                      ; preds = %58
    %61 = bitcast [2 x i32]* %l to i32*
    store i32 -1, i32* %61, align 4
    br label %62
  
  ; <label>:62                                      ; preds = %60, %58
    %63 = phi i32 [ -1, %60 ], [ %57, %58 ]
    %64 = getelementptr inbounds [2 x i32], [2 x i32]* %l, i32 0, i32 1
    %65 = load i32, i32* %64, align 4
    %66 = icmp slt i32 %65, 0
    br i1 %66, label %67, label %68
  
  ; <label>:67                                      ; preds = %62
    %sunkaddr = ptrtoint [2 x i32]* %l to i32
    %sunkaddr1 = add i32 %sunkaddr, 4
    %sunkaddr2 = inttoptr i32 %sunkaddr1 to i32*
    store i32 -1, i32* %sunkaddr2, align 4
    br label %68
  
  ; <label>:68                                      ; preds = %67, %62, %._crit_edge
    %.pre-phi = phi i32* [ %.pre2, %._crit_edge ], [ %64, %62 ], [ %64, %67 ]
    %69 = phi i32 [ %57, %._crit_edge ], [ %63, %62 ], [ %63, %67 ]
    %70 = bitcast [2 x i32]* %l to i8*
    %71 = call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %69) #3
    store %struct.rtx_def.4508* %71, %struct.rtx_def.4508** %first, align 4
    %72 = load i32, i32* %.pre-phi, align 4
    %73 = call %struct.rtx_def.4508* @gen_rtx_CONST_INT(i32 signext 0, i32 signext %72) #3
    store %struct.rtx_def.4508* %73, %struct.rtx_def.4508** %second, align 4
    call void @llvm.lifetime.end(i64 8, i8* nonnull %70) #3
    br label %74
  
  ; <label>:74                                      ; preds = %68, %31, %20, %15, %12
    ret void
  }
  
  declare void @etardouble(i32 inreg, i32 inreg, i32 inreg, i32 inreg, i32 inreg, i32*) #1
  
  attributes #0 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            split_double
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
  - { id: 47, class: gpr32 }
  - { id: 48, class: gpr32 }
  - { id: 49, class: gpr32 }
  - { id: 50, class: gpr32 }
  - { id: 51, class: gpr32 }
  - { id: 52, class: gpr32 }
  - { id: 53, class: gpr32 }
  - { id: 54, class: gpr32 }
  - { id: 55, class: gpr32 }
  - { id: 56, class: gpr32 }
  - { id: 57, class: gpr32 }
  - { id: 58, class: gpr32 }
  - { id: 59, class: gpr32 }
  - { id: 60, class: gpr32 }
  - { id: 61, class: gpr32 }
  - { id: 62, class: gpr32 }
  - { id: 63, class: gpr32 }
  - { id: 64, class: gpr32 }
  - { id: 65, class: gpr32 }
  - { id: 66, class: gpr32 }
  - { id: 67, class: gpr32 }
  - { id: 68, class: gpr32 }
  - { id: 69, class: gpr32 }
  - { id: 70, class: gpr32 }
  - { id: 71, class: gpr32 }
  - { id: 72, class: gpr32 }
  - { id: 73, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%9' }
  - { reg: '%a1', virtual-reg: '%10' }
  - { reg: '%a2', virtual-reg: '%11' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: l, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0 (%ir-block.0, freq 409):
    successors: %bb.5(33), %bb.16(66)
    liveins: %a0, %a1, %a2, %t9, %v0
  
    %15 = ADDu %v0, %t9
    %11 = COPY %a2
    %10 = COPY %a1
    %9 = COPY %a0
    %0 = LW %9, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %12 = SRL %0, 16
    %13 = ADDiu %zero, 55
    BEQ %12, killed %13, %bb.5, implicit-def dead %at
    B %bb.16, implicit-def dead %at
  
  bb.16 (%ir-block.0, freq 273):
    successors: %bb.1(50), %bb.4(49)
  
    %14 = ADDiu %zero, 54
    BNE %12, killed %14, %bb.4, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.4, freq 136):
    successors: %bb.2(50), %bb.3(50)
  
    %53 = LW %15, target-flags(<unknown>) @target_flags, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %1 = LW %9, 4, <0x556d3293dc10> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.10)
    %54 = LW killed %53, 0, <0x556d3294b0f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from @target_flags)
    %55 = SRL killed %54, 19
    %56 = ANDi killed %55, 64
    %57 = ADDiu killed %56, 64
    %58 = SLTiu killed %57, 65
    BEQ killed %58, %zero, %bb.3, implicit-def dead %at
    B %bb.2, implicit-def dead %at
  
  bb.2 (%ir-block.12, freq 68):
    successors: %bb.15(100)
  
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %65 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %66 = ADDiu %zero, 0
    %a0 = COPY %66
    %a1 = COPY %1
    %gp = COPY %15
    %t9 = COPY %65
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %67 = COPY %v0
    SW %67, %10, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.first)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %68 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = COPY %66
    %a1 = COPY %66
    %t9 = COPY %68
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %69 = COPY %v0
    SW %69, %11, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.second)
    B %bb.15, implicit-def dead %at
  
  bb.3 (%ir-block.15, freq 68):
    successors: %bb.15(100)
  
    %59 = LW %15, target-flags(<unknown>) @const_int_rtx, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %60 = ADDiu %59, 256
    %61 = ADDiu %59, 252
    %62 = SLTi %1, 0
    %63 = MOVN_I_I killed %61, killed %62, %60
    %64 = LW killed %63, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from unknown)
    SW %9, %10, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.first)
    SW killed %64, %11, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.second)
    B %bb.15, implicit-def dead %at
  
  bb.4 (%ir-block.20, freq 136):
    successors: %bb.15(100)
  
    SW %9, %10, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.first)
    %70 = LW %15, target-flags(<unknown>) @const_int_rtx, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %71 = LW killed %70, 256, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from `i32* bitcast (%struct.rtx_def.4508** getelementptr inbounds ([129 x %struct.rtx_def.4508*], [129 x %struct.rtx_def.4508*]* @const_int_rtx, i32 0, i32 64) to i32*)`)
    SW killed %71, %11, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.22)
    B %bb.15, implicit-def dead %at
  
  bb.5 (%ir-block.23, freq 136):
    successors: %bb.7(37), %bb.6(62)
  
    %2 = EXT %0, 8, 8
    BEQ %2, %zero, %bb.7, implicit-def dead %at
    B %bb.6, implicit-def dead %at
  
  bb.6 (%ir-block.27, freq 85):
    successors: %bb.7(50), %bb.8(50)
  
    %16 = SLL %2, 2
    %17 = LW %15, target-flags(<unknown>) @mode_class, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %18 = ADDu killed %17, killed %16
    %19 = LW killed %18, 0, <0x556d3293dc10> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.28)
    %20 = ADDiu %zero, 1
    BNE killed %19, killed %20, %bb.8, implicit-def dead %at
    B %bb.7, implicit-def dead %at
  
  bb.7 (%ir-block.31, freq 93):
    successors: %bb.15(100)
  
    %46 = LW %9, 8, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.32)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %47 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %48 = ADDiu %zero, 0
    %a0 = COPY %48
    %a1 = COPY %46
    %gp = COPY %15
    %t9 = COPY %47
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %49 = COPY %v0
    SW %49, %10, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.first)
    %50 = LW %9, 12, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.35)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %51 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = COPY %48
    %a1 = COPY %50
    %t9 = COPY %51
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %52 = COPY %v0
    SW %52, %11, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.second)
    B %bb.15, implicit-def dead %at
  
  bb.8 (%ir-block.38, freq 42):
    successors: %bb.17(75), %bb.9.._crit_edge(25)
  
    %22 = LW %9, 20, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.46)
    %23 = LW %9, 16, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.44)
    %24 = LW %9, 12, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.42)
    %25 = LW %9, 8, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.40)
    %26 = LW %9, 24, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.48)
    ADJCALLSTACKDOWN 24, implicit-def dead %sp, implicit %sp
    %27 = LEA_ADDiu %stack.0.l, 0
    %28 = COPY %sp
    SW %27, %28, 20, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into unknown)
    SW killed %26, %28, 16, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into unknown)
    %29 = LW %15, target-flags(<unknown>) @etardouble, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @etardouble)
    %a0 = COPY %25
    %a1 = COPY %24
    %a2 = COPY %23
    %a3 = COPY %22
    %gp = COPY %15
    %t9 = COPY %29
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %a3, implicit %gp, implicit-def %sp
    ADJCALLSTACKUP 24, 0, implicit-def dead %sp, implicit %sp
    %30 = LW %15, target-flags(<unknown>) @target_flags, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %31 = LW killed %30, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from @target_flags)
    %32 = SRL killed %31, 20
    %33 = ANDi killed %32, 32
    %3 = LW %stack.0.l, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.50)
    BNE %33, %zero, %bb.9.._crit_edge, implicit-def dead %at
    B %bb.17, implicit-def dead %at
  
  bb.17 (%ir-block.38, freq 32):
    successors: %bb.10(66), %bb.9.._crit_edge(33)
  
    %21 = ADDiu %33, 32
    %34 = SLTiu %21, 64
    BNE killed %34, %zero, %bb.10, implicit-def dead %at
    B %bb.9.._crit_edge, implicit-def dead %at
  
  bb.9.._crit_edge (freq 21):
    successors: %bb.14(100)
  
    %4 = ADDiu %27, 4
    B %bb.14, implicit-def dead %at
  
  bb.10 (%ir-block.58, freq 21):
    successors: %bb.11(37), %bb.12(62)
  
    BGEZ %3, %bb.12, implicit-def dead %at
    B %bb.11, implicit-def dead %at
  
  bb.11 (%ir-block.60, freq 8):
    successors: %bb.12(100)
  
    %36 = ADDiu %zero, -1
    SW %36, %stack.0.l, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.61)
  
  bb.12 (%ir-block.62, freq 21):
    successors: %bb.13(37), %bb.14(62)
  
    %5 = PHI %3, %bb.10, %36, %bb.11
    %6 = ADDiu %27, 4
    %38 = LW %stack.0.l, 4, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.64)
    BGEZ killed %38, %bb.14, implicit-def dead %at
    B %bb.13, implicit-def dead %at
  
  bb.13 (%ir-block.67, freq 8):
    successors: %bb.14(100)
  
    %39 = ADDiu %zero, -1
    SW killed %39, %stack.0.l, 4, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.sunkaddr2)
  
  bb.14 (%ir-block.68, freq 42):
    successors: %bb.15(100)
  
    %7 = PHI %4, %bb.9.._crit_edge, %6, %bb.12, %6, %bb.13
    %8 = PHI %3, %bb.9.._crit_edge, %5, %bb.12, %5, %bb.13
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %40 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %41 = ADDiu %zero, 0
    %a0 = COPY %41
    %a1 = COPY %8
    %gp = COPY %15
    %t9 = COPY %40
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %42 = COPY %v0
    SW %42, %10, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.first)
    %43 = LW %7, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir..pre-phi)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %44 = LW %15, target-flags(<unknown>) @gen_rtx_CONST_INT, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @gen_rtx_CONST_INT)
    %a0 = COPY %41
    %a1 = COPY %43
    %t9 = COPY %44
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %45 = COPY %v0
    SW %45, %11, 0, <0x556d32927250> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.second)
  
  bb.15 (%ir-block.74, freq 409):
    liveouts:
  
    RetRA

...
